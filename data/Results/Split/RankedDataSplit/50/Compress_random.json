{
    "project_name": "Compress",
    "bugs": {
        "32": {
            "0": {
                "method_ids": [
                    58,
                    61,
                    64,
                    50,
                    19,
                    98,
                    90,
                    38,
                    3,
                    100
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:setGroupId(J)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:addPaxHeadersForBigNumbers(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:failForBigNumber(Ljava/lang/String;JJLjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getSize()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getMode()I",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:setSize(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V"
                ]
            }
        },
        "35": {
            "0": {
                "method_ids": [
                    37,
                    56,
                    52,
                    59,
                    54,
                    57,
                    64,
                    61,
                    29,
                    15
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGNULongLinkEntry()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>(Ljava/io/File;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ]
            }
        },
        "34": {
            "0": {
                "method_ids": [
                    13,
                    8,
                    3,
                    18,
                    17,
                    22,
                    15,
                    1,
                    10,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipUtil:signedByteToUnsignedInt(B)I",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:reverse([B)[B",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:bigToLong(Ljava/math/BigInteger;)J",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:reset()V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:longToBig(J)Ljava/math/BigInteger;",
                    "org.apache.commons.compress.archivers.zip.ZipLong:putLong(J[BI)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:unsignedIntToSignedByte(I)B",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ]
            }
        },
        "33": {
            "0": {
                "method_ids": [
                    50,
                    35,
                    2,
                    53,
                    30,
                    51,
                    34,
                    9,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
                    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.compressors.xz.XZUtils:matches([BI)Z",
                    "org.apache.commons.compress.compressors.lzma.LZMAUtils:matches([BI)Z",
                    "org.apache.commons.compress.compressors.xz.XZUtils:internalIsXZCompressionAvailable()Z",
                    "org.apache.commons.compress.compressors.gzip.GzipParameters:setOperatingSystem(I)V",
                    "org.apache.commons.compress.compressors.pack200.Pack200Strategy$1:newStreamBridge()Lorg/apache/commons/compress/compressors/pack200/StreamBridge;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;"
                ]
            }
        },
        "20": {
            "0": {
                "method_ids": [
                    12,
                    24,
                    25,
                    9,
                    6,
                    28,
                    4,
                    34,
                    8,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readAsciiLong(II)J",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getSize()J",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setInode(J)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:checkNewFormat()V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getHeaderPadCount()I",
                    "org.apache.commons.compress.archivers.ArchiveInputStream:count(I)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setNumberOfLinks(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldAsciiEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldBinaryEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;"
                ]
            }
        },
        "18": {
            "0": {
                "method_ids": [
                    1,
                    4,
                    3,
                    5,
                    10,
                    29,
                    26,
                    44,
                    38,
                    50
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getMode()I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatUnsignedOctalString(J[BII)V",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:<init>(Ljava/io/InputStream;Ljava/io/OutputStream;II)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getDevMinor()I",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getDevMajor()I",
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding:canEncode(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatCheckSumOctalBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Ljava/lang/String;Ljava/util/Map;)V"
                ]
            }
        },
        "27": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    6,
                    2,
                    3,
                    4,
                    5,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.utils.Charsets:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "9": {
            "0": {
                "method_ids": [
                    10,
                    4,
                    3,
                    14,
                    13,
                    5,
                    28,
                    1,
                    6,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.CountingOutputStream:<init>(Ljava/io/OutputStream;)V",
                    "org.apache.commons.compress.utils.CountingOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:writeRecord([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:computeCheckSum([B)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatUnsignedOctalString(J[BII)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatCheckSumOctalBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;II)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getName()Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V"
                ]
            }
        },
        "11": {
            "0": {
                "method_ids": [
                    18,
                    5,
                    9,
                    21,
                    14,
                    4,
                    7,
                    38,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipLong:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:isEOFRecord([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGNUSparse()Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "7": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatNameBytes(Ljava/lang/String;[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;"
                ]
            }
        },
        "29": {
            "0": {
                "method_ids": [
                    34,
                    5,
                    57,
                    50,
                    52,
                    53,
                    51,
                    4,
                    71,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:setEntryEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding:<init>(Ljava/nio/charset/Charset;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil:decode(Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:readCLRI()V",
                    "org.apache.commons.compress.archivers.dump.TapeInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader:getType()Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$SEGMENT_TYPE;",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry:setSize(J)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry:setMode(I)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;II)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    76,
                    100,
                    5,
                    4,
                    40,
                    37,
                    72,
                    62,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/OutputStream;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:readHeader()[B",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveSummary:isCompressed()Z",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.dump.TapeInputStream:readFully([BII)Z",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil:decode(Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil:convert64([BI)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "2": {
                "method_ids": [
                    21,
                    5,
                    60,
                    62,
                    64,
                    19,
                    20,
                    50,
                    51,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.utils.ArchiveUtils:isEqual([BII[BIIZ)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.TapeInputStream:resetBlockSize(IZ)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:read32(Ljava/io/DataInputStream;)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        },
        "16": {
            "0": {
                "method_ids": [
                    50,
                    2,
                    1,
                    7,
                    40,
                    52,
                    3,
                    5,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGNUSparse()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isDirectory()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getSize()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isPaxHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "42": {
            "0": {
                "method_ids": [
                    86,
                    81,
                    4,
                    21,
                    52,
                    9,
                    46,
                    32,
                    19,
                    100
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getUnixMode()I",
                    "org.apache.commons.compress.archivers.zip.ZipFile:setSizesAndOffsetFromZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$OffsetEntry;I)V",
                    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit:useUTF8ForNames(Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExternalAttributes(J)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile$Entry:hashCode()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setVersionRequired(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipShort:<init>(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([B)J",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getPlatform()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z"
                ]
            }
        },
        "45": {
            "0": {
                "method_ids": [
                    1,
                    7,
                    9,
                    4,
                    5,
                    2,
                    10,
                    0,
                    3,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatBigIntegerBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseBinaryLong([BIIZ)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I"
                ]
            }
        },
        "6": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/util/zip/ZipEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "28": {
            "0": {
                "method_ids": [
                    44,
                    13,
                    45,
                    23,
                    7,
                    30,
                    25,
                    41,
                    10,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>(Ljava/io/File;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:available()I",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:decode([B)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I"
                ]
            }
        },
        "17": {
            "0": {
                "method_ids": [
                    25,
                    4,
                    1,
                    10,
                    3,
                    11,
                    2,
                    6,
                    12,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;II)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:decode([B)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "1": {
            "0": {
                "method_ids": [
                    6,
                    50,
                    57,
                    43,
                    51,
                    55,
                    16,
                    25,
                    22,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/lang/String;Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readCString(I)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:setFormat(S)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:<init>(S)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:ensureOpen()V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getDeviceMin()J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V"
                ]
            }
        },
        "10": {
            "0": {
                "method_ids": [
                    39,
                    51,
                    52,
                    107,
                    56,
                    100,
                    101,
                    102,
                    54,
                    55
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile$OffsetEntry:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:getUnicodeStringIfOriginalMatches(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:copy([B)[B",
                    "org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream:read()I",
                    "org.apache.commons.compress.archivers.zip.ZipFile:skipBytes(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:resolveLocalFileHeaderData(Ljava/util/Map;)V"
                ]
            }
        },
        "19": {
            "0": {
                "method_ids": [
                    54,
                    55,
                    106,
                    66,
                    100,
                    1,
                    0,
                    19,
                    22,
                    102
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtEndOfCentralDirectoryRecord()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:readCentralDirectoryEntry(Ljava/util/Map;)V",
                    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField:parseFromCentralDirectoryData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:register(Ljava/lang/Class;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:skipBytes(I)V",
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setGeneralPurposeBit(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setMethod(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:reparseCentralDirectoryData(ZZZZ)V"
                ]
            }
        },
        "26": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            },
            "1": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            }
        },
        "8": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature",
                    "Unknown Signature"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "21": {
            "0": {
                "method_ids": [
                    50,
                    54,
                    56,
                    55,
                    32,
                    1,
                    4,
                    3,
                    10,
                    39
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileNames(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileATimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyStreams(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileMTimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.Folder:findBindPairForInStream(I)I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getHasWindowsAttributes()Z",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:close()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "1": {
                "method_ids": [
                    7,
                    54,
                    68,
                    85,
                    92,
                    6,
                    12,
                    50,
                    51
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper:write(I)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream:<init>(Ljava/io/RandomAccessFile;J)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:<init>()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileMTimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writePackInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getCompressedSize()J",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getLastModifiedDate()Ljava/util/Date;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "6": {
                "method_ids": [
                    10,
                    9,
                    52,
                    25,
                    54,
                    41,
                    46,
                    12,
                    30,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:write([BII)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileNames(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:javaTimeToNtfsTime(Ljava/util/Date;)J",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setHasLastModifiedDate(Z)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getHasAccessDate()Z",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setHasStream(Z)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setName(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "7": {
                "method_ids": [
                    1,
                    40,
                    56,
                    50,
                    55,
                    11,
                    39,
                    34,
                    5,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileAntiItems(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileATimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeStreamsInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileCTimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readBits(Ljava/io/DataInput;I)Ljava/util/BitSet;",
                    "org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream:close()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUint64(Ljava/io/DataInput;)J",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:read()I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getLastModifiedDate()Ljava/util/Date;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "4": {
                "method_ids": [
                    52,
                    53,
                    58,
                    59,
                    60,
                    17,
                    12,
                    37,
                    41,
                    48
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStartHeader(J)Lorg/apache/commons/compress/archivers/sevenz/StartHeader;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyFiles(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileMTimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getHasWindowsAttributes()Z",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:<init>()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileATimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZMethod:<init>(Ljava/lang/String;I[B)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "5": {
                "method_ids": [
                    79,
                    94,
                    51,
                    57,
                    53,
                    80,
                    56,
                    71,
                    22,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.Coders:<clinit>()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileATimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:calculateStreamMap(Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyFiles(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeStreamsInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFolder(Ljava/io/DataInput;)Lorg/apache/commons/compress/archivers/sevenz/Folder;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setCompressedCrcValue(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "2": {
                "method_ids": [
                    58,
                    51,
                    54,
                    60,
                    64,
                    12,
                    5,
                    19,
                    32,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setCompressedCrcValue(J)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:write([BII)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.utils.CountingOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readPackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setHasStream(Z)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readBits(Ljava/io/DataInput;I)Ljava/util/BitSet;",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:read()I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getHasWindowsAttributes()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "3": {
                "method_ids": [
                    37,
                    59,
                    30,
                    0,
                    1,
                    2,
                    58,
                    51,
                    52,
                    60
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyFiles(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileMTimes(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileAntiItems(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyStreams(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:close()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setSize(J)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:isAntiItem()Z",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStartHeader(J)Lorg/apache/commons/compress/archivers/sevenz/StartHeader;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            }
        },
        "44": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ]
            },
            "1": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ]
            },
            "2": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ]
            }
        },
        "43": {
            "0": {
                "method_ids": [
                    0,
                    159,
                    104,
                    101,
                    5,
                    51,
                    136,
                    194,
                    209,
                    166
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:usesDataDescriptor(I)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:hasZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:destroy()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([BI)J",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:<init>()V",
                    "org.apache.commons.compress.archivers.zip.X000A_NTFS:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:usesDataDescriptor(I)Z"
                ]
            }
        },
        "38": {
            "0": {
                "method_ids": [
                    51,
                    53,
                    52,
                    34,
                    29,
                    28,
                    12,
                    46,
                    5,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isPaxHeader()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGNULongLinkEntry()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGlobalPaxHeader()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isDirectory()Z"
                ]
            }
        },
        "36": {
            "0": {
                "method_ids": [
                    52,
                    2,
                    54,
                    56,
                    5,
                    1,
                    17,
                    39,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:read()I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getNextEntry()Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.Coders:addDecoder(Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;JJ)V",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:close()V",
                    "org.apache.commons.compress.utils.BoundedInputStream:close()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStartHeader(J)Lorg/apache/commons/compress/archivers/sevenz/StartHeader;",
                    "org.apache.commons.compress.archivers.sevenz.Folder:getUnpackSize()J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getCurrentStream()Ljava/io/InputStream;"
                ]
            }
        },
        "31": {
            "0": {
                "method_ids": [
                    5,
                    3,
                    2,
                    0,
                    1,
                    6,
                    4,
                    7,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V",
                    "org.apache.commons.compress.utils.Charsets:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            },
            "1": {
                "method_ids": [
                    12,
                    34,
                    6,
                    4,
                    18,
                    14,
                    39,
                    24,
                    16,
                    40
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.utils.ArchiveUtils:isEqual([BII[BIIZ)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;II)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>()V",
                    "org.apache.commons.compress.utils.ArchiveUtils:isArrayZero([BI)Z",
                    "org.apache.commons.compress.utils.IOUtils:readFully(Ljava/io/InputStream;[B)I",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:decode([B)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.ArchiveInputStream:count(J)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "30": {
            "0": {
                "method_ids": [
                    4,
                    38,
                    0,
                    10,
                    11,
                    9,
                    1,
                    12,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BlockSort:mainQSort3(Lorg/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream$Data;IIII)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:bsW(II)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsGetInt()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartB()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data:initTT(I)[I",
                    "org.apache.commons.compress.compressors.bzip2.BlockSort:<init>(Lorg/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream$Data;)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data:<init>(I)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:init(Z)Z",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:hbAssignCodes([I[BIII)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:endCompression()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I"
                ]
            }
        },
        "37": {
            "0": {
                "method_ids": [
                    5,
                    6,
                    28,
                    16,
                    37,
                    24,
                    8,
                    20,
                    46,
                    44
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.utils.ArchiveUtils:matchAsciiBuffer(Ljava/lang/String;[BII)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.ArchiveInputStream:count(I)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;"
                ]
            }
        },
        "39": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;"
                ]
            }
        },
        "46": {
            "0": {
                "method_ids": [
                    7,
                    1,
                    0,
                    8,
                    4,
                    2,
                    3,
                    9,
                    10,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipShort:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyTime(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyJavaTime(Ljava/util/Date;)V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipShort:<init>(I)V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:dateToZipLong(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue()J",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;"
                ]
            }
        },
        "41": {
            "0": {
                "method_ids": [
                    27,
                    12,
                    10,
                    7,
                    5,
                    1,
                    4,
                    3,
                    0,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue()J",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>([BI)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.utils.IOUtils:readFully(Ljava/io/InputStream;[BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([BI)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            },
            "1": {
                "method_ids": [
                    65,
                    153,
                    17,
                    151,
                    102,
                    126,
                    115,
                    154,
                    20,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFully([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsMethodOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;[B)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:fill()I",
                    "org.apache.commons.compress.utils.IOUtils:readFully(Ljava/io/InputStream;[B)I",
                    "org.apache.commons.compress.archivers.zip.AsiExtraField:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.X000A_NTFS:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([BI)J",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            }
        },
        "24": {
            "0": {
                "method_ids": [
                    0,
                    8,
                    6,
                    5,
                    1,
                    4,
                    3,
                    2,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V",
                    "org.apache.commons.compress.utils.Charsets:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "23": {
            "0": {
                "method_ids": [
                    1,
                    19,
                    4,
                    3,
                    11,
                    13,
                    24,
                    28,
                    2,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$CoderId:<init>(Lorg/apache/commons/compress/archivers/sevenz/SevenZMethod;Lorg/apache/commons/compress/archivers/sevenz/Coders$CoderBase;)V",
                    "org.apache.commons.compress.archivers.sevenz.Coders$CoderBase:<init>()V",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.sevenz.Coders:addDecoder(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;",
                    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream:read()I",
                    "org.apache.commons.compress.archivers.sevenz.Folder:findBindPairForInStream(I)I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<clinit>()V",
                    "org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream:close()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readPackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder:decode(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;"
                ]
            }
        },
        "4": {
            "0": {
                "method_ids": [
                    67,
                    58,
                    46,
                    52,
                    51,
                    64,
                    56,
                    74,
                    57,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.JarMarker:getCentralDirectoryData()[B",
                    "org.apache.commons.compress.archivers.zip.JarMarker:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "1": {
                "method_ids": [
                    11,
                    38,
                    20,
                    50,
                    51,
                    54,
                    7,
                    66,
                    82,
                    57
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeVersionNeededToExtractAndGeneralPurposeBits(IZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:addExtraField(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V",
                    "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding:canEncode(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:mergeCentralDirectoryData([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflateUntilInputIsNeeded()V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:toDosTime(J)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "6": {
                "method_ids": [
                    44,
                    6,
                    4,
                    10,
                    3,
                    19,
                    71,
                    78,
                    9,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:mergeLocalFileDataData([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralDirectoryEnd()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflateUntilInputIsNeeded()V",
                    "org.apache.commons.compress.archivers.zip.JarMarker:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.AsiExtraField:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "7": {
                "method_ids": [
                    5,
                    62,
                    1,
                    3,
                    10,
                    4,
                    2,
                    52,
                    50,
                    53
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField:<init>(Ljava/lang/String;[BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:<init>(Ljava/lang/String;[BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryData()[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflate()V",
                    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.ZipShort:getBytes(I)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "8": {
                "method_ids": [
                    48,
                    16,
                    8,
                    41,
                    35,
                    27,
                    56,
                    26,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:hashCode()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([B)J",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflateUntilInputIsNeeded()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflate()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getLocalFileDataExtra()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "4": {
                "method_ids": [
                    51,
                    54,
                    53,
                    50,
                    57,
                    79,
                    5,
                    4,
                    17,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflate()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:addExtraField(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipShort:getValue()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "5": {
                "method_ids": [
                    8,
                    4,
                    1,
                    58,
                    6,
                    5,
                    7,
                    29,
                    55,
                    81
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipShort:getBytes(I)[B",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding:encode(Ljava/lang/String;)Ljava/nio/ByteBuffer;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:<init>(Ljava/lang/String;[BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "9": {
                "method_ids": [
                    4,
                    52,
                    5,
                    73,
                    6,
                    63,
                    1,
                    12,
                    10,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralDirectoryEnd()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:addExtraField(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V",
                    "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding:canEncodeChar(C)Z",
                    "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding:canEncode(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeOut([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExternalAttributes()J",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExtra()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:hashCode()I",
                    "org.apache.commons.compress.archivers.zip.AsiExtraField:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "2": {
                "method_ids": [
                    50,
                    52,
                    51,
                    54,
                    53,
                    2,
                    0,
                    17,
                    1,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setUseLanguageEncodingFlag(Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:mergeCentralDirectoryData([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:assembleData()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryData()[B",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:register(Ljava/lang/Class;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "3": {
                "method_ids": [
                    41,
                    50,
                    1,
                    52,
                    3,
                    12,
                    19,
                    11,
                    54,
                    56
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.AsiExtraField:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField:getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:toDosTime(J)[B",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:closeQuietly(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExternalAttributes()J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            }
        },
        "15": {
            "0": {
                "method_ids": [
                    3,
                    0,
                    4,
                    1,
                    5,
                    2,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getPlatform()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/util/zip/ZipEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "3": {
            "0": {
                "method_ids": [
                    114,
                    50,
                    111,
                    57,
                    121,
                    117,
                    96,
                    63,
                    31,
                    94
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:writeArchiveHeader()J",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeOut([B)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:encode(Ljava/lang/String;)Ljava/nio/ByteBuffer;",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry()V"
                ]
            }
        },
        "12": {
            "0": {
                "method_ids": [
                    3,
                    15,
                    2,
                    5,
                    0,
                    1,
                    4,
                    9,
                    6,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:isEOFRecord([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;II)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>()V",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:<init>(Ljava/io/InputStream;II)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;"
                ]
            }
        },
        "40": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V",
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V",
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            }
        },
        "47": {
            "0": {
                "method_ids": [
                    21,
                    12,
                    15,
                    4,
                    20,
                    14,
                    11,
                    3,
                    8,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsMethodOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:canHandleEntryData(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getMethod()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.utils.ByteUtils:toLittleEndian([BJII)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/util/zip/ZipEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "2": {
            "0": {
                "method_ids": [
                    10,
                    29,
                    16,
                    12,
                    5,
                    1,
                    36,
                    32,
                    4,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getUserId()I",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getMode()I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:fill(JJC)J",
                    "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getGroupId()I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read([B)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextArEntry()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read()I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read([BII)I"
                ]
            }
        },
        "13": {
            "0": {
                "method_ids": [
                    63,
                    50,
                    85,
                    93,
                    4,
                    24,
                    36,
                    10,
                    20,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setMethod(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:mergeLocalFileDataData([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder:<init>([C)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            },
            "1": {
                "method_ids": [
                    12,
                    11,
                    54,
                    1,
                    5,
                    68,
                    2,
                    39,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:getEntry(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit:usesUTF8ForNames()Z",
                    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit:useUTF8ForNames(Z)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:assembleData()V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExtra([B)V",
                    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField:parseFromCentralDirectoryData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:setSizesAndOffsetFromZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$OffsetEntry;I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            }
        },
        "5": {
            "0": {
                "method_ids": [
                    2,
                    51,
                    29,
                    1,
                    34,
                    50,
                    4,
                    5,
                    53,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:fill()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>([BI)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
                    "org.apache.commons.compress.archivers.zip.AsiExtraField:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.FallbackZipEncoding:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "14": {
            "0": {
                "method_ids": [
                    1,
                    2,
                    21,
                    19,
                    14,
                    16,
                    0,
                    3,
                    4,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarBuffer:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;II)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isDirectory()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "22": {
            "0": {
                "method_ids": [
                    50,
                    51,
                    54,
                    0,
                    1,
                    3,
                    4,
                    5,
                    10,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:initBlock()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartB()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:recvDecodingTables()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:createHuffmanDecodingTables(II)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:getAndMoveToFrontDecode()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:sendMTFValues6(II)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:bsFinishedWithStream()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:sendMTFValues()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:moveToFrontCodeAndSend()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read0()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartC()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartC()I"
                ]
            }
        },
        "25": {
            "0": {
                "method_ids": [
                    83,
                    85,
                    62,
                    54,
                    50,
                    51,
                    52,
                    53,
                    30,
                    39
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getPlatform()I",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue()J",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:checkRequestedFeatures(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;",
                    "org.apache.commons.compress.archivers.zip.ZipMethod:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([BI)J",
                    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField:<init>()V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsEncryptionOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        }
    }
}