{
    "bug_id": 92,
    "test_id": 2,
    "test_name": "org.jsoup.parser.HtmlParserTest.dropsDuplicateAttributes",
    "test_body": "@Test public void dropsDuplicateAttributes() {\nString html = \"<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>\";\nParser parser = Parser.htmlParser().setTrackErrors(10);\nDocument doc = parser.parseInput(html, \"\");\n63: Element p = doc.selectFirst(\"p\");\nassertEquals(\"<p one=\\\"One\\\" two=\\\"two\\\">Text</p>\", p.outerHtml()); // normalized names due to lower casing\n66: assertEquals(1, parser.getErrors().size());\nassertEquals(\"Duplicate attribute\", parser.getErrors().get(0).getErrorMessage());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<<p one=\"[One\" two=\"two]\">Text</p>> but was:<<p one=\"[Four\" one=\"Two\" two=\"two\" one=\"Three\" two=\"Five]\">Text</p>>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.parser.HtmlParserTest.dropsDuplicateAttributes(HtmlParserTest.java:64)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equalsIgnoreCase(tagName));\n}",
            "method_id": 240
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:<init>(Ljava/lang/Appendable;Lorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\nthis.accum = accum;\nthis.out = out;\nout.prepareEncoder();\n}",
            "method_id": 241
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nnode.outerHtmlHead(accum, depth, out);\n}\n}",
            "method_id": 242
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(Node node, int depth) {\nif (!node.nodeName().equals(\"#text\")) { // saves a void hit.\nnode.outerHtmlTail(accum, depth, out);\n}\n}",
            "method_id": 243
        },
        {
            "method_signature": "org.jsoup.nodes.NodeUtils:outputSettings(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Document$OutputSettings;",
            "method_body": "static Document.OutputSettings outputSettings(Node node) {\nDocument owner = node.ownerDocument();\nreturn owner != null ? owner.outputSettings() : (new Document(\"\")).outputSettings();\n}",
            "method_id": 244
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$CoreCharset:byName(Ljava/lang/String;)Lorg/jsoup/nodes/Entities$CoreCharset;",
            "method_body": "static CoreCharset byName(final String name) {\nif (name.equals(\"US-ASCII\"))\nif (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al\nreturn utf;\n}",
            "method_id": 245
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<clinit>()V",
            "method_body": "private static final String[] booleanAttributes = {\n};",
            "method_id": 246
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:shouldCollapseAttribute(Ljava/lang/String;Ljava/lang/String;Lorg/jsoup/nodes/Document$OutputSettings;)Z",
            "method_body": "protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\nreturn (\n}",
            "method_id": 247
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:<init>(Lorg/jsoup/nodes/Element;Lorg/jsoup/select/Evaluator;)V",
            "method_body": "FirstFinder(Element root, Evaluator eval) {\nthis.root = root;\nthis.eval = eval;\n}",
            "method_id": 248
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:head(Lorg/jsoup/nodes/Node;I)Lorg/jsoup/select/NodeFilter$FilterResult;",
            "method_body": "public FilterResult head(Node node, int depth) {\nif (node instanceof Element) {\nElement el = (Element) node;\nif (eval.matches(root, el)) {\nmatch = el;\nreturn STOP;\nreturn CONTINUE;\n}",
            "method_id": 249
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:tail(Lorg/jsoup/nodes/Node;I)Lorg/jsoup/select/NodeFilter$FilterResult;",
            "method_body": "public FilterResult tail(Node node, int depth) {\nreturn CONTINUE;\n}",
            "method_id": 250
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$1:<clinit>()V",
            "method_body": "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\nswitch (charset) {\nreturn true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n}",
            "method_id": 251
        },
        {
            "method_signature": "org.jsoup.parser.Parser:setTrackErrors(I)Lorg/jsoup/parser/Parser;",
            "method_body": "public Parser setTrackErrors(int maxErrors) {\nerrors = maxErrors > 0 ? ParseErrorList.tracking(maxErrors) : ParseErrorList.noTracking();\nreturn this;\n}",
            "method_id": 252
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:normalize()V",
            "method_body": "public void normalize() {\nfor (int i = 0; i < size; i++) {\nkeys[i] = lowerCase(keys[i]);\n}",
            "method_id": 253
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:tracking(I)Lorg/jsoup/parser/ParseErrorList;",
            "method_body": "public static ParseErrorList tracking(int maxSize) {\nreturn new ParseErrorList(INITIAL_CAPACITY, maxSize);\n}",
            "method_id": 254
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:isBooleanAttribute(Ljava/lang/String;)Z",
            "method_body": "protected static boolean isBooleanAttribute(final String key) {\nreturn Arrays.binarySearch(booleanAttributes, key) >= 0;\n}",
            "method_id": 255
        }
    ]
}