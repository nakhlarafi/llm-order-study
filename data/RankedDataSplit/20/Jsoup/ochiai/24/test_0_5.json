{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.jsoup.parser.HtmlParserTest.handlesQuotesInCommentsInScripts",
    "test_body": "@Test public void handlesQuotesInCommentsInScripts() {\nString html = \"<script>\\n\" +\n\"  <!--\\n\" +\n\"    document.write('</scr' + 'ipt>');\\n\" +\n\"  // -->\\n\" +\n\"</script>\";\nDocument node = Jsoup.parseBodyFragment(html);\nassertEquals(\"<script>\\n\" +\n\"  <!--\\n\" +",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<...ocument.write('</scr['] + 'ipt>');\n// -->...> but was:<...ocument.write('</scr[] + 'ipt>');\n// -->...>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.parser.HtmlParserTest.handlesQuotesInCommentsInScripts(HtmlParserTest.java:690)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tokeniser:transition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void transition(TokeniserState state) {\nthis.state = state;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:advanceTransition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void advanceTransition(TokeniserState state) {\nreader.advance();\nthis.state = state;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:createTagPending(Z)Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Token.Tag createTagPending(boolean start) {\ntagPending = start ? new Token.StartTag() : new Token.EndTag();\nreturn tagPending;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emitTagPending()V",
            "method_body": "void emitTagPending() {\ntagPending.finaliseTag();\nemit(tagPending);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:createTempBuffer()V",
            "method_body": "void createTempBuffer() {\ndataBuffer = new StringBuilder();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:isAppropriateEndTagToken()Z",
            "method_body": "boolean isAppropriateEndTagToken() {\nreturn tagPending.tagName.equals(lastStartTag.tagName);\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$1:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(TagOpen);\nbreak;\nt.emit(new Token.EOF());\nbreak;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$6:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(ScriptDataLessthanSign);\nbreak;\nString data = r.consumeToAny('<', nullChar);\nt.emit(data);\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$8:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nif (r.matchesLetter()) {\nt.createTagPending(true);\nt.transition(TagName);\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$10:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nString tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();\nt.tagPending.appendTagName(tagName);\nswitch (r.consume()) {\nt.emitTagPending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$17:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.consume()) {\nt.createTempBuffer();\nt.transition(ScriptDataEndTagOpen);\nbreak;\nt.emit(\"<!\");\nt.transition(ScriptDataEscapeStart);\nbreak;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$18:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nt.createTagPending(false);\nt.transition(ScriptDataEndTagName);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$19:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nString name = r.consumeLetterSequence();\nt.tagPending.appendTagName(name.toLowerCase());\nt.dataBuffer.append(name);\nreturn;\nif (t.isAppropriateEndTagToken() && !r.isEmpty()) {\nchar c = r.consume();\nswitch (c) {\nt.emitTagPending();\nt.transition(Data);\nbreak;\n} else {\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$20:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matches('-')) {\nt.emit('-');\nt.advanceTransition(ScriptDataEscapeStartDash);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$21:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matches('-')) {\nt.emit('-');\nt.advanceTransition(ScriptDataEscapedDashDash);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$22:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.isEmpty()) {\nswitch (r.current()) {\nt.emit('-');\nt.advanceTransition(ScriptDataEscapedDash);\nbreak;\nt.advanceTransition(ScriptDataEscapedLessthanSign);\nbreak;\nString data = r.consumeToAny('-', '<', nullChar);\nt.emit(data);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$23:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.isEmpty()) {\nchar c = r.consume();\nswitch (c) {\nt.emit(c);\nt.transition(ScriptDataEscapedDashDash);\nbreak;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$24:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.isEmpty()) {\nchar c = r.consume();\nswitch (c) {\nt.emit(c);\nt.transition(ScriptData);\nbreak;\nt.emit(c);\nt.transition(ScriptDataEscaped);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$25:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\n} else if (r.matches('/')) {\nt.createTempBuffer();\nt.advanceTransition(ScriptDataEscapedEndTagOpen);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$26:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nt.createTagPending(false);\nt.tagPending.appendTagName(Character.toLowerCase(r.current()));\nt.dataBuffer.append(r.current());\nt.advanceTransition(ScriptDataEscapedEndTagName);\n}",
            "method_id": 119
        }
    ]
}