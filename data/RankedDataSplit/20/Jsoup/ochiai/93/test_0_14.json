{
    "bug_id": 93,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.FormElementTest.createsFormData",
    "test_body": "@Test public void createsFormData() {\nString html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n\"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n\"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n\"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n\"<input name='ten' value='text' disabled>\" +\n\"<input name='eleven' value='text' type='button'>\" +\n\"</form>\";\nDocument doc = Jsoup.parse(html);\nFormElement form = (FormElement) doc.select(\"form\").first();\nList<Connection.KeyVal> data = form.formData();\n39: assertEquals(6, data.size());\nassertEquals(\"one=two\", data.get(0).toString());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<6> but was:<7>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.jsoup.nodes.FormElementTest.createsFormData(FormElementTest.java:39)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.FormElement:formData()Ljava/util/List;",
            "method_body": "public List<Connection.KeyVal> formData() {\nArrayList<Connection.KeyVal> data = new ArrayList<>();\nfor (Element el: elements) {\nif (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\nif (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\nString name = el.attr(\"name\");\nif (name.length() == 0) continue;\nString type = el.attr(\"type\");\nif (\"select\".equals(el.normalName())) {\nElements options = el.select(\"option[selected]\");\nboolean set = false;\nfor (Element option: options) {\ndata.add(HttpConnection.KeyVal.create(name, option.val()));\nset = true;\n}\nif (!set) {\n} else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\nif (el.hasAttr(\"checked\")) {\nfinal String val = el.val().length() >  0 ? el.val() : \"on\";\ndata.add(HttpConnection.KeyVal.create(name, val));\n}\ndata.add(HttpConnection.KeyVal.create(name, el.val()));\n}\nreturn data;\n}",
            "method_id": 280
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:<init>()V",
            "method_body": "private KeyVal() {}\nprivate KeyVal() {}",
            "method_id": 281
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:create(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/helper/HttpConnection$KeyVal;",
            "method_body": "public static KeyVal create(String key, String value) {\nreturn new KeyVal().key(key).value(value);\n}",
            "method_id": 282
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:key(Ljava/lang/String;)Lorg/jsoup/helper/HttpConnection$KeyVal;",
            "method_body": "public KeyVal key(String key) {\nValidate.notEmpty(key, \"Data key must not be empty\");\nthis.key = key;\nreturn this;\n}",
            "method_id": 283
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:value(Ljava/lang/String;)Lorg/jsoup/helper/HttpConnection$KeyVal;",
            "method_body": "public KeyVal value(String value) {\nValidate.notNull(value, \"Data value must not be null\");\nthis.value = value;\nreturn this;\n}",
            "method_id": 284
        }
    ]
}