{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.testByAttributeRegexCombined",
    "test_body": "@Test public void testByAttributeRegexCombined() {\nDocument doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\nElements els = doc.select(\"div table[class~=x|y]\");\nassertEquals(1, els.size());",
    "stack_trace": "org.jsoup.select.Selector$SelectorParseException: Could not parse query '=x|y]': unexpected token at '=x|y]'\nat org.jsoup.select.Selector.findElements(Selector.java:187)\nat org.jsoup.select.Selector.select(Selector.java:113)\nat org.jsoup.select.Selector.select(Selector.java:84)\nat org.jsoup.select.Selector.combinator(Selector.java:149)\nat org.jsoup.select.Selector.select(Selector.java:126)\nat org.jsoup.select.Selector.select(Selector.java:84)\nat org.jsoup.nodes.Element.select(Element.java:199)\nat org.jsoup.select.SelectorTest.testByAttributeRegexCombined(SelectorTest.java:129)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Selector$SelectorParseException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public SelectorParseException(String msg, Object... params) {\nsuper(String.format(msg, params));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Element:getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements getElementsByAttribute(String key) {\nValidate.notEmpty(key);\nkey = key.trim().toLowerCase();\nreturn Collector.collect(new Evaluator.Attribute(key), this);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.select.Selector:filterForDescendants(Ljava/util/Collection;Ljava/util/Collection;)Lorg/jsoup/select/Elements;",
            "method_body": "private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) {\nElements children = new Elements();\nCHILD: for (Element c : candidates) {\nfor (Element p : parents) {\nif (c.equals(p)) {\n}\nchildren.add(c);\n}\nreturn children;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator$Attribute:<init>(Ljava/lang/String;)V",
            "method_body": "public Attribute (String key) {\nthis.key = key;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator$Attribute:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element element) {\nreturn element.hasAttr(key);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.select.Selector:byAttribute()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements byAttribute() {\nTokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\nString key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\nValidate.notEmpty(key);\ncq.consumeWhitespace();\nif (cq.isEmpty()) {\nreturn key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.select.Selector:combinator(C)V",
            "method_body": "private void combinator(char combinator) {\ntq.consumeWhitespace();\nString subQuery = tq.consumeToAny(combinators);\nif (combinator == '>')\nelse if (combinator == ' ')\noutput = filterForDescendants(elements, select(subQuery, elements));\nelse if (combinator == '+')\nelse if (combinator == '~')\noutput = filterForGeneralSiblings(elements, select(subQuery, root));\nelements.clear(); elements.addAll(output);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Ljava/lang/String;Ljava/lang/Iterable;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(String query, Iterable<Element> roots) {\nValidate.notEmpty(query);\nValidate.notNull(roots);\nLinkedHashSet<Element> elements = new LinkedHashSet<Element>();\nfor (Element root : roots) {\nelements.addAll(select(query, root));\n}\nreturn new Elements(elements);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isValidParent(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean isValidParent(Tag child) {\nreturn isValidAncestor(child);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.select.Elements:contains(Ljava/lang/Object;)Z",
            "method_body": "public boolean contains(Object o) {return contents.contains(o);}\npublic boolean contains(Object o) {return contents.contains(o);}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.select.Selector:intersectElements(Ljava/util/Collection;)V",
            "method_body": "private void intersectElements(Collection<Element> intersect) {\nelements.retainAll(intersect);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.select.Selector:filterForSelf(Ljava/util/Collection;Ljava/util/Collection;)Lorg/jsoup/select/Elements;",
            "method_body": "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) {\nElements children = new Elements();\nCHILD: for (Element c : candidates) {\nfor (Element p : parents) {\nif (c.equals(p)) {\nchildren.add(c);\ncontinue CHILD;\nreturn children;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompBalanced(CC)Ljava/lang/String;",
            "method_body": "public String chompBalanced(char open, char close) {\nStringBuilder accum = new StringBuilder();\nint depth = 0;\nchar last = 0;\nif (isEmpty()) break;\nCharacter c = consume();\nif (last == 0 || last != ESC) {\nif (c.equals(open))\ndepth++;\nelse if (c.equals(close))\nif (depth > 0 && last != 0)\naccum.append(c); // don't include the outer match pair in the return\nlast = c;\n} while (depth > 0);\nreturn accum.toString();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainder()Ljava/lang/String;",
            "method_body": "public String remainder() {\nStringBuilder accum = new StringBuilder();\nwhile (!isEmpty()) {\naccum.append(consume());\nreturn accum.toString();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:hashCode()I",
            "method_body": "public int hashCode() {\nint result = key != null ? key.hashCode() : 0;\nresult = 31 * result + (value != null ? value.hashCode() : 0);\nreturn result;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeToAny([Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String consumeToAny(String... seq) {\nint start = pos;\nwhile (!isEmpty() && !matchesAny(seq)) {\npos++;\nString data = queue.substring(start, pos);\nreturn data;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.nodes.Node:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nreturn false;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.select.Selector:byTag()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements byTag() {\nString tagName = tq.consumeElementSelector();\nValidate.notEmpty(tagName);\nif (tagName.contains(\"|\"))\nreturn root.getElementsByTag(tagName);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.parser.Tag:hashCode()I",
            "method_body": "public int hashCode() {\nint result = tagName != null ? tagName.hashCode() : 0;\nresult = 31 * result + (isBlock ? 1 : 0);\nresult = 31 * result + (canContainBlock ? 1 : 0);\nresult = 31 * result + (canContainInline ? 1 : 0);\nresult = 31 * result + (optionalClosing ? 1 : 0);\nresult = 31 * result + (empty ? 1 : 0);\nreturn result;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.nodes.Node:hashCode()I",
            "method_body": "public int hashCode() {\nint result = parentNode != null ? parentNode.hashCode() : 0;\nresult = 31 * result + (attributes != null ? attributes.hashCode() : 0);\nreturn result;\n}",
            "method_id": 19
        }
    ]
}