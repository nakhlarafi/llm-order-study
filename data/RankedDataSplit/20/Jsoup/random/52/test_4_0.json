{
    "bug_id": 52,
    "test_id": 4,
    "test_name": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlIso8859",
    "test_body": "328: public void testMetaCharsetUpdateXmlIso8859() {\n329: final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n330: doc.updateMetaCharsetElement(true);\n331: doc.charset(Charset.forName(charsetIso8859));\n332: 333: final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n334: \"<root>\\n\" +\n335: \" node\\n\" +\n336: \"</root>\";\n337: assertEquals(xmlCharsetISO, doc.toString());\n338: 339: XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n340: assertEquals(charsetIso8859, doc.charset().name());\n341: assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n342: assertEquals(doc.charset(), doc.outputSettings().charset());\n343: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "public XmlDeclaration(String name, String baseUri, boolean isProcessingInstruction) {\nsuper(baseUri);\nValidate.notNull(name);\nthis.name = name;\nthis.isProcessingInstruction = isProcessingInstruction;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:toCharacterKey(Ljava/util/Map;)Ljava/util/Map;",
            "method_body": "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap) {\nMap<Character, String> outMap = new HashMap<Character, String>();\nfor (Map.Entry<String, Character> entry: inMap.entrySet()) {\nCharacter character = entry.getValue();\nString name = entry.getKey();\nif (outMap.containsKey(character)) {\nif (name.toLowerCase().equals(name))\noutMap.put(character, name);\noutMap.put(character, name);\n}\nreturn outMap;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.nodes.Document:charset(Ljava/nio/charset/Charset;)V",
            "method_body": "public void charset(Charset charset) {\nupdateMetaCharsetElement(true);\noutputSettings.charset(charset);\nensureMetaCharsetElement();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$EscapeMode:<init>(Ljava/lang/String;ILjava/util/Map;)V",
            "method_body": "EscapeMode(Map<Character, String> map) {\nthis.map = map;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.nodes.Node:parent()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node parent() {\nreturn parentNode;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:escapeMode()Lorg/jsoup/nodes/Entities$EscapeMode;",
            "method_body": "public Entities.EscapeMode escapeMode() {\nreturn escapeMode;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn tagName;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:<clinit>()V",
            "method_body": "private static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\nprivate static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\naccum\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.parser.Tag:formatAsBlock()Z",
            "method_body": "public boolean formatAsBlock() {\nreturn formatAsBlock;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.nodes.Node:childNodes()Ljava/util/List;",
            "method_body": "public List<Node> childNodes() {\nreturn Collections.unmodifiableList(childNodes);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:getKey()Ljava/lang/String;",
            "method_body": "public String getKey() {\nreturn key;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.helper.Validate:noNullElements([Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void noNullElements(Object[] objects, String msg) {\nfor (Object obj : objects)\nif (obj == null)\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:<init>(Lorg/jsoup/select/NodeVisitor;)V",
            "method_body": "public NodeTraversor(NodeVisitor visitor) {\nthis.visitor = visitor;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodeSize() > 0) {\nnode = node.childNode(0);\ndepth++;\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nnode = node.parentNode();\ndepth--;\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\nnode = node.nextSibling();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.nodes.Element:preserveWhitespace(Lorg/jsoup/nodes/Node;)Z",
            "method_body": "static boolean preserveWhitespace(Node node) {\nif (node != null && node instanceof Element) {\nElement element = (Element) node;\nreturn element.tag.preserveWhitespace() ||\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:escape(Ljava/lang/Appendable;Ljava/lang/String;Lorg/jsoup/nodes/Document$OutputSettings;ZZZ)V",
            "method_body": "static void escape(Appendable accum, String string, Document.OutputSettings out,\nboolean lastWasWhite = false;\nboolean reachedNonWhite = false;\nfinal EscapeMode escapeMode = out.escapeMode();\nfinal CharsetEncoder encoder = out.encoder();\nfinal CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\nfinal Map<Character, String> map = escapeMode.getMap();\nfinal int length = string.length();\nfor (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\ncodePoint = string.codePointAt(offset);\nif (normaliseWhite) {\nif (StringUtil.isWhitespace(codePoint)) {\nlastWasWhite = false;\nreachedNonWhite = true;\nif (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\nfinal char c = (char) codePoint;\nswitch (c) {\nif (canEncode(coreCharset, c, encoder))\naccum.append(c);\n} else {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.nodes.Element:prependChild(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element prependChild(Node child) {\nValidate.notNull(child);\naddChildren(0, child);\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.nodes.Document:outerHtml()Ljava/lang/String;",
            "method_body": "public String outerHtml() {\nreturn super.html(); // no outer wrapper tag\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.parser.Tag:preserveWhitespace()Z",
            "method_body": "public boolean preserveWhitespace() {\nreturn preserveWhitespace;\n}",
            "method_id": 19
        }
    ]
}