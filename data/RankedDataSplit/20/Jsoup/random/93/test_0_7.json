{
    "bug_id": 93,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.FormElementTest.createsFormData",
    "test_body": "27: @Test public void createsFormData() {\n28: String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n29: \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n30: \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n31: \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n32: \"<input name='ten' value='text' disabled>\" +\n33: \"<input name='eleven' value='text' type='button'>\" +\n34: \"</form>\";\n35: Document doc = Jsoup.parse(html);\n36: FormElement form = (FormElement) doc.select(\"form\").first();\n37: List<Connection.KeyVal> data = form.formData();\n38: 39: assertEquals(6, data.size());\n40: assertEquals(\"one=two\", data.get(0).toString());\n41: assertEquals(\"three=four\", data.get(1).toString());\n42: assertEquals(\"three=five\", data.get(2).toString());\n43: assertEquals(\"six=seven\", data.get(3).toString());\n44: assertEquals(\"seven=on\", data.get(4).toString()); // set\n45: assertEquals(\"eight=on\", data.get(5).toString()); // default\n46: // nine should not appear, not checked checkbox\n47: // ten should not appear, disabled\n48: // eleven should not appear, button\n49: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Attributes:checkNotNull(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String checkNotNull(String val) {\nreturn val == null ? EmptyString : val;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:isSelfClosing()Z",
            "method_body": "final boolean isSelfClosing() {\nreturn selfClosing;\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:runParser()V",
            "method_body": "abstract List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser);\nToken token = tokeniser.read();\nprocess(token);\ntoken.reset();\nif (token.type == Token.TokenType.EOF)\nbreak;\n}\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:name(Ljava/lang/String;)Lorg/jsoup/parser/Token$Tag;",
            "method_body": "final Tag name(String name) {\ntagName = name;\nnormalName = lowerCase(name);\nreturn this;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn size == 0;\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$16:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nswitch (t.type) {\nToken.StartTag start = t.asStartTag();\nString name = start.normalName();\nif (name.equals(\"html\"))\nelse if (name.equals(\"option\")) {\nif (tb.currentElement().normalName().equals(\"option\"))\ntb.processEndTag(\"option\");\ntb.insert(start);\n} else if (name.equals(\"optgroup\")) {\n} else if (name.equals(\"select\")) {\n} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\ntb.error(this);\nif (!tb.inSelectScope(\"select\"))\ntb.processEndTag(\"select\");\nreturn tb.process(start);\nToken.EndTag end = t.asEndTag();\nname = end.normalName();\nswitch (name) {\nif (tb.currentElement().normalName().equals(\"option\"))\ntb.pop();\nif (!tb.inSelectScope(name)) {\ntb.popStackToClose(name);\ntb.resetInsertionMode();\nbreak;\nbreak;\nreturn true;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn \"#text\";\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:<init>(II)V",
            "method_body": "ParseErrorList(int initialCapacity, int maxSize) {\nsuper(initialCapacity);\nthis.maxSize = maxSize;\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.jsoup.nodes.Node:attr(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String attr(String attributeKey) {\nValidate.notNull(attributeKey);\nif (!hasAttributes())\nString val = attributes().getIgnoreCase(attributeKey);\nif (val.length() > 0)\nreturn val;\nelse if (attributeKey.startsWith(\"abs:\"))\nelse return \"\";\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$12:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nt.createTagPending(false);\nt.tagPending.appendTagName(r.current());\nt.dataBuffer.append(r.current());\nt.advanceTransition(RCDATAEndTagName);\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.jsoup.select.Elements:first()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element first() {\nreturn isEmpty() ? null : get(0);\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:<init>()V",
            "method_body": "private String[] specificScopeTarget = {null};\nprivate String[] specificScopeTarget = {null};",
            "method_id": 151
        },
        {
            "method_signature": "org.jsoup.nodes.Element:attributes()Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes attributes() {\nif (!hasAttributes())\nreturn attributes;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inScope(Ljava/lang/String;)Z",
            "method_body": "boolean inScope(String targetName) {\nreturn inScope(targetName, null);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$8:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isCharacter()) {\ntb.insert(t.asCharacter());\n} else if (t.isEOF()) {\n} else if (t.isEndTag()) {\ntb.pop();\ntb.transition(tb.originalState());\nreturn true;\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:updateNumEvaluators()V",
            "method_body": "void updateNumEvaluators() {\nnum = evaluators.size();\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.jsoup.nodes.Element$NodeList:onContentsChanged()V",
            "method_body": "public void onContentsChanged() {\nowner.nodelistChanged();\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Attribute:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element element) {\nreturn element.hasAttr(key);\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeTagName()Ljava/lang/String;",
            "method_body": "String consumeTagName() {\nbufferUp();\nint pos = bufPos;\nfinal int start = pos;\nfinal int remaining = bufLength;\nfinal char[] val = charBuf;\nOUTER: while (pos < remaining) {\nswitch (val[pos]) {\nbreak OUTER;\npos++;\nbufPos = pos;\nreturn pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase(Ljava/lang/String;)I",
            "method_body": "private int indexOfKeyIgnoreCase(String key) {\nValidate.notNull(key);\nfor (int i = 0; i < size; i++) {\nif (key.equalsIgnoreCase(keys[i]))\nreturn i;\nreturn NotFound;\n}",
            "method_id": 159
        }
    ]
}