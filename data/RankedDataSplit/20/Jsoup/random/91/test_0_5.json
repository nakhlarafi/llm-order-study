{
    "bug_id": 91,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.testBinaryThrowsExceptionWhenTypeIgnored",
    "test_body": "495: public void testBinaryThrowsExceptionWhenTypeIgnored() {\n496: Connection con = Jsoup.connect(FileServlet.Url);\n497: con.data(FileServlet.LocationParam, \"/htmltests/thumb.jpg\");\n498: con.data(FileServlet.ContentTypeParam, \"image/jpeg\");\n499: con.ignoreContentType(true);\n500: 501: boolean threw = false;\n502: try {\n503: con.execute();\n504: Document doc = con.response().parse();\n505: } catch (IOException e) {\n506: threw = true;\n507: assertEquals(\"Input is binary and unsupported\", e.getMessage());\n508: }\n509: assertTrue(threw);\n510: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Character:reset()Lorg/jsoup/parser/Token;",
            "method_body": "Token reset() {\ndata = null;\nreturn this;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:setupFromConnection(Ljava/net/HttpURLConnection;Lorg/jsoup/helper/HttpConnection$Response;)V",
            "method_body": "private void setupFromConnection(HttpURLConnection conn, HttpConnection.Response previousResponse) throws IOException {\nthis.conn = conn;\nmethod = Method.valueOf(conn.getRequestMethod());\nurl = conn.getURL();\nstatusCode = conn.getResponseCode();\nstatusMessage = conn.getResponseMessage();\ncontentType = conn.getContentType();\nMap<String, List<String>> resHeaders = createHeaderMap(conn);\nprocessResponseHeaders(resHeaders);\nif (previousResponse != null) {\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:wrap(Ljava/io/InputStream;II)Lorg/jsoup/internal/ConstrainableInputStream;",
            "method_body": "public static ConstrainableInputStream wrap(InputStream in, int bufferSize, int maxSize) {\nreturn in instanceof ConstrainableInputStream\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.nodes.Node:childNode(I)Lorg/jsoup/nodes/Node;",
            "method_body": "public Node childNode(int index) {\nreturn ensureChildNodes().get(index);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void reparentChild(Node child) {\nchild.setParentNode(this);\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:canAddError()Z",
            "method_body": "boolean canAddError() {\nreturn size() < maxSize;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:url(Ljava/lang/String;)Lorg/jsoup/Connection;",
            "method_body": "public Connection url(String url) {\nValidate.notEmpty(url, \"Must supply a valid URL\");\nreq.url(new URL(encodeUrl(url)));\n}\nreturn this;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isFalse(Z)V",
            "method_body": "public static void isFalse(boolean val) {\nif (val)\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:multiHeaders()Ljava/util/Map;",
            "method_body": "public Map<String, List<String>> multiHeaders() {\nreturn headers;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainingLength()I",
            "method_body": "private int remainingLength() {\nreturn queue.length() - pos;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.Token:isCData()Z",
            "method_body": "final boolean isCData() {\nreturn this instanceof CData;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$3:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) {\nElement head = tb.insert(t.asStartTag());\ntb.setHeadElement(head);\ntb.transition(InHead);\n} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n} else if (t.isEndTag()) {\ntb.processStartTag(\"head\");\nreturn tb.process(t);\nreturn true;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nodelistChanged()V",
            "method_body": "void nodelistChanged() {\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:error(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void error(TokeniserState state) {\nif (errors.canAddError())\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState:isWhitespace(Lorg/jsoup/parser/Token;)Z",
            "method_body": "abstract boolean process(Token t, HtmlTreeBuilder tb);\nif (t.isCharacter()) {\nString data = t.asCharacter().getData();\nreturn isWhitespace(data);\nreturn false;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:process(Lorg/jsoup/parser/Token;)Z",
            "method_body": "protected boolean process(Token token) {\ncurrentToken = token;\nreturn this.state.process(token, this);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:name()Ljava/lang/String;",
            "method_body": "final String name() { // preserves case, for input into Tag.valueOf (which may drop case)\nValidate.isFalse(tagName == null || tagName.length() == 0);\nreturn tagName;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:sslSocketFactory()Ljavax/net/ssl/SSLSocketFactory;",
            "method_body": "public SSLSocketFactory sslSocketFactory() {\nreturn sslSocketFactory;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:value(Ljava/lang/String;)Lorg/jsoup/helper/HttpConnection$KeyVal;",
            "method_body": "public KeyVal value(String value) {\nValidate.notNull(value, \"Data value must not be null\");\nthis.value = value;\nreturn this;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:key(Ljava/lang/String;)Lorg/jsoup/helper/HttpConnection$KeyVal;",
            "method_body": "public KeyVal key(String key) {\nValidate.notEmpty(key, \"Data key must not be empty\");\nthis.key = key;\nreturn this;\n}",
            "method_id": 119
        }
    ]
}