{
    "bug_id": 91,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.testBinaryThrowsExceptionWhenTypeIgnored",
    "test_body": "495: public void testBinaryThrowsExceptionWhenTypeIgnored() {\n496: Connection con = Jsoup.connect(FileServlet.Url);\n497: con.data(FileServlet.LocationParam, \"/htmltests/thumb.jpg\");\n498: con.data(FileServlet.ContentTypeParam, \"image/jpeg\");\n499: con.ignoreContentType(true);\n500: 501: boolean threw = false;\n502: try {\n503: con.execute();\n504: Document doc = con.response().parse();\n505: } catch (IOException e) {\n506: threw = true;\n507: assertEquals(\"Input is binary and unsupported\", e.getMessage());\n508: }\n509: assertTrue(threw);\n510: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeTo(C)Ljava/lang/String;",
            "method_body": "public String consumeTo(char c) {\nint offset = nextIndexOf(c);\nif (offset != -1) {\nString consumed = cacheString(charBuf, stringCache, bufPos, offset);\nbufPos += offset;\nreturn consumed;\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>()V",
            "method_body": "Response() {\nsuper();\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:charset()Ljava/nio/charset/Charset;",
            "method_body": "public Charset charset() {\nreturn charset;\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.jsoup.parser.Token:isCharacter()Z",
            "method_body": "final boolean isCharacter() {\nreturn type == TokenType.Character;\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:validateCharset(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String validateCharset(String cs) {\nif (cs == null || cs.length() == 0) return null;\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:detectCharsetFromBom(Ljava/nio/ByteBuffer;)Lorg/jsoup/helper/DataUtil$BomCharset;",
            "method_body": "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {\nfinal Buffer buffer = byteData; // .mark and rewind used to return Buffer, now ByteBuffer, so cast for backward compat\nbuffer.mark();\nbyte[] bom = new byte[4];\nif (byteData.remaining() >= bom.length) {\nbyteData.get(bom);\nbuffer.rewind();\nif (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\nreturn null;\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nif (node instanceof Element) {\nElement el = (Element) node;\nif (eval.matches(root, el))\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consume()C",
            "method_body": "char consume() {\nbufferUp();\nchar val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];\nbufPos++;\nreturn val;\n}",
            "method_id": 207
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:framesetOk(Z)V",
            "method_body": "void framesetOk(boolean framesetOk) {\nthis.framesetOk = framesetOk;\n}",
            "method_id": 208
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:<init>(ZZ)V",
            "method_body": "public ParseSettings(boolean tag, boolean attribute) {\npreserveTagCase = tag;\npreserveAttributeCase = attribute;\n}",
            "method_id": 209
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:normalize()V",
            "method_body": "public void normalize() {\nfor (int i = 0; i < size; i++) {\n}",
            "method_id": 210
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState:readCharRef(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "private static void readCharRef(Tokeniser t, TokeniserState advance) {\nint[] c = t.consumeCharacterReference(null, false);\nif (c == null)\nt.emit('&');\nt.transition(advance);\n}",
            "method_id": 211
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:fixHeaderEncoding(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String fixHeaderEncoding(String val) {\nbyte[] bytes = val.getBytes(\"ISO-8859-1\");\nif (!looksLikeUtf8(bytes))\nreturn new String(bytes, \"UTF-8\");\n}",
            "method_id": 212
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:<init>()V",
            "method_body": "private Base() {\nheaders = new LinkedHashMap<>();\ncookies = new LinkedHashMap<>();\n}",
            "method_id": 213
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$KeyVal:<init>()V",
            "method_body": "private KeyVal() {}\nprivate KeyVal() {}",
            "method_id": 214
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:<clinit>()V",
            "method_body": "static final char replacementChar = '\\uFFFD'; // replaces null character\nprivate static final char[] notCharRefCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '<', '&'};",
            "method_id": 215
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:<init>()V",
            "method_body": "Request() {\ntimeoutMilliseconds = 30000; // 30 seconds\nmaxBodySizeBytes = 1024 * 1024; // 1MB\nfollowRedirects = true;\ndata = new ArrayList<>();\nmethod = Method.GET;\naddHeader(\"Accept-Encoding\", \"gzip\");\naddHeader(USER_AGENT, DEFAULT_UA);\nparser = Parser.htmlParser();\n}",
            "method_id": 216
        },
        {
            "method_signature": "org.jsoup.parser.Token$EOF:<init>()V",
            "method_body": "EOF() {\ntype = Token.TokenType.EOF;\n}",
            "method_id": 217
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:<clinit>()V",
            "method_body": "private static final int empty = -1;\nprivate static final char[] codeDelims = {',', ';'};",
            "method_id": 218
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:<init>(II)V",
            "method_body": "ParseErrorList(int initialCapacity, int maxSize) {\nsuper(initialCapacity);\nthis.maxSize = maxSize;\n}",
            "method_id": 219
        }
    ]
}