{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.ElementTest.testClonesClassnames",
    "test_body": "477: @Test public void testClonesClassnames() {\n478: Document doc = Jsoup.parse(\"<div class='one two'></div>\");\n479: Element div = doc.select(\"div\").first();\n480: Set<String> classes = div.classNames();\n481: assertEquals(2, classes.size());\n482: assertTrue(classes.contains(\"one\"));\n483: assertTrue(classes.contains(\"two\"));\n484: 485: Element copy = div.clone();\n486: Set<String> copyClasses = copy.classNames();\n487: assertEquals(2, copyClasses.size());\n488: assertTrue(copyClasses.contains(\"one\"));\n489: assertTrue(copyClasses.contains(\"two\"));\n490: copyClasses.add(\"three\");\n491: copyClasses.remove(\"one\");\n492: 493: assertTrue(classes.contains(\"one\"));\n494: assertFalse(classes.contains(\"three\"));\n495: assertFalse(copyClasses.contains(\"one\"));\n496: assertTrue(copyClasses.contains(\"three\"));\n497: 498: assertEquals(\"\", div.html());\n499: assertEquals(\"\", copy.html());\n500: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Tag:finaliseTag()V",
            "method_body": "void finaliseTag() {\nif (pendingAttributeName != null) {\nnewAttribute();\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:<init>()V",
            "method_body": "private HtmlTreeBuilderState state; // the current state\nprivate boolean baseUriSetFromDoc = false;\nprivate DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>(); // active (open) formatting elements\nprivate List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>(); // chars in table to be shifted out\nprivate boolean framesetOk = true; // if ok to go into frameset\nprivate boolean fosterInserts = false; // if next inserts should be fostered\nprivate boolean fragmentParsing = false; // if parsing a fragment of html\nHtmlTreeBuilder() {}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V",
            "method_body": "public Element(Tag tag, String baseUri) {\nthis(tag, baseUri, new Attributes());\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inSpecificScope([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\nIterator<Element> it = stack.descendingIterator();\nwhile (it.hasNext()) {\nElement el = it.next();\nString elName = el.nodeName();\nif (StringUtil.in(elName, targetNames))\nreturn true;\nif (StringUtil.in(elName, baseTypes))\nreturn false;\nif (extraTypes != null && StringUtil.in(elName, extraTypes))\n}\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$37:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(AttributeValue_singleQuoted);\nbreak;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.jsoup.parser.Tag:register(Lorg/jsoup/parser/Tag;)V",
            "method_body": "private static void register(Tag tag) {\ntags.put(tag.tagName, tag);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.jsoup.nodes.Node:doClone(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Node;",
            "method_body": "protected Node doClone(Node parent) {\nclone = (Node) super.clone();\n}\nclone.parentNode = parent; // can be null, to create an orphan split\nclone.siblingIndex = parent == null ? 0 : siblingIndex;\nclone.attributes = attributes != null ? attributes.clone() : null;\nclone.baseUri = baseUri;\nclone.childNodes = new ArrayList<Node>(childNodes.size());\nfor (Node child: childNodes)\nreturn clone;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void reparentChild(Node child) {\nif (child.parentNode != null)\nchild.setParentNode(this);\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState:isWhitespace(Lorg/jsoup/parser/Token;)Z",
            "method_body": "abstract boolean process(Token t, HtmlTreeBuilder tb);\nif (t.isCharacter()) {\nreturn false;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:clone()Lorg/jsoup/nodes/Attribute;",
            "method_body": "public Attribute clone() {\nreturn (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy required\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.jsoup.nodes.Element:className()Ljava/lang/String;",
            "method_body": "public String className() {\nreturn attr(\"class\");\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.jsoup.select.Elements:first()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element first() {\nreturn contents.isEmpty() ? null : contents.get(0);\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.jsoup.helper.DescendableLinkedList:<init>()V",
            "method_body": "public DescendableLinkedList() {\nsuper();\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:asList()Ljava/util/List;",
            "method_body": "public List<Attribute> asList() {\nif (attributes == null)\nList<Attribute> list = new ArrayList<Attribute>(attributes.size());\nfor (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\nlist.add(entry.getValue());\n}\nreturn Collections.unmodifiableList(list);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matches(Ljava/lang/String;)Z",
            "method_body": "public boolean matches(String seq) {\nreturn queue.regionMatches(true, pos, seq, 0, seq.length());\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byTag()V",
            "method_body": "private void byTag() {\nString tagName = tq.consumeElementSelector();\nValidate.notEmpty(tagName);\nif (tagName.contains(\"|\"))\nevals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeElementSelector()Ljava/lang/String;",
            "method_body": "public String consumeElementSelector() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.jsoup.parser.Token:isStartTag()Z",
            "method_body": "boolean isStartTag() {\nreturn type == TokenType.StartTag;\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWhitespace()Z",
            "method_body": "public boolean matchesWhitespace() {\nreturn !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));\n}",
            "method_id": 139
        }
    ]
}