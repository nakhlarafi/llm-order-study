{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone",
    "test_body": "1215: public void testNextElementSiblingAfterClone() {\n1216: // via https://github.com/jhy/jsoup/issues/951\n1217: String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n1218: String expectedText = \"New element\";\n1219: String cloneExpect = \"New element in clone\";\n1220: 1221: Document original = Jsoup.parse(html);\n1222: Document clone = original.clone();\n1223: 1224: Element originalElement = original.body().child(0);\n1225: originalElement.after(\"<div>\" + expectedText + \"</div>\");\n1226: Element originalNextElementSibling = originalElement.nextElementSibling();\n1227: Element originalNextSibling = (Element) originalElement.nextSibling();\n1228: assertEquals(expectedText, originalNextElementSibling.text());\n1229: assertEquals(expectedText, originalNextSibling.text());\n1230: 1231: Element cloneElement = clone.body().child(0);\n1232: cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n1233: Element cloneNextElementSibling = cloneElement.nextElementSibling();\n1234: Element cloneNextSibling = (Element) cloneElement.nextSibling();\n1235: assertEquals(cloneExpect, cloneNextElementSibling.text());\n1236: assertEquals(cloneExpect, cloneNextSibling.text());\n1237: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Tag:newAttribute()V",
            "method_body": "final void newAttribute() {\nif (attributes == null)\nif (pendingAttributeName != null) {\npendingAttributeName = pendingAttributeName.trim();\nif (pendingAttributeName.length() > 0) {\nif (hasPendingAttributeValue)\nvalue = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\nattributes.put(pendingAttributeName, value);\npendingAttributeName = null;\nhasEmptyAttributeValue = false;\nhasPendingAttributeValue = false;\nreset(pendingAttributeValue);\npendingAttributeValueS = null;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:finaliseTag()V",
            "method_body": "final void finaliseTag() {\nif (pendingAttributeName != null) {\nnewAttribute();\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:name()Ljava/lang/String;",
            "method_body": "final String name() { // preserves case, for input into Tag.valueOf (which may drop case)\nValidate.isFalse(tagName == null || tagName.length() == 0);\nreturn tagName;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:normalName()Ljava/lang/String;",
            "method_body": "final String normalName() { // loses case, used in tree building for working out where in tree it should go\nreturn normalName;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:isSelfClosing()Z",
            "method_body": "final boolean isSelfClosing() {\nreturn selfClosing;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendTagName(Ljava/lang/String;)V",
            "method_body": "final void appendTagName(String append) {\ntagName = tagName == null ? append : tagName.concat(append);\nnormalName = lowerCase(tagName);\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeName(Ljava/lang/String;)V",
            "method_body": "final void appendAttributeName(String append) {\npendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeValue(Ljava/lang/String;)V",
            "method_body": "final void appendAttributeValue(String append) {\nensureAttributeValue();\nif (pendingAttributeValue.length() == 0) {\npendingAttributeValueS = append;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:ensureAttributeValue()V",
            "method_body": "private void ensureAttributeValue() {\nhasPendingAttributeValue = true;\nif (pendingAttributeValueS != null) {\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.jsoup.parser.Token$StartTag:reset()Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Tag reset() {\nsuper.reset();\nattributes = new Attributes();\nreturn this;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:<clinit>()V",
            "method_body": "protected static final String dataPrefix = \"data-\";\nprivate static final String[] Empty = {};",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:checkCapacity(I)V",
            "method_body": "private void checkCapacity(int minNewSize) {\nValidate.isTrue(minNewSize >= size);\nint curSize = keys.length;\nif (curSize >= minNewSize)\nreturn;\nint newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;\nif (minNewSize > newSize)\nkeys = copyOf(keys, newSize);\nvals = copyOf(vals, newSize);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:copyOf([Ljava/lang/String;I)[Ljava/lang/String;",
            "method_body": "private static String[] copyOf(String[] orig, int size) {\nfinal String[] copy = new String[size];\nSystem.arraycopy(orig, 0, copy, 0,\nreturn copy;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:indexOfKey(Ljava/lang/String;)I",
            "method_body": "int indexOfKey(String key) {\nValidate.notNull(key);\nfor (int i = 0; i < size; i++) {\nreturn NotFound;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase(Ljava/lang/String;)I",
            "method_body": "private int indexOfKeyIgnoreCase(String key) {\nValidate.notNull(key);\nfor (int i = 0; i < size; i++) {\nif (key.equalsIgnoreCase(keys[i]))\nreturn i;\nreturn NotFound;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:checkNotNull(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String checkNotNull(String val) {\nreturn val == null ? EmptyString : val;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:getIgnoreCase(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getIgnoreCase(String key) {\nint i = indexOfKeyIgnoreCase(key);\nreturn i == NotFound ? EmptyString : checkNotNull(vals[i]);\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:add(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "private void add(String key, String value) {\ncheckCapacity(size + 1);\nkeys[size] = key;\nvals[size] = value;\nsize++;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes put(String key, String value) {\nint i = indexOfKey(key);\nif (i != NotFound)\nadd(key, value);\nreturn this;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:putIgnoreCase(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "void putIgnoreCase(String key, String value) {\nint i = indexOfKeyIgnoreCase(key);\nif (i != NotFound) {\nadd(key, value);\n}",
            "method_id": 99
        }
    ]
}