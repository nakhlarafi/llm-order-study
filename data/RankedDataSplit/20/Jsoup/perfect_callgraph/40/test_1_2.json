{
    "bug_id": 40,
    "test_id": 1,
    "test_name": "org.jsoup.parser.HtmlParserTest.handlesInvalidDoctypes",
    "test_body": "810: @Test public void handlesInvalidDoctypes() {\n811: // would previously throw invalid name exception on empty doctype\n812: Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n813: assertEquals(\n814: \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n815: StringUtil.normaliseWhitespace(doc.outerHtml()));\n816: 817: doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n818: assertEquals(\n819: \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n820: StringUtil.normaliseWhitespace(doc.outerHtml()));\n821: 822: doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n823: assertEquals(\n824: \"<!DOCTYPE \u00ef\u00bf\u00bd> <html> <head></head> <body></body> </html>\",\n825: StringUtil.normaliseWhitespace(doc.outerHtml()));\n826: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchConsumeIgnoreCase(Ljava/lang/String;)Z",
            "method_body": "boolean matchConsumeIgnoreCase(String seq) {\nif (matchesIgnoreCase(seq)) {\npos += seq.length();\nreturn true;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:<init>(Lorg/jsoup/parser/CharacterReader;Lorg/jsoup/parser/ParseErrorList;)V",
            "method_body": "Tokeniser(CharacterReader reader, ParseErrorList errors) {\nthis.reader = reader;\nthis.errors = errors;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emit(Lorg/jsoup/parser/Token;)V",
            "method_body": "void emit(Token token) {\nValidate.isFalse(isEmitPending, \"There is an unread token pending!\");\nemitPending = token;\nisEmitPending = true;\nif (token.type == Token.TokenType.StartTag) {\n} else if (token.type == Token.TokenType.EndTag) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:transition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void transition(TokeniserState state) {\nthis.state = state;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:advanceTransition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void advanceTransition(TokeniserState state) {\nreader.advance();\nthis.state = state;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:createDoctypePending()V",
            "method_body": "void createDoctypePending() {\ndoctypePending = new Token.Doctype();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emitDoctypePending()V",
            "method_body": "void emitDoctypePending() {\nemit(doctypePending);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:error(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void error(TokeniserState state) {\nif (errors.canAddError())\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$1:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(TagOpen);\nbreak;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$8:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(MarkupDeclarationOpen);\nbreak;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$44:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchConsume(\"--\")) {\n} else if (r.matchConsumeIgnoreCase(\"DOCTYPE\")) {\nt.transition(Doctype);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$51:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.error(this);\nt.createDoctypePending();\nt.doctypePending.forceQuirks = true;\nt.emitDoctypePending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.parser.Token:<init>()V",
            "method_body": "private Token() {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.parser.Token:asDoctype()Lorg/jsoup/parser/Token$Doctype;",
            "method_body": "Doctype asDoctype() {\nreturn (Doctype) this;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.parser.Token:isComment()Z",
            "method_body": "boolean isComment() {\nreturn type == TokenType.Comment;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.parser.Token:isCharacter()Z",
            "method_body": "boolean isCharacter() {\nreturn type == TokenType.Character;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.parser.Token$Doctype:<init>()V",
            "method_body": "final StringBuilder name = new StringBuilder();\nfinal StringBuilder publicIdentifier = new StringBuilder();\nfinal StringBuilder systemIdentifier = new StringBuilder();\nboolean forceQuirks = false;\nDoctype() {\ntype = TokenType.Doctype;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.parser.Token$Doctype:getName()Ljava/lang/String;",
            "method_body": "String getName() {\nreturn name.toString();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.parser.Token$Doctype:getPublicIdentifier()Ljava/lang/String;",
            "method_body": "String getPublicIdentifier() {\nreturn publicIdentifier.toString();\n}",
            "method_id": 59
        }
    ]
}