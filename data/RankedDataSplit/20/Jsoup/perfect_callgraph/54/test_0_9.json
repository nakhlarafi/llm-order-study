{
    "bug_id": 54,
    "test_id": 0,
    "test_name": "org.jsoup.helper.W3CDomTest.handlesInvalidAttributeNames",
    "test_body": "85: public void handlesInvalidAttributeNames() {\n86: String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n87: org.jsoup.nodes.Document jsoupDoc;\n88: jsoupDoc = Jsoup.parse(html);\n89: Element body = jsoupDoc.select(\"body\").first();\n90: assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n91: assertTrue(body.hasAttr(\"name\\\"\"));\n92: 93: Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);\n94: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:<init>(Ljava/lang/String;)V",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equals(tagName));\n}",
            "method_id": 180
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equals(tagName));\n}",
            "method_id": 181
        },
        {
            "method_signature": "org.jsoup.nodes.BooleanAttribute:<init>(Ljava/lang/String;)V",
            "method_body": "public BooleanAttribute(String key) {\nsuper(key, \"\");\n}",
            "method_id": 182
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom:fromJsoup(Lorg/jsoup/nodes/Document;)Lorg/w3c/dom/Document;",
            "method_body": "public Document fromJsoup(org.jsoup.nodes.Document in) {\nValidate.notNull(in);\nfactory.setNamespaceAware(true);\nbuilder = factory.newDocumentBuilder();\nDocument out = builder.newDocument();\nconvert(in, out);\n}",
            "method_id": 183
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom:convert(Lorg/jsoup/nodes/Document;Lorg/w3c/dom/Document;)V",
            "method_body": "public void convert(org.jsoup.nodes.Document in, Document out) {\nif (!StringUtil.isBlank(in.location()))\norg.jsoup.nodes.Element rootEl = in.child(0); // skip the #root node\nNodeTraversor traversor = new NodeTraversor(new W3CBuilder(out));\ntraversor.traverse(rootEl);\n}",
            "method_id": 184
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:<init>(Lorg/w3c/dom/Document;)V",
            "method_body": "public W3CBuilder(Document doc) {\nthis.doc = doc;\n}",
            "method_id": 185
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(org.jsoup.nodes.Node source, int depth) {\nif (source instanceof org.jsoup.nodes.Element) {\norg.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\nString prefix = updateNamespaces(sourceEl);\nString namespace = namespaces.get(prefix);\nElement el = doc.createElementNS(namespace, sourceEl.tagName());\ncopyAttributes(sourceEl, el);\nif (dest == null) { // sets up the root\ndoc.appendChild(el);\ndest.appendChild(el);\ndest = el; // descend\n} else if (source instanceof org.jsoup.nodes.TextNode) {\n}",
            "method_id": 186
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(org.jsoup.nodes.Node source, int depth) {\nif (source instanceof org.jsoup.nodes.Element && dest.getParentNode() instanceof Element) {\ndest = (Element) dest.getParentNode(); // undescend. cromulent.\n}",
            "method_id": 187
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:updateNamespaces(Lorg/jsoup/nodes/Element;)Ljava/lang/String;",
            "method_body": "private String updateNamespaces(org.jsoup.nodes.Element el) {\nAttributes attributes = el.attributes();\nfor (Attribute attr : attributes) {\nString key = attr.getKey();\nif (key.equals(xmlnsKey)) {\n} else if (key.startsWith(xmlnsPrefix)) {\nint pos = el.tagName().indexOf(\":\");\nreturn pos > 0 ? el.tagName().substring(0, pos) : \"\";\n}",
            "method_id": 188
        }
    ]
}