{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.jsoup.parser.ParserTest.handlesTextAfterData",
    "test_body": "135: @Test public void handlesTextAfterData() {\n136: String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n137: Document doc = Jsoup.parse(h);\n138: assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n139: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<...dy>pre <script>inner[</script> aft]</body></html>> but was:<...dy>pre <script>inner[ aft</script>]</body></html>>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.parser.ParserTest.handlesTextAfterData(ParserTest.java:138)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tag:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn tagName;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createBlock(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createBlock(String tagName) {\nreturn register(new Tag(tagName));\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:normaliseWhitespace(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String normaliseWhitespace(String text) {\ntext = text.replaceAll(\"\\\\s{2,}|(\\\\r\\\\n|\\\\r|\\\\n)\", \" \"); // more than one space, and newlines to \" \"\nreturn text;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWhitespace()Z",
            "method_body": "public boolean consumeWhitespace() {\nboolean seen = false;\nwhile (!queue.isEmpty() && Character.isWhitespace(queue.peek())) {\nreturn seen;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setOptionalClosing()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setOptionalClosing() {\noptionalClosing = true;\nreturn this;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setPreserveWhitespace()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setPreserveWhitespace() {\npreserveWhitespace = true;\nreturn this;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesAny([Ljava/lang/String;)Z",
            "method_body": "public boolean matchesAny(String... seq) {\nfor (String s : seq) {\nif (matches(s))\nreturn true;\nreturn false;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeToAny([Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String consumeToAny(String... seq) {\nStringBuilder accum = new StringBuilder();\nwhile (!queue.isEmpty() && !matchesAny(seq))\naccum.append(consume());\nreturn accum.toString();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainInlineOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainInlineOnly() {\ncanContainBlock = false;\ncanContainInline = true;\nreturn this;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.parser.Tag:canContainBlock()Z",
            "method_body": "public boolean canContainBlock() {\nreturn canContainBlock;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:isBlank()Z",
            "method_body": "public boolean isBlank() {\nreturn StringUtils.isBlank(normaliseWhitespace(getWholeText()));\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String consumeTo(String seq) {\nreturn consumeToAny(seq);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn queue.isEmpty();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWord()Z",
            "method_body": "public boolean matchesWord() {\nreturn !queue.isEmpty() && Character.isLetterOrDigit(queue.peek());\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:createFromEncoded(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/TextNode;",
            "method_body": "public static TextNode createFromEncoded(String encodedText, String baseUri) {\nString text = StringEscapeUtils.unescapeHtml(encodedText);\nreturn new TextNode(text, baseUri);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.nodes.Element:prependChild(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element prependChild(Node child) {\nValidate.notNull(child);\nchild.setParentNode(this);\nchildNodes.add(0, child);\nreturn this;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.nodes.Element:outerHtml(Ljava/lang/StringBuilder;)V",
            "method_body": "void outerHtml(StringBuilder accum) {\nif (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\nindent(accum);\naccum\nif (childNodes.isEmpty() && tag.isEmpty()) {\naccum.append(\">\");\nhtml(accum);\nif (tag.canContainBlock()) indent(accum);\naccum.append(\"</\").append(tagName()).append(\">\");\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.nodes.Element:prependElement(Ljava/lang/String;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element prependElement(String tagName) {\nElement child = new Element(Tag.valueOf(tagName), baseUri());\nprependChild(child);\nreturn child;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normalise()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document normalise() {\nif (select(\"html\").isEmpty())\nif (head() == null)\nselect(\"html\").first().prependElement(\"head\");\nif (body() == null)\nnormalise(head());\nnormalise(select(\"html\").first());\nnormalise(this);\nreturn this;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.nodes.Node:indexInList(Lorg/jsoup/nodes/Node;Ljava/util/List;)Ljava/lang/Integer;",
            "method_body": "protected static <N extends Node> Integer indexInList(N search, List<N> nodes) {\nValidate.notNull(search);\nValidate.notNull(nodes);\nfor (int i = 0; i < nodes.size(); i++) {\nN node = nodes.get(i);\nif (node.equals(search))\nreturn i;\n}",
            "method_id": 59
        }
    ]
}