{
    "bug_id": 81,
    "test_id": 0,
    "test_name": "org.jsoup.helper.DataUtilTest.supportsXmlCharsetDeclaration",
    "test_body": "169: public void supportsXmlCharsetDeclaration() throws IOException {\n170: String encoding = \"iso-8859-1\";\n171: InputStream soup = new ByteArrayInputStream((\n172: \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\" +\n173: \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\" +\n174: \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">Hell\u00c3\u00b6 W\u00c3\u00b6rld!</html>\"\n175: ).getBytes(encoding));\n176: 177: Document doc = Jsoup.parse(soup, null, \"\");\n178: assertEquals(\"Hell\u00c3\u00b6 W\u00c3\u00b6rld!\", doc.body().text());\n179: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<Hell[\u00f6 W\u00f6]rld!> but was:<Hell[\ufffd W\ufffd]rld!>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.helper.DataUtilTest.supportsXmlCharsetDeclaration(DataUtilTest.java:178)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.TokeniserState$43:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nr.unconsume();\nToken.Comment comment = new Token.Comment();\ncomment.bogus = true;\ncomment.data.append(r.consumeTo('>'));\nt.emit(comment);\nt.advanceTransition(Data);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$60:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.error(this);\nt.transition(DoctypeSystemIdentifier_doubleQuoted);\nbreak;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$63:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(AfterDoctypeSystemIdentifier);\nbreak;\nt.doctypePending.systemIdentifier.append(c);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$65:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.emitDoctypePending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$57:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(AfterDoctypePublicIdentifier);\nbreak;\nt.doctypePending.publicIdentifier.append(c);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$1:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\ntb.insert(t.asComment());\n} else if (t.isDoctype()) {\nToken.Doctype d = t.asDoctype();\nDocumentType doctype = new DocumentType(\ndoctype.setPubSysKey(d.getPubSysKey());\ntb.getDocument().appendChild(doctype);\nif (d.isForceQuirks())\ntb.transition(BeforeHtml);\n} else {\nreturn true;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.nodes.DocumentType:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public DocumentType(String name, String publicId, String systemId) {\nValidate.notNull(name);\nValidate.notNull(publicId);\nValidate.notNull(systemId);\nattr(NAME, name);\nattr(PUBLIC_ID, publicId);\nif (has(PUBLIC_ID)) {\nattr(PUB_SYS_KEY, PUBLIC_KEY);\nattr(SYSTEM_ID, systemId);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:readToByteBuffer(I)Ljava/nio/ByteBuffer;",
            "method_body": "public ByteBuffer readToByteBuffer(int max) throws IOException {\nValidate.isTrue(max >= 0, \"maxSize must be 0 (unlimited) or larger\");\nfinal boolean localCapped = max > 0; // still possibly capped in total stream\nfinal int bufferSize = localCapped && max < DefaultSize ? max : DefaultSize;\nfinal byte[] readBuffer = new byte[bufferSize];\nfinal ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\nint remaining = max;\nread = read(readBuffer);\nif (read == -1) break;\nif (localCapped) { // this local byteBuffer cap may be smaller than the overall maxSize (like when reading first bytes)\nif (read >= remaining) {\nremaining -= read;\noutStream.write(readBuffer, 0, read);\nreturn ByteBuffer.wrap(outStream.toByteArray());\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$59:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(BetweenDoctypePublicAndSystemIdentifiers);\nbreak;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompBalanced(CC)Ljava/lang/String;",
            "method_body": "public String chompBalanced(char open, char close) {\nint start = -1;\nint end = -1;\nint depth = 0;\nchar last = 0;\nboolean inSingleQuote = false;\nboolean inDoubleQuote = false;\nif (isEmpty()) break;\nCharacter c = consume();\nif (last == 0 || last != ESC) {\nif (c.equals('\\'') && c != open && !inDoubleQuote)\nelse if (c.equals('\"') && c != open && !inSingleQuote)\nif (inSingleQuote || inDoubleQuote)\nif (c.equals(open)) {\ndepth++;\nif (start == -1)\nstart = pos;\nelse if (c.equals(close))\ndepth--;\nif (depth > 0 && last != 0)\nend = pos; // don't include the outer match pair in the return\nlast = c;\n} while (depth > 0);\nfinal String out = (end >= 0) ? queue.substring(start, end) : \"\";\nif (depth > 0) {// ran out of queue before seeing enough )\nreturn out;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$55:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(BeforeDoctypePublicIdentifier);\nbreak;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$56:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(DoctypePublicIdentifier_doubleQuoted);\nbreak;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$53:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nString name = r.consumeLetterSequence();\nt.doctypePending.name.append(name);\nreturn;\nchar c = r.consume();\nswitch (c) {\nt.transition(AfterDoctypeName);\nbreak;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byAttribute()V",
            "method_body": "private void byAttribute() {\nTokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\nString key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val)\nValidate.notEmpty(key);\ncq.consumeWhitespace();\nif (cq.isEmpty()) {\nif (key.startsWith(\"^\"))\nevals.add(new Evaluator.Attribute(key));\nif (cq.matchChomp(\"=\"))\nevals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:putIgnoreCase(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "void putIgnoreCase(String key, String value) {\nint i = indexOfKeyIgnoreCase(key);\nif (i != NotFound) {\nvals[i] = value;\nif (!keys[i].equals(key)) // case changed, update\nadd(key, value);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.jsoup.parser.Token$Doctype:reset()Lorg/jsoup/parser/Token;",
            "method_body": "Token reset() {\nreset(name);\npubSysKey = null;\nreset(publicIdentifier);\nreset(systemIdentifier);\nforceQuirks = false;\nreturn this;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchesAny([C)Z",
            "method_body": "boolean matchesAny(char... seq) {\nif (isEmpty())\nbufferUp();\nchar c = charBuf[bufPos];\nfor (char seek : seq) {\nif (seek == c)\nreturn false;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:<init>(Ljava/io/InputStream;II)V",
            "method_body": "private ConstrainableInputStream(InputStream in, int bufferSize, int maxSize) {\nsuper(in, bufferSize);\nValidate.isTrue(maxSize >= 0);\nthis.maxSize = maxSize;\nremaining = maxSize;\ncapped = maxSize != 0;\nstartTime = System.nanoTime();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$AttributeKeyPair:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public AttributeKeyPair(String key, String value) {\nValidate.notEmpty(key);\nValidate.notEmpty(value);\nthis.key = normalize(key);\nif (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")\nthis.value = normalize(value);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:ensureAttributes()V",
            "method_body": "private void ensureAttributes() {\nif (!hasAttributes()) {\nObject coreValue = value;\nAttributes attributes = new Attributes();\nvalue = attributes;\nif (coreValue != null)\n}",
            "method_id": 39
        }
    ]
}