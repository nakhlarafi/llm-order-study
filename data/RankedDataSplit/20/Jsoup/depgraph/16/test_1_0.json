{
    "bug_id": 16,
    "test_id": 1,
    "test_name": "org.jsoup.nodes.DocumentTypeTest.outerHtmlGeneration",
    "test_body": "28: @Test public void outerHtmlGeneration() {\n29: DocumentType html5 = new DocumentType(\"html\", \"\", \"\", \"\");\n30: assertEquals(\"<!DOCTYPE html>\", html5.outerHtml());\n31: 32: DocumentType publicDocType = new DocumentType(\"html\", \"-//IETF//DTD HTML//\", \"\", \"\");\n33: assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//IETF//DTD HTML//\\\">\", publicDocType.outerHtml());\n34: 35: DocumentType systemDocType = new DocumentType(\"html\", \"\", \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\", \"\");\n36: assertEquals(\"<!DOCTYPE html \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\", systemDocType.outerHtml());\n37: 38: DocumentType combo = new DocumentType(\"notHtml\", \"--public\", \"--system\", \"\");\n39: assertEquals(\"<!DOCTYPE notHtml PUBLIC \\\"--public\\\" \\\"--system\\\">\", combo.outerHtml());\n40: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<<!DOCTYPE html [\"]http://www.ibm.com/d...> but was:<<!DOCTYPE html []http://www.ibm.com/d...>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.nodes.DocumentTypeTest.outerHtmlGeneration(DocumentTypeTest.java:36)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.DocumentType:outerHtmlHead(Ljava/lang/StringBuilder;ILorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\naccum.append(\"<!DOCTYPE html\");\nif (!StringUtil.isBlank(attr(\"publicId\")))\naccum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append(\"\\\"\");\nif (!StringUtil.isBlank(attr(\"systemId\")))\naccum.append(' ').append(attr(\"systemId\")).append(\"\\\"\");\naccum.append('>');\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.DocumentType:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\nsuper(baseUri);\nattr(\"name\", name);\nattr(\"publicId\", publicId);\nattr(\"systemId\", systemId);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.nodes.Node:outerHtml()Ljava/lang/String;",
            "method_body": "public String outerHtml() {\nStringBuilder accum = new StringBuilder(32*1024);\nouterHtml(accum);\nreturn accum.toString();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.nodes.DocumentType:outerHtmlTail(Ljava/lang/StringBuilder;ILorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.nodes.DocumentType:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn \"#doctype\";\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.nodes.Node:outerHtml(Ljava/lang/StringBuilder;)V",
            "method_body": "protected void outerHtml(StringBuilder accum) {\nnew NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(Node node, int depth) {\nif (!node.nodeName().equals(\"#text\")) // saves a void hit.\nnode.outerHtmlTail(accum, depth, out);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:<init>(Ljava/lang/StringBuilder;Lorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\nthis.accum = accum;\nthis.out = out;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:isBlank(Ljava/lang/String;)Z",
            "method_body": "public static boolean isBlank(String string) {\nif (string == null || string.length() == 0)\nreturn true;\nint l = string.length();\nfor (int i = 0; i < l; i++) {\nif (!Character.isWhitespace(string.codePointAt(i)))\nreturn false;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nnode.outerHtmlHead(accum, depth, out);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.nodes.Node:ownerDocument()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document ownerDocument() {\nif (this instanceof Document)\nelse if (parentNode == null)\nreturn null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.nodes.Document:<init>(Ljava/lang/String;)V",
            "method_body": "private OutputSettings outputSettings = new OutputSettings();\nprivate QuirksMode quirksMode = QuirksMode.noQuirks;\nsuper(Tag.valueOf(\"#root\"), baseUri);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.nodes.Document:outputSettings()Lorg/jsoup/nodes/Document$OutputSettings;",
            "method_body": "public OutputSettings outputSettings() {\nreturn outputSettings;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:<init>()V",
            "method_body": "private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\nprivate Charset charset = Charset.forName(\"UTF-8\");\nprivate CharsetEncoder charsetEncoder = charset.newEncoder();\nprivate boolean prettyPrint = true;\nprivate int indentAmount = 1;\npublic OutputSettings() {}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public void put(String key, String value) {\nAttribute attr = new Attribute(key, value);\nput(attr);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;)V",
            "method_body": "protected Node(String baseUri) {\nthis(baseUri, new Attributes());\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.nodes.Node:attr(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Node;",
            "method_body": "public Node attr(String attributeKey, String attributeValue) {\nattributes.put(attributeKey, attributeValue);\nreturn this;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName) {\nValidate.notNull(tagName);\ntagName = tagName.trim().toLowerCase();\nValidate.notEmpty(tagName);\nsynchronized (tags) {\nTag tag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.isBlock = false;\ntag.canContainBlock = true;\nreturn tag;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodes().size() > 0) {\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Lorg/jsoup/nodes/Attribute;)V",
            "method_body": "public void put(Attribute attribute) {\nValidate.notNull(attribute);\nif (attributes == null)\nattributes = new LinkedHashMap<String, Attribute>(2);\nattributes.put(attribute.getKey(), attribute);\n}",
            "method_id": 19
        }
    ]
}