{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead",
    "test_body": "391: public void handlesEmptyStreamDuringParseRead() throws IOException {\n392: // this handles situations where the remote server sets a content length greater than it actually writes\n393: 394: Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n395: .timeout(200)\n396: .execute();\n397: 398: boolean threw = false;\n399: try {\n400: Document document = res.parse();\n401: assertEquals(\"Something\", document.title());",
    "stack_trace": "org.jsoup.UncheckedIOException: java.io.IOException: Underlying input stream returned zero bytes\nat org.jsoup.parser.CharacterReader.bufferUp(CharacterReader.java:63)\nat org.jsoup.parser.CharacterReader.current(CharacterReader.java:93)\nat org.jsoup.parser.TokeniserState$1.read(TokeniserState.java:12)\nat org.jsoup.parser.Tokeniser.read(Tokeniser.java:45)\nat org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:51)\nat org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)\nat org.jsoup.parser.Parser.parseInput(Parser.java:39)\nat org.jsoup.helper.DataUtil.parseInputStream(DataUtil.java:151)\nat org.jsoup.helper.HttpConnection$Response.parse(HttpConnection.java:837)\nat org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead(ConnectTest.java:400)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V",
            "method_body": "public Element(Tag tag, String baseUri) {\nthis(tag, baseUri, null);\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isTrue(ZLjava/lang/String;)V",
            "method_body": "public static void isTrue(boolean val, String msg) {\nif (!val)\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:<clinit>()V",
            "method_body": "private static final HashMap<String, String> multipoints = new HashMap<>(); // name -> multiple character references\nprivate static final Document.OutputSettings DefaultOutput = new Document.OutputSettings();\npublic enum EscapeMode {\nxhtml(EntitiesData.xmlPoints, 4),\nbase(EntitiesData.basePoints, 106),\nextended(EntitiesData.fullPoints, 2125);\nEscapeMode(String file, int size) {\nload(this, file, size);\n}\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:advance()V",
            "method_body": "public void advance() {\nbufPos++;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.jsoup.parser.Tag:register(Lorg/jsoup/parser/Tag;)V",
            "method_body": "private static void register(Tag tag) {\ntags.put(tag.tagName, tag);\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:<init>(Ljava/lang/String;)V",
            "method_body": "public CharacterReader(String input) {\nthis(new StringReader(input), input.length());\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isTrue(Z)V",
            "method_body": "public static void isTrue(boolean val) {\nif (!val)\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:parser()Lorg/jsoup/parser/Parser;",
            "method_body": "public Parser parser() {\nreturn parser;\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:ignoreContentType()Z",
            "method_body": "public boolean ignoreContentType() {\nreturn ignoreContentType;\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.jsoup.Connection$Method:hasBody()Z",
            "method_body": "public final boolean hasBody() {\nreturn hasBody;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:contentType()Ljava/lang/String;",
            "method_body": "public String contentType() {\nreturn contentType;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:proxy()Ljava/net/Proxy;",
            "method_body": "public Proxy proxy() {\nreturn proxy;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:maxBodySize()I",
            "method_body": "public int maxBodySize() {\nreturn maxBodySizeBytes;\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:multiHeaders()Ljava/util/Map;",
            "method_body": "public Map<String, List<String>> multiHeaders() {\nreturn headers;\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:requestBody()Ljava/lang/String;",
            "method_body": "public String requestBody() {\nreturn body;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req) throws IOException {\nreturn execute(req, null);\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:timeout()I",
            "method_body": "public int timeout() {\nreturn timeoutMilliseconds;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:cookies()Ljava/util/Map;",
            "method_body": "public Map<String, String> cookies() {\nreturn cookies;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:method()Lorg/jsoup/Connection$Method;",
            "method_body": "public Method method() {\nreturn method;\n}",
            "method_id": 159
        }
    ]
}