{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead",
    "test_body": "391: public void handlesEmptyStreamDuringParseRead() throws IOException {\n392: // this handles situations where the remote server sets a content length greater than it actually writes\n393: 394: Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n395: .timeout(200)\n396: .execute();\n397: 398: boolean threw = false;\n399: try {\n400: Document document = res.parse();\n401: assertEquals(\"Something\", document.title());",
    "stack_trace": "org.jsoup.UncheckedIOException: java.io.IOException: Underlying input stream returned zero bytes\nat org.jsoup.parser.CharacterReader.bufferUp(CharacterReader.java:63)\nat org.jsoup.parser.CharacterReader.current(CharacterReader.java:93)\nat org.jsoup.parser.TokeniserState$1.read(TokeniserState.java:12)\nat org.jsoup.parser.Tokeniser.read(Tokeniser.java:45)\nat org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:51)\nat org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)\nat org.jsoup.parser.Parser.parseInput(Parser.java:39)\nat org.jsoup.helper.DataUtil.parseInputStream(DataUtil.java:151)\nat org.jsoup.helper.HttpConnection$Response.parse(HttpConnection.java:837)\nat org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead(ConnectTest.java:400)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Entities:load(Lorg/jsoup/nodes/Entities$EscapeMode;Ljava/lang/String;I)V",
            "method_body": "private static void load(EscapeMode e, String pointsData, int size) {\ne.nameKeys = new String[size];\ne.codeVals = new int[size];\ne.codeKeys = new int[size];\ne.nameVals = new String[size];\nint i = 0;\nCharacterReader reader = new CharacterReader(pointsData);\nwhile (!reader.isEmpty()) {\nfinal String name = reader.consumeTo('=');\nreader.advance();\nfinal int cp1 = Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\nfinal char codeDelim = reader.current();\nreader.advance();\nif (codeDelim == ',') {\ncp2 = Integer.parseInt(reader.consumeTo(';'), codepointRadix);\nreader.advance();\ncp2 = empty;\nfinal String indexS = reader.consumeTo('&');\nfinal int index = Integer.parseInt(indexS, codepointRadix);\nreader.advance();\ne.nameKeys[i] = name;\ne.codeVals[i] = cp1;\ne.codeKeys[index] = cp1;\ne.nameVals[index] = name;\nif (cp2 != empty) {\nmultipoints.put(name, new String(new int[]{cp1, cp2}, 0, 2));\ni++;\n}\nValidate.isTrue(i == size, \"Unexpected count of entities loaded\");\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:url(Ljava/net/URL;)Lorg/jsoup/Connection$Base;",
            "method_body": "public T url(URL url) {\nValidate.notNull(url, \"URL must not be null\");\nthis.url = url;\nreturn (T) this;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:fixHeaderEncoding(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String fixHeaderEncoding(String val) {\nbyte[] bytes = val.getBytes(\"ISO-8859-1\");\nif (!looksLikeUtf8(bytes))\nreturn new String(bytes, \"UTF-8\");\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.jsoup.Connection$Method:<init>(Ljava/lang/String;IZ)V",
            "method_body": "Method(boolean hasBody) {\nthis.hasBody = hasBody;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:execute()Lorg/jsoup/Connection$Response;",
            "method_body": "public Connection.Response execute() throws IOException {\nres = Response.execute(req);\nreturn res;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>()V",
            "method_body": "Response() {\nsuper();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:hasHeader(Ljava/lang/String;)Z",
            "method_body": "public boolean hasHeader(String name) {\nValidate.notEmpty(name, \"Header name must not be empty\");\nreturn getHeadersCaseInsensitive(name).size() != 0;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.jsoup.parser.Parser:<init>(Lorg/jsoup/parser/TreeBuilder;)V",
            "method_body": "public Parser(TreeBuilder treeBuilder) {\nthis.treeBuilder = treeBuilder;\nsettings = treeBuilder.defaultSettings();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$4:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\nswitch (t.type) {\nToken.StartTag start = t.asStartTag();\nString name = start.normalName();\nif (name.equals(\"html\")) {\n} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n} else if (name.equals(\"meta\")) {\n} else if (name.equals(\"title\")) {\nhandleRcData(start, tb);\nreturn true;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendTagName(C)V",
            "method_body": "final void appendTagName(char append) {\nappendTagName(String.valueOf(append));\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$3:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) {\nElement head = tb.insert(t.asStartTag());\ntb.setHeadElement(head);\ntb.transition(InHead);\n} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {\n} else if (t.isEndTag()) {\ntb.processStartTag(\"head\");\nreturn tb.process(t);\nreturn true;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:cacheString([C[Ljava/lang/String;II)Ljava/lang/String;",
            "method_body": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\nif (count > maxStringCacheLen)\nreturn new String(charBuf, start, count);\nif (count < 1)\nint hash = 0;\nint offset = start;\nfor (int i = 0; i < count; i++) {\nhash = 31 * hash + charBuf[offset++];\nfinal int index = hash & stringCache.length - 1;\nString cached = stringCache[index];\nif (cached == null) { // miss, add\ncached = new String(charBuf, start, count);\nstringCache[index] = cached;\nif (rangeEquals(charBuf, start, count, cached)) { // hit\nreturn cached;\ncached = new String(charBuf, start, count);\nstringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\nreturn cached;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:encodeUrl(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String encodeUrl(String url) {\nURL u = new URL(url);\nreturn encodeUrl(u).toExternalForm();\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emit(Lorg/jsoup/parser/Token;)V",
            "method_body": "void emit(Token token) {\nValidate.isFalse(isEmitPending, \"There is an unread token pending!\");\nemitPending = token;\nisEmitPending = true;\nif (token.type == Token.TokenType.StartTag) {\nToken.StartTag startTag = (Token.StartTag) token;\nlastStartTag = startTag.tagName;\n} else if (token.type == Token.TokenType.EndTag) {\nToken.EndTag endTag = (Token.EndTag) token;\nif (endTag.attributes != null)\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:headers(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> headers(String name) {\nValidate.notEmpty(name);\nreturn getHeadersCaseInsensitive(name);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:<clinit>()V",
            "method_body": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\nprivate static final char[] mimeBoundaryChars =\nprivate DataUtil() {}",
            "method_id": 75
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeData()Ljava/lang/String;",
            "method_body": "String consumeData() {\nbufferUp();\nfinal int start = bufPos;\nfinal int remaining = bufLength;\nfinal char[] val = charBuf;\nwhile (bufPos < remaining) {\nfinal char c = val[bufPos];\nif (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)\nbufPos++;\n}\nreturn bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:reset()Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Tag reset() {\ntagName = null;\nnormalName = null;\npendingAttributeName = null;\nreset(pendingAttributeValue);\npendingAttributeValueS = null;\nhasEmptyAttributeValue = false;\nhasPendingAttributeValue = false;\nselfClosing = false;\nattributes = null;\nreturn this;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:createTempBuffer()V",
            "method_body": "void createTempBuffer() {\nToken.reset(dataBuffer);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;Lorg/jsoup/parser/ParseSettings;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName, ParseSettings settings) {\nValidate.notNull(tagName);\nTag tag = tags.get(tagName);\nif (tag == null) {\ntagName = settings.normalizeTag(tagName);\nValidate.notEmpty(tagName);\ntag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.isBlock = false;\nreturn tag;\n}",
            "method_id": 79
        }
    ]
}