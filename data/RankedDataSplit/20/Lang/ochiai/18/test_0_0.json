{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat",
    "test_body": "173: public void testFormat() {\n174: Locale realDefaultLocale = Locale.getDefault();\n175: TimeZone realDefaultZone = TimeZone.getDefault();\n176: try {\n177: Locale.setDefault(Locale.US);\n178: TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n179: 180: GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n181: GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n182: Date date1 = cal1.getTime();\n183: Date date2 = cal2.getTime();\n184: long millis1 = date1.getTime();\n185: long millis2 = date2.getTime();\n186: 187: FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n188: SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n189: assertEquals(sdf.format(date1), fdf.format(date1));\n190: assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n191: assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n192: assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n193: assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n194: assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n195: assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n196: 197: fdf = FastDateFormat.getInstance(\"Z\");\n198: assertEquals(\"-0500\", fdf.format(date1));\n199: assertEquals(\"-0500\", fdf.format(cal1));\n200: assertEquals(\"-0500\", fdf.format(millis1));\n201: 202: assertEquals(\"-0400\", fdf.format(date2));\n203: assertEquals(\"-0400\", fdf.format(cal2));\n204: assertEquals(\"-0400\", fdf.format(millis2));\n205: 206: fdf = FastDateFormat.getInstance(\"ZZ\");\n207: assertEquals(\"-05:00\", fdf.format(date1));\n208: assertEquals(\"-05:00\", fdf.format(cal1));\n209: assertEquals(\"-05:00\", fdf.format(millis1));\n210: 211: assertEquals(\"-04:00\", fdf.format(date2));\n212: assertEquals(\"-04:00\", fdf.format(cal2));\n213: assertEquals(\"-04:00\", fdf.format(millis2));\n214: 215: String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n216: \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n217: fdf = FastDateFormat.getInstance(pattern);\n218: sdf = new SimpleDateFormat(pattern);\n219: // SDF bug fix starting with Java 7\n220: assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n221: assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang3.time.FastDateFormatTest.testFormat(FastDateFormatTest.java:220)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(J)Ljava/lang/String;",
            "method_body": "public String format(long millis) {\nreturn format(new Date(millis));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nif (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\nbuffer.append(mStandard);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof TimeZoneDisplayKey) {\nTimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\nreturn\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:getTimeZoneDisplay(Ljava/util/TimeZone;ZILjava/util/Locale;)Ljava/lang/String;",
            "method_body": "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\nTimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\nString value = cTimeZoneDisplayCache.get(key);\nif (value == null) {\nvalue = tz.getDisplayName(daylight, style, locale);\nString prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\nif (prior != null) {\nreturn value;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(Calendar.YEAR) % 100);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nbuffer.append((char)(value / 10 + '0'));\nbuffer.append((char)(value % 10 + '0'));\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:<init>(Ljava/util/TimeZone;Ljava/util/Locale;I)V",
            "method_body": "TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\nmTimeZone = timeZone;\nmStandard = getTimeZoneDisplay(timeZone, false, style, locale);\nmDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn Math.max(mStandard.length(), mDaylight.length());\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey:<init>(Ljava/util/TimeZone;ZILjava/util/Locale;)V",
            "method_body": "TimeZoneDisplayKey(TimeZone timeZone,\nboolean daylight, int style, Locale locale) {\nmTimeZone = timeZone;\nif (daylight) {\nstyle |= 0x80000000;\nmStyle = style;\nmLocale = locale;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TextField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nbuffer.append(mValues[calendar.get(mField)]);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:<init>()V",
            "method_body": "TwoDigitYearField() {\nsuper();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:<clinit>()V",
            "method_body": "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n* Constructs an instance of {@code TwoDigitYearField}.",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 2;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 2;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 10) {\nbuffer.append((char)(value + '0'));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(mField));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 10) {\n} else if (value < 100) {\nbuffer.append((char)(value / 10 + '0'));\nbuffer.append((char)(value % 10 + '0'));\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:<init>(I)V",
            "method_body": "UnpaddedNumberField(int field) {\nmField = field;\n}",
            "method_id": 19
        }
    ]
}