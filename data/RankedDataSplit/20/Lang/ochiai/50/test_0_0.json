{
    "bug_id": 50,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance",
    "test_body": "155: public void test_changeDefault_Locale_DateTimeInstance() {\n156: Locale realDefaultLocale = Locale.getDefault();\n157: try {\n158: Locale.setDefault(Locale.US);\n159: FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n160: FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n161: Locale.setDefault(Locale.GERMANY);\n162: FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n163: 164: assertSame(Locale.GERMANY, format1.getLocale());\n165: assertSame(Locale.US, format2.getLocale());\n166: assertSame(Locale.GERMANY, format3.getLocale());\n167: assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);",
    "stack_trace": "junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotSame(Assert.java:325)\nat junit.framework.Assert.assertSame(Assert.java:288)\nat junit.framework.Assert.assertSame(Assert.java:296)\nat junit.framework.TestCase.assertSame(TestCase.java:465)\nat org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(Object obj1, Object obj2) {\nmObj1 = obj1;\nmObj2 = obj2;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$Pair:hashCode()I",
            "method_body": "public int hashCode() {\nreturn\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat:getDateTimeInstance(II)Lorg/apache/commons/lang/time/FastDateFormat;",
            "method_body": "public static FastDateFormat getDateTimeInstance(\nreturn getDateTimeInstance(dateStyle, timeStyle, null, null);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat:getDateTimeInstance(IILjava/util/Locale;)Lorg/apache/commons/lang/time/FastDateFormat;",
            "method_body": "public static FastDateFormat getDateTimeInstance(\nreturn getDateTimeInstance(dateStyle, timeStyle, null, locale);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat:getDateTimeInstance(IILjava/util/TimeZone;Ljava/util/Locale;)Lorg/apache/commons/lang/time/FastDateFormat;",
            "method_body": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\nObject key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\nif (timeZone != null) {\nif (locale != null) {\nkey = new Pair(key, locale);\nFastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\nif (format == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nSimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\nString pattern = formatter.toPattern();\nformat = getInstance(pattern, timeZone, locale);\ncDateTimeInstanceCache.put(key, format);\n}\nreturn format;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$Pair:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (!(obj instanceof Pair)) {\nPair key = (Pair)obj;\nreturn\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:<init>(Ljava/util/TimeZone;ZLjava/util/Locale;I)V",
            "method_body": "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {\nmTimeZone = timeZone;\nmTimeZoneForced = timeZoneForced;\nmLocale = locale;\nmStyle = style;\nif (timeZoneForced) {\nmStandard = null;\nmDaylight = null;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule:estimateLength()I",
            "method_body": "public int estimateLength() {\nif (mTimeZoneForced) {\n} else if (mStyle == TimeZone.SHORT) {\nreturn 4;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat:getLocale()Ljava/util/Locale;",
            "method_body": "public Locale getLocale() {\nreturn mLocale;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField:<init>(I)V",
            "method_body": "UnpaddedNumberField(int field) {\nmField = field;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 4;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TwelveHourField:<init>(Lorg/apache/commons/lang/time/FastDateFormat$NumberRule;)V",
            "method_body": "TwelveHourField(NumberRule rule) {\nmRule = rule;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TwelveHourField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn mRule.estimateLength();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$StringLiteral:<init>(Ljava/lang/String;)V",
            "method_body": "StringLiteral(String value) {\nmValue = value;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$StringLiteral:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn mValue.length();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TextField:<init>(I[Ljava/lang/String;)V",
            "method_body": "TextField(int field, String[] values) {\nmField = field;\nmValues = values;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$TextField:estimateLength()I",
            "method_body": "public int estimateLength() {\nint max = 0;\nfor (int i=mValues.length; --i >= 0; ) {\nint len = mValues[i].length();\nif (len > max) {\nmax = len;\n}\nreturn max;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$PaddedNumberField:<init>(II)V",
            "method_body": "PaddedNumberField(int field, int size) {\nif (size < 3) {\nmField = field;\nmSize = size;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat$PaddedNumberField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 4;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.lang.time.FastDateFormat:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\nsuper();\nif (pattern == null) {\nmPattern = pattern;\nmTimeZoneForced = (timeZone != null);\nif (timeZone == null) {\ntimeZone = TimeZone.getDefault();\nmTimeZone = timeZone;\nmLocaleForced = (locale != null);\nif (locale == null) {\nmLocale = locale;\n}",
            "method_id": 19
        }
    ]
}