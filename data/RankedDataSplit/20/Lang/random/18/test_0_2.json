{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat",
    "test_body": "public void testFormat() {\nLocale realDefaultLocale = Locale.getDefault();\nTimeZone realDefaultZone = TimeZone.getDefault();\ntry {\nLocale.setDefault(Locale.US);\nTimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n180: GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\nGregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\nDate date1 = cal1.getTime();\nDate date2 = cal2.getTime();\nlong millis1 = date1.getTime();\nlong millis2 = date2.getTime();\n187: FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\nassertEquals(sdf.format(date1), fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n197: fdf = FastDateFormat.getInstance(\"Z\");\nassertEquals(\"-0500\", fdf.format(date1));\nassertEquals(\"-0500\", fdf.format(cal1));\nassertEquals(\"-0500\", fdf.format(millis1));\n202: assertEquals(\"-0400\", fdf.format(date2));\nassertEquals(\"-0400\", fdf.format(cal2));\nassertEquals(\"-0400\", fdf.format(millis2));\n206: fdf = FastDateFormat.getInstance(\"ZZ\");\nassertEquals(\"-05:00\", fdf.format(date1));\nassertEquals(\"-05:00\", fdf.format(cal1));\nassertEquals(\"-05:00\", fdf.format(millis1));\n211: assertEquals(\"-04:00\", fdf.format(date2));\nassertEquals(\"-04:00\", fdf.format(cal2));\nassertEquals(\"-04:00\", fdf.format(millis2));\n215: String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n\" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\nfdf = FastDateFormat.getInstance(pattern);\nsdf = new SimpleDateFormat(pattern);\n// SDF bug fix starting with Java 7\nassertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\nassertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang3.time.FastDateFormatTest.testFormat(FastDateFormatTest.java:220)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:getInstance(Ljava/lang/String;)Lorg/apache/commons/lang3/time/FastDateFormat;",
            "method_body": "public static FastDateFormat getInstance(String pattern) {\nreturn cache.getInstance(pattern, null, null);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(mField));\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:getTimeZoneDisplay(Ljava/util/TimeZone;ZILjava/util/Locale;)Ljava/lang/String;",
            "method_body": "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\nTimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\nString value = cTimeZoneDisplayCache.get(key);\nif (value == null) {\nvalue = tz.getDisplayName(daylight, style, locale);\nString prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\nif (prior != null) {\nreturn value;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(Ljava/util/Calendar;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;",
            "method_body": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\nreturn applyRules(calendar, buf);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 10) {\nbuffer.append((char)(value + '0'));\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 100) {\nfor (int i = mSize; --i >= 2; ) {\nbuffer.append('0');\nbuffer.append((char)(value / 10 + '0'));\nbuffer.append((char)(value % 10 + '0'));\nif (value < 1000) {\nValidate.isTrue(value > -1, \"Negative values should not be possible\", value);\ndigits = Integer.toString(value).length();\nfor (int i = mSize; --i >= digits; ) {\nbuffer.append(Integer.toString(value));\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(Calendar.YEAR) % 100);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\nmPattern = pattern;\nmTimeZone = timeZone;\nmLocale = locale;\ninit();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 4;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof TimeZoneDisplayKey) {\nTimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\nreturn\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:<init>(C)V",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nmValue = value;\n}\nreturn 1;\nbuffer.append(mValue);\n}\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:selectNumberRule(II)Lorg/apache/commons/lang3/time/FastDateFormat$NumberRule;",
            "method_body": "protected NumberRule selectNumberRule(int field, int padding) {\nswitch (padding) {\nreturn new UnpaddedNumberField(field);\nreturn new TwoDigitNumberField(field);\nreturn new PaddedNumberField(field, padding);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
            "method_body": "protected String parseToken(String pattern, int[] indexRef) {\nStringBuilder buf = new StringBuilder();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\nif (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\ninLiteral = !inLiteral;\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
            "method_id": 53
        }
    ]
}