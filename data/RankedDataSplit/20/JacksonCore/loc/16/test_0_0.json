{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized",
    "test_body": "public void testInitialized() throws Exception\n{\nJsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\nJsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n// consume '1', move to '2'\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\n58: JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());\nassertEquals(2, seq.getIntValue());\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized(ParserSequenceTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parsePosNumber(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\nif (neg) {\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\nif (c == '0') {\nboolean eof = false;\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !_loadMore()) {\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\nif (intLen == 0) {\nint fractLen = 0;\nif (c == '.') { // yes, fraction\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (!eof) {\n_textBuffer.setCurrentLength(outPtr);\nreturn reset(neg, intLen, fractLen, expLen);\n++_inputPtr;\nswitch (ch) {\nreturn;\nif (_inputPtr >= _inputEnd) {\nif (!_loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 0,
            "loc": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parseNumber2(ZI)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\nif (neg) {\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\nif (c == '0') {\nboolean eof = false;\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !_loadMore()) {\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\nif (intLen == 0) {\nint fractLen = 0;\nif (c == '.') { // yes, fraction\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (!eof) {\n_textBuffer.setCurrentLength(outPtr);\nreturn reset(neg, intLen, fractLen, expLen);\n++_inputPtr;\nswitch (ch) {\nreturn;\nif (_inputPtr >= _inputEnd) {\nif (!_loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 1,
            "loc": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_verifyRootSpace(I)V",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\nif (neg) {\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\nif (c == '0') {\nboolean eof = false;\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !_loadMore()) {\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\nif (intLen == 0) {\nint fractLen = 0;\nif (c == '.') { // yes, fraction\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (!eof) {\n_textBuffer.setCurrentLength(outPtr);\nreturn reset(neg, intLen, fractLen, expLen);\n++_inputPtr;\nswitch (ch) {\nreturn;\nif (_inputPtr >= _inputEnd) {\nif (!_loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 2,
            "loc": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_skipWSOrEnd()I",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\nif (neg) {\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\nif (c == '0') {\nboolean eof = false;\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !_loadMore()) {\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\nif (intLen == 0) {\nint fractLen = 0;\nif (c == '.') { // yes, fraction\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (!eof) {\n_textBuffer.setCurrentLength(outPtr);\nreturn reset(neg, intLen, fractLen, expLen);\n++_inputPtr;\nswitch (ch) {\nreturn;\nif (_inputPtr >= _inputEnd) {\nif (!_loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 3,
            "loc": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;I)V",
            "method_body": "JsonToken(String token, int id)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n_serialized = token;\n_serializedChars = token.toCharArray();\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n_id = id;\n_isBoolean = (id == JsonTokenId.ID_FALSE || id == JsonTokenId.ID_TRUE);\n_isNumber = (id == JsonTokenId.ID_NUMBER_INT || id == JsonTokenId.ID_NUMBER_FLOAT);\n_isStructStart = (id == JsonTokenId.ID_START_OBJECT || id == JsonTokenId.ID_START_ARRAY);\n_isStructEnd = (id == JsonTokenId.ID_END_OBJECT || id == JsonTokenId.ID_END_ARRAY);\n_isScalar = !_isStructStart && !_isStructEnd\n}",
            "method_id": 4,
            "loc": 19
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<init>(Lcom/fasterxml/jackson/core/io/IOContext;I)V",
            "method_body": "protected byte[] _binaryValue;\nfinal static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);\nfinal static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\nfinal static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\nfinal static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\nfinal static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);\nfinal static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);\nfinal static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);\nfinal static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);\nprotected int _numTypesValid = NR_UNKNOWN;\nsuper(features);\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\nDupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n_parsingContext = JsonReadContext.createRootContext(dups);\n}",
            "method_id": 5,
            "loc": 16
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<clinit>()V",
            "method_body": "protected byte[] _binaryValue;\nfinal static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);\nfinal static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\nfinal static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\nfinal static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\nfinal static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);\nfinal static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);\nfinal static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);\nfinal static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);\nprotected int _numTypesValid = NR_UNKNOWN;\nsuper(features);\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\nDupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n_parsingContext = JsonReadContext.createRootContext(dups);\n}",
            "method_id": 6,
            "loc": 16
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>(Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;I[Ljava/lang/String;[Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$Bucket;III)V",
            "method_body": "private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, int flags,\nString[] symbols, Bucket[] buckets, int size, int hashSeed, int longestColl) {\n_parent = parent;\n_flags = flags;\n_canonicalize = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags);\n_symbols = symbols;\n_buckets = buckets;\n_size = size;\n_hashSeed = hashSeed;\nint arrayLen = (symbols.length);\n_sizeThreshold = _thresholdSize(arrayLen);\n_indexMask =  (arrayLen - 1);\n_longestCollisionList = longestColl;\n_dirty = false;\n}",
            "method_id": 7,
            "loc": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_parseIntValue()I",
            "method_body": "protected int _parseIntValue() throws IOException\nif (_currToken == JsonToken.VALUE_NUMBER_INT) {\nchar[] buf = _textBuffer.getTextBuffer();\nint offset = _textBuffer.getTextOffset();\nint len = _intLength;\nif (_numberNegative) {\nif (len <= 9) {\nint i = NumberInput.parseInt(buf, offset, len);\nif (_numberNegative) {\n_numberInt = i;\n_numTypesValid = NR_INT;\nreturn i;\n}",
            "method_id": 8,
            "loc": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:emptyAndGetCurrentSegment()[C",
            "method_body": "public char[] emptyAndGetCurrentSegment()\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\nif (_hasSegments) {\nchar[] curr = _currentSegment;\nif (curr == null) {\n_currentSegment = curr = buf(0);\nreturn curr;\n}",
            "method_id": 9,
            "loc": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;ILjava/io/Reader;Lcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;[CIIZ)V",
            "method_body": "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\nsuper(ctxt, features);\n_reader = r;\n_inputBuffer = inputBuffer;\n_inputPtr = start;\n_inputEnd = end;\n_objectCodec = codec;\n_symbols = st;\n_hashSeed = st.hashSeed();\n_bufferRecyclable = bufferRecyclable;\n}",
            "method_id": 10,
            "loc": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "public final JsonToken nextToken() throws IOException\nif (_currToken == JsonToken.FIELD_NAME) {\n_numTypesValid = NR_UNKNOWN;\nif (_tokenIncomplete) {\nint i = _skipWSOrEnd();\nif (i < 0) { // end-of-input\nclose();\nreturn (_currToken = null);\n_binaryValue = null;\nif (i == INT_RBRACKET) {\n}",
            "method_id": 11,
            "loc": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_getBufferRecycler()Lcom/fasterxml/jackson/core/util/BufferRecycler;",
            "method_body": "public BufferRecycler _getBufferRecycler()\nif (isEnabled(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)) {\nSoftReference<BufferRecycler> ref = _recyclerRef.get();\nbr = (ref == null) ? null : ref.get();\nif (br == null) {\nbr = new BufferRecycler();\n_recyclerRef.set(new SoftReference<BufferRecycler>(br));\n} else {\nreturn br;\n}",
            "method_id": 12,
            "loc": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:makeChild(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "public CharsToNameCanonicalizer makeChild(int flags) {\nsynchronized (this) {\nsymbols = _symbols;\nbuckets = _buckets;\nsize = _size;\nhashSeed = _hashSeed;\nlongestCollisionList = _longestCollisionList;\n}\nreturn new CharsToNameCanonicalizer(this, flags,\n}",
            "method_id": 13,
            "loc": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:<init>(III[I[Ljava/lang/String;II)V",
            "method_body": "public TableInfo(int size, int count, int tertiaryShift,\n{\nthis.size = size;\nthis.count = count;\nthis.tertiaryShift = tertiaryShift;\nthis.mainHash = mainHash;\nthis.names = names;\nthis.spilloverEnd = spilloverEnd;\nthis.longNameOffset = longNameOffset;\n}",
            "method_id": 14,
            "loc": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(II)[C",
            "method_body": "public char[] allocCharBuffer(int ix, int minSize) {\nfinal int DEF_SIZE = charBufferLength(ix);\nif (minSize < DEF_SIZE) {\nminSize = DEF_SIZE;\nchar[] buffer = _charBuffers[ix];\nif (buffer == null || buffer.length < minSize) {\nbuffer = calloc(minSize);\nreturn buffer;\n}",
            "method_id": 15,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:<init>(IZIZ)V",
            "method_body": "private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {\n_parent = null;\n_seed = seed;\n_intern = intern;\n_failOnDoS = failOnDoS;\nif (sz < MIN_HASH_SIZE) {\nif ((sz & (sz - 1)) != 0) { // only true if it's 2^N\n_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));\n}",
            "method_id": 16,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_releaseBuffers()V",
            "method_body": "protected void _releaseBuffers() throws IOException {\nsuper._releaseBuffers();\n_symbols.release();\nif (_bufferRecyclable) {\nchar[] buf = _inputBuffer;\nif (buf != null) {\n_inputBuffer = null;\n_ioContext.releaseTokenBuffer(buf);\n}",
            "method_id": 17,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithEmpty()V",
            "method_body": "public void resetWithEmpty()\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\nif (_hasSegments) {\n}",
            "method_id": 18,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:<init>(Lcom/fasterxml/jackson/core/json/JsonReadContext;Lcom/fasterxml/jackson/core/json/DupDetector;III)V",
            "method_body": "public JsonReadContext(JsonReadContext parent, DupDetector dups, int type, int lineNr, int colNr) {\nsuper();\n_parent = parent;\n_dups = dups;\n_type = type;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}",
            "method_id": 19,
            "loc": 9
        }
    ]
}