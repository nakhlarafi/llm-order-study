{
    "bug_id": 7,
    "test_id": 1,
    "test_name": "com.fasterxml.jackson.core.json.GeneratorFailTest.testFailOnWritingStringNotFieldNameChars",
    "test_body": "public void testFailOnWritingStringNotFieldNameChars() throws Exception {\n_testFailOnWritingStringNotFieldName(F, true);        \n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Should not have let com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString() be used in place of 'writeFieldName()': output = {:\"a\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.core.json.GeneratorFailTest._testFailOnWritingStringNotFieldName(GeneratorFailTest.java:79)\nat com.fasterxml.jackson.core.json.GeneratorFailTest.testFailOnWritingStringNotFieldNameChars(GeneratorFailTest.java:32)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>(Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;I[Ljava/lang/String;[Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$Bucket;III)V",
            "method_body": "private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, int flags,\nString[] symbols, Bucket[] buckets, int size, int hashSeed, int longestColl) {\n_parent = parent;\n_flags = flags;\n_canonicalize = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags);\n_symbols = symbols;\n_buckets = buckets;\n_size = size;\n_hashSeed = hashSeed;\nint arrayLen = (symbols.length);\n_sizeThreshold = _thresholdSize(arrayLen);\n_indexMask =  (arrayLen - 1);\n_longestCollisionList = longestColl;\n_dirty = false;\n}",
            "method_id": 0,
            "loc": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:<clinit>()V",
            "method_body": "final static int[] sInputCodesJsNames;\nfinal int[] table = new int[256];\nArrays.fill(table, -1);\nfor (int i = 33; i < 256; ++i) {\nif (Character.isJavaIdentifierPart((char) i)) {\ntable[i] = 0;\ntable['@'] = 0;\ntable['#'] = 0;\ntable['*'] = 0;\ntable['-'] = 0;\ntable['+'] = 0;\nsInputCodesJsNames = table;\n}",
            "method_id": 1,
            "loc": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;Ljava/lang/Object;Z)V",
            "method_body": "protected final Object _sourceRef;\nprotected byte[] _readIOBuffer = null;\nprotected byte[] _writeEncodingBuffer = null;\nprotected byte[] _base64Buffer = null;\nprotected char[] _tokenCBuffer = null;\nprotected char[] _concatCBuffer = null;\nprotected char[] _nameCopyBuffer = null;\n{\n_bufferRecycler = br;\n_sourceRef = sourceRef;\n_managedResource = managedResource;\n}",
            "method_id": 2,
            "loc": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:_verifyValueWrite(Ljava/lang/String;)V",
            "method_body": "protected void _verifyValueWrite(String typeMsg) throws IOException\nif (_cfgPrettyPrinter != null) {\nfinal int status = _writeContext.writeValue();\nif (status == JsonWriteContext.STATUS_EXPECT_NAME) {\nswitch (status) {\nc = ':';\nbreak;\nreturn;\nif (_outputTail >= _outputEnd) {\n_outputBuffer[_outputTail] = c;\n++_outputTail;\n}",
            "method_id": 3,
            "loc": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer$TableInfo:<init>(II[I[Lcom/fasterxml/jackson/core/sym/Name;[Lcom/fasterxml/jackson/core/sym/BytesToNameCanonicalizer$Bucket;III)V",
            "method_body": "public TableInfo(int count, int mainHashMask, int[] mainHash, Name[] mainNames,\n{\nthis.count = count;\nthis.mainHashMask = mainHashMask;\nthis.mainHash = mainHash;\nthis.mainNames = mainNames;\nthis.collList = collList;\nthis.collCount = collCount;\nthis.collEnd = collEnd;\nthis.longestCollisionList = longestCollisionList;\n}",
            "method_id": 4,
            "loc": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:_writeString2(I)V",
            "method_body": "private void _writeString2(final int len) throws IOException\nfinal int end = _outputTail + len;\nfinal int[] escCodes = _outputEscapes;\nfinal int escLen = escCodes.length;\nwhile (_outputTail < end) {\nchar c = _outputBuffer[_outputTail];\nif (c < escLen && escCodes[c] != 0) {\nif (++_outputTail >= end) {\nbreak output_loop;\n}",
            "method_id": 5,
            "loc": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonWriteContext:writeValue()I",
            "method_body": "public int writeValue() {\nif (_type == TYPE_OBJECT) {\n_gotName = false;\n++_index;\nreturn STATUS_OK_AFTER_COLON;\nif (_type == TYPE_ARRAY) {\n++_index;\nreturn (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n}",
            "method_id": 6,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer:<init>(IZIZ)V",
            "method_body": "private BytesToNameCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {\n_parent = null;\n_seed = seed;\n_intern = intern;\n_failOnDoS = failOnDoS;\nif (sz < MIN_HASH_SIZE) {\nif ((sz & (sz - 1)) != 0) { // only true if it's 2^N\n_tableInfo = new AtomicReference<TableInfo>(initTableInfo(sz));\n}",
            "method_id": 7,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(II)[C",
            "method_body": "public char[] allocCharBuffer(int ix, int minSize) {\nfinal int DEF_SIZE = charBufferLength(ix);\nif (minSize < DEF_SIZE) {\nminSize = DEF_SIZE;\nchar[] buffer = _charBuffers[ix];\nif (buffer == null || buffer.length < minSize) {\nbuffer = calloc(minSize);\nreturn buffer;\n}",
            "method_id": 8,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.GeneratorBase:<init>(ILcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/json/JsonWriteContext;)V",
            "method_body": "public final static int SURR1_FIRST = 0xD800;\nprotected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask()\nprotected final String WRITE_BINARY = \"write a binary value\";\nprotected final String WRITE_BOOLEAN = \"write a boolean value\";\nprotected final String WRITE_NULL = \"write a null\";\nprotected final String WRITE_NUMBER = \"write a number\";\nprotected final String WRITE_RAW = \"write a raw (unencoded) value\";\nprotected final String WRITE_STRING = \"write a string\";\n* {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s",
            "method_id": 9,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.GeneratorBase:<clinit>()V",
            "method_body": "public final static int SURR1_FIRST = 0xD800;\nprotected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask()\nprotected final String WRITE_BINARY = \"write a binary value\";\nprotected final String WRITE_BOOLEAN = \"write a boolean value\";\nprotected final String WRITE_NULL = \"write a null\";\nprotected final String WRITE_NUMBER = \"write a number\";\nprotected final String WRITE_RAW = \"write a raw (unencoded) value\";\nprotected final String WRITE_STRING = \"write a string\";\n* {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s",
            "method_id": 10,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:writeString(Ljava/lang/String;)V",
            "method_body": "public void writeString(String text) throws IOException\n_verifyValueWrite(WRITE_STRING);\nif (text == null) {\nif (_outputTail >= _outputEnd) {\n_outputBuffer[_outputTail++] = '\"';\n_writeString(text);\nif (_outputTail >= _outputEnd) {\n_outputBuffer[_outputTail++] = '\"';\n}",
            "method_id": 11,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:_writeString(Ljava/lang/String;)V",
            "method_body": "private void _writeString(String text) throws IOException\nfinal int len = text.length();\nif (len > _outputEnd) { // Let's reserve space for entity at begin/end\nif ((_outputTail + len) > _outputEnd) {\ntext.getChars(0, len, _outputBuffer, _outputTail);\nif (_characterEscapes != null) {\n} else if (_maximumNonEscapedChar != 0) {\n_writeString2(len);\n}",
            "method_id": 12,
            "loc": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_getBufferRecycler()Lcom/fasterxml/jackson/core/util/BufferRecycler;",
            "method_body": "public BufferRecycler _getBufferRecycler()\nSoftReference<BufferRecycler> ref = _recyclerRef.get();\nBufferRecycler br = (ref == null) ? null : ref.get();\nif (br == null) {\nbr = new BufferRecycler();\n_recyclerRef.set(new SoftReference<BufferRecycler>(br));\nreturn br;\n}",
            "method_id": 13,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/JsonFactory;Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef\nprotected final transient CharsToNameCanonicalizer _rootCharSymbols = CharsToNameCanonicalizer.createRoot();\nprotected final transient BytesToNameCanonicalizer _rootByteSymbols = BytesToNameCanonicalizer.createRoot();\nprotected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;\nprotected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;\nprotected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;\nprotected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;\npublic JsonFactory() { this(null); }",
            "method_id": 14,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>()V",
            "method_body": "private CharsToNameCanonicalizer() {\n_canonicalize = true;\n_flags = -1;\n_dirty = true;\n_hashSeed = 0;\n_longestCollisionList = 0;\ninitTables(DEFAULT_T_SIZE);\n}",
            "method_id": 15,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:initTables(I)V",
            "method_body": "private void initTables(int initialSize)\n_symbols = new String[initialSize];\n_buckets = new Bucket[initialSize >> 1];\n_indexMask = initialSize - 1;\n_size = 0;\n_longestCollisionList = 0;\n_sizeThreshold = _thresholdSize(initialSize);\n}",
            "method_id": 16,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.GeneratorBase:<init>(ILcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "protected GeneratorBase(int features, ObjectCodec codec) {\nsuper();\n_features = features;\n_objectCodec = codec;\nDupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n_writeContext = JsonWriteContext.createRootContext(dups);\n_cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);\n}",
            "method_id": 17,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:writeStartObject()V",
            "method_body": "public void writeStartObject() throws IOException, JsonGenerationException\n_verifyValueWrite(\"start an object\");\n_writeContext = _writeContext.createChildObjectContext();\nif (_cfgPrettyPrinter != null) {\nif (_outputTail >= _outputEnd) {\n_outputBuffer[_outputTail++] = '{';\n}\n}",
            "method_id": 18,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\n}",
            "method_id": 19,
            "loc": 7
        }
    ]
}