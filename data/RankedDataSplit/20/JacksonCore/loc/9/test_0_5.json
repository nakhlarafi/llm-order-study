{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestJsonParser.testGetValueAsTextBytes",
    "test_body": "public void testGetValueAsTextBytes() throws Exception\n{\nJsonFactory f = new JsonFactory();\n_testGetValueAsText(f, true, false);\n_testGetValueAsText(f, true, true);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<a> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.json.TestJsonParser._testGetValueAsText(TestJsonParser.java:546)\nat com.fasterxml.jackson.core.json.TestJsonParser.testGetValueAsTextBytes(TestJsonParser.java:518)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeLatin1()[I",
            "method_body": "public static int[] getInputCodeLatin1() { return sInputCodes; }\npublic static int[] getInputCodeLatin1() { return sInputCodes; }",
            "method_id": 100,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeUtf8()[I",
            "method_body": "public static int[] getInputCodeUtf8() { return sInputCodesUTF8; }\npublic static int[] getInputCodeUtf8() { return sInputCodesUTF8; }",
            "method_id": 101,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 102,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inRoot()Z",
            "method_body": "public final boolean inRoot() { return _type == TYPE_ROOT; }\npublic final boolean inRoot() { return _type == TYPE_ROOT; }",
            "method_id": 103,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inObject()Z",
            "method_body": "public final boolean inObject() { return _type == TYPE_OBJECT; }\npublic final boolean inObject() { return _type == TYPE_OBJECT; }",
            "method_id": 104,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:<init>(I)V",
            "method_body": "protected JsonParser(int features) { _features = features; }\nprotected JsonParser(int features) { _features = features; }",
            "method_id": 105,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:<init>(I)V",
            "method_body": "protected ParserMinimalBase(int features) { super(features); }\nprotected ParserMinimalBase(int features) { super(features); }",
            "method_id": 106,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:setCurrentLength(I)V",
            "method_body": "public void setCurrentLength(int len) { _currentSize = len; }\npublic void setCurrentLength(int len) { _currentSize = len; }",
            "method_id": 107,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:getCurrentName()Ljava/lang/String;",
            "method_body": "@Override public String getCurrentName() { return _currentName; }\n@Override public String getCurrentName() { return _currentName; }",
            "method_id": 108,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:id()I",
            "method_body": "public final int id() { return _id; }\npublic final int id() { return _id; }",
            "method_id": 109,
            "loc": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:isScalarValue()Z",
            "method_body": "public final boolean isScalarValue() { return _isScalar; }\npublic final boolean isScalarValue() { return _isScalar; }",
            "method_id": 110,
            "loc": 2
        }
    ]
}