{
    "bug_id": 9,
    "test_id": 1,
    "test_name": "com.fasterxml.jackson.core.json.TestJsonParser.testGetValueAsTextChars",
    "test_body": "public void testGetValueAsTextChars() throws Exception\n{\nJsonFactory f = new JsonFactory();\n_testGetValueAsText(f, false, false);\n_testGetValueAsText(f, false, true);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<a> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.json.TestJsonParser._testGetValueAsText(TestJsonParser.java:546)\nat com.fasterxml.jackson.core.json.TestJsonParser.testGetValueAsTextChars(TestJsonParser.java:525)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:createParser(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "public JsonParser createParser(String content) throws IOException, JsonParseException {\nfinal int strLen = content.length();\nif (_inputDecorator != null || strLen > 0x8000 || !canUseCharArrays()) {\nIOContext ctxt = _createContext(content, true);\nchar[] buf = ctxt.allocTokenBuffer(strLen);\ncontent.getChars(0, strLen, buf, 0);\nreturn _createParser(buf, 0, strLen, ctxt, true);\n}",
            "method_id": 20,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>()V",
            "method_body": "private CharsToNameCanonicalizer() {\n_canonicalize = true;\n_flags = -1;\n_dirty = true;\n_hashSeed = 0;\n_longestCollisionList = 0;\ninitTables(DEFAULT_T_SIZE);\n}",
            "method_id": 21,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:initTables(I)V",
            "method_body": "private void initTables(int initialSize)\n_symbols = new String[initialSize];\n_buckets = new Bucket[initialSize >> 1];\n_indexMask = initialSize - 1;\n_size = 0;\n_longestCollisionList = 0;\n_sizeThreshold = _thresholdSize(initialSize);\n}",
            "method_id": 22,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:resetInt(ZI)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected final JsonToken resetInt(boolean negative, int intLen)\n_numberNegative = negative;\n_intLength = intLen;\n_fractLength = 0;\n_expLength = 0;\n_numTypesValid = NR_UNKNOWN; // to force parsing\nreturn JsonToken.VALUE_NUMBER_INT;\n}",
            "method_id": 23,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:intern(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String intern(String input) {\nString result = get(input);\nif (result != null) { return result; }\nif (size() >= MAX_ENTRIES) {\nresult = input.intern();\nput(result, result);\nreturn result;\n}",
            "method_id": 24,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:findSymbol([CIII)Ljava/lang/String;",
            "method_body": "public String findSymbol(char[] buffer, int start, int len, int h)\nif (len < 1) { // empty Strings are simplest to handle up front\nif (!_canonicalize) { // [JACKSON-259]\nint index = _hashToIndex(h);\nString sym = _symbols[index];\nif (sym != null) {\nreturn _addSymbol(buffer, start, len, h, index);\n}",
            "method_id": 25,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithShared([CII)V",
            "method_body": "public void resetWithShared(char[] buf, int start, int len)\n_resultString = null;\n_resultArray = null;\n_inputBuffer = buf;\n_inputStart = start;\n_inputLen = len;\nif (_hasSegments) {\n}",
            "method_id": 26,
            "loc": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\n}",
            "method_id": 27,
            "loc": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\n}",
            "method_id": 28,
            "loc": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_skipWSOrEnd()I",
            "method_body": "private final int _skipWSOrEnd() throws IOException\nif (_inputPtr >= _inputEnd) {\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 29,
            "loc": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/JsonFactory;Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "protected final transient com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer _rootByteSymbols\nprotected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;\nprotected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;\nprotected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;\nprotected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;\npublic JsonFactory() { this(null); }",
            "method_id": 30,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<clinit>()V",
            "method_body": "public final static String FORMAT_NAME_JSON = \"JSON\";\nprotected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();\nprotected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();\nprotected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();\nprivate final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}",
            "method_id": 31,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults() {\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) { flags |= f.getMask(); }\nreturn flags;\n}",
            "method_id": 32,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:<clinit>()V",
            "method_body": "private final static char[] HC = \"0123456789ABCDEF\".toCharArray();\nint len = HC.length;\nHB = new byte[len];\nfor (int i = 0; i < len; ++i) {\nHB[i] = (byte) HC[i];\n}",
            "method_id": 33,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext createChildObjectContext(int lineNr, int colNr) {\nJsonReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new JsonReadContext(this,\nreturn ctxt;\n}",
            "method_id": 34,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:_hashToIndex(I)I",
            "method_body": "public int _hashToIndex(int rawHash) {\nrawHash += (rawHash >>> 15);\nrawHash ^= (rawHash << 7);\nrawHash += (rawHash >>> 3);\nreturn (rawHash & _indexMask);\n}",
            "method_id": 35,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:copyArrays()V",
            "method_body": "private void copyArrays() {\nfinal String[] oldSyms = _symbols;\n_symbols = Arrays.copyOf(oldSyms, oldSyms.length);\nfinal Bucket[] oldBuckets = _buckets;\n_buckets = Arrays.copyOf(oldBuckets, oldBuckets.length);\n}",
            "method_id": 36,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:getValueAsString(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getValueAsString(String defaultValue) throws IOException {\nif (_currToken == JsonToken.VALUE_STRING) {\nif (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\nreturn defaultValue;\n}",
            "method_id": 37,
            "loc": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:createRoot()Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "public static CharsToNameCanonicalizer createRoot() {\nlong now = System.currentTimeMillis();\nint seed = (((int) now) + ((int) (now >>> 32))) | 1;\nreturn createRoot(seed);\n}",
            "method_id": 38,
            "loc": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:createRoot()Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;",
            "method_body": "public static ByteQuadsCanonicalizer createRoot() {\nlong now = System.currentTimeMillis();\nint seed = (((int) now) + ((int) (now >>> 32))) | 1;\nreturn createRoot(seed);\n}",
            "method_id": 39,
            "loc": 5
        }
    ]
}