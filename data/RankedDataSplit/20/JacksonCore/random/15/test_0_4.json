{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches",
    "test_body": "public void testNotAllowMultipleMatches() throws Exception\n{\nString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\nJsonParser p0 = JSON_F.createParser(jsonString);\nJsonParser p = new FilteringParserDelegate(p0,\nnew NameMatchFilter(\"value\"),\nfalse, // includePath\nfalse // multipleMatches -false\n);\nString result = readAndWrite(JSON_F, p);\nassertEquals(aposToQuotes(\"3\"), result);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches(BasicParserFilteringTest.java:118)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilterContext:createRootContext(Lcom/fasterxml/jackson/core/filter/TokenFilter;)Lcom/fasterxml/jackson/core/filter/TokenFilterContext;",
            "method_body": "public static TokenFilterContext createRootContext(TokenFilter filter) {\nreturn new TokenFilterContext(TYPE_ROOT, null, filter, true);\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }\npublic JsonFactory(ObjectCodec oc) { _objectCodec = oc; }",
            "method_id": 81
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator:copyCurrentEvent(Lcom/fasterxml/jackson/core/JsonParser;)V",
            "method_body": "public void copyCurrentEvent(JsonParser p) throws IOException\nJsonToken t = p.getCurrentToken();\nif (t == null) {\nswitch (t.id()) {\nNumberType n = p.getNumberType();\nif (n == NumberType.INT) {\nwriteNumber(p.getIntValue());\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:getMask()I",
            "method_body": "public int getMask() { return _mask; }\npublic int getMask() { return _mask; }",
            "method_id": 83
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:releaseCharBuffer(I[C)V",
            "method_body": "public void releaseCharBuffer(int ix, char[] buffer) {\n_charBuffers[ix] = buffer;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:<clinit>()V",
            "method_body": "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();\n* Value of {@link #_inputPtr} at the time when the first character of",
            "method_id": 85
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 86
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberOutput:<clinit>()V",
            "method_body": "private final static char NC = (char) 0;\nprivate static int MILLION = 1000000;\nprivate static int BILLION = 1000000000;\nprivate static long TEN_BILLION_L = 10000000000L;\nprivate static long THOUSAND_L = 1000L;\nprivate static long MIN_INT_AS_LONG = (long) Integer.MIN_VALUE;\nprivate static long MAX_INT_AS_LONG = (long) Integer.MAX_VALUE;\nfinal static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);\nprivate final static char[] LEAD_3 = new char[4000];\nprivate final static char[] FULL_3 = new char[4000];\nint ix = 0;\nfor (int i1 = 0; i1 < 10; ++i1) {\nchar f1 = (char) ('0' + i1);\nchar l1 = (i1 == 0) ? NC : f1;\nfor (int i2 = 0; i2 < 10; ++i2) {\nchar f2 = (char) ('0' + i2);\nchar l2 = (i1 == 0 && i2 == 0) ? NC : f2;\nfor (int i3 = 0; i3 < 10; ++i3) {\nchar f3 = (char) ('0' + i3);\nLEAD_3[ix] = l1;\nLEAD_3[ix+1] = l2;\nLEAD_3[ix+2] = f3;\nFULL_3[ix] = f1;\nFULL_3[ix+1] = f2;\nFULL_3[ix+2] = f3;\nix += 4;\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:setCurrentName(Ljava/lang/String;)V",
            "method_body": "public void setCurrentName(String name) throws JsonProcessingException {\n_currentName = name;\nif (_dups != null) { _checkDup(_dups, name); }\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>(Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;I[Ljava/lang/String;[Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$Bucket;III)V",
            "method_body": "private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, int flags,\nString[] symbols, Bucket[] buckets, int size, int hashSeed, int longestColl) {\n_parent = parent;\n_flags = flags;\n_canonicalize = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags);\n_symbols = symbols;\n_buckets = buckets;\n_size = size;\n_hashSeed = hashSeed;\nint arrayLen = (symbols.length);\n_sizeThreshold = _thresholdSize(arrayLen);\n_indexMask =  (arrayLen - 1);\n_longestCollisionList = longestColl;\n_dirty = false;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:<clinit>()V",
            "method_body": "public final static TokenFilter INCLUDE_ALL = new TokenFilter();\nprotected TokenFilter() { }",
            "method_id": 90
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_updateNameLocation()V",
            "method_body": "private final void _updateNameLocation()\nint ptr = _inputPtr;\n_nameStartOffset = ptr;\n_nameStartRow = _currInputRow;\n_nameStartCol = ptr - _currInputRowStart;\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getIntValue()I",
            "method_body": "public int getIntValue() throws IOException\nif ((_numTypesValid & NR_INT) == 0) {\nreturn _numberInt;\n}",
            "method_id": 92
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_releaseBuffers()V",
            "method_body": "protected void _releaseBuffers() throws IOException {\n_textBuffer.releaseBuffers();\nchar[] buf = _nameCopyBuffer;\nif (buf != null) {\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inArray()Z",
            "method_body": "public abstract JsonStreamContext getParent();\npublic final boolean inArray() { return _type == TYPE_ARRAY; }",
            "method_id": 94
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:constructTextBuffer()Lcom/fasterxml/jackson/core/util/TextBuffer;",
            "method_body": "public TextBuffer constructTextBuffer() {\nreturn new TextBuffer(_bufferRecycler);\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<clinit>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 96
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 97
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_nextAfterName()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final JsonToken _nextAfterName()\n_nameCopied = false; // need to invalidate if it was copied\nJsonToken t = _nextToken;\n_nextToken = null;\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = t);\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;I)V",
            "method_body": "JsonToken(String token, int id)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n_serialized = token;\n_serializedChars = token.toCharArray();\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n_id = id;\n_isBoolean = (id == JsonTokenId.ID_FALSE || id == JsonTokenId.ID_TRUE);\n_isNumber = (id == JsonTokenId.ID_NUMBER_INT || id == JsonTokenId.ID_NUMBER_FLOAT);\n_isStructStart = (id == JsonTokenId.ID_START_OBJECT || id == JsonTokenId.ID_START_ARRAY);\n_isStructEnd = (id == JsonTokenId.ID_END_OBJECT || id == JsonTokenId.ID_END_ARRAY);\n_isScalar = !_isStructStart && !_isStructEnd\n}",
            "method_id": 99
        }
    ]
}