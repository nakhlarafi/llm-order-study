{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "com.fasterxml.jackson.core.sym.TestSymbolTables.testSyntheticWithBytesNew",
    "test_body": "public void testSyntheticWithBytesNew() throws IOException\n{\n// pass seed, to keep results consistent:\nfinal int SEED = 33333;\nByteQuadsCanonicalizer symbols =\nByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n71: final int COUNT = 12000;\nfor (int i = 0; i < COUNT; ++i) {\nString id = fieldNameFor(i);\nint[] quads = calcQuads(id.getBytes(\"UTF-8\"));\nsymbols.addName(id, quads, quads.length);\n}\nassertEquals(COUNT, symbols.size());\nassertEquals(16384, symbols.bucketCount());\n80: // fragile, but essential to verify low collision counts;\n// anywhere between 70-80% primary matches\nassertEquals(8534, symbols.primaryCount());\n// secondary between 10-20%",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<8534> but was:<8524>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat com.fasterxml.jackson.core.sym.TestSymbolTables.testSyntheticWithBytesNew(TestSymbolTables.java:82)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:nukeSymbols(Z)V",
            "method_body": "private void nukeSymbols(boolean fill) {\n_count = 0;\n_spilloverEnd = _spilloverStart();\n_longNameOffset = _hashSize << 3;\nif (fill) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_spilloverStart()I",
            "method_body": "private final int _spilloverStart() {\nint offset = _hashSize;\nreturn (offset << 3) - offset;\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_calcTertiaryShift(I)I",
            "method_body": "static int _calcTertiaryShift(int primarySlots)\nint tertSlots = (primarySlots) >> 2;\nif (tertSlots < 64) {\nreturn 4;\nif (tertSlots <= 256) { // buckets of 8 slots (up to 256 == 32 x 8)\nreturn 5;\nif (tertSlots <= 1024) { // buckets of 16 slots (up to 1024 == 64 x 16)\nreturn 6;\nreturn 7;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:<init>(III[I[Ljava/lang/String;II)V",
            "method_body": "public TableInfo(int size, int count, int tertiaryShift,\n{\nthis.size = size;\nthis.count = count;\nthis.tertiaryShift = tertiaryShift;\nthis.mainHash = mainHash;\nthis.names = names;\nthis.spilloverEnd = spilloverEnd;\nthis.longNameOffset = longNameOffset;\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<init>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 24
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<clinit>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 25
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:primaryCount()I",
            "method_body": "public int primaryCount()\nint count = 0;\nfor (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {\nif (_hashArea[offset] != 0) {\n++count;\nreturn count;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_appendLongName([II)I",
            "method_body": "private int _appendLongName(int[] quads, int qlen)\nint start = _longNameOffset;\nif ((start + qlen) > _hashArea.length) {\nint toAdd = (start + qlen) - _hashArea.length;\nint minAdd = Math.min(4096, _hashSize);\nint newSize = _hashArea.length + Math.max(toAdd, minAdd);\n_hashArea = Arrays.copyOf(_hashArea, newSize);\nSystem.arraycopy(quads, 0, _hashArea, start, qlen);\n_longNameOffset += qlen;\nreturn start;\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:calcHash(II)I",
            "method_body": "public int calcHash(int q1, int q2)\nint hash = q1;\nhash += (hash >>> 15); // try mixing first and second byte pairs first\nhash ^= (hash >>> 9); // as well as lowest 2 bytes\nhash += (q2 * MULT); // then add second quad\nhash ^= _seed;\nhash += (hash >>> 16); // and shuffle some more\nhash ^= (hash >>> 4);\nhash += (hash << 3);\nreturn hash;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:calcHash(III)I",
            "method_body": "public int calcHash(int q1, int q2, int q3)\nint hash = q1 ^ _seed;\nhash += (hash >>> 9);\nhash *= MULT3;\nhash += q2;\nhash *= MULT;\nhash += (hash >>> 15);\nhash ^= q3;\nhash += (hash >>> 4);\nhash += (hash >>> 15);\nhash ^= (hash << 9);\nreturn hash;\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:calcHash([II)I",
            "method_body": "public int calcHash(int[] q, int qlen)\nif (qlen < 4) {\nint hash = q[0] ^ _seed;\nhash += (hash >>> 9);\nhash += q[1];\nhash += (hash >>> 15);\nhash *= MULT;\nhash ^= q[2];\nhash += (hash >>> 4);\nfor (int i = 3; i < qlen; ++i) {\nint next = q[i];\nnext = next ^ (next >> 21);\nhash += next;\nhash *= MULT2;\nhash += (hash >>> 19);\nhash ^= (hash << 5);\nreturn hash;\n}",
            "method_id": 30
        }
    ]
}