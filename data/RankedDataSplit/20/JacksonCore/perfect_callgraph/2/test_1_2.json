{
    "bug_id": 2,
    "test_id": 1,
    "test_name": "com.fasterxml.jackson.core.json.TestParserErrorHandling.testMangledNumbersChars",
    "test_body": "public void testMangledNumbersChars() throws Exception {\n_testMangledNumbers(false);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Should have gotten an exception; instead got token: VALUE_NUMBER_INT\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.core.json.TestParserErrorHandling._testMangledNumbers(TestParserErrorHandling.java:93)\nat com.fasterxml.jackson.core.json.TestParserErrorHandling.testMangledNumbersChars(TestParserErrorHandling.java:26)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:calloc(I)[C",
            "method_body": "private char[] calloc(int size)\nreturn new char[size];\n}",
            "method_id": 40
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler$ByteBufferType:<init>(Ljava/lang/String;II)V",
            "method_body": "ByteBufferType(int size) { this.size = size; }\nByteBufferType(int size) { this.size = size; }",
            "method_id": 41
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler$ByteBufferType:<clinit>()V",
            "method_body": "public final static int DEFAULT_WRITE_CONCAT_BUFFER_LEN = 2000;\npublic enum ByteBufferType {\nREAD_IO_BUFFER(4000)\n,WRITE_ENCODING_BUFFER(4000)\n,WRITE_CONCAT_BUFFER(2000)\n,BASE64_CODEC_BUFFER(2000)\nByteBufferType(int size) { this.size = size; }\n}",
            "method_id": 42
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler$CharBufferType:<init>(Ljava/lang/String;II)V",
            "method_body": "CharBufferType(int size) { this.size = size; }\nCharBufferType(int size) { this.size = size; }",
            "method_id": 43
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:<clinit>()V",
            "method_body": "final static int[] sInputCodes;\nfinal int[] table = new int[256];\nfor (int i = 0; i < 32; ++i) {\ntable[i] = -1;\ntable['\"'] = 1;\ntable['\\\\'] = 1;\nsInputCodes = table;\n}",
            "method_id": 44
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeLatin1()[I",
            "method_body": "public static int[] getInputCodeLatin1() { return sInputCodes; }\npublic static int[] getInputCodeLatin1() { return sInputCodes; }",
            "method_id": 45
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeWS()[I",
            "method_body": "public static int[] getInputCodeWS() { return sInputCodesWS; }\npublic static int[] getInputCodeWS() { return sInputCodesWS; }",
            "method_id": 46
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 47
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inObject()Z",
            "method_body": "public final boolean inObject() { return _type == TYPE_OBJECT; }\npublic final boolean inObject() { return _type == TYPE_OBJECT; }",
            "method_id": 48
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:<init>()V",
            "method_body": "protected JsonParser() { }\nprotected JsonParser() { }",
            "method_id": 49
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:<init>()V",
            "method_body": "protected ParserMinimalBase() { }\nprotected ParserMinimalBase() { }",
            "method_id": 50
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<init>(Lcom/fasterxml/jackson/core/io/IOContext;I)V",
            "method_body": "protected boolean _closed;\nprotected int _inputPtr = 0;\nprotected int _inputEnd = 0;\nprotected long _currInputProcessed = 0L;\nprotected int _currInputRow = 1;\nprotected int _currInputRowStart = 0;\nprotected long _tokenInputTotal = 0;\nprotected int _tokenInputRow = 1;\nprotected int _tokenInputCol = 0;\n* using {@link #getTextCharacters} method (instead of String",
            "method_id": 51
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<clinit>()V",
            "method_body": "protected byte[] _binaryValue;\nfinal static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);\nfinal static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\nfinal static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\nfinal static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\nfinal static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);\nfinal static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);\nfinal static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);\nfinal static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);\nprotected int _numTypesValid = NR_UNKNOWN;\nsuper();\n_features = features;\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\n_parsingContext = JsonReadContext.createRootContext();\n}",
            "method_id": 52
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:resetInt(ZI)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected final JsonToken resetInt(boolean negative, int intLen)\n_numberNegative = negative;\n_intLength = intLen;\n_fractLength = 0;\n_expLength = 0;\n_numTypesValid = NR_UNKNOWN; // to force parsing\nreturn JsonToken.VALUE_NUMBER_INT;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;)V",
            "method_body": "public TextBuffer(BufferRecycler allocator)\n{\n_allocator = allocator;\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<clinit>()V",
            "method_body": "final static char[] NO_CHARS = new char[0];\nprivate boolean _hasSegments = false;\n* Amount of characters in segments in {@link _segments}",
            "method_id": 55
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:<init>(Lcom/fasterxml/jackson/core/json/JsonReadContext;III)V",
            "method_body": "public JsonReadContext(JsonReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}",
            "method_id": 56
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createRootContext()Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public static JsonReadContext createRootContext()\nreturn new JsonReadContext(null, TYPE_ROOT, 1, 0);\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:expectComma()Z",
            "method_body": "public boolean expectComma()\nint ix = ++_index; // starts from -1\nreturn (_type != TYPE_ROOT && ix > 0);\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "JsonToken(String token)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n_serialized = token;\n_serializedChars = token.toCharArray();\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n}",
            "method_id": 59
        }
    ]
}