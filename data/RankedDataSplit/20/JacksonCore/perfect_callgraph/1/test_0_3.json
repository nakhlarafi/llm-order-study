{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestParserNonStandard.testAllowNaN",
    "test_body": "public void testAllowNaN() throws Exception {\n_testAllowNaN(false);\n_testAllowNaN(true);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected an exception with one of substrings ([can not be represented as BigDecimal]): got one with message \"null\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.test.BaseTest.verifyException(BaseTest.java:355)\nat com.fasterxml.jackson.core.json.TestParserNonStandard._testAllowNaN(TestParserNonStandard.java:394)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 60
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inObject()Z",
            "method_body": "public final boolean inObject() { return _type == TYPE_OBJECT; }\npublic final boolean inObject() { return _type == TYPE_OBJECT; }",
            "method_id": 61
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:<init>()V",
            "method_body": "protected JsonParser() { }\nprotected JsonParser() { }",
            "method_id": 62
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:isEnabled(Lcom/fasterxml/jackson/core/JsonParser$Feature;)Z",
            "method_body": "public boolean isEnabled(Feature f) {\nreturn (_features & f.getMask()) != 0;\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:_constructError(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParseException;",
            "method_body": "protected JsonParseException _constructError(String msg)\nreturn new JsonParseException(msg, getCurrentLocation());\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:<init>()V",
            "method_body": "protected ParserMinimalBase() { }\nprotected ParserMinimalBase() { }",
            "method_id": 65
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:_reportError(Ljava/lang/String;)V",
            "method_body": "protected final void _reportError(String msg)\nthrow _constructError(msg);\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<init>(Lcom/fasterxml/jackson/core/io/IOContext;I)V",
            "method_body": "protected char[] _nameCopyBuffer = null;\nprotected boolean _nameCopied = false;\nprotected ByteArrayBuilder _byteArrayBuilder = null;\n* {@link #getBinaryValue} will not need to decode data more",
            "method_id": 67
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<clinit>()V",
            "method_body": "protected byte[] _binaryValue;\nfinal static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);\nfinal static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\nfinal static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\nfinal static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\nfinal static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);\nfinal static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);\nfinal static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);\nfinal static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);\nprotected int _numTypesValid = NR_UNKNOWN;\nsuper();\n_features = features;\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\n_parsingContext = JsonReadContext.createRootContext();\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:close()V",
            "method_body": "public void close() throws IOException\nif (!_closed) {\n_closed = true;\n_closeInput();\n_releaseBuffers();\n}\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getCurrentLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getCurrentLocation()\nint col = _inputPtr - _currInputRowStart + 1; // 1-based\nreturn new JsonLocation(_ioContext.getSourceReference(),\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_releaseBuffers()V",
            "method_body": "protected void _releaseBuffers() throws IOException\n_textBuffer.releaseBuffers();\nchar[] buf = _nameCopyBuffer;\nif (buf != null) {\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:resetAsNaN(Ljava/lang/String;D)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected final JsonToken resetAsNaN(String valueStr, double value)\n_textBuffer.resetWithString(valueStr);\n_numberDouble = value;\n_numTypesValid = NR_DOUBLE;\nreturn JsonToken.VALUE_NUMBER_FLOAT;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getDoubleValue()D",
            "method_body": "public double getDoubleValue() throws IOException, JsonParseException\nif ((_numTypesValid & NR_DOUBLE) == 0) {\nreturn _numberDouble;\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getDecimalValue()Ljava/math/BigDecimal;",
            "method_body": "public BigDecimal getDecimalValue() throws IOException, JsonParseException\nif ((_numTypesValid & NR_BIGDECIMAL) == 0) {\nif (_numTypesValid == NR_UNKNOWN) {\nif ((_numTypesValid & NR_BIGDECIMAL) == 0) {\nconvertNumberToBigDecimal();\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:convertNumberToBigDecimal()V",
            "method_body": "protected void convertNumberToBigDecimal()\nif ((_numTypesValid & NR_DOUBLE) != 0) {\n_numberBigDecimal = NumberInput.parseBigDecimal(getText());\n}",
            "method_id": 75
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;ILjava/io/Reader;Lcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;)V",
            "method_body": "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\nsuper(ctxt, features);\n_reader = r;\n_inputBuffer = ctxt.allocTokenBuffer();\n_objectCodec = codec;\n_symbols = st;\n_hashSeed = st.hashSeed();\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:loadMore()Z",
            "method_body": "protected boolean loadMore() throws IOException\n_currInputProcessed += _inputEnd;\n_currInputRowStart -= _inputEnd;\nif (_reader != null) {\nint count = _reader.read(_inputBuffer, 0, _inputBuffer.length);\nif (count > 0) {\n_inputPtr = 0;\n_inputEnd = count;\nreturn true;\n}",
            "method_id": 77
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_closeInput()V",
            "method_body": "protected void _closeInput() throws IOException\nif (_reader != null) {\nif (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {\n_reader.close();\n_reader = null;\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_releaseBuffers()V",
            "method_body": "protected void _releaseBuffers()\nsuper._releaseBuffers();\nchar[] buf = _inputBuffer;\nif (buf != null) {\n_inputBuffer = null;\n_ioContext.releaseTokenBuffer(buf);\n}",
            "method_id": 79
        }
    ]
}