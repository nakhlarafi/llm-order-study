{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches",
    "test_body": "public void testNotAllowMultipleMatches() throws Exception\n{\nString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\nJsonParser p0 = JSON_F.createParser(jsonString);\nJsonParser p = new FilteringParserDelegate(p0,\nnew NameMatchFilter(\"value\"),\nfalse, // includePath\nfalse // multipleMatches -false\n);\nString result = readAndWrite(JSON_F, p);\nassertEquals(aposToQuotes(\"3\"), result);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches(BasicParserFilteringTest.java:118)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createChildArrayContext(II)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext createChildArrayContext(int lineNr, int colNr) {\nJsonReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new JsonReadContext(this,\nreturn ctxt;\n}",
            "method_id": 140
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext createChildObjectContext(int lineNr, int colNr) {\nJsonReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new JsonReadContext(this,\nreturn ctxt;\nctxt.reset(TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}",
            "method_id": 141
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:getCurrentName()Ljava/lang/String;",
            "method_body": "@Override public String getCurrentName() { return _currentName; }\n@Override public String getCurrentName() { return _currentName; }",
            "method_id": 142
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:clearAndGetParent()Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext clearAndGetParent() {\n_currentValue = null;\nreturn _parent;\n}",
            "method_id": 143
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:expectComma()Z",
            "method_body": "public boolean expectComma() {\nint ix = ++_index; // starts from -1\nreturn (_type != TYPE_ROOT && ix > 0);\n}",
            "method_id": 144
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:setCurrentName(Ljava/lang/String;)V",
            "method_body": "public void setCurrentName(String name) throws JsonProcessingException {\n_currentName = name;\nif (_dups != null) { _checkDup(_dups, name); }\n}",
            "method_id": 145
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;I)V",
            "method_body": "JsonToken(String token, int id)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n_serialized = token;\n_serializedChars = token.toCharArray();\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n_id = id;\n_isBoolean = (id == JsonTokenId.ID_FALSE || id == JsonTokenId.ID_TRUE);\n_isNumber = (id == JsonTokenId.ID_NUMBER_INT || id == JsonTokenId.ID_NUMBER_FLOAT);\n_isStructStart = (id == JsonTokenId.ID_START_OBJECT || id == JsonTokenId.ID_START_ARRAY);\n_isStructEnd = (id == JsonTokenId.ID_END_OBJECT || id == JsonTokenId.ID_END_ARRAY);\n_isScalar = !_isStructStart && !_isStructEnd\n}",
            "method_id": 146
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:id()I",
            "method_body": "public final int id() { return _id; }\npublic final int id() { return _id; }",
            "method_id": 147
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberOutput:<clinit>()V",
            "method_body": "private final static char NC = (char) 0;\nprivate static int MILLION = 1000000;\nprivate static int BILLION = 1000000000;\nprivate static long TEN_BILLION_L = 10000000000L;\nprivate static long THOUSAND_L = 1000L;\nprivate static long MIN_INT_AS_LONG = (long) Integer.MIN_VALUE;\nprivate static long MAX_INT_AS_LONG = (long) Integer.MAX_VALUE;\nfinal static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);\nprivate final static char[] LEAD_3 = new char[4000];\nprivate final static char[] FULL_3 = new char[4000];\nint ix = 0;\nfor (int i1 = 0; i1 < 10; ++i1) {\nchar f1 = (char) ('0' + i1);\nchar l1 = (i1 == 0) ? NC : f1;\nfor (int i2 = 0; i2 < 10; ++i2) {\nchar f2 = (char) ('0' + i2);\nchar l2 = (i1 == 0 && i2 == 0) ? NC : f2;\nfor (int i3 = 0; i3 < 10; ++i3) {\nchar f3 = (char) ('0' + i3);\nLEAD_3[ix] = l1;\nLEAD_3[ix+1] = l2;\nLEAD_3[ix+2] = f3;\nFULL_3[ix] = f1;\nFULL_3[ix+1] = f2;\nFULL_3[ix+2] = f3;\nix += 4;\n}",
            "method_id": 148
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberOutput:outputInt(I[CI)I",
            "method_body": "public static int outputInt(int v, char[] b, int off)\nif (v < 0) {\nif (v < MILLION) { // at most 2 triplets...\nif (v < 1000) {\nif (v < 10) {\nb[off++] = (char) ('0' + v);\nreturn off;\n}",
            "method_id": 149
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 150
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:parseInt([CII)I",
            "method_body": "public static int parseInt(char[] ch, int off, int len)\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 151
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<init>()V",
            "method_body": "private InternCache() { super(MAX_ENTRIES, 0.8f, 4); }\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 152
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<clinit>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 153
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:intern(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String intern(String input) {\nString result = get(input);\nif (result != null) { return result; }\nif (size() >= MAX_ENTRIES) {\nresult = input.intern();\nput(result, result);\nreturn result;\n}",
            "method_id": 154
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$NumberType:<clinit>()V",
            "method_body": "private final static int MIN_BYTE_I = (int) Byte.MIN_VALUE;\npublic enum NumberType {\nINT, LONG, BIG_INTEGER, FLOAT, DOUBLE, BIG_DECIMAL\n};",
            "method_id": 155
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:<clinit>()V",
            "method_body": "public final static TokenFilter INCLUDE_ALL = new TokenFilter();\nprotected TokenFilter() { }",
            "method_id": 156
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterStartObject()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter filterStartObject() {\nreturn this;\n}",
            "method_id": 157
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterStartArray()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter filterStartArray() {\nreturn this;\n}",
            "method_id": 158
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterFinishArray()V",
            "method_body": "public void filterFinishArray() { }\npublic void filterFinishArray() { }",
            "method_id": 159
        }
    ]
}