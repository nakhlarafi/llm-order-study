{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestParserNonStandard.testAllowNaN",
    "test_body": "public void testAllowNaN() throws Exception {\n_testAllowNaN(false);\n_testAllowNaN(true);\n}\n private void _testAllowNaN(boolean useStream) throws Exception{final String JSON = \"[ NaN]\";JsonFactory f = new JsonFactory();assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));JsonParser jp = useStream ? createParserUsingStream(f, JSON, \"UTF-8\"): createParserUsingReader(f, JSON);assertToken(JsonToken.START_ARRAY, jp.nextToken());try {jp.nextToken();fail(\"Expected exception\");} catch (Exception e) {verifyException(e, \"non-standard\");} finally {jp.close();}f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);jp = useStream ? createParserUsingStream(f, JSON, \"UTF-8\"): createParserUsingReader(f, JSON);assertToken(JsonToken.START_ARRAY, jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());double d = jp.getDoubleValue();assertTrue(Double.isNaN(d));assertEquals(\"NaN\", jp.getText());try {/*BigDecimal dec =*/ jp.getDecimalValue();fail(\"Should fail when trying to access NaN as BigDecimal\");} catch (NumberFormatException e) {e.printStackTrace();verifyException(e, \"can not be represented as BigDecimal\");}",
    "stack_trace": "junit.framework.AssertionFailedError: Expected an exception with one of substrings ([can not be represented as BigDecimal]): got one with message \"null\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.test.BaseTest.verifyException(BaseTest.java:355)\nat com.fasterxml.jackson.core.json.TestParserNonStandard._testAllowNaN(TestParserNonStandard.java:394)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:resetAsNaN(Ljava/lang/String;D)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected final JsonToken resetAsNaN(String valueStr, double value)\n_textBuffer.resetWithString(valueStr);\n_numberDouble = value;\n_numTypesValid = NR_DOUBLE;\nreturn JsonToken.VALUE_NUMBER_FLOAT;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithString(Ljava/lang/String;)V",
            "method_body": "public void resetWithString(String value)\n_inputBuffer = null;\n_inputStart = -1;\n_inputLen = 0;\n_resultString = value;\n_resultArray = null;\nif (_hasSegments) {\n_currentSize = 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getDecimalValue()Ljava/math/BigDecimal;",
            "method_body": "public BigDecimal getDecimalValue() throws IOException, JsonParseException\nif ((_numTypesValid & NR_BIGDECIMAL) == 0) {\nif (_numTypesValid == NR_UNKNOWN) {\nif ((_numTypesValid & NR_BIGDECIMAL) == 0) {\nconvertNumberToBigDecimal();\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:convertNumberToBigDecimal()V",
            "method_body": "protected void convertNumberToBigDecimal()\nif ((_numTypesValid & NR_DOUBLE) != 0) {\n_numberBigDecimal = NumberInput.parseBigDecimal(getText());\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:parseBigDecimal(Ljava/lang/String;)Ljava/math/BigDecimal;",
            "method_body": "public static BigDecimal parseBigDecimal(String numStr) throws NumberFormatException\nreturn new BigDecimal(numStr);\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_handleUnexpectedValue(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected JsonToken _handleUnexpectedValue(int i)\nswitch (i) {\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getDoubleValue()D",
            "method_body": "public double getDoubleValue() throws IOException, JsonParseException\nif ((_numTypesValid & NR_DOUBLE) == 0) {\nreturn _numberDouble;\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:isEnabled(Lcom/fasterxml/jackson/core/JsonParser$Feature;)Z",
            "method_body": "public final boolean isEnabled(JsonParser.Feature f) {\nreturn (_parserFeatures & f.getMask()) != 0;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:configure(Lcom/fasterxml/jackson/core/JsonParser$Feature;Z)Lcom/fasterxml/jackson/core/JsonFactory;",
            "method_body": "public final JsonFactory configure(JsonParser.Feature f, boolean state) {\nreturn state ? enable(f) : disable(f);\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:enable(Lcom/fasterxml/jackson/core/JsonParser$Feature;)Lcom/fasterxml/jackson/core/JsonFactory;",
            "method_body": "public JsonFactory enable(JsonParser.Feature f) {\n_parserFeatures |= f.getMask();\nreturn this;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_getText2(Lcom/fasterxml/jackson/core/JsonToken;)Ljava/lang/String;",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:_constructError(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParseException;",
            "method_body": "protected JsonParseException _constructError(String msg)\nreturn new JsonParseException(msg, getCurrentLocation());\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:_reportError(Ljava/lang/String;)V",
            "method_body": "protected final void _reportError(String msg)\nthrow _constructError(msg);\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser$1:<clinit>()V",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParseException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "public JsonParseException(String msg, JsonLocation loc)\nsuper(msg, loc);\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:toString()Ljava/lang/String;",
            "method_body": "public String toString()\nStringBuilder sb = new StringBuilder(80);\nsb.append(\"[Source: \");\nif (_sourceRef == null) {\nsb.append(_sourceRef.toString());\nsb.append(\"; line: \");\nsb.append(_lineNr);\nsb.append(\", column: \");\nsb.append(_columnNr);\nsb.append(']');\nreturn sb.toString();\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;Ljava/lang/Throwable;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause)\nsuper(msg);\nif (rootCause != null) {\n_location = loc;\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc)\nthis(msg, loc, null);\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getLocation() {\nreturn _location;\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessageSuffix()Ljava/lang/String;",
            "method_body": "protected String getMessageSuffix() {\nreturn null;\n}",
            "method_id": 19
        }
    ]
}