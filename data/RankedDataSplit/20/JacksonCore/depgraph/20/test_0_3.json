{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.base64.Base64GenerationTest.testBinaryAsEmbeddedObject",
    "test_body": "94: public void testBinaryAsEmbeddedObject() throws Exception\n95: {\n96: JsonGenerator g;\n97: 98: StringWriter sw = new StringWriter();\n99: g = JSON_F.createGenerator(sw);\n100: g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);\n101: g.close();",
    "stack_trace": "com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects\nat com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(JsonGenerator.java:1330)\nat com.fasterxml.jackson.core.base64.Base64GenerationTest.testBinaryAsEmbeddedObject(Base64GenerationTest.java:100)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:copyHexChars()[C",
            "method_body": "public static char[] copyHexChars() {\nreturn (char[]) HC.clone();\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 61
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonWriteContext:<init>(ILcom/fasterxml/jackson/core/json/JsonWriteContext;Lcom/fasterxml/jackson/core/json/DupDetector;)V",
            "method_body": "protected JsonWriteContext(int type, JsonWriteContext parent, DupDetector dups) {\nsuper();\n_type = type;\n_parent = parent;\n_dups = dups;\n_index = -1;\n}",
            "method_id": 62
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonWriteContext:createRootContext(Lcom/fasterxml/jackson/core/json/DupDetector;)Lcom/fasterxml/jackson/core/json/JsonWriteContext;",
            "method_body": "public static JsonWriteContext createRootContext(DupDetector dd) {\nreturn new JsonWriteContext(TYPE_ROOT, null, dd);\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:<clinit>()V",
            "method_body": "final protected static int SHORT_WRITE = 32;\nfinal protected static char[] HEX_CHARS = CharTypes.copyHexChars();\nprotected char _quoteChar = '\"'; // TODO: make configurable\n* being written using {@link #_writer}.",
            "method_id": 64
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;Ljava/lang/Throwable;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause) {\nsuper(msg);\nif (rootCause != null) {\n_location = loc;\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc) {\nthis(msg, loc, null);\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getLocation() { return _location; }\npublic JsonLocation getLocation() { return _location; }",
            "method_id": 67
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessageSuffix()Ljava/lang/String;",
            "method_body": "protected String getMessageSuffix() { return null; }\nprotected String getMessageSuffix() { return null; }",
            "method_id": 68
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessage()Ljava/lang/String;",
            "method_body": "@Override public String getMessage() {\nString msg = super.getMessage();\nif (msg == null) {\nJsonLocation loc = getLocation();\nString suffix = getMessageSuffix();\nif (loc != null || suffix != null) {\nreturn msg;\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:toString()Ljava/lang/String;",
            "method_body": "@Override public String toString() { return getClass().getName()+\": \"+getMessage(); }\n@Override public String toString() { return getClass().getName()+\": \"+getMessage(); }",
            "method_id": 70
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variants:<clinit>()V",
            "method_body": "public final static Base64Variant MODIFIED_FOR_URL;\nStringBuilder sb = new StringBuilder(STD_BASE64_ALPHABET);\nsb.setCharAt(sb.indexOf(\"+\"), '-');\nsb.setCharAt(sb.indexOf(\"/\"), '_');\nMODIFIED_FOR_URL = new Base64Variant(\"MODIFIED-FOR-URL\", sb.toString(), false, Base64Variant.PADDING_CHAR_NONE, Integer.MAX_VALUE);\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Ljava/lang/String;Ljava/lang/String;ZCI)V",
            "method_body": "public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength)\n{\n_name = name;\n_usesPadding = usesPadding;\n_paddingChar = paddingChar;\n_maxLineLength = maxLineLength;\nint alphaLen = base64Alphabet.length();\nif (alphaLen != 64) {\nbase64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0);\nArrays.fill(_asciiToBase64, BASE64_VALUE_INVALID);\nfor (int i = 0; i < alphaLen; ++i) {\nchar alpha = _base64ToAsciiC[i];\n_base64ToAsciiB[i] = (byte) alpha;\n_asciiToBase64[alpha] = i;\nif (usesPadding) {\n_asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/lang/String;ZCI)V",
            "method_body": "public Base64Variant(Base64Variant base, String name, boolean usesPadding, char paddingChar, int maxLineLength)\n{\n_name = name;\nbyte[] srcB = base._base64ToAsciiB;\nSystem.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length);\nchar[] srcC = base._base64ToAsciiC;\nSystem.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length);\nint[] srcV = base._asciiToBase64;\nSystem.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length);\n_usesPadding = usesPadding;\n_paddingChar = paddingChar;\n_maxLineLength = maxLineLength;\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/lang/String;I)V",
            "method_body": "public Base64Variant(Base64Variant base, String name, int maxLineLength)\nthis(base, name, base._usesPadding, base._paddingChar, maxLineLength);\n}",
            "method_id": 74
        }
    ]
}