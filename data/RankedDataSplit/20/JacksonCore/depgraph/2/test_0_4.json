{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestParserErrorHandling.testMangledNumbersBytes",
    "test_body": "21: public void testMangledNumbersBytes() throws Exception {\n22: _testMangledNumbers(true);\n23: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: Should have gotten an exception; instead got token: VALUE_NUMBER_INT\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.core.json.TestParserErrorHandling._testMangledNumbers(TestParserErrorHandling.java:93)\nat com.fasterxml.jackson.core.json.TestParserErrorHandling.testMangledNumbersBytes(TestParserErrorHandling.java:22)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer:makeChild(ZZ)Lcom/fasterxml/jackson/core/sym/BytesToNameCanonicalizer;",
            "method_body": "public BytesToNameCanonicalizer makeChild(boolean canonicalize,\nreturn new BytesToNameCanonicalizer(this, intern, _hashSeed, _tableInfo.get());\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:findBuffer(I)[C",
            "method_body": "private char[] findBuffer(int needed)\nif (_allocator != null) {\nreturn _allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER, needed);\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:setEncoding(Lcom/fasterxml/jackson/core/JsonEncoding;)V",
            "method_body": "public void setEncoding(JsonEncoding enc) {\n_encoding = enc;\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonEncoding:<init>(Ljava/lang/String;ILjava/lang/String;Z)V",
            "method_body": "JsonEncoding(String javaName, boolean bigEndian)\n{\n_javaName = javaName;\n_bigEndian = bigEndian;\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/JsonFactory;Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef\nprotected final transient CharsToNameCanonicalizer _rootCharSymbols = CharsToNameCanonicalizer.createRoot();\nprotected final transient BytesToNameCanonicalizer _rootByteSymbols = BytesToNameCanonicalizer.createRoot();\nprotected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;\nprotected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;\nprotected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;\nprotected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;\npublic JsonFactory() { this((ObjectCodec) null); }",
            "method_id": 84
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:<init>(Lcom/fasterxml/jackson/core/io/IOContext;[BII)V",
            "method_body": "final static byte UTF8_BOM_1 = (byte) 0xEF;\nprotected boolean _bigEndian = true;\nprotected int _bytesPerChar = 0; // 0 means \"dunno yet\"\n{\n_context = ctxt;\n_in = in;\n_inputBuffer = ctxt.allocReadIOBuffer();\n_inputEnd = _inputPtr = 0;\n_inputProcessed = 0;\n_bufferRecyclable = true;\n}",
            "method_id": 85
        }
    ]
}