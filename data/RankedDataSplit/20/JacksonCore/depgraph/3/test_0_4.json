{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestLocation.testOffsetWithInputOffset",
    "test_body": "55: public void testOffsetWithInputOffset() throws Exception\n56: {\n57: final JsonFactory f = new JsonFactory();\n58: JsonLocation loc;\n59: JsonParser p;\n60: // 3 spaces before, 2 after, just for padding\n61: byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n62: 63: // and then peel them off\n64: p = f.createParser(b, 3, b.length-5);\n65: assertToken(JsonToken.START_OBJECT, p.nextToken());\n66: 67: loc = p.getTokenLocation();\n68: assertEquals(0L, loc.getByteOffset());\n69: assertEquals(-1L, loc.getCharOffset());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:159)\nat junit.framework.Assert.assertEquals(Assert.java:166)\nat junit.framework.TestCase.assertEquals(TestCase.java:324)\nat com.fasterxml.jackson.core.json.TestLocation.testOffsetWithInputOffset(TestLocation.java:68)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.SerializedString:<init>(Ljava/lang/String;)V",
            "method_body": "public SerializedString(String v) {\nif (v == null) {\n_value = v;\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:<clinit>()V",
            "method_body": "private final static char[] HEX_CHARS = \"0123456789ABCDEF\".toCharArray();\nint len = HEX_CHARS.length;\nHEX_BYTES = new byte[len];\nfor (int i = 0; i < len; ++i) {\nHEX_BYTES[i] = (byte) HEX_CHARS[i];\n}",
            "method_id": 81
        }
    ]
}