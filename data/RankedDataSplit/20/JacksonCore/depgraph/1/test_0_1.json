{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestParserNonStandard.testAllowNaN",
    "test_body": "62: public void testAllowNaN() throws Exception {\n63: _testAllowNaN(false);\n64: _testAllowNaN(true);\n65: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected an exception with one of substrings ([can not be represented as BigDecimal]): got one with message \"null\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.test.BaseTest.verifyException(BaseTest.java:355)\nat com.fasterxml.jackson.core.json.TestParserNonStandard._testAllowNaN(TestParserNonStandard.java:394)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_handleUnexpectedValue(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected JsonToken _handleUnexpectedValue(int i)\nswitch (i) {\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getDoubleValue()D",
            "method_body": "public double getDoubleValue() throws IOException, JsonParseException\nif ((_numTypesValid & NR_DOUBLE) == 0) {\nreturn _numberDouble;\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_getText2(Lcom/fasterxml/jackson/core/JsonToken;)Ljava/lang/String;",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:_constructError(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParseException;",
            "method_body": "protected JsonParseException _constructError(String msg)\nreturn new JsonParseException(msg, getCurrentLocation());\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:_reportError(Ljava/lang/String;)V",
            "method_body": "protected final void _reportError(String msg)\nthrow _constructError(msg);\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser$1:<clinit>()V",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParseException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "public JsonParseException(String msg, JsonLocation loc)\nsuper(msg, loc);\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:toString()Ljava/lang/String;",
            "method_body": "public String toString()\nStringBuilder sb = new StringBuilder(80);\nsb.append(\"[Source: \");\nif (_sourceRef == null) {\nsb.append(_sourceRef.toString());\nsb.append(\"; line: \");\nsb.append(_lineNr);\nsb.append(\", column: \");\nsb.append(_columnNr);\nsb.append(']');\nreturn sb.toString();\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;Ljava/lang/Throwable;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause)\nsuper(msg);\nif (rootCause != null) {\n_location = loc;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc)\nthis(msg, loc, null);\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getLocation() {\nreturn _location;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessageSuffix()Ljava/lang/String;",
            "method_body": "protected String getMessageSuffix() {\nreturn null;\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage()\nString msg = super.getMessage();\nif (msg == null) {\nJsonLocation loc = getLocation();\nString suffix = getMessageSuffix();\nif (loc != null || suffix != null) {\nStringBuilder sb = new StringBuilder(100);\nsb.append(msg);\nif (suffix != null) {\nif (loc != null) {\nsb.append('\\n');\nsb.append(\" at \");\nsb.append(loc.toString());\nmsg = sb.toString();\nreturn msg;\n}",
            "method_id": 32
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getCurrentLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getCurrentLocation()\nint col = _inputPtr - _currInputRowStart + 1; // 1-based\nreturn new JsonLocation(_ioContext.getSourceReference(),\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_matchToken(Ljava/lang/String;I)V",
            "method_body": "protected void _matchToken(String matchStr, int i)\nfinal int len = matchStr.length();\nif (_inputPtr >= _inputEnd) {\nif (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {\n++_inputPtr;\n} while (++i < len);\nif (_inputPtr >= _inputEnd) {\nchar c = _inputBuffer[_inputPtr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars",
            "method_id": 34
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<init>(Ljava/lang/Object;JII)V",
            "method_body": "public JsonLocation(Object srcRef, long totalChars, int lineNr, int colNr)\nthis(srcRef, -1L, totalChars, lineNr, colNr);\n}",
            "method_id": 35
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:getSourceReference()Ljava/lang/Object;",
            "method_body": "public Object getSourceReference() { return _sourceRef; }\npublic Object getSourceReference() { return _sourceRef; }",
            "method_id": 36
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<init>(Ljava/lang/Object;JJII)V",
            "method_body": "public JsonLocation(Object sourceRef, long totalBytes, long totalChars,\n{\n_sourceRef = sourceRef;\n_totalBytes = totalBytes;\n_totalChars = totalChars;\n_lineNr = lineNr;\n_columnNr = columnNr;\n}",
            "method_id": 37
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 1L;\npublic final static JsonLocation NA = new JsonLocation(\"N/A\", -1L, -1L, -1, -1);\nthis(srcRef, -1L, totalChars, lineNr, colNr);\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:getText()Ljava/lang/String;",
            "method_body": "public String getText()\nJsonToken t = _currToken;\nif (t == JsonToken.VALUE_STRING) {\nreturn _getText2(t);\n}",
            "method_id": 39
        }
    ]
}