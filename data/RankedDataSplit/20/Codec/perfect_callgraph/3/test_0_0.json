{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate",
    "test_body": "public void testDoubleMetaphoneAlternate() {\nString value = null;\nfor (int i = 0; i < TEST_DATA.length; i++) {\nvalue = TEST_DATA[i][0];\nassertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(DoubleMetaphone2Test.java:84)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleG(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
            "method_body": "private int handleG(String value,\nif (charAt(value, index + 1) == 'H') {\n} else if (charAt(value, index + 1) == 'N') {\n} else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n} else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n} else if ((contains(value, index + 1, 2, \"ER\") ||\n} else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\nif ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n} else if (contains(value, index + 1, 4, \"IER\")) {\nresult.append('J', 'K');\nindex += 2;\n} else if (charAt(value, index + 1) == 'G') {\nindex += 2;\nresult.append('K');\nreturn index;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:cleanInput(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String cleanInput(String input) {\nif (input == null) {\ninput = input.trim();\nif (input.length() == 0) {\nreturn input.toUpperCase(java.util.Locale.ENGLISH);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:isSlavoGermanic(Ljava/lang/String;)Z",
            "method_body": "private boolean isSlavoGermanic(String value) {\nreturn value.indexOf('W') > -1 || value.indexOf('K') > -1 ||\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:isSilentStart(Ljava/lang/String;)Z",
            "method_body": "private boolean isSilentStart(String value) {\nboolean result = false;\nfor (int i = 0; i < SILENT_START.length; i++) {\nif (value.startsWith(SILENT_START[i])) {\nreturn result;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:isComplete()Z",
            "method_body": "public boolean isComplete() {\nreturn this.primary.length() >= this.maxLength &&\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:append(C)V",
            "method_body": "public void append(char value) {\nappendPrimary(value);\nappendAlternate(value);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:appendPrimary(C)V",
            "method_body": "public void appendPrimary(char value) {\nif (this.primary.length() < this.maxLength) {\nthis.primary.append(value);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:appendAlternate(C)V",
            "method_body": "public void appendAlternate(char value) {\nif (this.alternate.length() < this.maxLength) {\nthis.alternate.append(value);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:charAt(Ljava/lang/String;I)C",
            "method_body": "protected char charAt(String value, int index) {\nif (index < 0 || index >= value.length()) {\nreturn Character.MIN_VALUE;\nreturn value.charAt(index);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:conditionC0(Ljava/lang/String;I)Z",
            "method_body": "private boolean conditionC0(String value, int index) {\nif (contains(value, index, 4, \"CHIA\")) {\n} else if (index <= 1) {\nreturn false;\n} else if (isVowel(charAt(value, index - 2))) {\nreturn false;\n} else if (!contains(value, index - 1, 3, \"ACH\")) {\nreturn false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;II[Ljava/lang/String;)Z",
            "method_body": "protected static boolean contains(String value, int start, int length,\nboolean result = false;\nif (start >= 0 && start + length <= value.length()) {\nString target = value.substring(start, start + length);\nfor (int i = 0; i < criteria.length; i++) {\nif (target.equals(criteria[i])) {\nresult = true;\nbreak;\nreturn result;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:isVowel(C)Z",
            "method_body": "private boolean isVowel(char ch) {\nreturn VOWELS.indexOf(ch) != -1;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:append(CC)V",
            "method_body": "public void append(char primary, char alternate) {\nappendPrimary(primary);\nappendAlternate(alternate);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:conditionL0(Ljava/lang/String;I)Z",
            "method_body": "private boolean conditionL0(String value, int index) {\nif (index == value.length() - 3 &&\n} else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\nreturn false;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:conditionM0(Ljava/lang/String;I)Z",
            "method_body": "private boolean conditionM0(String value, int index) {\nif (charAt(value, index + 1) == 'M') {\nreturn contains(value, index - 1, 3, \"UMB\") &&\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:getAlternate()Ljava/lang/String;",
            "method_body": "public String getAlternate() {\nreturn this.alternate.toString();\n}",
            "method_id": 19
        }
    ]
}