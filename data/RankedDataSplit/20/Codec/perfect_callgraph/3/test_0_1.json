{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate",
    "test_body": "public void testDoubleMetaphoneAlternate() {\nString value = null;\nfor (int i = 0; i < TEST_DATA.length; i++) {\nvalue = TEST_DATA[i][0];\nassertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(DoubleMetaphone2Test.java:84)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<init>()V",
            "method_body": "public DoubleMetaphone() {\nsuper();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<clinit>()V",
            "method_body": "private static final String VOWELS = \"AEIOUY\";\nprivate static final String[] SILENT_START =\n{ \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:doubleMetaphone(Ljava/lang/String;Z)Ljava/lang/String;",
            "method_body": "public String doubleMetaphone(String value, boolean alternate) {\nvalue = cleanInput(value);\nif (value == null) {\nboolean slavoGermanic = isSlavoGermanic(value);\nint index = isSilentStart(value) ? 1 : 0;\nDoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\nwhile (!result.isComplete() && index <= value.length() - 1) {\nswitch (value.charAt(index)) {\nindex = handleAEIOUY(value, result, index);\nbreak;\nresult.append('P');\nindex = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\nbreak;\nindex = handleC(value, result, index);\nbreak;\nindex = handleD(value, result, index);\nbreak;\nindex = handleG(value, result, index, slavoGermanic);\nbreak;\nindex = handleH(value, result, index);\nbreak;\nresult.append('K');\nindex = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\nbreak;\nindex = handleL(value, result, index);\nbreak;\nresult.append('M');\nindex = conditionM0(value, index) ? index + 2 : index + 1;\nbreak;\nresult.append('N');\nindex = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\nbreak;\nindex = handleP(value, result, index);\nbreak;\nindex = handleR(value, result, index, slavoGermanic);\nbreak;\nindex = handleS(value, result, index, slavoGermanic);\nbreak;\nindex = handleT(value, result, index);\nbreak;\nresult.append('F');\nindex = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\nbreak;\nindex = handleW(value, result, index);\nbreak;\nreturn alternate ? result.getAlternate() : result.getPrimary();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:getMaxCodeLen()I",
            "method_body": "public int getMaxCodeLen() {\nreturn this.maxCodeLen;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleAEIOUY(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int\nif (index == 0) {\nresult.append('A');\nreturn index + 1;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleC(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleC(String value,\nif (conditionC0(value, index)) {  // very confusing, moved out\n} else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n} else if (contains(value, index, 2, \"CH\")) {\n} else if (contains(value, index, 2, \"CZ\") &&\n} else if (contains(value, index + 1, 3, \"CIA\")) {\n} else if (contains(value, index, 2, \"CC\") &&\n} else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\nresult.append('K');\nindex += 2;\n} else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\nresult.append('K');\nif (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) {\n} else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&\nindex++;\nreturn index;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleD(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleD(String value,\nif (contains(value, index, 2, \"DG\")) {\n} else if (contains(value, index, 2, \"DT\", \"DD\")) {\nresult.append('T');\nindex++;\nreturn index;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleH(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleH(String value,\nif ((index == 0 || isVowel(charAt(value, index - 1))) &&\nindex++;\nreturn index;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleL(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleL(String value,\nif (charAt(value, index + 1) == 'L') {\nif (conditionL0(value, index)) {\nresult.append('L');\nindex += 2;\nindex++;\nresult.append('L');\nreturn index;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleP(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleP(String value,\nif (charAt(value, index + 1) == 'H') {\nresult.append('P');\nindex = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\nreturn index;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleR(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
            "method_body": "private int handleR(String value,\nif (index == value.length() - 1 && !slavoGermanic &&\nresult.appendAlternate('R');\nresult.append('R');\nreturn charAt(value, index + 1) == 'R' ? index + 2 : index + 1;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleS(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
            "method_body": "private int handleS(String value,\nif (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n} else if (index == 0 && contains(value, index, 5, \"SUGAR\")) {\n} else if (contains(value, index, 2, \"SH\")) {\n} else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n} else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n} else if (contains(value, index, 2, \"SC\")) {\nif (index == value.length() - 1 && contains(value, index - 2,\nresult.append('S');\nindex = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\nreturn index;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleT(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleT(String value,\nif (contains(value, index, 4, \"TION\")) {\n} else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n} else if (contains(value, index, 2, \"TH\") || contains(value, index,\nresult.append('T');\nindex = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\nreturn index;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleW(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleW(String value,\nif (contains(value, index, 2, \"WR\")) {\nif (index == 0 && (isVowel(charAt(value, index + 1)) ||\n} else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n} else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\nindex++;\nreturn index;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:<init>(Lorg/apache/commons/codec/language/DoubleMetaphone;I)V",
            "method_body": "public DoubleMetaphoneResult(int maxLength) {\nthis.maxLength = maxLength;\n}",
            "method_id": 34
        }
    ]
}