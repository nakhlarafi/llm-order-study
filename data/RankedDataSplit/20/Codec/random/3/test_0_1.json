{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate",
    "test_body": "public void testDoubleMetaphoneAlternate() {\nString value = null;\nfor (int i = 0; i < TEST_DATA.length; i++) {\nvalue = TEST_DATA[i][0];\nassertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate(DoubleMetaphone2Test.java:84)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:doubleMetaphone(Ljava/lang/String;Z)Ljava/lang/String;",
            "method_body": "public String doubleMetaphone(String value, boolean alternate) {\nvalue = cleanInput(value);\nif (value == null) {\nboolean slavoGermanic = isSlavoGermanic(value);\nint index = isSilentStart(value) ? 1 : 0;\nDoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\nwhile (!result.isComplete() && index <= value.length() - 1) {\nswitch (value.charAt(index)) {\nindex = handleAEIOUY(value, result, index);\nbreak;\nresult.append('P');\nindex = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\nbreak;\nindex = handleC(value, result, index);\nbreak;\nindex = handleD(value, result, index);\nbreak;\nindex = handleG(value, result, index, slavoGermanic);\nbreak;\nindex = handleH(value, result, index);\nbreak;\nresult.append('K');\nindex = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\nbreak;\nindex = handleL(value, result, index);\nbreak;\nresult.append('M');\nindex = conditionM0(value, index) ? index + 2 : index + 1;\nbreak;\nresult.append('N');\nindex = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\nbreak;\nindex = handleP(value, result, index);\nbreak;\nindex = handleR(value, result, index, slavoGermanic);\nbreak;\nindex = handleS(value, result, index, slavoGermanic);\nbreak;\nindex = handleT(value, result, index);\nbreak;\nresult.append('F');\nindex = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\nbreak;\nindex = handleW(value, result, index);\nbreak;\nreturn alternate ? result.getAlternate() : result.getPrimary();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:charAt(Ljava/lang/String;I)C",
            "method_body": "protected char charAt(String value, int index) {\nif (index < 0 || index >= value.length()) {\nreturn Character.MIN_VALUE;\nreturn value.charAt(index);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleG(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;IZ)I",
            "method_body": "private int handleG(String value,\nif (charAt(value, index + 1) == 'H') {\n} else if (charAt(value, index + 1) == 'N') {\n} else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n} else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n} else if ((contains(value, index + 1, 2, \"ER\") ||\n} else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\nif ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n} else if (contains(value, index + 1, 4, \"IER\")) {\nresult.append('J', 'K');\nindex += 2;\n} else if (charAt(value, index + 1) == 'G') {\nindex += 2;\nresult.append('K');\nreturn index;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:isSilentStart(Ljava/lang/String;)Z",
            "method_body": "private boolean isSilentStart(String value) {\nboolean result = false;\nfor (int i = 0; i < SILENT_START.length; i++) {\nif (value.startsWith(SILENT_START[i])) {\nreturn result;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;II[Ljava/lang/String;)Z",
            "method_body": "protected static boolean contains(String value, int start, int length,\nboolean result = false;\nif (start >= 0 && start + length <= value.length()) {\nString target = value.substring(start, start + length);\nfor (int i = 0; i < criteria.length; i++) {\nif (target.equals(criteria[i])) {\nresult = true;\nbreak;\nreturn result;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:cleanInput(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String cleanInput(String input) {\nif (input == null) {\ninput = input.trim();\nif (input.length() == 0) {\nreturn input.toUpperCase(java.util.Locale.ENGLISH);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:<init>(Lorg/apache/commons/codec/language/DoubleMetaphone;I)V",
            "method_body": "public DoubleMetaphoneResult(int maxLength) {\nthis.maxLength = maxLength;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:handleAEIOUY(Ljava/lang/String;Lorg/apache/commons/codec/language/DoubleMetaphone$DoubleMetaphoneResult;I)I",
            "method_body": "private int handleAEIOUY(String value, DoubleMetaphoneResult result, int\nif (index == 0) {\nresult.append('A');\nreturn index + 1;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:isComplete()Z",
            "method_body": "public boolean isComplete() {\nreturn this.primary.length() >= this.maxLength &&\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:contains(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "private static boolean contains(String value, int start, int length,\nreturn contains(value, start, length,\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:getAlternate()Ljava/lang/String;",
            "method_body": "public String getAlternate() {\nreturn this.alternate.toString();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:conditionM0(Ljava/lang/String;I)Z",
            "method_body": "private boolean conditionM0(String value, int index) {\nif (charAt(value, index + 1) == 'M') {\nreturn contains(value, index - 1, 3, \"UMB\") &&\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:conditionC0(Ljava/lang/String;I)Z",
            "method_body": "private boolean conditionC0(String value, int index) {\nif (contains(value, index, 4, \"CHIA\")) {\n} else if (index <= 1) {\nreturn false;\n} else if (isVowel(charAt(value, index - 2))) {\nreturn false;\n} else if (!contains(value, index - 1, 3, \"ACH\")) {\nreturn false;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:appendPrimary(C)V",
            "method_body": "public void appendPrimary(char value) {\nif (this.primary.length() < this.maxLength) {\nthis.primary.append(value);\n}",
            "method_id": 34
        }
    ]
}