{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray",
    "test_body": "public void testConstructorEx7_TypeArray_intArray() throws Throwable {\nint[] values = new int[] {1, 1, 1};\nDateTimeFieldType[] types = new DateTimeFieldType[] {\nDateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {\nassertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n}\n271: types = new DateTimeFieldType[] {\nDateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {\nassertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n}\n280: types = new DateTimeFieldType[] {\nDateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray(TestPartial_Constructors.java:284)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 40,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
            "method_id": 41,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 42,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn iChronology.getMinYear();\n}",
            "method_id": 43,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 44,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 45,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 46,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.CE;\n}",
            "method_id": 47,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 48,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
            "method_id": 49,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 50,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
            "method_id": 51,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[I)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values) {\nthis(types, values, null);\n}",
            "method_id": 52,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 53,
            "loc": 3
        }
    ]
}