{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction",
    "test_body": "public void testLeapYearRulesConstruction() {\n// 1500 not leap in Gregorian, but is leap in Julian\nDateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\nassertEquals(dt.getYear(), 1500);",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:233)\nat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\nat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\nat org.joda.time.chrono.GJChronology.getDateTimeMillis(GJChronology.java:364)\nat org.joda.time.base.BaseDateTime.<init>(BaseDateTime.java:254)\nat org.joda.time.DateMidnight.<init>(DateMidnight.java:343)\nat org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction(TestGJChronology.java:496)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
            "method_id": 0,
            "loc": 11
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
            "method_id": 1,
            "loc": 11
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
            "method_id": 2,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 3,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
            "method_id": 4,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
            "method_id": 5,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
            "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
            "method_id": 6,
            "loc": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
            "method_id": 7,
            "loc": 6
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\ninstant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\n}",
            "method_id": 8,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 9,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 10,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
            "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
            "method_id": 11,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
            "method_id": 12,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 13,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 14,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
            "method_id": 15,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
            "method_id": 16,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
            "method_id": 17,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
            "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
            "method_id": 18,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
            "method_body": "protected AbstractDateTime() {\nsuper();\n}",
            "method_id": 19,
            "loc": 3
        }
    ]
}