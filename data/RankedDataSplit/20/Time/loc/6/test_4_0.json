{
    "bug_id": 6,
    "test_id": 4,
    "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
    "test_body": "public void test_cutoverPreZero() {\nDateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\ntry {\nGJChronology.getInstance(DateTimeZone.UTC, cutover);\nfail();\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
            "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}",
            "method_id": 0,
            "loc": 71
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nObject[] params = (Object[])getParam();\nJulianChronology julian = (JulianChronology)params[0];\nGregorianChronology gregorian = (GregorianChronology)params[1];\nInstant cutoverInstant = (Instant)params[2];\niCutoverMillis = cutoverInstant.getMillis();\niJulianChronology = julian;\niGregorianChronology = gregorian;\niCutoverInstant = cutoverInstant;\nif (getBase() != null) {\nif (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\niGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\nfields.copyFieldsFrom(gregorian);\nif (gregorian.millisOfDay().get(iCutoverMillis) == 0) {\nfields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\nfields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\nfields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\nfields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\nfields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\nfields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\nfields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\nfields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\nfields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\nfields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\nfields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\nfields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\nlong cutover = gregorian.year().roundCeiling(iCutoverMillis);\nfields.dayOfYear = new CutoverField(\nlong cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\nfields.weekOfWeekyear = new CutoverField(\nfields.year = new ImpreciseCutoverField(\nfields.years = fields.year.getDurationField();\nfields.yearOfEra = new ImpreciseCutoverField(\nfields.yearOfCentury = new ImpreciseCutoverField(\nfields.centuryOfEra = new ImpreciseCutoverField(\nfields.centuries = fields.centuryOfEra.getDurationField();\nfields.monthOfYear = new ImpreciseCutoverField(\nfields.months = fields.monthOfYear.getDurationField();\nfields.weekyear = new ImpreciseCutoverField(\nfields.weekyearOfCentury = new ImpreciseCutoverField(\nfields.weekyears = fields.weekyear.getDurationField();\nCutoverField cf = new CutoverField\ncf.iRangeDurationField = fields.months;\nfields.dayOfMonth = cf;\n}",
            "method_id": 1,
            "loc": 45
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
            "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags = 0;\niBaseFlags = flags;\n}",
            "method_id": 2,
            "loc": 43
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
            "method_id": 3,
            "loc": 20
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nsynchronized (cCache) {\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i = chronos.size(); --i >= 0;) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nif (zone == DateTimeZone.UTC) {\nchrono = new GJChronology\nchronos.add(chrono);\n}\nreturn chrono;\n}",
            "method_id": 4,
            "loc": 16
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V",
            "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField,\nlong cutoverMillis, boolean convertByWeekyear) {\nsuper(gregorianField.getType());\niJulianField = julianField;\niGregorianField = gregorianField;\niCutover = cutoverMillis;\niConvertByWeekyear = convertByWeekyear;\niDurationField = gregorianField.getDurationField();\nDurationField rangeField = gregorianField.getRangeDurationField();\nif (rangeField == null) {\nrangeField = julianField.getRangeDurationField();\niRangeDurationField = rangeField;\n}",
            "method_id": 5,
            "loc": 13
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
            "method_id": 6,
            "loc": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
            "method_id": 7,
            "loc": 12
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;",
            "method_body": "public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nJulianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\n}\nreturn chrono;\n}",
            "method_id": 8,
            "loc": 11
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
            "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nGregorianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\n}\nreturn chrono;\n}",
            "method_id": 9,
            "loc": 11
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
            "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
            "method_id": 10,
            "loc": 9
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
            "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nleapYears--;\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 11,
            "loc": 9
        },
        {
            "method_signature": "org.joda.time.LocalDate:toDateTimeAtStartOfDay(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;",
            "method_body": "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\nzone = DateTimeUtils.getZone(zone);\nChronology chrono = getChronology().withZone(zone);\nlong localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;\nlong instant = zone.convertLocalToUTC(localMillis, false);\ninstant = chrono.dayOfMonth().roundFloor(instant);\nreturn new DateTime(instant, chrono);\n}",
            "method_id": 12,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
            "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn 1;\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
            "method_id": 13,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
            "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\nint offsetLocal = getOffset(instantLocal);\nint offset = getOffset(instantLocal - offsetLocal);\nif (offsetLocal != offset) {\nlong instantUTC = instantLocal - offset;\nif ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {\nreturn instantUTC;\n}",
            "method_id": 14,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundCeiling(J)J",
            "method_body": "public long roundCeiling(long instant) {\nint year = get(instant);\nlong yearStartMillis = iChronology.getYearMillis(year);\nif (instant != yearStartMillis) {\ninstant = iChronology.getYearMillis(year + 1);\nreturn instant;\n}",
            "method_id": 15,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
            "method_id": 16,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\ninstant = iChronology.weekOfWeekyear().roundFloor(instant);\nint wow = iChronology.getWeekOfWeekyear(instant);\nif (wow > 1) {\ninstant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);\nreturn instant;\n}",
            "method_id": 17,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V",
            "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n{\nsuper(julianField, gregorianField, cutoverMillis, convertByWeekyear);\nif (durationField == null) {\ndurationField = new LinkedDurationField(iDurationField, this);\niDurationField = durationField;\n}",
            "method_id": 18,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:calculateFirstDayOfYearMillis(I)J",
            "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint relativeYear = year - 1968;\nif (relativeYear <= 0) {\nleapYears = (relativeYear + 3) >> 2;\nlong millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;\nreturn millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 19,
            "loc": 7
        }
    ]
}