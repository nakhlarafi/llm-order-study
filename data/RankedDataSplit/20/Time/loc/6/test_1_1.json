{
    "bug_id": 6,
    "test_id": 1,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
    "test_body": "public void test_plusYears_positiveToZero_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\nassertEquals(expected, date.plusYears(-2003));\n}\n",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\nat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\nat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\nat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\nat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
            "method_id": 20,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
            "method_id": 21,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 22,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 23,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 24,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
            "method_id": 25,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 29,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn iField.add(instant, value);\n}",
            "method_id": 30,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
            "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n}",
            "method_id": 31,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 32,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 34,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
            "method_id": 35,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
            "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
            "method_id": 39,
            "loc": 3
        }
    ]
}