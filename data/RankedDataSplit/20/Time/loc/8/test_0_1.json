{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "public void testForOffsetHoursMinutes_int_int() {\nassertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\nassertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, -15);\nfail();\n} catch (IllegalArgumentException ex) {}\n314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\nassertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\n}        \n",
    "stack_trace": "java.lang.IllegalArgumentException: Minutes out of range: -15\nat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:316)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nif (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
            "method_id": 20,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 21,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
            "method_id": 22,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
            "method_id": 23,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\nif (cOffsetFormatter == null) {\nreturn cOffsetFormatter;\n}",
            "method_id": 24,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
            "method_id": 25,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
            "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\n}",
            "method_id": 26,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
            "method_id": 27,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 28,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
            "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}",
            "method_id": 29,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
            "method_body": "public void setOffset(Integer offset) {\niSavedState = null;\niOffset = offset;\n}",
            "method_id": 30,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 31,
            "loc": 3
        }
    ]
}