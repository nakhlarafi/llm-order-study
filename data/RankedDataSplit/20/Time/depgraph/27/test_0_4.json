{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:scan(Ljava/lang/String;I)I",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nint oldPos = position;\nposition = iBeforeParser.parseInto(period, periodStr, position, locale);\nif (position < 0) {\nboolean found = false;\nif (position > oldPos) {\nString[] parsedForms = iParsedForms;\nint length = parsedForms.length;\nfor (int i=0; i < length; i++) {\nString parsedForm = parsedForms[i];\nif ((parsedForm == null || parsedForm.length() == 0) ||\nposition += parsedForm.length();\nfound = true;\nbreak;\noldPos = position;\nposition = iAfterParser.parseInto(period, periodStr, position, locale);\nif (position < 0) {\nif (found && position == oldPos) {\nreturn ~oldPos;\nif (position > oldPos && !found && !iUseBefore) {\nreturn position;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:setMillis(I)V",
            "method_body": "public void setMillis(int millis) {\nsuper.setField(DurationFieldType.millis(), millis);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "private void setPeriodInternal(ReadablePeriod period) {\nint[] newValues = new int[size()];\nfor (int i = 0, isize = period.size(); i < isize; i++) {\nDurationFieldType type = period.getFieldType(i);\nint value = period.getValue(i);\ncheckAndUpdate(type, newValues, value);\niValues = newValues;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.joda.time.convert.ReadablePeriodConverter:getPeriodType(Ljava/lang/Object;)Lorg/joda/time/PeriodType;",
            "method_body": "public PeriodType getPeriodType(Object object) {\nReadablePeriod period = (ReadablePeriod) object;\nreturn period.getPeriodType();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:setFieldValue(Lorg/joda/time/ReadWritablePeriod;II)V",
            "method_body": "void setFieldValue(ReadWritablePeriod period, int field, int value) {\nswitch (field) {\nperiod.setSeconds(value);\nbreak;\nperiod.setMillis(value);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
            "method_id": 93
        }
    ]
}