{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative",
    "test_body": "118: public void testFormatStandard_negative() {\n119: Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n120: assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n121: 122: p = Period.years(-54);\n123: assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n124: 125: p = Period.seconds(4).withMillis(-8);\n126: assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n127: 128: p = Period.seconds(-4).withMillis(8);\n129: assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n130: 131: p = Period.seconds(-23);\n132: assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n133: 134: p = Period.millis(-8);\n135: assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n136: }\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.Period:withMillis(I)Lorg/joda/time/Period;",
            "method_body": "public Period withMillis(int millis) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\nreturn new Period(values, getPeriodType());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn;\nint value = (int) valueLong;\nif (iFieldType >= SECONDS_MILLIS) {\nvalue = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\nif (iPrefix != null) {\nint minDigits = iMinPrintedDigits;\nif (minDigits <= 1) {\nFormatUtils.appendUnpaddedInteger(buf, value);\nif (iFieldType >= SECONDS_MILLIS) {\nint dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\nif (iFieldType == SECONDS_MILLIS || dp > 0) {\nbuf.append('.');\nFormatUtils.appendPaddedInteger(buf, dp, 3);\nif (iSuffix != null) {\niSuffix.printTo(buf, value);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
            "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn 0;\nint sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\nif (iFieldType >= SECONDS_MILLIS) {\nsum = Math.max(sum, 4);\nsum++;\nif (iFieldType == SECONDS_OPTIONAL_MILLIS &&\nsum -= 4; // remove three digits and decimal point\nvalueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\nint value = (int) valueLong;\nif (iPrefix != null) {\nif (iSuffix != null) {\nsum += iSuffix.calculatePrintedLength(value);\nreturn sum;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldValue(Lorg/joda/time/ReadablePeriod;)J",
            "method_body": "long getFieldValue(ReadablePeriod period) {\nif (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {\ntype = period.getPeriodType();\nif (type != null && isSupported(type, iFieldType) == false) {\nswitch (iFieldType) {\nvalue = period.get(DurationFieldType.years());\nbreak;\nvalue = period.get(DurationFieldType.months());\nbreak;\nvalue = period.get(DurationFieldType.weeks());\nbreak;\nvalue = period.get(DurationFieldType.days());\nbreak;\nvalue = period.get(DurationFieldType.hours());\nbreak;\nvalue = period.get(DurationFieldType.minutes());\nbreak;\nint seconds = period.get(DurationFieldType.seconds());\nint millis = period.get(DurationFieldType.millis());\nvalue = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;\nif (value == 0) {\nswitch (iPrintZeroSetting) {\nif (isZero(period) && iFieldFormatters[iFieldType] == this) {\nreturn Long.MAX_VALUE;\nreturn value;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\nreturn cStandard;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
            "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nvalues[realIndex] = newValue;\nreturn true;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:print(Lorg/joda/time/ReadablePeriod;)Ljava/lang/String;",
            "method_body": "public String print(ReadablePeriod period) {\ncheckPrinter();\ncheckPeriod(period);\nPeriodPrinter printer = getPrinter();\nStringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\nprinter.printTo(buf, period, iLocale);\nreturn buf.toString();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.Period:millis(I)Lorg/joda/time/Period;",
            "method_body": "public static Period millis(int millis) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.Period:seconds(I)Lorg/joda/time/Period;",
            "method_body": "public static Period seconds(int seconds) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isSupported(Lorg/joda/time/PeriodType;I)Z",
            "method_body": "boolean isSupported(PeriodType type, int field) {\nswitch (field) {\nreturn type.isSupported(DurationFieldType.years());\nreturn type.isSupported(DurationFieldType.months());\nreturn type.isSupported(DurationFieldType.weeks());\nreturn type.isSupported(DurationFieldType.days());\nreturn type.isSupported(DurationFieldType.hours());\nreturn type.isSupported(DurationFieldType.minutes());\nreturn type.isSupported(DurationFieldType.seconds()) ||\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:countFieldsToPrint(Lorg/joda/time/ReadablePeriod;ILjava/util/Locale;)I",
            "method_body": "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\nif (stopAt <= 0) {\nif (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {\nreturn 1;\nreturn 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.Period:<init>([ILorg/joda/time/PeriodType;)V",
            "method_body": "private Period(int[] values, PeriodType type) {\nsuper(values, type);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:checkPrinter()V",
            "method_body": "private void checkPrinter() {\nif (iPrinter == null) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.Period:years(I)Lorg/joda/time/Period;",
            "method_body": "public static Period years(int years) {\nreturn new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:checkPeriod(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "private void checkPeriod(ReadablePeriod period) {\nif (period == null) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isZero(Lorg/joda/time/ReadablePeriod;)Z",
            "method_body": "boolean isZero(ReadablePeriod period) {\nfor (int i = 0, isize = period.size(); i < isize; i++) {\nif (period.getValue(i) != 0) {\nreturn false;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
            "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 19
        }
    ]
}