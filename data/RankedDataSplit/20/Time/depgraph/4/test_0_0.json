{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith3",
    "test_body": "360: public void testWith3() {\n361: Partial test = createHourMinPartial();\n362: try {\n363: test.with(DateTimeFieldType.clockhourOfDay(), 6);\n364: fail();\n365: } catch (IllegalArgumentException ex) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Basics.testWith3(TestPartial_Basics.java:364)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
            "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\nint index = indexOf(fieldType);\nif (index == -1) {\nDateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\nint[] newValues = new int[newTypes.length];\nint i = 0;\nDurationField unitField = fieldType.getDurationType().getField(iChronology);\nif (unitField.isSupported()) {\nfor (; i < iTypes.length; i++) {\nDateTimeFieldType loopType = iTypes[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (loopUnitField.isSupported()) {\nint compare = unitField.compareTo(loopUnitField);\nif (compare > 0) {\nbreak;\n} else if (compare == 0) {\nDurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\nDurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\nif (rangeField.compareTo(loopRangeField) > 0) {\nSystem.arraycopy(iTypes, 0, newTypes, 0, i);\nSystem.arraycopy(iValues, 0, newValues, 0, i);\nnewTypes[i] = fieldType;\nnewValues[i] = value;\nSystem.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\nSystem.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\nPartial newPartial = new Partial(iChronology, newTypes, newValues);\niChronology.validate(newPartial, newValues);\nreturn newPartial;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V",
            "method_body": "Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\nsuper();\niChronology = chronology;\niTypes = types;\niValues = values;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (types == null) {\nif (values == null) {\nif (values.length != types.length) {\nif (types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nDurationField lastUnitField = null;\nfor (int i = 0; i < types.length; i++) {\nDateTimeFieldType loopType = types[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (i > 0) {\nint compare = lastUnitField.compareTo(loopUnitField);\nif (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n} else if (compare == 0) {\nlastUnitField = loopUnitField;\niTypes = (DateTimeFieldType[]) types.clone();\nchronology.validate(this, values);\niValues = (int[]) values.clone();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.Partial:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn 1;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getWrappedField().getMaximumValue(instant, values) + 1;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn getWrappedField().getMaximumValue() + 1;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getRangeDurationType() {\nreturn iRangeType;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn -1;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 19
        }
    ]
}