{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset",
    "test_body": "1249: public void testBug3476684_adjustOffset() {\n1250: final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n1251: DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n1252: DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n1253: DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n1254: 1255: assertSame(base, base.withEarlierOffsetAtOverlap());\n1256: assertSame(base, base.withLaterOffsetAtOverlap());\n1257: 1258: assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\n1259: assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n1260: 1261: assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n1262: assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n1263: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-02-25T23:15:00.000-03:00> but was:<2012-02-25T23:15:00.000-02:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset(TestDateTimeZoneCutover.java:1259)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}",
            "method_id": 180
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 181
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 182
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
            "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
            "method_id": 183
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 184
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn 1;\n}",
            "method_id": 185
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 186
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 187
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
            "method_id": 188
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 189
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn true;\n}",
            "method_id": 190
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 191
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 192
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
            "method_id": 193
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
            "method_id": 194
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
            "method_id": 195
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 196
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
            "method_id": 197
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}",
            "method_id": 198
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}",
            "method_id": 199
        }
    ]
}