{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
    "test_body": "public void testNormalizedStandard_periodType_monthsWeeks() {\nPeriodType type = PeriodType.forFields(new DurationFieldType[]{\nDurationFieldType.months(),\nDurationFieldType.weeks(),\nDurationFieldType.days()});\nPeriod test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\nPeriod result = test.normalizedStandard(type);\nassertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);",
    "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
            "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nthrow new UnsupportedOperationException(\"Field is not supported\");\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
            "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
            "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
            "method_body": "public boolean isPrecise() {\nreturn false;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.PeriodType:<init>(Ljava/lang/String;[Lorg/joda/time/DurationFieldType;[I)V",
            "method_body": "protected PeriodType(String name, DurationFieldType[] types, int[] indices) {\nsuper();\niName = name;\niTypes = types;\niIndices = indices;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
            "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\nif ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\nreturn diff;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
            "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
            "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
            "method_id": 59
        }
    ]
}