{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
    "test_body": "public void testNormalizedStandard_periodType_monthsWeeks() {\nPeriodType type = PeriodType.forFields(new DurationFieldType[]{\nDurationFieldType.months(),\nDurationFieldType.weeks(),\nDurationFieldType.days()});\nPeriod test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\nPeriod result = test.normalizedStandard(type);\nassertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);",
    "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PeriodType == false) {\nPeriodType other = (PeriodType) obj;\nreturn (Arrays.equals(iTypes, other.iTypes));\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
            "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
            "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
            "method_id": 66
        }
    ]
}