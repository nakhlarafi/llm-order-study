{
    "bug_id": 26,
    "test_id": 5,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange",
    "test_body": "public void testWithHourOfDayInDstChange() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withHourOfDay(2);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange(TestDateTimeZoneCutover.java:1087)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
            "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
            "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
            "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
            "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
            "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\noffset = standardOffset + saveMillis;\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
            "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
            "method_body": "public void printTo(\nbuf.append(iValue);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
            "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
            "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
            "method_id": 119
        }
    ]
}