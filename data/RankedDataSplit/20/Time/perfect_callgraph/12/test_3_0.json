{
    "bug_id": 12,
    "test_id": 3,
    "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1",
    "test_body": "public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\nGregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\ncal.set(Calendar.ERA, GregorianCalendar.BC);\ncal.set(Calendar.MILLISECOND, 7);\nLocalDate expected = new LocalDate(0, 2, 3);\nassertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDate_Constructors.java:147)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.LocalDate:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDate;",
            "method_body": "public static LocalDate fromDateFields(Date date) {\nif (date == null) {\nreturn new LocalDate(\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(III)V",
            "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
            "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 19
        }
    ]
}