{
    "bug_id": 12,
    "test_id": 2,
    "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1",
    "test_body": "public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\nGregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\ncal.set(Calendar.ERA, GregorianCalendar.BC);\ncal.set(Calendar.MILLISECOND, 7);\nLocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\nassertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDateTime_Constructors.java:117)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.LocalDateTime:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDateTime;",
            "method_body": "public static LocalDateTime fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDateTime(\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
            "method_body": "public LocalDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
            "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.year();\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\nreturn chrono.millisOfDay();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nlong millis = partial.getChronology().set(partial, 0L);\nprintTo(buf, null, millis, partial.getChronology());\n}\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
            "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 19
        }
    ]
}