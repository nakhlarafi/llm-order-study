{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n307: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n308: assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n309: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n310: try {\n311: DateTimeZone.forOffsetHoursMinutes(2, 60);\n312: fail();\n313: } catch (IllegalArgumentException ex) {}\n314: try {\n315: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n316: fail();\n317: } catch (IllegalArgumentException ex) {}\n318: try {\n319: DateTimeZone.forOffsetHoursMinutes(2, -1);\n320: fail();\n321: } catch (IllegalArgumentException ex) {}\n322: try {\n323: DateTimeZone.forOffsetHoursMinutes(-2, -1);\n324: fail();\n325: } catch (IllegalArgumentException ex) {}\n326: try {\n327: DateTimeZone.forOffsetHoursMinutes(24, 0);\n328: fail();\n329: } catch (IllegalArgumentException ex) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:328)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nif (sm != null) {\nsm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\nthrow new IllegalArgumentException(\"The datetime zone must not be null\");\ncDefault = zone;\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nreturn getDefault();\nreturn DateTimeZone.UTC;\nif (zone != null) {\nreturn zone;\nint offset = parseOffset(id);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\nreturn fixedOffsetZone(id, offset);\n}\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\nthrow new IllegalArgumentException(\"Id must not be null\");\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nreturn null;\n}",
            "method_id": 28
        }
    ]
}