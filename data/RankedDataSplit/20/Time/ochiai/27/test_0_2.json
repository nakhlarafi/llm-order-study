{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper();\nPeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);\ntype = (type == null ? converter.getPeriodType(period) : type);\ntype = checkPeriodType(type);\niType = type;\nif (this instanceof ReadWritablePeriod) {\niValues = new int[size()];\nchrono = DateTimeUtils.getChronology(chrono);\nconverter.setInto((ReadWritablePeriod) this, period, chrono);\niValues = new MutablePeriod(period, type, chrono).getValues();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:getParser()Lorg/joda/time/format/PeriodParser;",
            "method_body": "public PeriodParser getParser() {\nreturn iParser;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:setSeconds(I)V",
            "method_body": "public void setSeconds(int seconds) {\nsuper.setField(DurationFieldType.seconds(), seconds);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMonths()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendMonths() {\nappendField(MONTHS);\nreturn this;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendLiteral(String text) {\nif (text == null) {\nclearPrefix();\nLiteral literal = new Literal(text);\nappend0(literal, literal);\nreturn this;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setFieldInto([ILorg/joda/time/DurationFieldType;I)V",
            "method_body": "protected void setFieldInto(int[] values, DurationFieldType field, int value) {\nint index = indexOf(field);\nif (index == -1) {\nvalues[index] = value;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(JLorg/joda/time/PeriodType;)V",
            "method_body": "public MutablePeriod(long duration, PeriodType type) {\nsuper(duration, type, null);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
            "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.convert.ReadablePeriodConverter:setInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V",
            "method_body": "public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {\nduration.setPeriod((ReadablePeriod) object);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparator(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\nif (text == null || finalText == null) {\nclearPrefix();\nList<Object> pairs = iElementPairs;\nif (pairs.size() == 0) {\nSeparator lastSeparator = null;\nfor (i=pairs.size(); --i>=0; ) {\nif (pairs.get(i) instanceof Separator) {\ni--;  // element pairs\nif (lastSeparator != null && pairs.size() == 0) {\nObject[] comp = createComposite(pairs);\npairs.clear();\nSeparator separator = new Separator(\npairs.add(separator);\npairs.add(separator);\nreturn this;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public PeriodFormatter toFormatter() {\nPeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\niFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\nreturn formatter;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendWeeks()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendWeeks() {\nappendField(WEEKS);\nreturn this;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.Period:<init>(Ljava/lang/Object;)V",
            "method_body": "public Period(Object period) {\nsuper(period, null, null);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
            "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof PeriodPrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof PeriodParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
            "method_id": 59
        }
    ]
}