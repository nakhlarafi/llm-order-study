{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSecondsWithOptionalMillis()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\nappendField(SECONDS_OPTIONAL_MILLIS);\nreturn this;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "public void setPeriod(ReadablePeriod period) {\nsuper.setPeriod(period);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\nif (iElementPairs.size() > 0) {\noriginalPrinter = iElementPairs.get(iElementPairs.size() - 2);\noriginalParser = iElementPairs.get(iElementPairs.size() - 1);\nif (originalPrinter == null || originalParser == null ||\nclearPrefix();\nFieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\niElementPairs.set(iElementPairs.size() - 2, newField);\niElementPairs.set(iElementPairs.size() - 1, newField);\niFieldFormatters[newField.getFieldType()] = newField;\nreturn this;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:<init>()V",
            "method_body": "public PeriodFormatterBuilder() {\nclear();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:toPeriod()Lorg/joda/time/Period;",
            "method_body": "public Period toPeriod() {\nreturn new Period(this);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "protected void setPeriod(ReadablePeriod period) {\nif (period == null) {\nsetPeriodInternal(period);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nPeriodParser[] parsers = iParsers;\nif (parsers == null) {\nint len = parsers.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = parsers[i].parseInto(period, periodStr, position, locale);\nreturn position;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:<init>(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;ZZ)V",
            "method_body": "Separator(String text, String finalText, String[] variants,\nboolean useBefore, boolean useAfter) {\niText = text;\niFinalText = finalText;\nif ((finalText == null || text.equals(finalText)) &&\niParsedForms = new String[] {text};\niBeforePrinter = beforePrinter;\niBeforeParser = beforeParser;\niUseBefore = useBefore;\niUseAfter = useAfter;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
            "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nreturn values;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setField(Lorg/joda/time/DurationFieldType;I)V",
            "method_body": "protected void setField(DurationFieldType field, int value) {\nsetFieldInto(iValues, field, value);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn PeriodType.standard();\nreturn type;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "public MutablePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper(period, type, chrono);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:parse(Ljava/lang/String;I)I",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparatorIfFieldsAfter(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\nreturn appendSeparator(text, text, null, false, true);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInt(Ljava/lang/String;II)I",
            "method_body": "private int parseInt(String text, int position, int length) {\nif (length >= 10) {\nreturn Integer.parseInt(text.substring(position, position + length));\n}",
            "method_id": 39
        }
    ]
}