{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
    "test_body": "1551: public void testNormalizedStandard_periodType_monthsWeeks() {\n1552: PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n1553: DurationFieldType.months(),\n1554: DurationFieldType.weeks(),\n1555: DurationFieldType.days()});\n1556: Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n1557: Period result = test.normalizedStandard(type);\n1558: assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);",
    "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
            "method_body": "public Period withYears(int years) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\nreturn new Period(values, getPeriodType());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
            "method_body": "public Period normalizedStandard(PeriodType type) {\ntype = DateTimeUtils.getPeriodType(type);\nlong millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\nmillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\nmillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\nmillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\nmillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\nmillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\nPeriod result = new Period(millis, type, ISOChronology.getInstanceUTC());\nint years = getYears();\nint months = getMonths();\nif (years != 0 || months != 0) {\nyears = FieldUtils.safeAdd(years, months / 12);\nmonths = months % 12;\nif (years != 0) {\nresult = result.withYears(years);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
            "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nthrow new UnsupportedOperationException(\"Field is not supported\");\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "public Period(long duration, PeriodType type, Chronology chronology) {\nsuper(duration, type, chronology);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.PeriodType:forFields([Lorg/joda/time/DurationFieldType;)Lorg/joda/time/PeriodType;",
            "method_body": "public static synchronized PeriodType forFields(DurationFieldType[] types) {\nif (types == null || types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nMap<PeriodType, Object> cache = cTypes;\nif (cache.isEmpty()) {\nPeriodType inPartType = new PeriodType(null, types, null);\nObject cached = cache.get(inPartType);\nif (cached instanceof PeriodType) {\nreturn (PeriodType) cached;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.Period:getYears()I",
            "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.Period:getMonths()I",
            "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.Period:getWeeks()I",
            "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.Period:getDays()I",
            "method_body": "public int getDays() {\nreturn getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.Period:getHours()I",
            "method_body": "public int getHours() {\nreturn getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.Period:getMinutes()I",
            "method_body": "public int getMinutes() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.Period:getMillis()I",
            "method_body": "public int getMillis() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.Period:getSeconds()I",
            "method_body": "public int getSeconds() {\nreturn getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
            "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
            "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
            "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
            "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
            "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.PeriodType:hashCode()I",
            "method_body": "public int hashCode() {\nint hash = 0;\nfor (int i = 0; i < iTypes.length; i++) {\nhash += iTypes[i].hashCode();\nreturn hash;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
            "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
            "method_id": 19
        }
    ]
}