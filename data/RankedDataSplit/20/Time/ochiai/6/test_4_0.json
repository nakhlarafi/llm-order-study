{
    "bug_id": 6,
    "test_id": 4,
    "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
    "test_body": "128: public void test_cutoverPreZero() {\n129: DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\n130: try {\n131: GJChronology.getInstance(DateTimeZone.UTC, cutover);\n132: fail();\n133: } catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:toInstant()Lorg/joda/time/Instant;",
            "method_body": "public Instant toInstant() {\nreturn new Instant(getMillis());\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.LocalDate:toDateTimeAtStartOfDay(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;",
            "method_body": "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\nzone = DateTimeUtils.getZone(zone);\nChronology chrono = getChronology().withZone(zone);\nlong localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;\nlong instant = zone.convertLocalToUTC(localMillis, false);\ninstant = chrono.dayOfMonth().roundFloor(instant);\nreturn new DateTime(instant, chrono);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundCeiling(J)J",
            "method_body": "public long roundCeiling(long instant) {\nint year = get(instant);\nlong yearStartMillis = iChronology.getYearMillis(year);\nif (instant != yearStartMillis) {\ninstant = iChronology.getYearMillis(year + 1);\nreturn instant;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:<init>(Lorg/joda/time/chrono/JulianChronology;Lorg/joda/time/chrono/GregorianChronology;Lorg/joda/time/Instant;)V",
            "method_body": "private GJChronology(JulianChronology julian,\nsuper(null, new Object[] {julian, gregorian, cutoverInstant});\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
            "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nsynchronized (cCache) {\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i = chronos.size(); --i >= 0;) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nif (zone == DateTimeZone.UTC) {\nchrono = new GJChronology\nchronos.add(chrono);\n}\nreturn chrono;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nObject[] params = (Object[])getParam();\nJulianChronology julian = (JulianChronology)params[0];\nGregorianChronology gregorian = (GregorianChronology)params[1];\nInstant cutoverInstant = (Instant)params[2];\niCutoverMillis = cutoverInstant.getMillis();\niJulianChronology = julian;\niGregorianChronology = gregorian;\niCutoverInstant = cutoverInstant;\nif (getBase() != null) {\nif (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\niGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\nfields.copyFieldsFrom(gregorian);\nif (gregorian.millisOfDay().get(iCutoverMillis) == 0) {\nfields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\nfields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\nfields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\nfields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\nfields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\nfields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\nfields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\nfields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\nfields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\nfields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\nfields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\nfields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\nlong cutover = gregorian.year().roundCeiling(iCutoverMillis);\nfields.dayOfYear = new CutoverField(\nlong cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\nfields.weekOfWeekyear = new CutoverField(\nfields.year = new ImpreciseCutoverField(\nfields.years = fields.year.getDurationField();\nfields.yearOfEra = new ImpreciseCutoverField(\nfields.yearOfCentury = new ImpreciseCutoverField(\nfields.centuryOfEra = new ImpreciseCutoverField(\nfields.centuries = fields.centuryOfEra.getDurationField();\nfields.monthOfYear = new ImpreciseCutoverField(\nfields.months = fields.monthOfYear.getDurationField();\nfields.weekyear = new ImpreciseCutoverField(\nfields.weekyearOfCentury = new ImpreciseCutoverField(\nfields.weekyears = fields.weekyear.getDurationField();\nCutoverField cf = new CutoverField\ncf.iRangeDurationField = fields.months;\nfields.dayOfMonth = cf;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:julianToGregorianByYear(J)J",
            "method_body": "long julianToGregorianByYear(long instant) {\nreturn convertByYear(instant, iJulianChronology, iGregorianChronology);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
            "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\nthis(julianField, gregorianField, cutoverMillis, false);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V",
            "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField,\nlong cutoverMillis, boolean convertByWeekyear) {\nsuper(gregorianField.getType());\niJulianField = julianField;\niGregorianField = gregorianField;\niCutover = cutoverMillis;\niConvertByWeekyear = convertByWeekyear;\niDurationField = gregorianField.getDurationField();\nDurationField rangeField = gregorianField.getRangeDurationField();\nif (rangeField == null) {\nrangeField = julianField.getRangeDurationField();\niRangeDurationField = rangeField;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
            "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\nthis(julianField, gregorianField, null, cutoverMillis, false);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;J)V",
            "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\nthis(julianField, gregorianField, durationField, cutoverMillis, false);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V",
            "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n{\nsuper(julianField, gregorianField, cutoverMillis, convertByWeekyear);\nif (durationField == null) {\ndurationField = new LinkedDurationField(iDurationField, this);\niDurationField = durationField;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;)V",
            "method_body": "LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\nsuper(durationField, durationField.getType());\niField = dateTimeField;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
            "method_id": 19
        }
    ]
}