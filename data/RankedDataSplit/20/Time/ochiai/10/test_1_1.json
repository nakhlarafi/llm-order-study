{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay",
    "test_body": "130: public void testFactory_monthsBetween_RPartial_MonthDay() {\n131: MonthDay start = new MonthDay(2, 1);\n132: MonthDay end1 = new MonthDay(2, 28);\n133: MonthDay end2 = new MonthDay(2, 29);\n134: MonthDay end3 = new MonthDay(3, 1);\n135: 136: assertEquals(0, Months.monthsBetween(start, end1).getMonths());\n137: assertEquals(0, Months.monthsBetween(start, end2).getMonths());\n138: assertEquals(1, Months.monthsBetween(start, end3).getMonths());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Months.monthsBetween(Months.java:161)\nat org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay(TestMonths.java:137)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
            "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getValue()I",
            "method_body": "protected int getValue() {\nreturn iPeriod;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
            "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getDifferenceAsLong(JJ)J",
            "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nif (minuendInstant < subtrahendInstant) {\nint minuendYear = iChronology.getYear(minuendInstant);\nint minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);\nint subtrahendYear = iChronology.getYear(subtrahendInstant);\nint subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);\nlong difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;\nint minuendDom = iChronology.getDayOfMonth\nif (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {\nint subtrahendDom = iChronology.getDayOfMonth\nif (subtrahendDom > minuendDom) {\nlong minuendRem = minuendInstant\nlong subtrahendRem = subtrahendInstant\nif (minuendRem < subtrahendRem) {\nreturn difference;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn ImpreciseDateTimeField.this\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDifference(JJ)I",
            "method_body": "public abstract int get(long instant);\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
            "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
            "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
            "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 39
        }
    ]
}