{
    "bug_id": 3,
    "test_id": 2,
    "test_name": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
    "test_body": "182: public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n183: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n184: test.addHours(1);\n185: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n186: test.add(DurationFieldType.years(), 0);\n187: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n188: }\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:187)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
            "method_id": 140
        }
    ]
}