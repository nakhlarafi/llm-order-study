{
    "bug_id": 26,
    "test_id": 7,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone",
    "test_body": "1063: public void testWithMinuteOfHourInDstChange_mockZone() {\n1064: DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n1065: assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\n1066: DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n1067: DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n1068: assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\n1069: DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n1070: assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n1071: 1072: DateTime testPre1 = pre.withMinuteOfHour(30);\n1073: assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\n1074: DateTime testPre2 = pre.withMinuteOfHour(50);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone(TestDateTimeZoneCutover.java:1073)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
            "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nint offset = 0;\nint hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\nif (hoursInMinutes < 0) {\nminutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
            "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
            "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
            "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
            "method_id": 39
        }
    ]
}