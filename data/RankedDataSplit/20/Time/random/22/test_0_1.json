{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone",
    "test_body": "public void testConstructor_long_fixedZone() throws Throwable {\nDateTimeZone zone = DateTimeZone.getDefault();\ntry {\nDateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\nlong length =\n(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n5L * DateTimeConstants.MILLIS_PER_HOUR +\n6L * DateTimeConstants.MILLIS_PER_MINUTE +\n7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\nPeriod test = new Period(length);\nassertEquals(PeriodType.standard(), test.getPeriodType());\n// only time fields are precise in AllType\nassertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\nassertEquals(0, test.getMonths());\nassertEquals(0, test.getWeeks());\nassertEquals(0, test.getDays());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<64>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone(TestPeriod_Constructors.java:188)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nint offset = getOffsetToAdd(subtrahendInstant);\nreturn iField.getDifference\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.Period:<init>(J)V",
            "method_body": "public Period(long duration) {\nsuper(duration);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:isFixed()Z",
            "method_body": "public boolean isFixed() {\nreturn true;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
            "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.Period:getMonths()I",
            "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
            "method_body": "public boolean isPrecise() {\nreturn false;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.PeriodType:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
            "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.Period:getYears()I",
            "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
            "method_id": 39
        }
    ]
}