{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1",
    "test_body": "public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\nGregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\ncal.set(Calendar.ERA, GregorianCalendar.BC);\ncal.set(Calendar.MILLISECOND, 7);\nLocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\nassertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDateTime_Constructors.java:155)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDateTime(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niChronology = chronology;\niLocalMillis = instant;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "public int get(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).get(getLocalMillis());\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
            "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
            "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).isSupported();\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
            "method_id": 97
        }
    ]
}