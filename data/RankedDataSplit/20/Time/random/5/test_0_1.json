{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
    "test_body": "public void testNormalizedStandard_periodType_monthsWeeks() {\nPeriodType type = PeriodType.forFields(new DurationFieldType[]{\nDurationFieldType.months(),\nDurationFieldType.weeks(),\nDurationFieldType.days()});\nPeriod test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\nPeriod result = test.normalizedStandard(type);\nassertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);",
    "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.PeriodType:forFields([Lorg/joda/time/DurationFieldType;)Lorg/joda/time/PeriodType;",
            "method_body": "public static synchronized PeriodType forFields(DurationFieldType[] types) {\nif (types == null || types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nMap<PeriodType, Object> cache = cTypes;\nif (cache.isEmpty()) {\nPeriodType inPartType = new PeriodType(null, types, null);\nObject cached = cache.get(inPartType);\nif (cached instanceof PeriodType) {\nreturn (PeriodType) cached;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
            "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PeriodType == false) {\nPeriodType other = (PeriodType) obj;\nreturn (Arrays.equals(iTypes, other.iTypes));\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
            "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
            "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.PeriodType:hashCode()I",
            "method_body": "public int hashCode() {\nint hash = 0;\nfor (int i = 0; i < iTypes.length; i++) {\nhash += iTypes[i].hashCode();\nreturn hash;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.Period:getHours()I",
            "method_body": "public int getHours() {\nreturn getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.Period:getSeconds()I",
            "method_body": "public int getSeconds() {\nreturn getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.weeks();\nreturn chronology.days();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
            "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
            "method_id": 39
        }
    ]
}