{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust",
    "test_body": "public void testMinusMonths_int_endOfMonthAdjust() {\nMonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\nMonthDay result = test.minusMonths(1);\nMonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\nassertEquals(expected, result);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust(TestMonthDay_Basics.java:563)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
            "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:appendSeparator(Lorg/joda/time/format/DateTimeFormatterBuilder;Z)V",
            "method_body": "private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\nif (extended) {\nbld.appendLiteral('-');\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
            "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
            "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
            "method_body": "MonthDay(MonthDay partial, int[] values) {\nsuper(partial, values);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
            "method_body": "public boolean isSupported(DateTimeFieldType type) {\nreturn (indexOf(type) != -1);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:forFields(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public static DateTimeFormatter forFields(\nif (fields == null || fields.size() == 0) {\nSet<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);\nint inputSize = workingFields.size();\nboolean reducedPrec = false;\nDateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\nif (workingFields.contains(DateTimeFieldType.monthOfYear())) {\nreducedPrec = dateByMonth(bld, workingFields, extended, strictISO);\nboolean datePresent = (workingFields.size() < inputSize);\ntime(bld, workingFields, extended, strictISO, reducedPrec, datePresent);\nif (bld.canBuildFormatter() == false) {\nfields.retainAll(workingFields);\n}\nreturn bld.toFormatter();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "protected int indexOfSupported(DateTimeFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
            "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
            "method_body": "private boolean isFormatter(Object f) {\nreturn (isPrinter(f) || isParser(f));\n}",
            "method_id": 19
        }
    ]
}