{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "public void testBug2495455() {\nPeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n.appendLiteral(\"P\")\n.appendYears()\n.appendSuffix(\"Y\")\n.appendMonths()\n.appendSuffix(\"M\")\n.appendWeeks()\n.appendSuffix(\"W\")\n.appendDays()\n.appendSuffix(\"D\")\n.appendSeparatorIfFieldsAfter(\"T\")\n.appendHours()\n.appendSuffix(\"H\")\n.appendMinutes()\n.appendSuffix(\"M\")\n.appendSecondsWithOptionalMillis()\n.appendSuffix(\"S\")\n.toFormatter();\nPeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n.append(ISOPeriodFormat.standard())\n.toFormatter();\npfmt1.parsePeriod(\"PT1003199059S\");\npfmt2.parsePeriod(\"PT1003199059S\");\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:<init>(Ljava/lang/String;)V",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:size()I",
            "method_body": "public int size() {\nreturn iType.size();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendWeeks()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendWeeks() {\nappendField(WEEKS);\nreturn this;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
            "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public PeriodFormatter toFormatter() {\nPeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\niFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\nreturn formatter;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:parsePeriod(Ljava/lang/String;)Lorg/joda/time/Period;",
            "method_body": "public Period parsePeriod(String text) {\ncheckParser();\nreturn parseMutablePeriod(text).toPeriod();\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:finish(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder$Separator;",
            "method_body": "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\niAfterPrinter = afterPrinter;\niAfterParser = afterParser;\nreturn this;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:<init>()V",
            "method_body": "public PeriodFormatterBuilder() {\nclear();\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendDays()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendDays() {\nappendField(DAYS);\nreturn this;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendLiteral(String text) {\nif (text == null) {\nclearPrefix();\nLiteral literal = new Literal(text);\nappend0(literal, literal);\nreturn this;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
            "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof PeriodPrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof PeriodParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
            "method_body": "static String createErrorMessage(final String text, final int errorPos) {\nint sampleLen = errorPos + 32;\nif (text.length() <= sampleLen + 3) {\nsampleText = text;\nif (errorPos <= 0) {\nif (errorPos >= text.length()) {\nreturn \"Invalid format: \\\"\" + sampleText + \"\\\" is malformed at \\\"\" +\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\nreturn cStandard;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSecondsWithOptionalMillis()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\nappendField(SECONDS_OPTIONAL_MILLIS);\nreturn this;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
            "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nreturn values;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
            "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(IIIZI[Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
            "method_body": "FieldFormatter(int minPrintedDigits, int printZeroSetting,\nPeriodFieldAffix prefix, PeriodFieldAffix suffix) {\niMinPrintedDigits = minPrintedDigits;\niPrintZeroSetting = printZeroSetting;\niMaxParsedDigits = maxParsedDigits;\niRejectSignedValues = rejectSignedValues;\niFieldType = fieldType;\niFieldFormatters = fieldFormatters;\niPrefix = prefix;\niSuffix = suffix;\n}",
            "method_id": 79
        }
    ]
}