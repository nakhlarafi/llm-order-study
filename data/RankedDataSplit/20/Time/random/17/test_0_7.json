{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset",
    "test_body": "public void testBug3476684_adjustOffset() {\nfinal DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\nDateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\nDateTime baseBefore = base.plusHours(1);  // 23:15 (first)\nDateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n1255: assertSame(base, base.withEarlierOffsetAtOverlap());\nassertSame(base, base.withLaterOffsetAtOverlap());\n1258: assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\nassertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n1261: assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\nassertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-02-25T23:15:00.000-03:00> but was:<2012-02-25T23:15:00.000-02:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset(TestDateTimeZoneCutover.java:1259)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
            "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn true;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
            "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:adjustOffset(JZ)J",
            "method_body": "public long adjustOffset(long instant, boolean earlierOrLater) {\nlong instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\nlong instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\nif (instantBefore == instantAfter) {\nlong local = convertUTCToLocal(instant);\nreturn convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (int) getUnitMillis();\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
            "method_body": "public long getMillis() {\nreturn iMillis;\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
            "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
            "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
            "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
            "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
            "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
            "method_id": 159
        }
    ]
}