{
    "bug_id": 1,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers",
    "test_body": "52: public void shouldVerifyUsingMatchers() {\n53: stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n54: when(three.varargsObject(5, \"first arg\", \"second arg\")).thenReturn(\"stubbed\");\n55: 56: try {\n57: one.oneArg(true);\n58: fail();\n59: } catch (RuntimeException e) {}\n60: 61: one.simpleMethod(100);\n62: two.simpleMethod(\"test Mockito\");\n63: three.varargsObject(10, \"first arg\", \"second arg\");\n64: 65: assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n66: 67: verify(one).oneArg(eq(true));\n68: verify(one).simpleMethod(anyInt());\n69: verify(two).simpleMethod(startsWith(\"test\"));\n70: verify(three).varargsObject(5, \"first arg\", \"second arg\");\n71: verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n72: 73: verifyNoMoreInteractions(one, two, three);\n74: 75: try {\n76: verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\n77: fail();\n78: } catch (WantedButNotInvoked e) {}\n79: }\n",
    "stack_trace": "java.lang.UnsupportedOperationException\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:123)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:94)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$403169643.varargsObject(Unknown Source)\nat org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers(VerificationAndStubbingUsingMatchersTest.java:65)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, (List<Matcher>)(List) lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject result = delegate.handle(invocation);\nClass<?> returnType = invocation.getMethod().getReturnType();\nif(result == null && returnType.isPrimitive()) {\nreturn new HandyReturnValues().returnFor(returnType);\nreturn result;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject returnedValue = mockHandler.handle(invocation);\nnotifyMethodCall(invocation, returnedValue);\nreturn returnedValue;\n} catch (Throwable t){\nnotifyMethodCallException(invocation, t);\nthrow t;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\ninvocationContainerImpl.setMethodForStubbing(invocationMatcher);\nreturn null;\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nnew AnswersValidator().validateDefaultAnswerReturnedValue(invocation, ret);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.verification.DefaultRegisteredInvocations:add(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\nsynchronized (invocations) {\ninvocations.add(invocation);\n}\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:argumentsToMatchers([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "public static List<Matcher> argumentsToMatchers(Object[] arguments) {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nif (arg != null && arg.getClass().isArray()) {\nmatchers.add(new Equals(arg));\nreturn matchers;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\nfinal int nonVarArgsCount = args.length - 1;\nif (args[nonVarArgsCount] == null) {\nvarArgs = new Object[] { null };\nvarArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\nfinal int varArgsCount = varArgs.length;\nObject[] newArgs = new Object[nonVarArgsCount + varArgsCount];\nSystem.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\nSystem.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\nreturn newArgs;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.creation.instance.ObjenesisInstantiator:newInstance(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T newInstance(Class<T> cls) {\nreturn objenesis.newInstance(cls);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nthreadSafely().mockingStarted(mock, classToMock);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getInvocationListeners()Ljava/util/List;",
            "method_body": "public List<InvocationListener> getInvocationListeners() {\nreturn invocationListeners;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isStubOnly()Z",
            "method_body": "public boolean isStubOnly() {\nreturn stubOnly;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getOuterClassInstance()Ljava/lang/Object;",
            "method_body": "public Object getOuterClassInstance() {\nreturn outerClassInstance;\n}",
            "method_id": 119
        }
    ]
}