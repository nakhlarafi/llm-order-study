{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "113: public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\n114: MockitoAnnotations.initMocks(this);\n115: assertNull(otherSuperUnderTesting.candidate1);\n116: assertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public TypeBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void safelyDisableAccess(AccessibleObject accessibleObject) {\nassert wasAccessible != null : \"accessibility info shall not be null\";\naccessibleObject.setAccessible(wasAccessible);\n}\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter$2:thenInject()Ljava/lang/Object;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:resetMock(Ljava/lang/Object;)V",
            "method_body": "public <T> void resetMock(T mock) {\nInternalMockHandler oldHandler = (InternalMockHandler) getMockHandler(mock);\nMockCreationSettings settings = oldHandler.getMockSettings();\nMockHandler newHandler = new MockHandlerFactory().create(settings);\nmockMaker.resetMock(mock, newHandler, settings);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.Mockito:reset([Ljava/lang/Object;)V",
            "method_body": "public static <T> void reset(T ... mocks) {\nMOCKITO_CORE.reset(mocks);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:reset([Ljava/lang/Object;)V",
            "method_body": "public <T> void reset(T ... mocks) {\nmockingProgress.validateState();\nmockingProgress.reset();\nmockingProgress.resetOngoingStubbing();\nfor (T m : mocks) {\nmockUtil.resetMock(m);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.SuperTypesLastSorter$1:compare(Ljava/lang/reflect/Field;Ljava/lang/reflect/Field;)I",
            "method_body": "public int compare(Field o1, Field o2)\nreturn o1.getName().compareTo(o2.getName());\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:assertNotInterface(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private static void assertNotInterface(Object testInstance, Class<?> type) {\ntype = testInstance != null? testInstance.getClass() : type;\nif (type.isInterface()) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator:instantiate()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "FieldInitializationReport instantiate();\nNoArgConstructorInstantiator(Object testClass, Field field) {\nthis.testClass = testClass;\nthis.field = field;\n}\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = field.getType().getDeclaredConstructor();\nchanger.enableAccess(constructor);\nfinal Object[] noArg = new Object[0];\nObject newFieldInstance = constructor.newInstance(noArg);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), true, false);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:assertNoIncompatibleAnnotations(Ljava/lang/Class;Ljava/lang/reflect/Field;[Ljava/lang/Class;)V",
            "method_body": "void assertNoIncompatibleAnnotations(Class annotation, Field field, Class... undesiredAnnotations) {\nfor (Class u : undesiredAnnotations) {\nif (field.isAnnotationPresent(u)) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter$1:thenInject()Ljava/lang/Object;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:remove(Ljava/lang/Object;)Z",
            "method_body": "public boolean remove(Object mock) {\nreturn backingHashSet.remove(HashCodeAndEqualsMockWrapper.of(mock));\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public BeanPropertySetter(final Object target, final Field propertyField) {\nthis(target, propertyField, false);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:reportNoSetterFound()V",
            "method_body": "private void reportNoSetterFound() {\nif(reportNoSetterFound) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nif (!(o instanceof HashCodeAndEqualsMockWrapper)) return false;\nHashCodeAndEqualsMockWrapper that = (HashCodeAndEqualsMockWrapper) o;\nreturn mockInstance == that.mockInstance;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Z)V",
            "method_body": "public BeanPropertySetter(final Object target, final Field propertyField, boolean reportNoSetterFound) {\nthis.field = propertyField;\nthis.target = target;\nthis.reportNoSetterFound = reportNoSetterFound;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:set(Ljava/lang/Object;)Z",
            "method_body": "public boolean set(final Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\nMethod writeMethod = null;\nwriteMethod = target.getClass().getMethod(setterName(field.getName()), field.getType());\nchanger.enableAccess(writeMethod);\nwriteMethod.invoke(target, value);\nreturn true;\n} catch (NoSuchMethodException e) {\nreportNoSetterFound();\nif(writeMethod != null) {\nreportNoSetterFound();\nreturn false;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:setterName(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String setterName(String fieldName) {\nreturn new StringBuilder(SET_PREFIX)\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.util.collections.Sets:newMockSafeHashSet(Ljava/lang/Iterable;)Ljava/util/Set;",
            "method_body": "public static Set<Object> newMockSafeHashSet(Iterable<Object> mocks) {\nreturn HashCodeAndEqualsSafeSet.of(mocks);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.PropertyAndSetterInjection$1:isOut(Ljava/lang/reflect/Field;)Z",
            "method_body": "public boolean isOut(Field object) {\nreturn Modifier.isFinal(object.getModifiers()) || Modifier.isStatic(object.getModifiers());\n}",
            "method_id": 39
        }
    ]
}