{
    "bug_id": 20,
    "test_id": 1,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_inner_classes",
    "test_body": "50: public void can_mock_inner_classes() {\n51: InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));\n52: assertEquals(\"hey!\", mock.getMessage());\n53: }\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<hey!> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_inner_classes(CreatingMocksWithConstructorTest.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.answers.CallsRealMethods:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nif (Modifier.isAbstract(invocation.getMethod().getModifiers())) {\nreturn RETURNS_DEFAULTS.answer(invocation);\nreturn invocation.callRealMethod();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.InterceptedInvocation:callRealMethod()Ljava/lang/Object;",
            "method_body": "public Object callRealMethod() throws Throwable {\nif (!superMethod.isInvokable()) {\nreturn superMethod.invoke();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor:interceptSuperCallable(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Ljava/util/concurrent/Callable;)Ljava/lang/Object;",
            "method_body": "public Object interceptSuperCallable(@This Object mock,\nreturn doIntercept(\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.InterceptedInvocation$SuperMethod$FromCallable:<init>(Ljava/util/concurrent/Callable;)V",
            "method_body": "public FromCallable(Callable<?> callable) {\nthis.callable = callable;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.ClassInstantiator$UsingObjenesis:instantiate(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "<T> T instantiate(Class<T> type);\nreturn objenesis.newInstance(type);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nthreadSafely().mockingStarted(mock, classToMock);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getInvocationListeners()Ljava/util/List;",
            "method_body": "public List<InvocationListener> getInvocationListeners() {\nreturn invocationListeners;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isStubOnly()Z",
            "method_body": "public boolean isStubOnly() {\nreturn stubOnly;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getOuterClassInstance()Ljava/lang/Object;",
            "method_body": "public Object getOuterClassInstance() {\nreturn outerClassInstance;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public MockMethodInterceptor(InternalMockHandler handler, MockCreationSettings mockCreationSettings) {\nthis.handler = handler;\nthis.mockCreationSettings = mockCreationSettings;\nacrossJVMSerializationFeature = new AcrossJVMSerializationFeature();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator:get(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class<? extends T> get(final Class<T> mockedType, final Set<Class> interfaces) {\navoidingClassLeakCacheLock.lock();\nClass generatedMockClass = mockCachePerClassLoaderOf(mockedType).getOrGenerateMockClass(\nreturn generatedMockClass;\navoidingClassLeakCacheLock.unlock();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator:mockCachePerClassLoaderOf(Ljava/lang/Class;)Lorg/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator$CachedBytecodeGenerator;",
            "method_body": "private <T> CachedBytecodeGenerator mockCachePerClassLoaderOf(Class<T> mockedType) {\nif (!avoidingClassLeakageCache.containsKey(mockedType.getClassLoader())) {\nreturn avoidingClassLeakageCache.get(mockedType.getClassLoader());\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:generateMockClass(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class<? extends T> generateMockClass(Class<T> mockedType, Set<Class> interfaces) {\nDynamicType.Builder<T> builder = byteBuddy.subclass(mockedType, ConstructorStrategy.Default.IMITATE_SUPER_TYPE)\nClass<?>[] allMockedTypes = new Class<?>[interfaces.size() + 1];\nallMockedTypes[0] = mockedType;\nint index = 1;\nfor (Class<?> type : interfaces) {\nreturn builder.make()\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:nameFor(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private String nameFor(Class<?> type) {\nString typeName = type.getName();\nif (typeName.startsWith(\"java.\") || (type.getPackage() != null && type.getPackage().isSealed())) {\nreturn String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isUsingConstructor()Z",
            "method_body": "public boolean isUsingConstructor() {\nreturn useConstructor;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator:getOrGenerateMockClass(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class getOrGenerateMockClass(Class<T> mockedType, Set<Class> interfaces) {\nMockKey mockKey = MockKey.of(mockedType, interfaces);\nClass generatedMockClass = null;\nWeakReference<Class> classWeakReference = generatedClassCache.get(mockKey);\nif(classWeakReference != null) {\ngeneratedMockClass = classWeakReference.get();\nif(generatedMockClass == null) {\ngeneratedMockClass = generate(mockedType, interfaces);\ngeneratedClassCache.put(mockKey, new WeakReference<Class>(generatedMockClass));\nreturn generatedMockClass;\n}",
            "method_id": 59
        }
    ]
}