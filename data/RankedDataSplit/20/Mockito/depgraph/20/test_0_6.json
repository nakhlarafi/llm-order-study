{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class",
    "test_body": "124: public void should_spy_inner_class() throws Exception {\n125: 126: class WithMockAndSpy {\n127: @Spy private InnerStrength strength;\n128: @Mock private List<String> list;\n129: 130: abstract class InnerStrength {\n131: private final String name;\n132: 133: InnerStrength() {\n134: // Make sure that @Mock fields are always injected before @Spy fields.\n135: assertNotNull(list);\n136: // Make sure constructor is indeed called.\n137: this.name = \"inner\";\n138: }\n139: 140: abstract String strength();\n141: 142: String fullStrength() {\n143: return name + \" \" + strength();\n144: }\n145: }\n146: }\n147: WithMockAndSpy outer = new WithMockAndSpy();\n148: MockitoAnnotations.initMocks(outer);\n149: when(outer.strength.strength()).thenReturn(\"strength\");\n150: assertEquals(\"inner strength\", outer.strength.fullStrength());\n151: }\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class(SpyAnnotationTest.java:150)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:nop()Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:of([Ljava/lang/Object;)Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;",
            "method_body": "public static HashCodeAndEqualsSafeSet of(Object... mocks) {\nreturn of(Arrays.asList(mocks));\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:of(Ljava/lang/Iterable;)Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;",
            "method_body": "public static HashCodeAndEqualsSafeSet of(Iterable<Object> objects) {\nHashCodeAndEqualsSafeSet hashCodeAndEqualsSafeSet = new HashCodeAndEqualsSafeSet();\nif (objects != null) {\nfor (Object mock : objects) {\nreturn hashCodeAndEqualsSafeSet;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:spiedInstance(Ljava/lang/Object;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings spiedInstance(Object spiedInstance) {\nthis.spiedInstance = spiedInstance;\nreturn this;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldCopier:copyValue(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public <T> void copyValue(T from, T to, Field field) throws IllegalAccessException {\nObject value = field.get(from);\nfield.set(to, value);\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\nGlobalConfiguration.validate();\nif (verificationMode != null) {\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyToMock(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public <T> void copyToMock(T from, T mock) {\ncopy(from, mock, from.getClass(), mock.getClass().getSuperclass());\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copy(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)V",
            "method_body": "private <T> void copy(T from, T to, Class fromClazz, Class toClass) {\nwhile (fromClazz != Object.class) {\ncopyValues(from, to, fromClazz);\nfromClazz = fromClazz.getSuperclass();\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyValues(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private <T> void copyValues(T from, T mock, Class classFrom) {\nField[] fields = classFrom.getDeclaredFields();\nfor (int i = 0; i < fields.length; i++) {\nField field = fields[i];\nif (Modifier.isStatic(field.getModifiers())) {\ncontinue;\nAccessibilityChanger accessibilityChanger = new AccessibilityChanger();\naccessibilityChanger.enableAccess(field);\nfieldCopier.copyValue(from, mock, field);\naccessibilityChanger.safelyDisableAccess(field);\n}\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.Answers:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn implementation.answer(invocation);\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:resetInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\nthis.invocationForStubbing = invocationMatcher;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 139
        }
    ]
}