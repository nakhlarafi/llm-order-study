{
    "bug_id": 25,
    "test_id": 1,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic",
    "test_body": "93: public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\n94: GenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n95: ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);\n96: 97: assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();\n98: assertThat(listOfInteger.get(25)).isEqualTo(0);",
    "stack_trace": "java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.String\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic(ReturnsGenericDeepStubsTest.java:97)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType:<init>(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;[Ljava/lang/reflect/TypeVariable;Ljava/lang/reflect/ParameterizedType;)V",
            "method_body": "public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {\nthis.parameterizedType = parameterizedType;\nthis.typeParameters = typeParameters;\nthis.contextualActualTypeParameters = source.contextualActualTypeParameters;\nreadTypeParameters();\nreadTypeVariables();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType:readTypeParameters()V",
            "method_body": "private void readTypeParameters() {\nregisterTypeParametersOn(typeParameters);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType:readTypeVariables()V",
            "method_body": "private void readTypeVariables() {\nregisterTypeVariablesOn(parameterizedType);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType:rawType()Ljava/lang/Class;",
            "method_body": "public Class<?> rawType() {\nreturn (Class<?>) parameterizedType.getRawType();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:getStubbedInvocations()Ljava/util/List;",
            "method_body": "public List<StubbedInvocationMatcher> getStubbedInvocations() {\nreturn stubbed;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:resolveGenericReturnType(Ljava/lang/reflect/Method;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\nType genericReturnType = method.getGenericReturnType();\nif (genericReturnType instanceof Class) {\nif (genericReturnType instanceof ParameterizedType) {\nreturn new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\nif (genericReturnType instanceof TypeVariable) {\nreturn new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeParametersOn([Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\nfor (TypeVariable typeParameter : typeParameters) {\ncontextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport:<init>(Ljava/lang/Class;)V",
            "method_body": "public FromClassGenericMetadataSupport(Class<?> clazz) {\nthis.clazz = clazz;\nreadActualTypeParametersOnDeclaringClass();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport:readActualTypeParametersOnDeclaringClass()V",
            "method_body": "private void readActualTypeParametersOnDeclaringClass() {\nregisterTypeParametersOn(clazz.getTypeParameters());\nregisterTypeVariablesOn(clazz.getGenericSuperclass());\nfor (Type genericInterface : clazz.getGenericInterfaces()) {\nregisterTypeVariablesOn(genericInterface);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeVariablesOn(Ljava/lang/reflect/Type;)V",
            "method_body": "protected void registerTypeVariablesOn(Type classType) {\nif (!(classType instanceof ParameterizedType)) {\nreturn;\nParameterizedType parameterizedType = (ParameterizedType) classType;\nTypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\nTypeVariable typeParameter = typeParameters[i];\nType actualTypeArgument = actualTypeArguments[i];\nif (actualTypeArgument instanceof WildcardType) {\ncontextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\ncontextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:inferFrom(Ljava/lang/reflect/Type;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public static GenericMetadataSupport inferFrom(Type type) {\nChecks.checkNotNull(type, \"type\");\nif (type instanceof Class) {\nreturn new FromClassGenericMetadataSupport((Class<?>) type);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:getInvocationContainer()Lorg/mockito/internal/stubbing/InvocationContainer;",
            "method_body": "public InvocationContainer getInvocationContainer() {\nreturn invocationContainerImpl;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:getInvocationContainer()Lorg/mockito/internal/stubbing/InvocationContainer;",
            "method_body": "public InvocationContainer getInvocationContainer() {\nreturn delegate.getInvocationContainer();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getInvocationContainer()Lorg/mockito/internal/stubbing/InvocationContainer;",
            "method_body": "public InvocationContainer getInvocationContainer() {\nreturn mockHandler.getInvocationContainer();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher:<init>(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/stubbing/Answer;)V",
            "method_body": "public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\nsuper(invocation.getInvocation(), invocation.getMatchers());\nthis.answers.add(answer);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nthreadSafely().stubbingCompleted(invocation);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.AnswersValidator:validate(Lorg/mockito/stubbing/Answer;Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void validate(Answer<?> answer, Invocation invocation) {\nMethodInfo methodInfo = new MethodInfo(invocation);\nif (answer instanceof ThrowsException) {\nif (answer instanceof Returns) {\nif (answer instanceof DoesNothing) {\nif (answer instanceof CallsRealMethods) {\nif (answer instanceof ReturnsArgumentAt) {\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 59
        }
    ]
}