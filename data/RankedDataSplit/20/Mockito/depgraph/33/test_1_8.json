{
    "bug_id": 33,
    "test_id": 1,
    "test_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldVerificationWorks",
    "test_body": "44: public void shouldVerificationWorks() {\n45: iterable.iterator();\n46: 47: verify(iterable).iterator();\n48: verify((Iterable) iterable).iterator();\n49: }\n",
    "stack_trace": "junit.framework.AssertionFailedError:\nWanted but not invoked:\nmyIterable.iterator();\n-> at org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldVerificationWorks(InheritedGenericsPolimorphicCallTest.java:48)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:getHandler()Lorg/mockito/internal/MockitoInvocationHandler;",
            "method_body": "public MockitoInvocationHandler getHandler() {\nreturn handler;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:getInvocations()Ljava/util/List;",
            "method_body": "public List<Invocation> getInvocations() {\nreturn registeredInvocations.getAll();\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getMockHandler(Ljava/lang/Object;)Lorg/mockito/internal/MockHandlerInterface;",
            "method_body": "public <T> MockHandlerInterface<T> getMockHandler(T mock) {\nif (mock == null) {\nif (isMockitoMock(mock)) {\nreturn (MockHandlerInterface) getInterceptor(mock).getHandler();\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations:getAll()Ljava/util/List;",
            "method_body": "public List<Invocation> getAll() {\nreturn ListUtil.filter(new LinkedList<Invocation>(invocations), new RemoveToString());\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.mockito.internal.util.ListUtil:filter(Ljava/util/Collection;Lorg/mockito/internal/util/ListUtil$Filter;)Ljava/util/LinkedList;",
            "method_body": "public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\nLinkedList<T> filtered = new LinkedList<T>();\nfor (T t : collection) {\nif (!filter.isOut(t)) {\nfiltered.add(t);\n}\nreturn filtered;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn globalConfiguration.get().cleansStackTrace();\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilter:filter(Ljava/lang/Throwable;)V",
            "method_body": "public void filter(Throwable throwable) {\nif (!config.cleansStackTrace()) {\nreturn;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nObject[] actualArgs = actual.getArguments();\nreturn argumentsMatch(invocationMatcher, actualArgs) || varArgsMatch(invocationMatcher, actual);\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;[Ljava/lang/Object;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Object[] actualArgs) {\nif (actualArgs.length != invocationMatcher.getMatchers().size()) {\nfor (int i = 0; i < actualArgs.length; i++) {\nreturn true;\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getArguments()[Ljava/lang/Object;",
            "method_body": "public Object[] getArguments() {\nreturn arguments;\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 171
        }
    ]
}