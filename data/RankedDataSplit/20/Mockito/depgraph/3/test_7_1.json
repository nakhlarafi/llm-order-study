{
    "bug_id": 3,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times",
    "test_body": "295: public void captures_correctly_when_captor_used_multiple_times() throws Exception {\n296: // given\n297: ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n298: 299: // when\n300: mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n301: 302: // then\n303: // this is only for backwards compatibility. It does not make sense in real to do so.\n304: verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());\n305: Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:130)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:22)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:16)\nat org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:48)\nat org.mockito.internal.verification.Times.verify(Times.java:39)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:76)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$263271281.mixedVarargs(Unknown Source)\nat org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times(CapturingArgumentsTest.java:304)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMock(Ljava/lang/Object;)Z",
            "method_body": "public boolean isMock(Object mock) {\nreturn isMockitoMock(mock);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn mockMaker.getHandler(mock) != null;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\nif (wantedNumberOfInvocations < 0) {\nthis.wantedCount = wantedNumberOfInvocations;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.verification.MockAwareVerificationMode:<init>(Ljava/lang/Object;Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public MockAwareVerificationMode(Object mock, VerificationMode mode) {\nthis.mock = mock;\nthis.mode = mode;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:<init>(Ljava/lang/Class;)V",
            "method_body": "private ArgumentCaptor(Class<? extends T> clazz) {\nthis.clazz = clazz;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.matchers.CapturingMatcher:matches(Ljava/lang/Object;)Z",
            "method_body": "public boolean matches(Object argument) {\nreturn true;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.matchers.CapturingMatcher:captureFrom(Ljava/lang/Object;)V",
            "method_body": "public void captureFrom(Object argument) {\nthis.arguments.add(argument);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.util.collections.ArrayUtils:isEmpty([Ljava/lang/Object;)Z",
            "method_body": "public <T> boolean isEmpty(T[] array) {\nreturn array == null || array.length == 0;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.Matchers:argThat(Lorg/hamcrest/Matcher;)Ljava/lang/Object;",
            "method_body": "public static <T> T argThat(Matcher<T> matcher) {\nreturn reportMatcher(matcher).<T>returnNull();\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:captureFrom(Ljava/lang/Object;)V",
            "method_body": "public void captureFrom(Object argument) {\nif (actualMatcher instanceof CapturesArguments) {\n((CapturesArguments) actualMatcher).captureFrom(argument);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker:<init>()V",
            "method_body": "public NumberOfInvocationsChecker() {\nthis(new Reporter(), new InvocationsFinder());\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;)V",
            "method_body": "public MockNameImpl(String mockName) {\nthis.mockName = mockName;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:maybeRedefineMockName(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public void maybeRedefineMockName(Object mock, String newName) {\nMockName mockName = getMockName(mock);\nif (mockName.isDefault() && getMockHandler(mock).getMockSettings() instanceof CreationSettings) {\n((CreationSettings) getMockHandler(mock).getMockSettings()).setMockName(new MockNameImpl(newName));\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker:<init>(Lorg/mockito/exceptions/Reporter;Lorg/mockito/internal/invocation/InvocationsFinder;)V",
            "method_body": "NumberOfInvocationsChecker(Reporter reporter, InvocationsFinder finder) {\nthis.reporter = reporter;\nthis.finder = finder;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker:check(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;I)V",
            "method_body": "public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\nList<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\nint actualCount = actualInvocations.size();\nif (wantedCount > actualCount) {\n} else if (wantedCount == 0 && actualCount > 0) {\n} else if (wantedCount < actualCount) {\ninvocationMarker.markVerified(actualInvocations, wanted);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:isDefault()Z",
            "method_body": "public boolean isDefault() {\nreturn defaultName;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:<init>()V",
            "method_body": "public MissingInvocationChecker() {\nthis(new InvocationsFinder(), new Reporter());\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:check(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void check(List<Invocation> invocations, InvocationMatcher wanted) {\nList<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\nif (actualInvocations.isEmpty()) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:verify(Lorg/mockito/internal/verification/api/VerificationData;)V",
            "method_body": "public void verify(VerificationData data) {\nif (wantedCount > 0) {\nMissingInvocationChecker missingInvocation = new MissingInvocationChecker();\nmissingInvocation.check(data.getAllInvocations(), data.getWanted());\nNumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\nnumberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n}",
            "method_id": 39
        }
    ]
}