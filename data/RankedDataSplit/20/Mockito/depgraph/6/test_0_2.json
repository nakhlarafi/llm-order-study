{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAnyXMatchers",
    "test_body": "27: public void shouldNotAcceptNullInAnyXMatchers() {\n28: when(mock.oneArg(anyObject())).thenReturn(\"0\");\n29: when(mock.oneArg(anyString())).thenReturn(\"1\");\n30: when(mock.forList(anyList())).thenReturn(\"2\");\n31: when(mock.forMap(anyMap())).thenReturn(\"3\");\n32: when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n33: when(mock.forSet(anySet())).thenReturn(\"5\");\n34: 35: assertEquals(null, mock.oneArg((Object) null));\n36: assertEquals(null, mock.oneArg((String) null));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<0>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAnyXMatchers(AnyXMatchersAcceptNullsTest.java:35)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullOngoingStubbing()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing pullOngoingStubbing() {\nreturn threadSafely().pullOngoingStubbing();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullOngoingStubbing()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing pullOngoingStubbing() {\nIOngoingStubbing temp = iOngoingStubbing;\niOngoingStubbing = null;\nreturn temp;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher:<init>(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/stubbing/Answer;)V",
            "method_body": "public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\nsuper(invocation.getInvocation(), invocation.getMatchers());\nthis.answers.add(answer);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nthreadSafely().stubbingCompleted(invocation);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nthreadSafely().stubbingStarted();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nvalidateState();\nstubbingInProgress = new LocationImpl();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getParameterTypes()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getParameterTypes() {\nreturn method.getParameterTypes();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.AnswersValidator:validate(Lorg/mockito/stubbing/Answer;Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void validate(Answer<?> answer, Invocation invocation) {\nMethodInfo methodInfo = new MethodInfo(invocation);\nif (answer instanceof ThrowsException) {\nif (answer instanceof Returns) {\nvalidateReturnValue((Returns) answer, methodInfo);\nif (answer instanceof DoesNothing) {\nif (answer instanceof CallsRealMethods) {\nif (answer instanceof ReturnsArgumentAt) {\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:captureArgumentsFrom(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void captureArgumentsFrom(Invocation invocation) {\nfor (int position = 0; position < matchers.size(); position++) {\nMatcher m = matchers.get(position);\nif (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\nif(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toInstanceName(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private static String toInstanceName(Class<?> clazz) {\nString className = clazz.getSimpleName();\nif (className.length() == 0) {\nreturn className.substring(0, 1).toLowerCase() + className.substring(1);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock) {\nreturn mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nObject[] actualArgs = actual.getArguments();\nreturn argumentsMatch(invocationMatcher, actualArgs) || varArgsMatch(invocationMatcher, actual);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;[Ljava/lang/Object;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Object[] actualArgs) {\nif (actualArgs.length != invocationMatcher.getMatchers().size()) {\nfor (int i = 0; i < actualArgs.length; i++) {\nif (!invocationMatcher.getMatchers().get(i).matches(actualArgs[i])) {\nreturn true;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:matches(Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "public boolean matches(Invocation actual) {\nreturn invocation.getMock().equals(actual.getMock())\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:hasSameMethod(Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "public boolean hasSameMethod(Invocation candidate) {\nMethod m1 = invocation.getMethod();\nMethod m2 = candidate.getMethod();\nif (m1.getName() != null && m1.getName().equals(m2.getName())) {\nClass[] params1 = m1.getParameterTypes();\nClass[] params2 = m2.getParameterTypes();\nif (params1.length == params2.length) {\nfor (int i = 0; i < params1.length; i++) {\nif (params1[i] != params2[i])\nreturn false;\nreturn true;\nreturn false;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn new ReturnsEmptyValues();\n}",
            "method_id": 59
        }
    ]
}