{
    "bug_id": 25,
    "test_id": 3,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_return_types_declared_with_a_bounded_wildcard",
    "test_body": "public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {\nGenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n79: List<? super Integer> objects = mock.returningWildcard();\nNumber type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);\ntype_that_is_the_upper_bound_of_the_wildcard.floatValue();",
    "stack_trace": "java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.Number\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_return_types_declared_with_a_bounded_wildcard(ReturnsGenericDeepStubsTest.java:80)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$1:<init>(Lorg/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs;Ljava/lang/Object;)V",
            "method_body": "private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\nClass<?> clz = invocation.getMethod().getReturnType();\nfinal Object mock = org.mockito.Mockito.mock(clz, this);\ncontainer.addAnswer(new Answer<Object>() {\nreturn mock;\nreturn mock;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\nEnhancer enhancer = new Enhancer() {\n}\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 161
        }
    ]
}