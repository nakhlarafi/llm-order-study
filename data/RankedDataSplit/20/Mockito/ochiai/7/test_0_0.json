{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics",
    "test_body": "public void discoverDeepMockingOfGenerics() {\nMyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\nwhen(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n}\n",
    "stack_trace": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:407)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:405)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.rawType(GenericMetadataSupport.java:385)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(ReturnsDeepStubs.java:51)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest$MyClass2$$EnhancerByMockitoWithCGLIB$$da894864.getNested(<generated>)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics(DeepStubFailingWhenGenricNestedAsRawTypeTest.java:26)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:rawExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] rawExtraInterfaces() {\nList<Type> extraInterfaces = extraInterfaces();\nList<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();\nfor (Type extraInterface : extraInterfaces) {\nreturn rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:interfaceBounds()[Ljava/lang/reflect/Type;",
            "method_body": "public Type[] interfaceBounds() {\nType[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];\nSystem.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);\nreturn interfaceBounds;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:extraInterfaces()Ljava/util/List;",
            "method_body": "public List<Type> extraInterfaces() {\nType type = extractActualBoundedTypeOf(typeVariable);\nif (type instanceof BoundedType) {\nreturn Arrays.asList(((BoundedType) type).interfaceBounds());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:extractActualBoundedTypeOf(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;",
            "method_body": "private Type extractActualBoundedTypeOf(Type type) {\nif (type instanceof TypeVariable) {\nreturn extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));\nif (type instanceof BoundedType) {\nType actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());\nif (!(actualFirstBound instanceof BoundedType)) {\nreturn type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType\nreturn type; // irrelevant, we don't manage other types as they are not bounded.\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:firstBound()Ljava/lang/reflect/Type;",
            "method_body": "public Type firstBound() {\nreturn typeVariable.getBounds()[0]; //\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:<init>(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;[Ljava/lang/reflect/TypeVariable;Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {\nthis.typeParameters = typeParameters;\nthis.typeVariable = typeVariable;\nthis.contextualActualTypeParameters = source.contextualActualTypeParameters;\nreadTypeParameters();\nreadTypeVariables();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:readTypeParameters()V",
            "method_body": "private void readTypeParameters() {\nregisterTypeParametersOn(typeParameters);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:readTypeVariables()V",
            "method_body": "private void readTypeVariables() {\nfor (Type type : typeVariable.getBounds()) {\nregisterTypeVariablesOn(type);\nregisterTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:rawType()Ljava/lang/Class;",
            "method_body": "public Class<?> rawType() {\nif (rawType == null) {\nrawType = extractRawTypeOf(typeVariable);\nreturn rawType;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:extractRawTypeOf(Ljava/lang/reflect/Type;)Ljava/lang/Class;",
            "method_body": "private Class<?> extractRawTypeOf(Type type) {\nif (type instanceof Class) {\nreturn (Class<?>) type;\nif (type instanceof ParameterizedType) {\nif (type instanceof BoundedType) {\nreturn extractRawTypeOf(((BoundedType) type).firstBound());\nif (type instanceof TypeVariable) {\nreturn extractRawTypeOf(contextualActualTypeParameters.get(type));\nthrow new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\");\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:getActualTypeArgumentFor(Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;",
            "method_body": "protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {\nType type = this.contextualActualTypeParameters.get(typeParameter);\nif (type instanceof TypeVariable) {\nreturn type;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:boundsOf(Ljava/lang/reflect/TypeVariable;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport$BoundedType;",
            "method_body": "private BoundedType boundsOf(TypeVariable typeParameter) {\nif (typeParameter.getBounds()[0] instanceof TypeVariable) {\nreturn new TypeVarBoundedType(typeParameter);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:<init>(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVarBoundedType(TypeVariable typeVariable) {\nthis.typeVariable = typeVariable;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:deepStub(Lorg/mockito/invocation/InvocationOnMock;Lorg/mockito/internal/util/reflection/GenericMetadataSupport;)Ljava/lang/Object;",
            "method_body": "private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\nInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\nInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\nfor (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\nreturn recordDeepStubAnswer(\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:newDeepStubMock(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {\nMockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);\nreturn mockitoCore().mock(\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:withSettingsUsing(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/MockSettings;",
            "method_body": "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\nMockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\nreturn propagateSerializationSettings(mockSettings, parentMockSettings)\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:propagateSerializationSettings(Lorg/mockito/MockSettings;Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/MockSettings;",
            "method_body": "private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {\nreturn mockSettings.serializable(parentMockSettings.getSerializableMode());\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:returnsDeepStubsAnswerUsing(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;)Lorg/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs;",
            "method_body": "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\nreturn new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubAnswer(Ljava/lang/Object;Lorg/mockito/internal/stubbing/InvocationContainerImpl;)Ljava/lang/Object;",
            "method_body": "private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {\ncontainer.addAnswer(new DeeplyStubbedAnswer(mock), false);\nreturn mock;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:hasRawExtraInterfaces()Z",
            "method_body": "public boolean hasRawExtraInterfaces() {\nreturn rawExtraInterfaces().length > 0;\n}",
            "method_id": 19
        }
    ]
}