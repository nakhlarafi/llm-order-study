{
    "bug_id": 3,
    "test_id": 2,
    "test_name": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_all_vararg",
    "test_body": "public void should_capture_all_vararg() throws Exception {\n// given\nArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n271: // when\nmock.mixedVarargs(42, \"a\", \"b\", \"c\");\nmock.mixedVarargs(42, \"again ?!\");\n275: // then\nverify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());\n278: Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\nat org.fest.assertions.ConstructorInvoker.newInstance(ConstructorInvoker.java:34)\nat org.fest.assertions.ComparisonFailureFactory.newComparisonFailure(ComparisonFailureFactory.java:60)\nat org.fest.assertions.ComparisonFailureFactory.comparisonFailure(ComparisonFailureFactory.java:46)\nat org.fest.assertions.Fail.comparisonFailed(Fail.java:83)\nat org.fest.assertions.Fail.failIfNotEqual(Fail.java:71)\nat org.fest.assertions.GenericAssert.assertEqualTo(GenericAssert.java:271)\nat org.fest.assertions.ListAssert.isEqualTo(ListAssert.java:360)\nat org.fest.assertions.ListAssert.containsExactly(ListAssert.java:350)\nat org.mockitousage.matchers.CapturingArgumentsTest.should_capture_all_vararg(CapturingArgumentsTest.java:278)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 220
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (GLOBAL_CONFIGURATION.get() == null) {\n}",
            "method_id": 221
        },
        {
            "method_signature": "org.mockito.Mockito:verify(Ljava/lang/Object;Lorg/mockito/verification/VerificationMode;)Ljava/lang/Object;",
            "method_body": "public static <T> T verify(T mock, VerificationMode mode) {\nreturn MOCKITO_CORE.verify(mock, mode);\n}",
            "method_id": 222
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:<init>()V",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\n}",
            "method_id": 223
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:<init>(Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;)V",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 224
        }
    ]
}