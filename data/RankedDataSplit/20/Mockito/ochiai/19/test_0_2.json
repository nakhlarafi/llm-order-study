{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\nMockitoAnnotations.initMocks(this);\nassertNull(otherSuperUnderTesting.candidate1);\nassertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:relayProcessToNextStrategy(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "protected abstract boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates);\nreturn nextStrategy != null && nextStrategy.process(field, fieldOwner, mockCandidates);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:processInjection(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\nreturn false;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver) {\nthis(fieldOwner, field, new ParameterizedConstructorInstantiator(fieldOwner, field, argResolver));\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:process(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "public boolean process(Field onField, Object fieldOwnedBy, Set<Object> mockCandidates) {\nif(processInjection(onField, fieldOwnedBy, mockCandidates)) {\nreturn true;\nreturn relayProcessToNextStrategy(onField, fieldOwnedBy, mockCandidates);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver:<init>(Ljava/util/Set;)V",
            "method_body": "public SimpleArgumentResolver(Set<Object> objects) {\nthis.objects = objects;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldInitializer(Object fieldOwner, Field field) {\nthis(fieldOwner, field, new NoArgConstructorInstantiator(fieldOwner, field));\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "FieldInitializationReport instantiate();\nNoArgConstructorInstantiator(Object testClass, Field field) {\nthis.testClass = testClass;\nthis.field = field;\n}\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = field.getType().getDeclaredConstructor();\nchanger.enableAccess(constructor);\nfinal Object[] noArg = new Object[0];\nObject newFieldInstance = constructor.newInstance(noArg);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), true, false);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:spiedInstance(Ljava/lang/Object;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings spiedInstance(Object spiedInstance) {\nthis.spiedInstance = spiedInstance;\nreturn this;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "ParameterizedConstructorInstantiator(Object testClass, Field field, ConstructorArgumentResolver argumentResolver) {\nthis.testClass = testClass;\nthis.field = field;\nthis.argResolver = argumentResolver;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializationReport:<init>(Ljava/lang/Object;ZZ)V",
            "method_body": "public FieldInitializationReport(Object fieldInstance, boolean wasInitialized, boolean wasInitializedUsingConstructorArgs) {\nthis.fieldInstance = fieldInstance;\nthis.wasInitialized = wasInitialized;\nthis.wasInitializedUsingConstructorArgs = wasInitializedUsingConstructorArgs;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldCopier:copyValue(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public <T> void copyValue(T from, T to, Field field) throws IllegalAccessException {\nObject value = field.get(from);\nfield.set(to, value);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:initialize()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "public FieldInitializationReport initialize() {\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nreturn acquireFieldInstance();\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:acquireFieldInstance()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "private FieldInitializationReport acquireFieldInstance() throws IllegalAccessException {\nObject fieldInstance = field.get(fieldOwner);\nif(fieldInstance != null) {\nreturn new FieldInitializationReport(fieldInstance, false, false);\nreturn instantiator.instantiate();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyToMock(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public <T> void copyToMock(T from, T mock) {\ncopy(from, mock, from.getClass(), mock.getClass().getSuperclass());\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copy(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)V",
            "method_body": "private <T> void copy(T from, T to, Class fromClazz, Class toClass) {\nwhile (fromClazz != Object.class) {\ncopyValues(from, to, fromClazz);\nfromClazz = fromClazz.getSuperclass();\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyValues(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private <T> void copyValues(T from, T mock, Class classFrom) {\nField[] fields = classFrom.getDeclaredFields();\nfor (int i = 0; i < fields.length; i++) {\nField field = fields[i];\nif (Modifier.isStatic(field.getModifiers())) {\ncontinue;\nAccessibilityChanger accessibilityChanger = new AccessibilityChanger();\naccessibilityChanger.enableAccess(field);\nfieldCopier.copyValue(from, mock, field);\naccessibilityChanger.safelyDisableAccess(field);\n}\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorInstantiator;)V",
            "method_body": "private FieldInitializer(Object fieldOwner, Field field, ConstructorInstantiator instantiator) {\nif(new FieldReader(fieldOwner, field).isNull()) {\ncheckNotLocal(field);\ncheckNotInner(field);\ncheckNotInterface(field);\ncheckNotAbstract(field);\nthis.fieldOwner = fieldOwner;\nthis.field = field;\nthis.instantiator = instantiator;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldReader:isNull()Z",
            "method_body": "public boolean isNull() {\nreturn read() == null;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn method.getName();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:isDefault()Z",
            "method_body": "public boolean isDefault() {\nreturn defaultName;\n}",
            "method_id": 59
        }
    ]
}