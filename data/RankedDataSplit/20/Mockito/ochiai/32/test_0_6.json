{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName",
    "test_body": "public void shouldPrintNiceName() {\n//when\nveryCoolSpy.add(1);\n27: try {\nverify(veryCoolSpy).add(2);\nfail();",
    "stack_trace": "junit.framework.AssertionFailedError: <'\nArgument(s) are different! Wanted:\nlinkedList.add(2);\n-> at org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName(SpyShouldHaveNiceNameTest.java:28)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\nVerificationMode temp = verificationMode.getObject();\nverificationMode = null;\nreturn temp;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullMatchers()Ljava/util/List;",
            "method_body": "public List<Matcher> pullMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\nif (!matchers.isEmpty()) {\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new DelegatingMethod(method);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MockitoMethodProxy mockitoMethodProxy) {\nMethodProxy methodProxy = mockitoMethodProxy.getMethodProxy();\nField createInfoField = reflectOnCreateInfo(methodProxy);\ncreateInfoField.setAccessible(true);\nObject createInfo = createInfoField.get(methodProxy);\nField namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\nnamingPolicyField.setAccessible(true);\nif (namingPolicyField.get(createInfo) == null) {\nnamingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n}\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis(new CGLIBProxyRealMethod(methodProxy));\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public CGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\nmockingProgress.validateState();\nif (verificationMode != null) {\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\nthis.realMethod = realMethod;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isHashCodeMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isHashCodeMethod(Method method) {\nreturn method.getName().equals(\"hashCode\") && method.getParameterTypes().length == 0;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn method.getJavaMethod();\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nif (objectMethodsGuru.isEqualsMethod(method)) {\nreturn proxy == args[0];\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\ncglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\nMockitoMethod mockitoMethod = createMockitoMethod(method);\nFilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\nInvocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn handler.handle(invocation);\n}",
            "method_id": 139
        }
    ]
}