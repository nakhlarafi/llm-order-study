{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName",
    "test_body": "public void shouldPrintNiceName() {\n//when\nveryCoolSpy.add(1);\n27: try {\nverify(veryCoolSpy).add(2);\nfail();",
    "stack_trace": "junit.framework.AssertionFailedError: <'\nArgument(s) are different! Wanted:\nlinkedList.add(2);\n-> at org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName(SpyShouldHaveNiceNameTest.java:28)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:assertNoAnnotations(Ljava/lang/Class;Ljava/lang/reflect/Field;[Ljava/lang/Class;)V",
            "method_body": "void assertNoAnnotations(Class annotation, Field field, Class ... undesiredAnnotations) {\nfor (Class u : undesiredAnnotations) {\nif (field.isAnnotationPresent(u)) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage() {\nreturn message;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:toStringEquals(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean toStringEquals(Matcher m, Object arg) {\nreturn StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:safelyMatches(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean safelyMatches(Matcher m, Object arg) {\nreturn m.matches(arg);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.exceptions.Reporter:argumentsAreDifferent(Ljava/lang/String;Ljava/lang/String;Lorg/mockito/internal/debugging/Location;)V",
            "method_body": "public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\nString message = join(\"Argument(s) are different! Wanted:\",\nif (JUnitTool.hasJUnit()) {\nthrow JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.exceptions.verification.junit.JUnitTool:hasJUnit()Z",
            "method_body": "public static boolean hasJUnit() {\nreturn hasJUnit;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.exceptions.verification.junit.JUnitTool:createArgumentsAreDifferentException(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/AssertionError;",
            "method_body": "public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\nClass<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\nAssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\nreturn throwable;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public ArgumentsAreDifferent(String message, String wanted, String actual) {\nsuper(message, wanted, actual);\nthis.message = message;\nunfilteredStackTrace = getStackTrace();\nConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\nfilter.filter(this);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:toString(Lorg/mockito/internal/reporting/PrintSettings;)Ljava/lang/String;",
            "method_body": "public String toString(PrintSettings printSettings) {\nreturn invocation.toString(matchers, printSettings);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.CallsRealMethods:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn invocation.callRealMethod();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.AbstractMockitoMethodProxy:invokeSuper(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public Object invokeSuper(Object target, Object[] arguments) throws Throwable {\nreturn getMethodProxy().invokeSuper(target, arguments);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public Object invoke(Object target, Object[] arguments) throws Throwable {\nreturn methodProxy.invokeSuper(target, arguments);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.Mockito:spy(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T spy(T object) {\nreturn MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public Object invoke(Object target, Object[] arguments) throws Throwable {\nreturn realMethod.invoke(target, arguments);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:callRealMethod()Ljava/lang/Object;",
            "method_body": "public Object callRealMethod() throws Throwable {\nif (isDeclaredOnInterface()) {\nreturn realMethod.invoke(mock, rawArguments);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:toString(Lorg/mockito/internal/reporting/PrintSettings;)Ljava/lang/String;",
            "method_body": "public String toString(PrintSettings printSettings) {\nreturn toString(argumentsToMatchers(), printSettings);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.reporting.PrintSettings:setMultiline(Z)V",
            "method_body": "public void setMultiline(boolean multiline) {\nthis.multiline = multiline;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.reporting.SmartPrinter:<init>(Lorg/mockito/internal/reporting/PrintingFriendlyInvocation;Lorg/mockito/internal/reporting/PrintingFriendlyInvocation;[Ljava/lang/Integer;)V",
            "method_body": "public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\nPrintSettings printSettings = new PrintSettings();\nprintSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\nprintSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);\nthis.wanted = wanted.toString(printSettings);\nthis.actual = actual.toString(printSettings);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.reporting.SmartPrinter:getWanted()Ljava/lang/String;",
            "method_body": "public String getWanted() {\nreturn wanted;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.reporting.SmartPrinter:getActual()Ljava/lang/String;",
            "method_body": "public String getActual() {\nreturn actual;\n}",
            "method_id": 19
        }
    ]
}