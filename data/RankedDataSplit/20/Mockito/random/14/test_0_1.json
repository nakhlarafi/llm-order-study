{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
    "test_body": "public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n//given\nwhen(mock.otherMethod()).thenReturn(\"foo\");\n25: //when\nmockTwo.simpleMethod(\"foo\");\n28: //then\nverify(mockTwo).simpleMethod(mock.otherMethod());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError:\nWanted but not invoked:\nmock.otherMethod();\n-> at org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine(VerifyingWithAnExtraCallToADifferentMockTest.java:29)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.answers.AnswersValidator:validateReturnValue(Lorg/mockito/internal/stubbing/answers/Returns;Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "private void validateReturnValue(Returns answer, Invocation invocation) {\nif (invocation.isVoid()) {\nif (answer.returnsNull() && invocation.returnsPrimitive()) {\nif (!answer.returnsNull() && !invocation.isValidReturnType(answer.getReturnType())) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/verification/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nT mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\nmockingProgress.mockingStarted(mock, classToMock, mockSettings);\nreturn mock;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:getObject()Ljava/lang/Object;",
            "method_body": "public T getObject() {\nreturn object;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.Returns:<init>(Ljava/lang/Object;)V",
            "method_body": "public Returns(Object value) {\nthis.value = value;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.exceptions.Reporter:wantedButNotInvoked(Lorg/mockito/exceptions/PrintableInvocation;Ljava/util/List;)V",
            "method_body": "public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\nif (invocations.isEmpty()) {\nallInvocations = \"Actually, there were zero interactions with this mock.\\n\";\nString message = createWantedButNotInvokedMessage(wanted);\nthrow new WantedButNotInvoked(message + allInvocations);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.exceptions.Reporter:createWantedButNotInvokedMessage(Lorg/mockito/exceptions/PrintableInvocation;)Ljava/lang/String;",
            "method_body": "private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\nreturn join(\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class && method.getParameterTypes().length == 0\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\nannotationEngine.process(clazz, testClass);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;[Ljava/lang/Class;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\nif (extraInterfaces == null) {\nreturn;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isToString(Lorg/mockito/invocation/InvocationOnMock;)Z",
            "method_body": "public static boolean isToString(InvocationOnMock invocation) {\nreturn new ObjectMethodsGuru().isToString(invocation.getMethod());\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nthreadSafely().stubbingStarted();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 39
        }
    ]
}