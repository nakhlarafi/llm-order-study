{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName",
    "test_body": "public void shouldPrintNiceName() {\n//when\nveryCoolSpy.add(1);\n27: try {\nverify(veryCoolSpy).add(2);\nfail();",
    "stack_trace": "junit.framework.AssertionFailedError: <'\nArgument(s) are different! Wanted:\nlinkedList.add(2);\n-> at org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName(SpyShouldHaveNiceNameTest.java:28)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.MockHandler:getMockSettings()Lorg/mockito/internal/creation/MockSettingsImpl;",
            "method_body": "public MockSettingsImpl getMockSettings() {\nreturn mockSettings;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new DelegatingMethod(method);\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:setInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\nregisteredInvocations.add(invocation.getInvocation());\nthis.invocationForStubbing = invocation;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn mockName;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nif (!classToMock.equals(spiedInstance.getClass())) {\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getMockName()Lorg/mockito/internal/util/MockName;",
            "method_body": "public MockName getMockName() {\nreturn mockName;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:verificationStarted(Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public void verificationStarted(VerificationMode verify) {\nvalidateState();\nresetOngoingStubbing();\nverificationMode = new Localized(verify);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isToString(Lorg/mockito/invocation/InvocationOnMock;)Z",
            "method_body": "public static boolean isToString(InvocationOnMock invocation) {\nreturn new ObjectMethodsGuru().isToString(invocation.getMethod());\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage() {\nreturn message;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:<init>()V",
            "method_body": "public MissingInvocationChecker() {\nthis(new InvocationsFinder(), new Reporter());\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockSettingsImpl mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.Mockito:verify(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T verify(T mock) {\nreturn MOCKITO_CORE.verify(mock, times(1));\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyToMock(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public <T> void copyToMock(T from, T mock) {\ncopy(from, mock, from.getClass(), mock.getClass().getSuperclass());\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\nif (wantedNumberOfInvocations < 0) {\nthis.wantedCount = wantedNumberOfInvocations;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:resetInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\nthis.invocationForStubbing = invocationMatcher;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new Location();\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMock()Ljava/lang/Object;",
            "method_body": "public Object getMock() {\nreturn mock;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nObject[] actualArgs = actual.getArguments();\nreturn argumentsMatch(invocationMatcher, actualArgs) || varArgsMatch(invocationMatcher, actual);\n}",
            "method_id": 99
        }
    ]
}