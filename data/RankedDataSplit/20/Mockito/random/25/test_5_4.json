{
    "bug_id": 25,
    "test_id": 5,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.generic_deep_mock_frenzy__look_at_these_chained_calls",
    "test_body": "public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {\nGenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n37: Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();\nIterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();\nMap.Entry<? extends Cloneable, Set<Number>> nextEntry = mock.entrySet().iterator().next();\n41: Cloneable cloneableKey = mock.entrySet().iterator().next().getKey();\nComparable<?> comparableKey = mock.entrySet().iterator().next().getKey();\n44: Set<Number> value = mock.entrySet().iterator().next().getValue();\nIterator<Number> numbersIterator = mock.entrySet().iterator().next().getValue().iterator();\nNumber number = mock.entrySet().iterator().next().getValue().iterator().next();\n}\n",
    "stack_trace": "java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.util.Map$Entry\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.generic_deep_mock_frenzy__look_at_these_chained_calls(ReturnsGenericDeepStubsTest.java:39)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockHandler.getMockSettings();\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;Ljava/util/Collection;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) {\nif (extraInterfaces == null) {\nfor (Class i : extraInterfaces) {\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {\nif (!lastMatchers.isEmpty()) {\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "private Object getMock(InvocationOnMock invocation) throws Throwable {\nInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\nInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\nfor (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\nreturn recordDeepStubMock(invocation, container);\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\nEnhancer enhancer = new Enhancer() {\n}\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeParametersOn([Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\nfor (TypeVariable typeParameter : typeParameters) {\ncontextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\ns.markStubUsed(invocation);\ninvocation.markStubbed(new StubInfoImpl(s));\nreturn s;\n}\nreturn null;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public CGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (globalConfiguration.get() == null) {\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:getStubbedInvocations()Ljava/util/List;",
            "method_body": "public List<StubbedInvocationMatcher> getStubbedInvocations() {\nreturn stubbed;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeVariablesOn(Ljava/lang/reflect/Type;)V",
            "method_body": "protected void registerTypeVariablesOn(Type classType) {\nif (!(classType instanceof ParameterizedType)) {\nreturn;\nParameterizedType parameterizedType = (ParameterizedType) classType;\nTypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\nTypeVariable typeParameter = typeParameters[i];\nType actualTypeArgument = actualTypeArguments[i];\nif (actualTypeArgument instanceof WildcardType) {\ncontextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\ncontextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {\nthis.mockHandler = mockHandler;\nthis.invocationListeners = settings.getInvocationListeners();\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 99
        }
    ]
}