{
    "bug_id": 20,
    "test_id": 6,
    "test_name": "org.mockitousage.annotation.SpyAnnotationTest.should_report_when_constructor_is_explosive",
    "test_body": "public void should_report_when_constructor_is_explosive() throws Exception {\nclass FailingSpy {\n@Spy\nThrowingConstructor throwingConstructor;\n}\n99: try {\nMockitoAnnotations.initMocks(new FailingSpy());\nfail();\n} catch (MockitoException e) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat org.mockitousage.annotation.SpyAnnotationTest.should_report_when_constructor_is_explosive(SpyAnnotationTest.java:101)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:useConstructor()Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings useConstructor() {\nthis.useConstructor = true;\nreturn this;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:tryConstructorInjection()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection tryConstructorInjection() {\ninjectionStrategies.thenTry(new ConstructorInjection());\nreturn this;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:<init>(Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;)V",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copy(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)V",
            "method_body": "private <T> void copy(T from, T to, Class fromClazz, Class toClass) {\nwhile (fromClazz != Object.class) {\ncopyValues(from, to, fromClazz);\nfromClazz = fromClazz.getSuperclass();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:nameFor(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private String nameFor(Class<?> type) {\nString typeName = type.getName();\nif (typeName.startsWith(\"java.\") || (type.getPackage() != null && type.getPackage().isSealed())) {\nreturn String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:handleSpyAnnotation()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection handleSpyAnnotation() {\npostInjectionStrategies.thenTry(new SpyOnInjectedFieldsHandler());\nreturn this;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper:get()Ljava/lang/Object;",
            "method_body": "public Object get() {\nreturn mockInstance;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testInstance, field).set(mock);\n}\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator:getOrGenerateMockClass(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class getOrGenerateMockClass(Class<T> mockedType, Set<Class> interfaces) {\nMockKey mockKey = MockKey.of(mockedType, interfaces);\nClass generatedMockClass = null;\nWeakReference<Class> classWeakReference = generatedClassCache.get(mockKey);\nif(classWeakReference != null) {\ngeneratedMockClass = classWeakReference.get();\nif(generatedMockClass == null) {\ngeneratedMockClass = generate(mockedType, interfaces);\ngeneratedClassCache.put(mockKey, new WeakReference<Class>(generatedMockClass));\nreturn generatedMockClass;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nif (defaultAnswer == null) {\nreturn this;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 79
        }
    ]
}