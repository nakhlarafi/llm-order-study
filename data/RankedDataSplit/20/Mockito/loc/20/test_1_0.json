{
    "bug_id": 20,
    "test_id": 1,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_inner_classes",
    "test_body": "public void can_mock_inner_classes() {\nInnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));\nassertEquals(\"hey!\", mock.getMessage());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<hey!> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_inner_classes(CreatingMocksWithConstructorTest.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 0,
            "loc": 17
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:validatedSettings(Ljava/lang/Class;Lorg/mockito/internal/creation/settings/CreationSettings;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, CreationSettings<T> source) {\nMockCreationValidator validator = new MockCreationValidator();\nvalidator.validateType(typeToMock);\nvalidator.validateExtraInterfaces(typeToMock, source.getExtraInterfaces());\nvalidator.validateMockedType(typeToMock, source.getSpiedInstance());\nvalidator.validateSerializable(typeToMock, source.isSerializable());\nvalidator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());\nCreationSettings<T> settings = new CreationSettings<T>(source);\nsettings.setMockName(new MockNameImpl(source.getName(), typeToMock));\nsettings.setTypeToMock(typeToMock);\nsettings.setExtraInterfaces(prepareExtraInterfaces(source));\nreturn settings;\n}",
            "method_id": 1,
            "loc": 13
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:<init>(Lorg/mockito/internal/creation/settings/CreationSettings;)V",
            "method_body": "public CreationSettings(CreationSettings copy) {\nthis.typeToMock = copy.typeToMock;\nthis.extraInterfaces = copy.extraInterfaces;\nthis.name = copy.name;\nthis.spiedInstance = copy.spiedInstance;\nthis.defaultAnswer = copy.defaultAnswer;\nthis.mockName = copy.mockName;\nthis.serializableMode = copy.serializableMode;\nthis.invocationListeners = copy.invocationListeners;\nthis.stubOnly = copy.stubOnly;\nthis.useConstructor = copy.isUsingConstructor();\nthis.outerClassInstance = copy.getOuterClassInstance();\n}",
            "method_id": 2,
            "loc": 13
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testInstance, field).set(mock);\n}\n}",
            "method_id": 3,
            "loc": 12
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\ns.markStubUsed(invocation);\ninvocation.markStubbed(new StubInfoImpl(s));\nreturn s;\n}\n}\nreturn null;\n}",
            "method_id": 4,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator:getOrGenerateMockClass(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class getOrGenerateMockClass(Class<T> mockedType, Set<Class> interfaces) {\nMockKey mockKey = MockKey.of(mockedType, interfaces);\nClass generatedMockClass = null;\nWeakReference<Class> classWeakReference = generatedClassCache.get(mockKey);\nif(classWeakReference != null) {\ngeneratedMockClass = classWeakReference.get();\nif(generatedMockClass == null) {\ngeneratedMockClass = generate(mockedType, interfaces);\ngeneratedClassCache.put(mockKey, new WeakReference<Class>(generatedMockClass));\nreturn generatedMockClass;\n}",
            "method_id": 5,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.InterceptedInvocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;Lorg/mockito/internal/creation/bytebuddy/InterceptedInvocation$SuperMethod;I)V",
            "method_body": "public InterceptedInvocation(Object mock,\nint sequenceNumber) {\nthis.mock = mock;\nthis.mockitoMethod = mockitoMethod;\nthis.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), arguments);\nthis.rawArguments = arguments;\nthis.superMethod = superMethod;\nthis.sequenceNumber = sequenceNumber;\nlocation = new LocationImpl();\n}",
            "method_id": 6,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:injectMocks(Ljava/lang/Object;)V",
            "method_body": "public void injectMocks(final Object testClassInstance) {\nClass<?> clazz = testClassInstance.getClass();\nSet<Field> mockDependentFields = new HashSet<Field>();\nSet<Object> mocks = newMockSafeHashSet();\nwhile (clazz != Object.class) {\nnew InjectMocksScanner(clazz).addTo(mockDependentFields);\nnew MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);\nclazz = clazz.getSuperclass();\nnew DefaultInjectionEngine().injectMocksOnFields(mockDependentFields, mocks, testClassInstance);\n}",
            "method_id": 7,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nClass<?> clazz = testClass.getClass();\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nwhile (clazz != Object.class) {\nscanDeprecatedWay(annotationEngine, testClass, clazz);\nclazz = clazz.getSuperclass();\nannotationEngine.process(testClass.getClass(), testClass);\n}",
            "method_id": 8,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker:createMock(Lorg/mockito/mock/MockCreationSettings;Lorg/mockito/invocation/MockHandler;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\nif (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\nClass<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\nT mockInstance = null;\nmockInstance = classInstantiator.instantiate(mockedProxyType);\nMockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\nmockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\nreturn ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
            "method_id": 9,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:scan()Ljava/util/Set;",
            "method_body": "private Set<Object> scan() {\nSet<Object> mocks = newMockSafeHashSet();\nfor (Field field : clazz.getDeclaredFields()) {\nFieldReader fieldReader = new FieldReader(instance, field);\nObject mockInstance = preparedMock(fieldReader.read(), field);\nif (mockInstance != null) {\nmocks.add(mockInstance);\nreturn mocks;\n}",
            "method_id": 10,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 11,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> typeToMock, MockSettings settings) {\nif (!MockSettingsImpl.class.isInstance(settings)) {\nMockSettingsImpl impl = MockSettingsImpl.class.cast(settings);\nMockCreationSettings<T> creationSettings = impl.confirm(typeToMock);\nT mock = mockUtil.createMock(creationSettings);\nmockingProgress.mockingStarted(mock, typeToMock);\nreturn mock;\n}",
            "method_id": 12,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Lorg/mockito/mock/MockCreationSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings) {\nMockHandler mockHandler = new MockHandlerFactory().create(settings);\nT mock = mockMaker.createMock(settings, mockHandler);\nObject spiedInstance = settings.getSpiedInstance();\nif (spiedInstance != null) {\nnew LenientCopyTool().copyToMock(spiedInstance, mock);\nreturn mock;\n}",
            "method_id": 13,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:generateMockClass(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "public <T> Class<? extends T> generateMockClass(Class<T> mockedType, Set<Class> interfaces) {\nDynamicType.Builder<T> builder = byteBuddy.subclass(mockedType, ConstructorStrategy.Default.IMITATE_SUPER_TYPE)\nClass<?>[] allMockedTypes = new Class<?>[interfaces.size() + 1];\nallMockedTypes[0] = mockedType;\nint index = 1;\nfor (Class<?> type : interfaces) {\nreturn builder.make()\n}",
            "method_id": 14,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processIndependentAnnotations(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processIndependentAnnotations(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ndelegate.process(classContext, testInstance);\nspyAnnotationEngine.process(classContext, testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 15,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:<init>(Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;)V",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 16,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:hasNext()Z",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 17,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, (List<Matcher>)(List) lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 18,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockNameImpl(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.defaultName = true;\nthis.mockName = mockName;\n}",
            "method_id": 19,
            "loc": 6
        }
    ]
}