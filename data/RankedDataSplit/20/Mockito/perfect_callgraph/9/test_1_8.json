{
    "bug_id": 9,
    "test_id": 1,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodStubbed",
    "test_body": "public void abstractMethodStubbed() {\nAbstractThing thing = spy(AbstractThing.class);\nwhen(thing.name()).thenReturn(\"me\");\nassertEquals(\"abstract me\", thing.fullName());",
    "stack_trace": "org.mockito.exceptions.base.MockitoException:\nCannot call abstract real method on java object!\nCalling real methods is only possible when mocking non abstract method.\n//correct example:\nwhen(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\nat org.mockito.exceptions.Reporter.cannotCallAbstractRealMethod(Reporter.java:583)\nat org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:110)\nat org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:36)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest$AbstractThing$$EnhancerByMockitoWithCGLIB$$91611a84.name(<generated>)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodStubbed(CreatingMocksWithConstructorTest.java:119)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.instance.ConstructorInstantiator:<init>(Ljava/lang/Object;)V",
            "method_body": "public ConstructorInstantiator(Object outerClassInstance) {\nthis.outerClassInstance = outerClassInstance;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject returnedValue = mockHandler.handle(invocation);\nnotifyMethodCall(invocation, returnedValue);\nreturn returnedValue;\n} catch (Throwable t){\nnotifyMethodCallException(invocation, t);\nthrow t;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {\nif (!lastMatchers.isEmpty()) {\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy:<init>(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.mockito.internal.util.collections.Sets:newMockSafeHashSet([Ljava/lang/Object;)Ljava/util/Set;",
            "method_body": "public static Set<Object> newMockSafeHashSet(Object... mocks) {\nreturn HashCodeAndEqualsSafeSet.of(mocks);\n}",
            "method_id": 167
        }
    ]
}