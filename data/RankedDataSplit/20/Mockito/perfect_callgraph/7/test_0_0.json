{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics",
    "test_body": "public void discoverDeepMockingOfGenerics() {\nMyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\nwhen(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n}\n",
    "stack_trace": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:407)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:405)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.rawType(GenericMetadataSupport.java:385)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(ReturnsDeepStubs.java:51)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest$MyClass2$$EnhancerByMockitoWithCGLIB$$da894864.getNested(<generated>)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics(DeepStubFailingWhenGenricNestedAsRawTypeTest.java:26)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:readTypeVariables()V",
            "method_body": "private void readTypeVariables() {\nfor (Type type : typeVariable.getBounds()) {\nregisterTypeVariablesOn(type);\nregisterTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:<init>(Ljava/lang/String;)V",
            "method_body": "public MockitoException(String message) {\nsuper(message);\nfilterStackTrace();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$2:accept(Ljava/lang/reflect/Method;)I",
            "method_body": "public int accept(Method method) {\nreturn method.isBridge() ? 1 : 0;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> typeToMock, MockSettings settings) {\nif (!MockSettingsImpl.class.isInstance(settings)) {\nMockSettingsImpl impl = MockSettingsImpl.class.cast(settings);\nMockCreationSettings<T> creationSettings = impl.confirm(typeToMock);\nT mock = mockUtil.createMock(creationSettings);\nmockingProgress.mockingStarted(mock, typeToMock);\nreturn mock;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:prepareExtraInterfaces(Lorg/mockito/internal/creation/settings/CreationSettings;)Ljava/util/Set;",
            "method_body": "private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {\nSet<Class> interfaces = new HashSet<Class>(settings.getExtraInterfaces());\nif(settings.isSerializable()) {\nreturn interfaces;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:validatedSettings(Ljava/lang/Class;Lorg/mockito/internal/creation/settings/CreationSettings;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, CreationSettings<T> source) {\nMockCreationValidator validator = new MockCreationValidator();\nvalidator.validateType(typeToMock);\nvalidator.validateExtraInterfaces(typeToMock, source.getExtraInterfaces());\nvalidator.validateMockedType(typeToMock, source.getSpiedInstance());\nvalidator.validateSerializable(typeToMock, source.isSerializable());\nvalidator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());\nCreationSettings<T> settings = new CreationSettings<T>(source);\nsettings.setMockName(new MockNameImpl(source.getName(), typeToMock));\nsettings.setTypeToMock(typeToMock);\nsettings.setExtraInterfaces(prepareExtraInterfaces(source));\nreturn settings;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubAnswer(Ljava/lang/Object;Lorg/mockito/internal/stubbing/InvocationContainerImpl;)Ljava/lang/Object;",
            "method_body": "private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {\ncontainer.addAnswer(new DeeplyStubbedAnswer(mock), false);\nreturn mock;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\nproxy = instantiator.newInstance(proxyClass);\n}\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.debugging.LocationImpl:<init>(Lorg/mockito/internal/exceptions/stacktrace/StackTraceFilter;)V",
            "method_body": "public LocationImpl(StackTraceFilter stackTraceFilter) {\nthis.stackTraceFilter = stackTraceFilter;\nstackTraceHolder = new Throwable();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:newDeepStubMock(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {\nMockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);\nreturn mockitoCore().mock(\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:notifyMethodCall(Lorg/mockito/invocation/Invocation;Ljava/lang/Object;)V",
            "method_body": "private void notifyMethodCall(Invocation invocation, Object returnValue) {\nfor (InvocationListener listener : invocationListeners) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn delegate.getMockSettings();\n}",
            "method_id": 19
        }
    ]
}