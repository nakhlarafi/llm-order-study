{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure",
    "test_body": "public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {\nIMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\nnew Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n}\n",
    "stack_trace": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\nat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\nat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\nat org.apache.tools.ant.Task.perform(Task.java:350)\nat org.apache.tools.ant.Target.execute(Target.java:449)\nat org.apache.tools.ant.Target.performTasks(Target.java:470)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:834)\nat org.apache.tools.ant.Main.startAnt(Main.java:223)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.NullPointerException\nat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)\nat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)\nat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:withMocks(Ljava/util/Set;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection withMocks(Set<Object> mocks) {\nthis.mocks.addAll(checkNotNull(mocks, \"mocks\"));\nreturn this;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn GLOBAL_CONFIGURATION.get();\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.AcrossJVMSerializationFeature:enableSerializationAcrossJVM(Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public <T> void enableSerializationAcrossJVM(MockCreationSettings<T> settings) {\nif (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:apply()V",
            "method_body": "public void apply() {\nfor (Field field : fields) {\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:getHandler()Lorg/mockito/invocation/MockHandler;",
            "method_body": "public MockHandler getHandler() {\nreturn handler;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {\nthis.mockHandler = mockHandler;\nthis.invocationListeners = settings.getInvocationListeners();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:scan()Ljava/util/Set;",
            "method_body": "private Set<Field> scan() {\nSet<Field> mockDependentFields = new HashSet<Field>();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nreturn mockDependentFields;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setMockName(Lorg/mockito/mock/MockName;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setMockName(MockName mockName) {\nthis.mockName = mockName;\nreturn this;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nClass<?> clazz = testClass.getClass();\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nwhile (clazz != Object.class) {\nscanDeprecatedWay(annotationEngine, testClass, clazz);\nclazz = clazz.getSuperclass();\nannotationEngine.process(testClass.getClass(), testClass);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/cglib/ClassImposterizer;)V",
            "method_body": "public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nClass<?>[] allMockedTypes = prepend(mockedType, interfaces);\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(allMockedTypes);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nenhancer.setSerialVersionUID(42L);\nreturn enhancer.createClass();\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.creation.instance.ObjenesisInstantiator:newInstance(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T newInstance(Class<T> cls) {\nreturn objenesis.newInstance(cls);\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:<init>()V",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nreturn loader;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn GLOBAL_CONFIGURATION.get().getAnnotationEngine();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializableMode != SerializableMode.NONE;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\nproxy = instantiator.newInstance(proxyClass);\n}\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 119
        }
    ]
}