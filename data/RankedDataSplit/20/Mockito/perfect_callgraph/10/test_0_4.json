{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub",
    "test_body": "public void should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub() {\nNotSerializableShouldBeMocked the_deep_stub = mock(ToBeDeepStubbed.class, RETURNS_DEEP_STUBS).getSomething();\nassertThat(the_deep_stub).isNotNull();",
    "stack_trace": "org.mockito.exceptions.base.MockitoException:\nYou are using the setting 'withSettings().serializable()' however the type you are trying to mock 'NotSerializableShouldBeMocked'\ndo not implement Serializable AND do not have a no-arg constructor.\nThis combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized\n\nAlso note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,\ni.e. the top-most superclass has to implements Serializable.\n\nat org.mockito.exceptions.Reporter.serializableWontWorkForObjectsThatDontImplementSerializable(Reporter.java:760)\nat org.mockito.internal.util.MockCreationValidator.validateSerializable(MockCreationValidator.java:63)\nat org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:154)\nat org.mockito.internal.creation.MockSettingsImpl.confirm(MockSettingsImpl.java:141)\nat org.mockito.internal.MockitoCore.mock(MockitoCore.java:58)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.newDeepStubMock(ReturnsDeepStubs.java:88)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.deepStub(ReturnsDeepStubs.java:71)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(ReturnsDeepStubs.java:55)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:61)\nat org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest$ToBeDeepStubbed$$EnhancerByMockitoWithCGLIB$$83cd564c.getSomething(<generated>)\nat org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest.should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub(DeepStubsWronglyReportsSerializationProblemsTest.java:16)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setMockName(Lorg/mockito/mock/MockName;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setMockName(MockName mockName) {\nthis.mockName = mockName;\nreturn this;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setTypeToMock(Ljava/lang/Class;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setTypeToMock(Class<T> typeToMock) {\nthis.typeToMock = typeToMock;\nreturn this;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:serializable()Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings serializable() {\nreturn serializable(SerializableMode.BASIC);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;Ljava/util/Collection;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\nreturn imposterise(interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toInstanceName(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private static String toInstanceName(Class<?> clazz) {\nString className = clazz.getSimpleName();\nif (className.length() == 0) {\nreturn className.substring(0, 1).toLowerCase() + className.substring(1);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:mockitoCore()Lorg/mockito/internal/MockitoCore;",
            "method_body": "private static MockitoCore mockitoCore() {\nreturn LazyHolder.MOCKITO_CORE;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\n}\nreturn null;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.internal.creation.CglibMockMaker:createMock(Lorg/mockito/mock/MockCreationSettings;Lorg/mockito/invocation/MockHandler;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\nInternalMockHandler mockitoHandler = cast(handler);\nnew AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\nreturn ClassImposterizer.INSTANCE.imposterise(\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.exceptions.Reporter:serializableWontWorkForObjectsThatDontImplementSerializable(Ljava/lang/Class;)V",
            "method_body": "public void serializableWontWorkForObjectsThatDontImplementSerializable(Class classToMock) {\nthrow new MockitoException(join(\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isHashCodeMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isHashCodeMethod(Method method) {\nreturn method.getName().equals(\"hashCode\")\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializableMode != SerializableMode.NONE;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:rawExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] rawExtraInterfaces() {\nreturn new Class[0];\n}",
            "method_id": 99
        }
    ]
}