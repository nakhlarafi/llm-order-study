{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.shouldInjectUsingPropertySetterIfAvailable",
    "test_body": "public void shouldInjectUsingPropertySetterIfAvailable() {\nassertTrue(awaitingInjection.propertySetterUsed);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.shouldInjectUsingPropertySetterIfAvailable(InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java:25)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.NameBasedCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\nList<Object> mockNameMatches = new ArrayList<Object>();\nif(mocks.size() > 1) {\nfor (Object mock : mocks) {\nif (field.getName().equals(mockUtil.getMockName(mock).toString())) {\nmockNameMatches.add(mock);\n}\nreturn next.filterCandidate(mockNameMatches, field, fieldInstance);\nreturn next.filterCandidate(mocks, field, fieldInstance);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.Mockito:validateMockitoUsage()V",
            "method_body": "public static void validateMockitoUsage() {\nMOCKITO_CORE.validateMockitoUsage();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:scanMocks(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/Set;",
            "method_body": "private static Set<Object> scanMocks(Object testClass, Class<?> clazz) {\nSet<Object> mocks = new HashSet<Object>();\nfor (Field field : clazz.getDeclaredFields()) {\nif (null != field.getAnnotation(Spy.class) || null != field.getAnnotation(org.mockito.Mock.class)\nObject fieldInstance = null;\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\nfieldInstance = field.get(testClass);\nfield.setAccessible(wasAccessible);\n}\nif (fieldInstance != null) {\nmocks.add(fieldInstance);\nreturn mocks;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.runners.util.RunnerProvider:isJUnit45OrHigherAvailable()Z",
            "method_body": "public boolean isJUnit45OrHigherAvailable() {\nreturn hasJUnit45OrHigher;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.runners.util.RunnerProvider:newInstance(Ljava/lang/String;Ljava/lang/Class;)Lorg/mockito/internal/runners/RunnerImpl;",
            "method_body": "public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\nClass<?> runnerClass = Class.forName(runnerClassName);\nconstructor = runnerClass.getConstructor(Class.class.getClass());\n}\nreturn (RunnerImpl) constructor.newInstance(constructorParam);\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:initialize()Ljava/lang/Object;",
            "method_body": "public Object initialize() {\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nreturn acquireFieldInstance(testClass, field);\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1:thenInject()Z",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn true;\nreturn new OngoingInjecter() {\nreturn false;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\nannotationEngine.process(clazz, testClass);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.runners.util.FrameworkUsageValidator:<init>(Lorg/junit/runner/notification/RunNotifier;)V",
            "method_body": "public FrameworkUsageValidator(RunNotifier notifier) {\nthis.notifier = notifier;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockName(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = mockName;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn mockName;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.Answers:get()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> get() {\nreturn implementation;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:initiateMockName(Ljava/lang/Class;)V",
            "method_body": "public void initiateMockName(Class classToMock) {\nmockName = new MockName(name, classToMock);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:scanForInjection(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/Set;",
            "method_body": "private static Set<Field> scanForInjection(Object testClass, Class<?> clazz) {\nSet<Field> testedFields = new HashSet<Field>();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (null != field.getAnnotation(InjectMocks.class)) {\ntestedFields.add(field);\nreturn testedFields;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter$2:thenInject()Z",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn true;\nreturn new OngoingInjecter() {\nreturn false;\n}",
            "method_id": 79
        }
    ]
}