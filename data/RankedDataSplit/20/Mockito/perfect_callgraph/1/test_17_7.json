{
    "bug_id": 1,
    "test_id": 17,
    "test_name": "org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithNullVarArgArray",
    "test_body": "public void shouldVerifyWithNullVarArgArray() {\nFoo foo = Mockito.mock(Foo.class);\nfoo.varArgs((String[]) null);    \nMockito.verify(foo).varArgs((String[]) Mockito.anyObject());\nMockito.verify(foo).varArgs((String[]) null);",
    "stack_trace": "java.lang.UnsupportedOperationException\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:123)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:22)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:16)\nat org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:48)\nat org.mockito.internal.verification.Times.verify(Times.java:39)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:76)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptSuperCallable(MockMethodInterceptor.java:44)\nat org.mockitousage.basicapi.UsingVarargsTest$Foo$MockitoMock$1438278408.varArgs(Unknown Source)\nat org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithNullVarArgArray(UsingVarargsTest.java:129)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullLocalizedMatchers()Ljava/util/List;",
            "method_body": "public List<LocalizedMatcher> pullLocalizedMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\nList<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\nmatcherStack.clear();\nreturn (List) matchers;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:addTo(Ljava/util/Set;)V",
            "method_body": "public void addTo(Set<Field> mockDependentFields) {\nmockDependentFields.addAll(scan());\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nassert ! (mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\nhashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n}\nreturn hashSet;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:verify(Lorg/mockito/internal/verification/api/VerificationData;)V",
            "method_body": "public void verify(VerificationData data) {\nif (wantedCount > 0) {\nMissingInvocationChecker missingInvocation = new MissingInvocationChecker();\nmissingInvocation.check(data.getAllInvocations(), data.getWanted());\nNumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\nnumberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isUsingConstructor()Z",
            "method_body": "public boolean isUsingConstructor() {\nreturn useConstructor;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\ninvocationContainerImpl.setMethodForStubbing(invocationMatcher);\nreturn null;\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nnew AnswersValidator().validateDefaultAnswerReturnedValue(invocation, ret);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public NameBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock) {\nreturn mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationDataImpl:getAllInvocations()Ljava/util/List;",
            "method_body": "public List<Invocation> getAllInvocations() {\nreturn invocations.getInvocations();\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:getObject()Ljava/lang/Object;",
            "method_body": "public T getObject() {\nreturn object;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching:isOut(Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "public boolean isOut(Invocation invocation) {\nreturn !wanted.matches(invocation);\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 159
        }
    ]
}