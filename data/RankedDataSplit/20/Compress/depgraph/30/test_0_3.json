{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0",
    "test_body": "46: public void readOfLength0ShouldReturn0() throws Exception {\n47: // Create a big random piece of data\n48: byte[] rawData = new byte[1048576];\n49: for (int i=0; i < rawData.length; ++i) {\n50: rawData[i] = (byte) Math.floor(Math.random()*256);\n51: }\n52: 53: // Compress it\n54: ByteArrayOutputStream baos = new ByteArrayOutputStream();\n55: BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);\n56: bzipOut.write(rawData);\n57: bzipOut.flush();\n58: bzipOut.close();\n59: baos.flush();\n60: baos.close();\n61: 62: // Try to read it back in\n63: ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n64: BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);\n65: byte[] buffer = new byte[1024];\n66: Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));\n67: Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));\n68: Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<-1>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest.readOfLength0ShouldReturn0(BZip2CompressorInputStreamTest.java:67)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:init()V",
            "method_body": "private void init() throws IOException {\nbsPutUByte('B');\nbsPutUByte('Z');\nthis.data = new Data(this.blockSize100k);\nthis.blockSorter = new BlockSort(this.data);\nbsPutUByte('h');\nbsPutUByte('0' + this.blockSize100k);\nthis.combinedCRC = 0;\ninitBlock();\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data:<init>(I)V",
            "method_body": "final boolean[] inUse = new boolean[256]; // 256 byte\nfinal byte[] unseqToSeq = new byte[256]; // 256 byte\nfinal int[] mtfFreq = new int[MAX_ALPHA_SIZE]; // 1032 byte\nfinal byte[] selector = new byte[MAX_SELECTORS]; // 18002 byte\nfinal byte[] selectorMtf = new byte[MAX_SELECTORS]; // 18002 byte\nfinal byte[] generateMTFValues_yy = new byte[256]; // 256 byte\nfinal byte[][] sendMTFValues_len = new byte[N_GROUPS][MAX_ALPHA_SIZE]; // 1548\nfinal int[][] sendMTFValues_rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE]; // 6192\nfinal int[] sendMTFValues_fave = new int[N_GROUPS]; // 24 byte\nfinal short[] sendMTFValues_cost = new short[N_GROUPS]; // 12 byte\nfinal int[][] sendMTFValues_code = new int[N_GROUPS][MAX_ALPHA_SIZE]; // 6192\nfinal byte[] sendMTFValues2_pos = new byte[N_GROUPS]; // 6 byte\nfinal boolean[] sentMTFValues4_inUse16 = new boolean[16]; // 16 byte\nfinal int[] heap = new int[MAX_ALPHA_SIZE + 2]; // 1040 byte\nfinal int[] weight = new int[MAX_ALPHA_SIZE * 2]; // 2064 byte\nfinal int[] parent = new int[MAX_ALPHA_SIZE * 2]; // 2064 byte\nData(int blockSize100k) {\nfinal int n = blockSize100k * BZip2Constants.BASEBLOCKSIZE;\nthis.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];\nthis.fmap = new int[n];\nthis.sfmap = new char[2 * n];\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BlockSort:<init>(Lorg/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream$Data;)V",
            "method_body": "private static final int QSORT_STACK_SIZE = 1000;\nprivate final int[] stack_ll = new int[STACK_SIZE]; // 4000 byte\nprivate final int[] stack_hh = new int[STACK_SIZE]; // 4000 byte\nprivate final int[] stack_dd = new int[QSORT_STACK_SIZE]; // 4000 byte\nprivate final int[] mainSort_runningOrder = new int[256]; // 1024 byte\nprivate final int[] mainSort_copy = new int[256]; // 1024 byte\nprivate final boolean[] mainSort_bigDone = new boolean[256]; // 256 byte\nprivate final int[] ftab = new int[65537]; // 262148 byte\nBlockSort(final BZip2CompressorOutputStream.Data data) {\nthis.quadrant = data.sfmap;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BlockSort:<clinit>()V",
            "method_body": "private static final int[] INCS = { 1, 4, 13, 40, 121, 364, 1093, 3280,\n2391484 };",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.CRC:<init>()V",
            "method_body": "CRC() {\ninitialiseCRC();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.CRC:<clinit>()V",
            "method_body": "private static final int crc32Table[] = {\n};",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorInputStream:count(I)V",
            "method_body": "protected void count(int read) {\ncount((long) read);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorInputStream:count(J)V",
            "method_body": "protected void count(long read) {\nif (read != -1) {\nbytesRead = bytesRead + read;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorInputStream:<init>()V",
            "method_body": "private long bytesRead = 0;\ncount((long) read);\n}",
            "method_id": 68
        }
    ]
}