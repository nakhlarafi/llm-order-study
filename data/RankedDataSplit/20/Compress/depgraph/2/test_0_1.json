{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.ArTestCase.testArDelete",
    "test_body": "89: public void testArDelete() throws Exception {\n90: final File output = new File(dir, \"bla.ar\");\n91: 92: final File file1 = getFile(\"test1.xml\");\n93: final File file2 = getFile(\"test2.xml\");\n94: {\n95: // create\n96: 97: final OutputStream out = new FileOutputStream(output);\n98: final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n99: os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n100: IOUtils.copy(new FileInputStream(file1), os);\n101: os.closeArchiveEntry();\n102: 103: os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n104: IOUtils.copy(new FileInputStream(file2), os);\n105: os.closeArchiveEntry();\n106: os.close();\n107: out.close();\n108: }\n109: 110: assertEquals(8\n111: + 60 + file1.length() + (file1.length() % 2)\n112: + 60 + file2.length() + (file2.length() % 2),\n113: output.length());\n114: 115: final File output2 = new File(dir, \"bla2.ar\");\n116: 117: int copied = 0;\n118: int deleted = 0;\n119: 120: {\n121: // remove all but one file\n122: 123: final InputStream is = new FileInputStream(output);\n124: final OutputStream os = new FileOutputStream(output2);\n125: final ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", os);\n126: final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n127: while(true) {\n128: final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n129: if (entry == null) {\n130: break;\n131: }\n132: 133: if (\"test1.xml\".equals(entry.getName())) {\n134: aos.putArchiveEntry(entry);\n135: IOUtils.copy(ais, aos);\n136: aos.closeArchiveEntry();\n137: copied++;\n138: } else {\n139: IOUtils.copy(ais, new ByteArrayOutputStream());\n140: deleted++;\n141: }\n142: 143: }\n144: ais.close();\n145: aos.close();\n146: is.close();\n147: os.close();\n148: }\n149: 150: assertEquals(1, copied);\n151: assertEquals(1, deleted);\n152: assertEquals(144, output2.length());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.compress.archivers.ArTestCase.testArDelete(ArTestCase.java:151)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:writeArchiveHeader()J",
            "method_body": "private long writeArchiveHeader() throws IOException {\nbyte [] header = ArArchiveEntry.HEADER.getBytes();\nout.write(header);\nreturn header.length;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:closeArchiveEntry()V",
            "method_body": "public void closeArchiveEntry() throws IOException {\nif (prevEntry != null && haveUnclosedEntry && (entryOffset % 2) != 0) {\nhaveUnclosedEntry = false;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
            "method_body": "public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {\nArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;\nif (prevEntry == null) {\narchiveOffset += writeArchiveHeader();\nif (prevEntry.getLength() != entryOffset) {\ncloseArchiveEntry();\nprevEntry = pArEntry;\narchiveOffset += writeEntryHeader(pArEntry);\nentryOffset = 0;\nhaveUnclosedEntry = true;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:fill(JJC)J",
            "method_body": "private long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException {\nfinal long diff = pNewOffset - pOffset;\nif (diff > 0) {\nfor (int i = 0; i < diff; i++) {\nwrite(pFill);\nreturn pNewOffset;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:write(Ljava/lang/String;)J",
            "method_body": "private long write( final String data ) throws IOException {\nfinal byte[] bytes = data.getBytes(\"ascii\");\nwrite(bytes);\nreturn bytes.length;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:writeEntryHeader(Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;)J",
            "method_body": "private long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {\nlong offset = 0;\nfinal String n = pEntry.getName();\nif (n.length() > 16) {\noffset += write(n);\noffset = fill(offset, 16, ' ');\nfinal String m = \"\" + (pEntry.getLastModified() / 1000);\nif (m.length() > 12) {\noffset += write(m);\noffset = fill(offset, 28, ' ');\nfinal String u = \"\" + pEntry.getUserId();\nif (u.length() > 6) {\noffset += write(u);\noffset = fill(offset, 34, ' ');\nfinal String g = \"\" + pEntry.getGroupId();\nif (g.length() > 6) {\noffset += write(g);\noffset = fill(offset, 40, ' ');\nfinal String fm = \"\" + Integer.toString(pEntry.getMode(), 8);\nif (fm.length() > 8) {\noffset += write(fm);\noffset = fill(offset, 48, ' ');\nfinal String s = \"\" + pEntry.getLength();\nif (s.length() > 10) {\noffset += write(s);\noffset = fill(offset, 58, ' ');\noffset += write(ArArchiveEntry.TRAILER);\nreturn offset;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:write(I)V",
            "method_body": "public void write(int b) throws IOException {\nout.write(b);\nentryOffset++;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:write([BII)V",
            "method_body": "public void write(byte[] b, int off, int len) throws IOException {\nout.write(b, off, len);\nentryOffset += len;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:write([B)V",
            "method_body": "public void write(byte[] b) throws IOException {\nout.write(b);\nentryOffset += b.length;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:close()V",
            "method_body": "public void close() throws IOException {\ncloseArchiveEntry();\nout.close();\nprevEntry = null;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getUserId()I",
            "method_body": "public int getUserId() {\nreturn userId;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getGroupId()I",
            "method_body": "public int getGroupId() {\nreturn groupId;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getMode()I",
            "method_body": "public int getMode() {\nreturn mode;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ar.ArArchiveEntry:getLastModified()J",
            "method_body": "public long getLastModified() {\nreturn lastModified;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<clinit>()V",
            "method_body": "private static final byte[] LZERO = {0, 0, 0, 0};\nprivate static final byte[] LZERO = {0, 0, 0, 0};",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B",
            "method_body": "public byte[] getBytes() {\nreturn ZipLong.getBytes(value);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B",
            "method_body": "public static byte[] getBytes(long value) {\nbyte[] result = new byte[WORD];\nresult[0] = (byte) ((value & BYTE_MASK));\nresult[BYTE_1] = (byte) ((value & BYTE_1_MASK) >> BYTE_1_SHIFT);\nresult[BYTE_2] = (byte) ((value & BYTE_2_MASK) >> BYTE_2_SHIFT);\nresult[BYTE_3] = (byte) ((value & BYTE_3_MASK) >> BYTE_3_SHIFT);\nreturn result;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
            "method_body": "public ZipLong(long value) {\nthis.value = value;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:<clinit>()V",
            "method_body": "private static final int WORD = 4;\npublic static final ZipLong CFH_SIG = new ZipLong(0X02014B50L);\npublic static final ZipLong LFH_SIG = new ZipLong(0X04034B50L);\npublic ZipLong(long value) {\nthis.value = value;\n}",
            "method_id": 38
        }
    ]
}