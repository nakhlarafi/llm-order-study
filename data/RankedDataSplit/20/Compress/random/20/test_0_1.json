{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm",
    "test_body": "49: public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {\n50: CpioArchiveInputStream in =\n51: new CpioArchiveInputStream(new FileInputStream(getFile(\"redline.cpio\")));\n52: CpioArchiveEntry entry= null;\n53: 54: int count = 0;\n55: while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {\n56: count++;\n57: }\n58: in.close();\n59: 60: assertEquals(count, 1);\n61: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setRemoteDeviceMin(J)V",
            "method_body": "public void setRemoteDeviceMin(final long rmin) {\ncheckNewFormat();\nthis.rmin = rmin;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setDeviceMaj(J)V",
            "method_body": "public void setDeviceMaj(final long maj) {\ncheckNewFormat();\nthis.maj = maj;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readCString(I)Ljava/lang/String;",
            "method_body": "private String readCString(final int length) throws IOException {\nbyte tmpBuffer[] = new byte[length];\nreadFully(tmpBuffer, 0, tmpBuffer.length);\nreturn new String(tmpBuffer, 0, tmpBuffer.length - 1); // TODO default charset?\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setUID(J)V",
            "method_body": "public void setUID(final long uid) {\nthis.uid = uid;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn this.name;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
            "method_body": "public CpioArchiveEntry getNextCPIOEntry() throws IOException {\nensureOpen();\nif (this.entry != null) {\ncloseEntry();\nreadFully(TWO_BYTES_BUF, 0, TWO_BYTES_BUF.length);\nif (CpioUtil.byteArray2long(TWO_BYTES_BUF, false) == MAGIC_OLD_BINARY) {\n} else if (CpioUtil.byteArray2long(TWO_BYTES_BUF, true)\nSystem.arraycopy(TWO_BYTES_BUF, 0, SIX_BYTES_BUF, 0,\nreadFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,\nString magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);\nif (magicString.equals(MAGIC_NEW)) {\nthis.entry = readNewEntry(false);\nthis.entryBytesRead = 0;\nthis.entryEOF = false;\nthis.crc = 0;\nif (this.entry.getName().equals(CPIO_TRAILER)) {\nreturn this.entry;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
            "method_body": "private CpioArchiveEntry readNewEntry(final boolean hasCrc)\nif (hasCrc) {\nret = new CpioArchiveEntry(FORMAT_NEW);\nret.setInode(readAsciiLong(8, 16));\nlong mode = readAsciiLong(8, 16);\nif (mode != 0){\nret.setMode(mode);\nret.setUID(readAsciiLong(8, 16));\nret.setGID(readAsciiLong(8, 16));\nret.setNumberOfLinks(readAsciiLong(8, 16));\nret.setTime(readAsciiLong(8, 16));\nret.setSize(readAsciiLong(8, 16));\nret.setDeviceMaj(readAsciiLong(8, 16));\nret.setDeviceMin(readAsciiLong(8, 16));\nret.setRemoteDeviceMaj(readAsciiLong(8, 16));\nret.setRemoteDeviceMin(readAsciiLong(8, 16));\nlong namesize = readAsciiLong(8, 16);\nret.setChksum(readAsciiLong(8, 16));\nString name = readCString((int) namesize);\nret.setName(name);\nif (mode == 0 && !name.equals(CPIO_TRAILER)){\nskip(ret.getHeaderPadCount());\nreturn ret;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;I)V",
            "method_body": "private boolean closed = false;\nprivate long entryBytesRead = 0;\nprivate boolean entryEOF = false;\nprivate final byte tmpbuf[] = new byte[4096];\nprivate long crc = 0;\nprivate final byte[] TWO_BYTES_BUF = new byte[2];\nprivate final byte[] FOUR_BYTES_BUF = new byte[4];\nprivate final byte[] SIX_BYTES_BUF = new byte[6];\n* CpioConstants#BLOCK_SIZE BLOCK_SIZE}.",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setName(Ljava/lang/String;)V",
            "method_body": "public void setName(final String name) {\nthis.name = name;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:closeEntry()V",
            "method_body": "private void closeEntry() throws IOException {\nensureOpen();\nwhile (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) { // NOPMD\nthis.entryEOF = true;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setMode(J)V",
            "method_body": "public void setMode(final long mode) {\nfinal long maskedMode = mode & S_IFMT;\nswitch ((int) maskedMode) {\nbreak;\nthrow new IllegalArgumentException(\nthis.mode = mode;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getFormat()S",
            "method_body": "public short getFormat() {\nreturn this.fileFormat;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ArchiveInputStream:count(J)V",
            "method_body": "protected void count(long read) {\nif (read != -1) {\nbytesRead = bytesRead + read;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setTime(J)V",
            "method_body": "public void setTime(final long time) {\nthis.mtime = time;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getHeaderPadCount()I",
            "method_body": "public int getHeaderPadCount(){\nif (this.alignmentBoundary == 0) { return 0; }\nint size = this.headerSize+this.name.length()+1; // Name has terminating null\nint remain = size % this.alignmentBoundary;\nif (remain > 0){\nreturn 0;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setSize(J)V",
            "method_body": "public void setSize(final long size) {\nif (size < 0 || size > 0xFFFFFFFFL) {\nthis.filesize = size;\n}",
            "method_id": 35
        }
    ]
}