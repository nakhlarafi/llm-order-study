{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.Preconditions:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object obj) {\ncheckArgument(obj != null);\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.google.gson.Preconditions:checkArgument(Z)V",
            "method_body": "public static void checkArgument(boolean condition) {\nif (!condition) {\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src) {\nif (src == null) {\nreturn toJson(src, src.getClass());\n}",
            "method_id": 62
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src, Type typeOfSrc) {\nStringWriter writer = new StringWriter();\ntoJson(toJsonTree(src, typeOfSrc), writer);\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:assignToRoot(Lcom/google/gson/JsonElement;)V",
            "method_body": "private void assignToRoot(JsonElement newRoot) {\nPreconditions.checkNotNull(newRoot);\nroot = newRoot;\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:start(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void start(ObjectTypePair node) {\nif (node == null) {\nif (ancestors.contains(node)) {\nancestors.push(node);\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:end(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void end(ObjectTypePair node) {\nif (node != null) {\nancestors.pop();\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:visitUsingCustomHandler(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\nObject obj = objTypePair.getObject();\nif (obj == null) {\nJsonElement element = findAndInvokeCustomSerializer(objTypePair);\nif (element != null) {\nreturn false;\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:findAndInvokeCustomSerializer(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/JsonElement;",
            "method_body": "private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\nPair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\nif (pair == null) {\nreturn null;\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:contains(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean contains(ObjectTypePair obj) {\nif (obj == null) {\nfor (ObjectTypePair stackObject : stack) {\nreturn false;\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:pop()Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair pop() {\nreturn stack.pop();\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.google.gson.JsonSerializationContextDefault:<init>(Lcom/google/gson/ObjectNavigatorFactory;ZLcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,\nParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\nthis.factory = factory;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.ancestors = new MemoryRefStack();\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.google.gson.JsonSerializationContextDefault:serialize(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\nObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));\nJsonSerializationVisitor visitor =\non.accept(visitor);\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:push(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair push(ObjectTypePair obj) {\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:<init>(Lcom/google/gson/ObjectNavigatorFactory;ZLcom/google/gson/ParameterizedTypeHandlerMap;Lcom/google/gson/JsonSerializationContext;Lcom/google/gson/MemoryRefStack;)V",
            "method_body": "JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\nMemoryRefStack ancestors) {\nthis.factory = factory;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.context = context;\nthis.ancestors = ancestors;\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.google.gson.Gson:toJsonTree(Ljava/lang/Object;Ljava/lang/reflect/Type;)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement toJsonTree(Object src, Type typeOfSrc) {\nif (src == null) {\nJsonSerializationContextDefault context = new JsonSerializationContextDefault(\nreturn context.serialize(src, typeOfSrc, true);\n}",
            "method_id": 75
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:<init>()V",
            "method_body": "private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getObject()Ljava/lang/Object;",
            "method_body": "Object getObject() {\nreturn obj;\n}",
            "method_id": 77
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:startVisitingObject(Ljava/lang/Object;)V",
            "method_body": "public void startVisitingObject(Object node) {\nassignToRoot(new JsonObject());\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (int modifier : modifiers) {\nif (f.hasModifier(modifier)) {\n}\nreturn false;\n}",
            "method_id": 79
        }
    ]
}