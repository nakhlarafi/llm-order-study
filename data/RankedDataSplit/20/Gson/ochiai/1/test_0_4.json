{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.AnonymousAndLocalClassExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn isAnonymousOrLocal(f.getDeclaredClass());\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:hasModifier(I)Z",
            "method_body": "public boolean hasModifier(int modifier) {\nreturn (modifiers & modifier) != 0;\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn skipSyntheticFields && f.isSynthetic();\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:isSynthetic()Z",
            "method_body": "boolean isSynthetic() {\nreturn isSynthetic;\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (ExclusionStrategy strategy : strategies) {\nif (strategy.shouldSkipField(f)) {\n}\nreturn false;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:getDeclaredClass()Ljava/lang/Class;",
            "method_body": "public Class<?> getDeclaredClass() {\nreturn declaredType;\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:navigateClassFields(Ljava/lang/Object;Ljava/lang/Class;Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field f : fields) {\nFieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\nif (exclusionStrategy.shouldSkipField(fieldAttributes)\nTypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getTypeInfoForField(Ljava/lang/reflect/Field;Ljava/lang/reflect/Type;)Lcom/google/gson/TypeInfo;",
            "method_body": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {\nClass<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);\nType type = f.getGenericType();\nType actualType = getActualType(type, typeDefiningF, classDefiningF);\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getActualType(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
            "method_body": "private static Type getActualType(\nif (typeToEvaluate instanceof Class<?>) {\n} else if (typeToEvaluate instanceof ParameterizedType) {\n} else if (typeToEvaluate instanceof GenericArrayType) {\n} else if (typeToEvaluate instanceof TypeVariable<?>) {\nif (parentType instanceof ParameterizedType) {\nthrow new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:toMoreSpecificType()Lcom/google/gson/ObjectTypePair;",
            "method_body": "ObjectTypePair toMoreSpecificType() {\nif (preserveType || obj == null) {\nreturn this;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.google.gson.TypeInfo:getActualType()Ljava/lang/reflect/Type;",
            "method_body": "public final Type getActualType() {\nreturn actualType;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<init>(Ljava/lang/Class;Ljava/lang/reflect/Field;)V",
            "method_body": "FieldAttributes(final Class<?> declaringClazz, final Field f) {\nPreconditions.checkNotNull(declaringClazz);\nthis.declaringClazz = declaringClazz;\nname = f.getName();\ndeclaredType = f.getType();\nisSynthetic = f.isSynthetic();\nmodifiers = f.getModifiers();\nfield = f;\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<clinit>()V",
            "method_body": "private static final String MAX_CACHE_PROPERTY_NAME =\nprivate static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE =\n* Constructs a Field Attributes object from the {@code f}.",
            "method_id": 92
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:getMaxCacheSize()I",
            "method_body": "private static int getMaxCacheSize() {\nfinal int defaultMaxCacheSize = 2000;\nString propertyValue = System.getProperty(\nreturn Integer.parseInt(propertyValue);\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.google.gson.LruCache:<init>(I)V",
            "method_body": "LruCache(int maxCapacity) {\nsuper(maxCapacity, 0.7F, true);\nthis.maxCapacity = maxCapacity;\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:setObject(Ljava/lang/Object;)V",
            "method_body": "void setObject(Object obj) {\nthis.obj = obj;\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.google.gson.TypeInfo:isArray()Z",
            "method_body": "public final boolean isArray() {\nreturn TypeUtils.isArray(rawClass);\n}",
            "method_id": 96
        },
        {
            "method_signature": "com.google.gson.JsonObject:<init>()V",
            "method_body": "public JsonObject() {\nmembers = new LinkedHashMap<String, JsonElement>();\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.google.gson.TypeUtils:isArray(Ljava/lang/reflect/Type;)Z",
            "method_body": "static boolean isArray(Type type) {\nif (type instanceof Class<?>) {\nreturn ((Class<?>)type).isArray();\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getHandlerForTypeHierarchy(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "private T getHandlerForTypeHierarchy(Class<?> type) {\nfor (Pair<Class<?>, T> entry : typeHierarchyList) {\nif (entry.first.isAssignableFrom(type)) {\n}\nreturn null;\n}",
            "method_id": 99
        }
    ]
}