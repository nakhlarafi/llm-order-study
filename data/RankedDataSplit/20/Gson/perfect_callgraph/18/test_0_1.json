{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "com.google.gson.functional.CollectionTest.testIssue1107",
    "test_body": "public void testIssue1107() {\nString json = \"{\\n\" +\n\"  \\\"inBig\\\": {\\n\" +\n\"    \\\"key\\\": [\\n\" +\n\"      { \\\"inSmall\\\": \\\"hello\\\" }\\n\" +\n\"    ]\\n\" +\n\"  }\\n\" +\n\"}\";\nBigClass bigClass = new Gson().fromJson(json, BigClass.class);\nSmallClass small = bigClass.inBig.get(\"key\").get(0);\nassertNotNull(small);",
    "stack_trace": "java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.google.gson.functional.CollectionTest$SmallClass\nat com.google.gson.functional.CollectionTest.testIssue1107(CollectionTest.java:410)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:resolveTypeVariable(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;",
            "method_body": "static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {\nClass<?> declaredByRaw = declaringClassOf(unknown);\nif (declaredByRaw == null) {\nType declaredBy = getGenericSupertype(context, contextRawType, declaredByRaw);\nif (declaredBy instanceof ParameterizedType) {\nreturn unknown;\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:declaringClassOf(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;",
            "method_body": "private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {\nGenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\nreturn genericDeclaration instanceof Class\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:checkNotPrimitive(Ljava/lang/reflect/Type;)V",
            "method_body": "static void checkNotPrimitive(Type type) {\ncheckArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl:<init>(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V",
            "method_body": "public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types$WildcardTypeImpl:<init>([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V",
            "method_body": "public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:setLenient(Z)V",
            "method_body": "public final void setLenient(boolean lenient) {\nthis.lenient = lenient;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:isLenient()Z",
            "method_body": "public final boolean isLenient() {\nreturn lenient;\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:beginArray()V",
            "method_body": "public void beginArray() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_BEGIN_ARRAY) {\npush(JsonScope.EMPTY_ARRAY);\npathIndices[stackSize - 1] = 0;\npeeked = PEEKED_NONE;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:endArray()V",
            "method_body": "public void endArray() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_END_ARRAY) {\nstackSize--;\npathIndices[stackSize - 1]++;\npeeked = PEEKED_NONE;\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:beginObject()V",
            "method_body": "public void beginObject() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_BEGIN_OBJECT) {\npush(JsonScope.EMPTY_OBJECT);\npeeked = PEEKED_NONE;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:endObject()V",
            "method_body": "public void endObject() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_END_OBJECT) {\nstackSize--;\npathNames[stackSize] = null; // Free the last path name so that it can be garbage collected!\npathIndices[stackSize - 1]++;\npeeked = PEEKED_NONE;\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:hasNext()Z",
            "method_body": "public boolean hasNext() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nreturn p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;\n}",
            "method_id": 32
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:doPeek()I",
            "method_body": "int doPeek() throws IOException {\nint peekStack = stack[stackSize - 1];\nif (peekStack == JsonScope.EMPTY_ARRAY) {\nstack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n} else if (peekStack == JsonScope.NONEMPTY_ARRAY) {\nint c = nextNonWhitespace(true);\nswitch (c) {\nreturn peeked = PEEKED_END_ARRAY;\nstack[stackSize - 1] = JsonScope.DANGLING_NAME;\nif (peekStack == JsonScope.NONEMPTY_OBJECT) {\nint c = nextNonWhitespace(true);\nswitch (c) {\nreturn peeked = PEEKED_END_OBJECT;\nint c = nextNonWhitespace(true);\nswitch (c) {\nreturn peeked = PEEKED_DOUBLE_QUOTED_NAME;\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextName()Ljava/lang/String;",
            "method_body": "public String nextName() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_UNQUOTED_NAME) {\n} else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n} else if (p == PEEKED_DOUBLE_QUOTED_NAME) {\nresult = nextQuotedValue('\"');\npeeked = PEEKED_NONE;\npathNames[stackSize - 1] = result;\nreturn result;\n}",
            "method_id": 34
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextString()Ljava/lang/String;",
            "method_body": "public String nextString() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_UNQUOTED) {\n} else if (p == PEEKED_SINGLE_QUOTED) {\n} else if (p == PEEKED_DOUBLE_QUOTED) {\nresult = nextQuotedValue('\"');\npeeked = PEEKED_NONE;\npathIndices[stackSize - 1]++;\nreturn result;\n}",
            "method_id": 35
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextQuotedValue(C)Ljava/lang/String;",
            "method_body": "private String nextQuotedValue(char quote) throws IOException {\nchar[] buffer = this.buffer;\nStringBuilder builder = null;\nint p = pos;\nint l = limit;\nint start = p;\nwhile (p < l) {\nint c = buffer[p++];\nif (c == quote) {\npos = p;\nint len = p - start - 1;\nif (builder == null) {\nreturn new String(buffer, start, len);\n} else if (c == '\\\\') {\n} else if (c == '\\n') {\n}\n}",
            "method_id": 36
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:push(I)V",
            "method_body": "private void push(int newTop) {\nif (stackSize == stack.length) {\nstack[stackSize++] = newTop;\n}",
            "method_id": 37
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:fillBuffer(I)Z",
            "method_body": "private boolean fillBuffer(int minimum) throws IOException {\nchar[] buffer = this.buffer;\nlineStart -= pos;\nif (limit != pos) {\nlimit = 0;\npos = 0;\nwhile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\nlimit += total;\nif (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff') {\nif (limit >= minimum) {\nreturn true;\nreturn false;\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\nbreak;\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\nlineNumber++;\nlineStart = p;\ncontinue;\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\nif (throwOnEof) {\nreturn -1;\n}",
            "method_id": 39
        }
    ]
}