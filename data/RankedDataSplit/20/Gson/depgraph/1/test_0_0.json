{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "33: public void testSingle() throws Exception {\n34: Gson gson = new Gson();\n35: Bar bar1 = new Bar(\"someString\", 1);\n36: ArrayList<Integer> arrayList = new ArrayList<Integer>();\n37: arrayList.add(1);\n38: arrayList.add(2);\n39: bar1.map.put(\"key1\", arrayList);\n40: bar1.map.put(\"key2\", new ArrayList<Integer>());\n41: String json = gson.toJson(bar1);\n42: System.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getActualType(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
            "method_body": "private static Type getActualType(\nif (typeToEvaluate instanceof Class<?>) {\n} else if (typeToEvaluate instanceof ParameterizedType) {\n} else if (typeToEvaluate instanceof GenericArrayType) {\n} else if (typeToEvaluate instanceof TypeVariable<?>) {\nif (parentType instanceof ParameterizedType) {\nthrow new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:toMoreSpecificType()Lcom/google/gson/ObjectTypePair;",
            "method_body": "ObjectTypePair toMoreSpecificType() {\nif (preserveType || obj == null) {\nreturn this;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.TypeInfo:getActualType()Ljava/lang/reflect/Type;",
            "method_body": "public final Type getActualType() {\nreturn actualType;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getTypeInfoForField(Ljava/lang/reflect/Field;Ljava/lang/reflect/Type;)Lcom/google/gson/TypeInfo;",
            "method_body": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {\nClass<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);\nType type = f.getGenericType();\nType actualType = getActualType(type, typeDefiningF, classDefiningF);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:accept(Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "public void accept(Visitor visitor) {\nTypeInfo objTypeInfo = new TypeInfo(objTypePair.type);\nif (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\nboolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\nif (!visitedWithCustomHandler) {\nObject obj = objTypePair.getObject();\nObject objectToVisit = (obj == null) ? visitor.getTarget() : obj;\nif (objectToVisit == null) {\nobjTypePair.setObject(objectToVisit);\nvisitor.start(objTypePair);\nif (objTypeInfo.isArray()) {\n} else if (objTypeInfo.getActualType() == Object.class\nvisitor.startVisitingObject(objectToVisit);\nObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\nClass<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass();\nfor (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =\nif (!curr.isSynthetic()) {\nnavigateClassFields(objectToVisit, curr, visitor);\nvisitor.end(objTypePair);\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.TypeUtils:isArray(Ljava/lang/reflect/Type;)Z",
            "method_body": "static boolean isArray(Type type) {\nif (type instanceof Class<?>) {\nreturn ((Class<?>)type).isArray();\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.TypeInfo:isArray()Z",
            "method_body": "public final boolean isArray() {\nreturn TypeUtils.isArray(rawClass);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.TypeInfo:<init>(Ljava/lang/reflect/Type;)V",
            "method_body": "TypeInfo(Type actualType) {\nthis.actualType = actualType;\nrawClass = TypeUtils.toRawClass(actualType);\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.TypeUtils:toRawClass(Ljava/lang/reflect/Type;)Ljava/lang/Class;",
            "method_body": "static Class<?> toRawClass(Type type) {\nif (type instanceof Class<?>) {\nreturn (Class<?>) type;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:<init>(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)V",
            "method_body": "ObjectTypePair(Object obj, Type type, boolean preserveType) {\nthis.obj = obj;\nthis.type = type;\nthis.preserveType = preserveType;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getObject()Ljava/lang/Object;",
            "method_body": "Object getObject() {\nreturn obj;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.Gson:<init>(Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/FieldNamingStrategy2;Lcom/google/gson/MappedObjectConstructor;ZLcom/google/gson/ParameterizedTypeHandlerMap;Lcom/google/gson/ParameterizedTypeHandlerMap;ZZZ)V",
            "method_body": "Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy,\nboolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) {\nthis.serializationStrategy = serializationStrategy;\nthis.deserializationStrategy = deserializationStrategy;\nthis.fieldNamingPolicy = fieldNamingPolicy;\nthis.objectConstructor = objectConstructor;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.deserializers = deserializers;\nthis.generateNonExecutableJson = generateNonExecutableGson;\nthis.htmlSafe = htmlSafe;\nthis.prettyPrinting = prettyPrinting;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.TypeInfo:getRawClass()Ljava/lang/Class;",
            "method_body": "public final Class<?> getRawClass() {\nreturn rawClass;\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:navigateClassFields(Ljava/lang/Object;Ljava/lang/Class;Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field f : fields) {\nFieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\nif (exclusionStrategy.shouldSkipField(fieldAttributes)\nTypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<init>(Ljava/lang/Class;Ljava/lang/reflect/Field;)V",
            "method_body": "FieldAttributes(final Class<?> declaringClazz, final Field f) {\nPreconditions.checkNotNull(declaringClazz);\nthis.declaringClazz = declaringClazz;\nname = f.getName();\ndeclaredType = f.getType();\nisSynthetic = f.isSynthetic();\nmodifiers = f.getModifiers();\nfield = f;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:setObject(Ljava/lang/Object;)V",
            "method_body": "void setObject(Object obj) {\nthis.obj = obj;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.google.gson.JsonSerializationContextDefault:serialize(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\nObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));\nJsonSerializationVisitor visitor =\non.accept(visitor);\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.google.gson.Gson:toJsonTree(Ljava/lang/Object;Ljava/lang/reflect/Type;)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement toJsonTree(Object src, Type typeOfSrc) {\nif (src == null) {\nJsonSerializationContextDefault context = new JsonSerializationContextDefault(\nreturn context.serialize(src, typeOfSrc, true);\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src, Type typeOfSrc) {\nStringWriter writer = new StringWriter();\ntoJson(toJsonTree(src, typeOfSrc), writer);\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src) {\nif (src == null) {\nreturn toJson(src, src.getClass());\n}",
            "method_id": 19
        }
    ]
}