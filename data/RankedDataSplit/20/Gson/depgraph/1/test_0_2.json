{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "33: public void testSingle() throws Exception {\n34: Gson gson = new Gson();\n35: Bar bar1 = new Bar(\"someString\", 1);\n36: ArrayList<Integer> arrayList = new ArrayList<Integer>();\n37: arrayList.add(1);\n38: arrayList.add(2);\n39: bar1.map.put(\"key1\", arrayList);\n40: bar1.map.put(\"key2\", new ArrayList<Integer>());\n41: String json = gson.toJson(bar1);\n42: System.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.Gson:<clinit>()V",
            "method_body": "private static final String NULL_STRING = \"null\";\nstatic final AnonymousAndLocalClassExclusionStrategy DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY =\nstatic final SyntheticFieldExclusionStrategy DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY =\nstatic final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\nnew ModifierBasedExclusionStrategy(new int[] { Modifier.TRANSIENT, Modifier.STATIC });",
            "method_id": 40
        },
        {
            "method_signature": "com.google.gson.Gson:createExclusionStrategy(D)Lcom/google/gson/ExclusionStrategy;",
            "method_body": "private static ExclusionStrategy createExclusionStrategy(double version) {\nList<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\nstrategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\nstrategies.add(DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\nstrategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY);\nif (version != VersionConstants.IGNORE_VERSIONS) {\nreturn new DisjunctionExclusionStrategy(strategies);\n}",
            "method_id": 41
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:<init>(Z)V",
            "method_body": "SyntheticFieldExclusionStrategy(boolean skipSyntheticFields) {\nthis.skipSyntheticFields = skipSyntheticFields;\n}",
            "method_id": 42
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:<init>([I)V",
            "method_body": "public ModifierBasedExclusionStrategy(int... modifiers) {\nthis.modifiers = new HashSet<Integer>();\nif (modifiers != null) {\nfor (int modifier : modifiers) {\nthis.modifiers.add(modifier);\n}",
            "method_id": 43
        },
        {
            "method_signature": "com.google.gson.MappedObjectConstructor:<init>(Lcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "public MappedObjectConstructor(\nParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {\ninstanceCreatorMap = instanceCreators;\n}",
            "method_id": 44
        },
        {
            "method_signature": "com.google.gson.MappedObjectConstructor:<clinit>()V",
            "method_body": "private static final Logger log = Logger.getLogger(MappedObjectConstructor.class.getName());\nParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {\ninstanceCreatorMap = instanceCreators;\n}",
            "method_id": 45
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:<clinit>()V",
            "method_body": "private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\nprivate static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\nprivate static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\nprivate static final UuidTypeAdapter UUUID_TYPE_ADAPTER = new UuidTypeAdapter();\nprivate static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\nprivate static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\nprivate static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\nprivate static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();\nprivate static final BigIntegerTypeAdapter BIG_INTEGER_TYPE_ADAPTER = new BigIntegerTypeAdapter();\nprivate static final BooleanTypeAdapter BOOLEAN_TYPE_ADAPTER = new BooleanTypeAdapter();\nprivate static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\nprivate static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\nprivate static final DoubleDeserializer DOUBLE_TYPE_ADAPTER = new DoubleDeserializer();\nprivate static final FloatDeserializer FLOAT_TYPE_ADAPTER = new FloatDeserializer();\nprivate static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\nprivate static final LongDeserializer LONG_DESERIALIZER = new LongDeserializer();\nprivate static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\nprivate static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\nprivate static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\nprivate static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\nprivate static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\nprivate static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();\nprivate static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\nprivate static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\nprivate static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\nprivate static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\nParameterizedTypeHandlerMap<JsonSerializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\nmap.register(URL.class, URL_TYPE_ADAPTER);\nmap.register(URI.class, URI_TYPE_ADAPTER);\nmap.register(UUID.class, UUUID_TYPE_ADAPTER);\nmap.register(Locale.class, LOCALE_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.register(Date.class, DATE_TYPE_ADAPTER);\nmap.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER);\nmap.register(Timestamp.class, DATE_TYPE_ADAPTER);\nmap.register(Time.class, TIME_TYPE_ADAPTER);\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\nmap.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\nmap.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(Byte.class, BYTE_TYPE_ADAPTER);\nmap.register(byte.class, BYTE_TYPE_ADAPTER);\nmap.register(Character.class, CHARACTER_TYPE_ADAPTER);\nmap.register(char.class, CHARACTER_TYPE_ADAPTER);\nmap.register(Integer.class, INTEGER_TYPE_ADAPTER);\nmap.register(int.class, INTEGER_TYPE_ADAPTER);\nmap.register(Number.class, NUMBER_TYPE_ADAPTER);\nmap.register(Short.class, SHORT_TYPE_ADAPTER);\nmap.register(short.class, SHORT_TYPE_ADAPTER);\nmap.register(String.class, STRING_TYPE_ADAPTER);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 46
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultSerializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers() {\nParameterizedTypeHandlerMap<JsonSerializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\nmap.register(URL.class, URL_TYPE_ADAPTER);\nmap.register(URI.class, URI_TYPE_ADAPTER);\nmap.register(UUID.class, UUUID_TYPE_ADAPTER);\nmap.register(Locale.class, LOCALE_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.register(Date.class, DATE_TYPE_ADAPTER);\nmap.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER);\nmap.register(Timestamp.class, DATE_TYPE_ADAPTER);\nmap.register(Time.class, TIME_TYPE_ADAPTER);\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\nmap.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\nmap.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(Byte.class, BYTE_TYPE_ADAPTER);\nmap.register(byte.class, BYTE_TYPE_ADAPTER);\nmap.register(Character.class, CHARACTER_TYPE_ADAPTER);\nmap.register(char.class, CHARACTER_TYPE_ADAPTER);\nmap.register(Integer.class, INTEGER_TYPE_ADAPTER);\nmap.register(int.class, INTEGER_TYPE_ADAPTER);\nmap.register(Number.class, NUMBER_TYPE_ADAPTER);\nmap.register(Short.class, SHORT_TYPE_ADAPTER);\nmap.register(short.class, SHORT_TYPE_ADAPTER);\nmap.register(String.class, STRING_TYPE_ADAPTER);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 47
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultDeserializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\nParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\nmap.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\nmap.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\nmap.register(UUID.class, wrapDeserializer(UUUID_TYPE_ADAPTER));\nmap.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER));\nmap.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\nmap.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\nmap.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));\nmap.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER));\nmap.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER));\nmap.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER));\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));\nmap.register(BigInteger.class, wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));\nmap.register(Boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\nmap.register(boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\nmap.register(Byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\nmap.register(byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\nmap.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\nmap.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\nmap.register(Double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\nmap.register(double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\nmap.register(Float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\nmap.register(float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\nmap.register(Integer.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\nmap.register(int.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\nmap.register(Long.class, wrapDeserializer(LONG_DESERIALIZER));\nmap.register(long.class, wrapDeserializer(LONG_DESERIALIZER));\nmap.register(Number.class, wrapDeserializer(NUMBER_TYPE_ADAPTER));\nmap.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\nmap.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\nmap.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER));\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 48
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultInstanceCreators()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators() {\nParameterizedTypeHandlerMap<InstanceCreator<?>> map =\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Set.class, HASH_SET_CREATOR);\nmap.registerForTypeHierarchy(SortedSet.class, TREE_SET_CREATOR);\nmap.register(Properties.class, PROPERTIES_CREATOR);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 49
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:wrapDeserializer(Lcom/google/gson/JsonDeserializer;)Lcom/google/gson/JsonDeserializer;",
            "method_body": "private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\nreturn new JsonDeserializerExceptionWrapper(deserializer);\n}",
            "method_id": 50
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultSerializers(ZLcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\nParameterizedTypeHandlerMap<JsonSerializer<?>> serializers =\nDefaultTypeAdapters.DoubleSerializer doubleSerializer =\nserializers.registerIfAbsent(Double.class, doubleSerializer);\nserializers.registerIfAbsent(double.class, doubleSerializer);\nDefaultTypeAdapters.FloatSerializer floatSerializer =\nserializers.registerIfAbsent(Float.class, floatSerializer);\nserializers.registerIfAbsent(float.class, floatSerializer);\nDefaultTypeAdapters.LongSerializer longSerializer =\nserializers.registerIfAbsent(Long.class, longSerializer);\nserializers.registerIfAbsent(long.class, longSerializer);\nserializers.registerIfAbsent(DEFAULT_SERIALIZERS);\nreturn serializers;\n}",
            "method_id": 51
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultDeserializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\nreturn DEFAULT_DESERIALIZERS;\n}",
            "method_id": 52
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultInstanceCreators()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\nreturn DEFAULT_INSTANCE_CREATORS;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter:<init>()V",
            "method_body": "DefaultJavaSqlDateTypeAdapter() {\nthis.format = new SimpleDateFormat(\"MMM d, yyyy\");\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter:<init>()V",
            "method_body": "DefaultTimeTypeAdapter() {\nthis.format = new SimpleDateFormat(\"hh:mm:ss a\");\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerIfAbsent(Ljava/lang/reflect/Type;Ljava/lang/Object;)V",
            "method_body": "public synchronized void registerIfAbsent(Type typeOfT, T value) {\nif (!modifiable) {\nif (!map.containsKey(typeOfT)) {\nregister(typeOfT, value);\n}",
            "method_id": 56
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DoubleSerializer:<init>(Z)V",
            "method_body": "DoubleSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$FloatSerializer:<init>(Z)V",
            "method_body": "FloatSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$LongSerializer:<init>(Lcom/google/gson/LongSerializationPolicy;)V",
            "method_body": "private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\nthis.longSerializationPolicy = longSerializationPolicy;\n}",
            "method_id": 59
        }
    ]
}