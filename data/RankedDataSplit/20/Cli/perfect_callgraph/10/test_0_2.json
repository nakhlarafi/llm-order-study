{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice",
    "test_body": "public void testReuseOptionsTwice() throws Exception\n{\nOptions opts = new Options();\nopts.addOption(OptionBuilder.isRequired().create('v'));\n148: GnuParser parser = new GnuParser();\n150: // first parsing\nparser.parse(opts, new String[] { \"-v\" });\n153: try\n{\n// second parsing, with the same Options instance and an invalid command line\nparser.parse(opts, new String[0]);\nfail(\"MissingOptionException not thrown\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: MissingOptionException not thrown\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice(ParseRequiredTest.java:157)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\nOptionBuilder.numberOfArgs = 1;\nreturn instance;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\nOptionBuilder.required = true;\nreturn instance;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\nOptionBuilder.description = newDescription;\nreturn instance;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str == null) {\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.GnuParser:init()V",
            "method_body": "private void init()\ntokens.clear();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.GnuParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\ninit();\nboolean eatTheRest = false;\nOption currentOption = null;\nfor (int i = 0; i < arguments.length; i++)\nif (\"--\".equals(arguments[i]))\nelse if (\"-\".equals(arguments[i]))\nelse if (arguments[i].startsWith(\"-\"))\nOption option = options.getOption(arguments[i]);\nif (option == null)\ncurrentOption = option;\nOption specialOption =\nif ((specialOption != null) && (option == null))\nelse if ((currentOption != null) && currentOption.hasArg())\nelse if (currentOption != null)\ntokens.add(arguments[i]);\n}\nif (eatTheRest)\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 49
        }
    ]
}