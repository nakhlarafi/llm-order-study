{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugCLI150Test.testNegativeNumber",
    "test_body": "public void testNegativeNumber() throws OptionException\n{\nfinal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();\nfinal ArgumentBuilder aBuilder = new ArgumentBuilder();\nfinal GroupBuilder gBuilder = new GroupBuilder();\n46: final Argument numArg = aBuilder.withValidator(\nNumberValidator.getNumberInstance()).withMinimum(1)\n.withMaximum(1).create();\nfinal Option numOpt = oBuilder.withLongName(\"num\").withArgument(numArg)\n.create();\nfinal Group options = gBuilder.withOption(numOpt).create();\n53: final Parser parser = new Parser();\nparser.setGroup(options);\n56: CommandLine cl = parser.parse(new String[] {\n\"--num\", \"-42\"",
    "stack_trace": "org.apache.commons.cli2.OptionException: Unexpected -42 while processing --num\nat org.apache.commons.cli2.commandline.Parser.parse(Parser.java:99)\nat org.apache.commons.cli2.bug.BugCLI150Test.testNegativeNumber(BugCLI150Test.java:56)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:<init>(Ljava/lang/String;Ljava/lang/String;IICCLorg/apache/commons/cli2/validation/Validator;Ljava/lang/String;Ljava/util/List;I)V",
            "method_body": "public ArgumentImpl(final String name,\nsuper(id, false);\nthis.name = (name == null) ? \"arg\" : name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.initialSeparator = initialSeparator;\nthis.subsequentSeparator = subsequentSeparator;\nthis.subsequentSplit = subsequentSeparator != NUL;\nthis.validator = validator;\nthis.consumeRemaining = consumeRemaining;\nthis.defaultValues = valueDefaults;\nif (minimum > maximum) {\nif ((valueDefaults != null) && (valueDefaults.size() > 0)) {\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:processValues(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void processValues(final WriteableCommandLine commandLine,\nint argumentCount = commandLine.getUndefaultedValues(option).size();\nwhile (arguments.hasNext() && (argumentCount < maximum)) {\nfinal String allValuesQuoted = (String) arguments.next();\nfinal String allValues = stripBoundaryQuotes(allValuesQuoted);\nif (allValuesQuoted.equals(consumeRemaining)) {\nelse if (commandLine.looksLikeOption(allValuesQuoted)) {\narguments.previous();\nbreak;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:getInitialSeparator()C",
            "method_body": "public char getInitialSeparator() {\nreturn this.initialSeparator;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:stripBoundaryQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String stripBoundaryQuotes(String token) {\nif (!token.startsWith(\"\\\"\") || !token.endsWith(\"\\\"\")) {\nreturn token;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:defaultValues(Lorg/apache/commons/cli2/WriteableCommandLine;Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void defaultValues(final WriteableCommandLine commandLine,\ncommandLine.setDefaultValues(option, defaultValues);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:withOption(Lorg/apache/commons/cli2/Option;)Lorg/apache/commons/cli2/builder/GroupBuilder;",
            "method_body": "public GroupBuilder withOption(final Option option) {\nthis.options.add(option);\nreturn this;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:<init>(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;IIZ)V",
            "method_body": "public GroupImpl(final List options,\nsuper(0, required);\nthis.name = name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.options = Collections.unmodifiableList(options);\nfinal List newAnonymous = new ArrayList();\nfinal SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());\nfinal Set newPrefixes = new HashSet();\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\noption.setParent(this);\nif (option instanceof Argument) {\nfinal Set triggers = option.getTriggers();\nfor (Iterator j = triggers.iterator(); j.hasNext();) {\nnewOptionMap.put(j.next(), option);\nnewPrefixes.addAll(option.getPrefixes());\n}\nthis.anonymous = Collections.unmodifiableList(newAnonymous);\nthis.optionMap = Collections.unmodifiableSortedMap(newOptionMap);\nthis.prefixes = Collections.unmodifiableSet(newPrefixes);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nif (arg == null) {\nif (optionMap.containsKey(arg)) {\nreturn true;\nfinal Map tailMap = optionMap.tailMap(arg);\nfor (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {\nfinal Option option = (Option) iter.next();\nif (option.canProcess(commandLine, arg)) {\n}\nif (looksLikeOption(commandLine, arg)) {\nreturn false;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getPrefixes()Ljava/util/Set;",
            "method_body": "public Set getPrefixes() {\nreturn prefixes;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:process(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)V",
            "method_body": "public void process(final WriteableCommandLine commandLine,\nString previous = null;\nwhile (arguments.hasNext()) {\nfinal String arg = (String) arguments.next();\nif (arg == previous) {\nprevious = arg;\nfinal Option opt = (Option) optionMap.get(arg);\nif (opt != null) {\narguments.previous();\nopt.process(commandLine, arguments);\nif (looksLikeOption(commandLine, arg)) {\nfinal Collection values = optionMap.tailMap(arg).values();\nboolean foundMemberOption = false;\nfor (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {\nfinal Option option = (Option) i.next();\nif (option.canProcess(commandLine, arg)) {\n}\nif (!foundMemberOption) {\narguments.previous();\nreturn;\n} // [END process each command line token\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getPreferredName()Ljava/lang/String;",
            "method_body": "public String getPreferredName() {\nreturn name;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nappendUsage(buffer, helpSettings, comp, \"|\");\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;Ljava/lang/String;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nfinal Set helpSettingsCopy = new HashSet(helpSettings);\nfinal boolean optional = !isRequired()\nfinal boolean expanded =\nfinal boolean named =\nfinal boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);\nfinal boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);\nhelpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\nfinal boolean both = named && expanded;\nif (optional) {\nif (named) {\nif (both) {\nif (expanded) {\nif (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {\nchildSettings = DisplaySetting.NONE;\nif (comp == null) {\nlist = options;\nfor (final Iterator i = list.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\noption.appendUsage(buffer, childSettings, comp);\nif (i.hasNext()) {\n}\nif (both) {\nif (optional && outer) {\nif (arguments) {\nif (optional && !outer) {\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getMinimum()I",
            "method_body": "public int getMinimum() {\nreturn minimum;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn (getParent() == null || super.isRequired()) && getMinimum() > 0;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:defaults(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void defaults(final WriteableCommandLine commandLine) {\nsuper.defaults(commandLine);\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\noption.defaults(commandLine);\n}\nfor (final Iterator i = anonymous.iterator(); i.hasNext();) {\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:setGroup(Lorg/apache/commons/cli2/Group;)V",
            "method_body": "public void setGroup(final Group group) {\nthis.group = group;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:addOption(Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void addOption(Option option) {\noptions.add(option);\nnameToOption.put(option.getPreferredName(), option);\nfor (Iterator i = option.getTriggers().iterator(); i.hasNext();) {\nnameToOption.put(i.next(), option);\nOption parent = option.getParent();\nwhile (parent != null && !options.contains(parent)) {\noptions.add(parent);\nparent = parent.getParent();\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getUndefaultedValues(Lorg/apache/commons/cli2/Option;)Ljava/util/List;",
            "method_body": "public List getUndefaultedValues(Option option) {\nList valueList = (List) values.get(option);\nif (valueList == null) {\nvalueList = Collections.EMPTY_LIST;\nreturn valueList;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:setDefaultValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)V",
            "method_body": "public void setDefaultValues(final Option option,\nif (defaults == null) {\ndefaultValues.remove(option);\n}",
            "method_id": 79
        }
    ]
}