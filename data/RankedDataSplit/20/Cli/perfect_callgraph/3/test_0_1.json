{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",
    "test_body": "public void testSimplePattern()\n{\ntry {\nOptions options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\nString[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n51: CommandLineParser parser = new PosixParser();\nCommandLine line = parser.parse(options,args);\n54: // tests the char methods of CommandLine that delegate to\n// the String methods\nassertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\nassertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\nassertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\nassertEquals(\"boolean true flag c\", true, line.hasOption('c'));\nassertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\nassertEquals(\"boolean false flag d\", false, line.hasOption('d'));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));",
    "stack_trace": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern(PatternOptionBuilderTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nthis.options = options;\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nrequiredOptions = options.getRequiredOptions();\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(this.options,\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !options.hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "private void processProperties(Properties properties)\nif (properties == null)\nreturn;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions()\nif (requiredOptions.size() > 0)\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter)\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (options.hasOption(str) && str.startsWith(\"-\"))\niter.previous();\nbreak;\nopt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n}\n}\nif ((opt.getValues() == null) && !opt.hasOptionalArg())\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "private void processOption(String arg, ListIterator iter)\nboolean hasOption = options.hasOption(arg);\nif (!hasOption)\nfinal Option opt = options.getOption(arg);\nif (opt.isRequired())\nif (options.getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\ntoken = (String) iter.next();\nif (token.startsWith(\"--\"))\nelse if (\"-\".equals(token))\nelse if (token.startsWith(\"-\"))\nint tokenLength = token.length();\nif (tokenLength == 2)\nprocessOptionToken(token, stopAtNonOption);\n}\nif (stopAtNonOption)\ntokens.add(token);\ngobble(iter);\nreturn (String[]) tokens.toArray(new String[] {  });\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\nif (this.options.hasOption(token))\ncurrentOption = this.options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nreturn new ArrayList(opts);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn (Option) shortOpts.get(opt);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate ArrayList values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn this.opt;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn this.opt;\n}",
            "method_id": 39
        }
    ]
}