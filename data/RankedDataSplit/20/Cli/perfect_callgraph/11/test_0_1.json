{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage",
    "test_body": "public void testPrintOptionWithEmptyArgNameUsage() {\nOption option = new Option(\"f\", true, null);\noption.setArgName(\"\");\noption.setRequired(true);\n265: Options options = new Options();\noptions.addOption(option);\n268: StringWriter out = new StringWriter();\n270: HelpFormatter formatter = new HelpFormatter();\nformatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n273: assertEquals(\"usage: app -f\" + EOL, out.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<usage: app -f[]\n> but was:<usage: app -f[ <>]\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage(HelpFormatterTest.java:273)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getArgName()Ljava/lang/String;",
            "method_body": "public String getArgName()\nreturn this.argName;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getOptionComparator()Ljava/util/Comparator;",
            "method_body": "public Comparator getOptionComparator()\nreturn this.optionComparator;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V",
            "method_body": "public void printUsage(PrintWriter pw, int width, String app,\nStringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\nfinal Collection processedGroups = new ArrayList();\nList optList = new ArrayList(options.getOptions());\nCollections.sort(optList, getOptionComparator() );\nfor (Iterator i = optList.iterator(); i.hasNext();)\noption = (Option) i.next();\nOptionGroup group = options.getOptionGroup(option);\nif (group != null)\nappendOption(buff, option, option.isRequired());\nif (i.hasNext())\n}\nprintWrapped(pw, width, buff.toString().indexOf(' ') + 1,\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop,\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\n}",
            "method_id": 25
        }
    ]
}