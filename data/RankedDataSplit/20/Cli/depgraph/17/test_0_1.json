{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PosixParserTest.testStopBursting",
    "test_body": "133: public void testStopBursting() throws Exception\n134: {\n135: String[] args = new String[] { \"-azc\" };\n136: 137: CommandLine cl = parser.parse(options, args, true);\n138: assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n139: assertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n140: 141: assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n142: assertTrue(cl.getArgList().contains(\"zc\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Confirm  1 extra arg: 2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.cli.PosixParserTest.testStopBursting(PosixParserTest.java:141)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions() {\nreturn requiredOptions;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn this.opt;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn this.required;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains( resolveOption(opt));\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getArgList()Ljava/util/List;",
            "method_body": "public List getArgList()\nreturn args;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg,\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.numberOfArgs = 1;\nthis.description = description;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 39
        }
    ]
}