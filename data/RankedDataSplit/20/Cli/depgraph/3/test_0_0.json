{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",
    "test_body": "45: public void testSimplePattern()\n46: {\n47: try {\n48: Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n49: String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n50: 51: CommandLineParser parser = new PosixParser();\n52: CommandLine line = parser.parse(options,args);\n53: 54: // tests the char methods of CommandLine that delegate to\n55: // the String methods\n56: assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n57: assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n58: assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n59: assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n60: assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n61: assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n62: assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n63: assertEquals(\"boolean true flag c\", true, line.hasOption('c'));\n64: assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n65: assertEquals(\"boolean false flag d\", false, line.hasOption('d'));\n66: assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n67: assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n68: assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n69: assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n70: assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\n71: assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));",
    "stack_trace": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern(PatternOptionBuilderTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(String pattern)\nint sz = pattern.length();\nchar opt = ' ';\nchar ch = ' ';\nboolean required = false;\nObject type = null;\nOptions options = new Options();\nfor (int i = 0; i < sz; i++)\nch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nrequired = false;\ntype = null;\nopt = ' ';\nopt = ch;\nelse if (ch == '!')\ntype = getValueClass(ch);\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nreturn options;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(String opt)\nString res = getOptionValue(opt);\nOption option = resolveOption(opt);\nif (option == null)\nObject type = option.getType();\nreturn (res == null)        ? null : TypeHandler.createValue(res, type);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(char ch)\nif (ch == '@')\nreturn PatternOptionBuilder.OBJECT_VALUE;\nelse if (ch == ':')\nreturn PatternOptionBuilder.STRING_VALUE;\nelse if (ch == '%')\nreturn PatternOptionBuilder.NUMBER_VALUE;\nelse if (ch == '+')\nreturn PatternOptionBuilder.CLASS_VALUE;\nelse if (ch == '#')\nelse if (ch == '<')\nelse if (ch == '>')\nreturn PatternOptionBuilder.FILE_VALUE;\nelse if (ch == '*')\nelse if (ch == '/')\nreturn PatternOptionBuilder.URL_VALUE;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nOption option = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\nreturn option;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Class clazz)\n{\n}\n{\n}\n{\n}\n{\n{\n}\n{\n}\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static Object createObject(String str)\n\n}\n\n\n}\n\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate ArrayList values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\nOption key = resolveOption( opt );\nif (options.contains(key))\nreturn key.getValues();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg(boolean hasArg)\nOptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\nreturn instance;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired(boolean newRequired)\nOptionBuilder.required = newRequired;\nreturn instance;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withType(Ljava/lang/Object;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withType(Object newType)\nOptionBuilder.type = newType;\nreturn instance;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthis(opt, null, false, description);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption( String opt )\nopt = Util.stripLeadingHyphens(opt);\nfor ( Iterator it = options.iterator(); it.hasNext(); )\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\nreturn option;\nif (opt.equals( option.getLongOpt()))\n}\nreturn null;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\nthis.type = type;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn this.opt;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\nthis.longOpt = longOpt;\n}",
            "method_id": 19
        }
    ]
}