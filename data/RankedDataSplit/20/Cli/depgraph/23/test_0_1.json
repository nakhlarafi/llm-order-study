{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines",
    "test_body": "52: public void testPrintHelpLongLines() throws ParseException, IOException {\n53: // Constants used for options\n54: final String OPT = \"-\";\n55: 56: final String OPT_COLUMN_NAMES = \"l\";\n57: 58: final String OPT_CONNECTION = \"c\";\n59: 60: final String OPT_DESCRIPTION = \"e\";\n61: 62: final String OPT_DRIVER = \"d\";\n63: 64: final String OPT_DRIVER_INFO = \"n\";\n65: 66: final String OPT_FILE_BINDING = \"b\";\n67: 68: final String OPT_FILE_JDBC = \"j\";\n69: 70: final String OPT_FILE_SFMD = \"f\";\n71: 72: final String OPT_HELP = \"h\";\n73: 74: final String OPT_HELP_ = \"help\";\n75: 76: final String OPT_INTERACTIVE = \"i\";\n77: 78: final String OPT_JDBC_TO_SFMD = \"2\";\n79: 80: final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n81: 82: final String OPT_METADATA = \"m\";\n83: 84: final String OPT_PARAM_MODES_INT = \"o\";\n85: 86: final String OPT_PARAM_MODES_NAME = \"O\";\n87: 88: final String OPT_PARAM_NAMES = \"a\";\n89: 90: final String OPT_PARAM_TYPES_INT = \"y\";\n91: 92: final String OPT_PARAM_TYPES_NAME = \"Y\";\n93: 94: final String OPT_PASSWORD = \"p\";\n95: 96: final String OPT_PASSWORD_L = \"password\";\n97: 98: final String OPT_SQL = \"s\";\n99: 100: final String OPT_SQL_L = \"sql\";\n101: 102: final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n103: 104: final String OPT_SQL_SPLIT_L = \"splitSql\";\n105: 106: final String OPT_STACK_TRACE = \"t\";\n107: 108: final String OPT_TIMING = \"g\";\n109: 110: final String OPT_TRIM_L = \"trim\";\n111: 112: final String OPT_USER = \"u\";\n113: 114: final String OPT_WRITE_TO_FILE = \"w\";\n115: 116: final String _PMODE_IN = \"IN\";\n117: 118: final String _PMODE_INOUT = \"INOUT\";\n119: 120: final String _PMODE_OUT = \"OUT\";\n121: 122: final String _PMODE_UNK = \"Unknown\";\n123: 124: final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n125: 126: // Options build\n127: Options commandLineOptions;\n128: commandLineOptions = new Options();\n129: commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\n130: commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\n131: commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n132: + OPT\n133: + OPT_CONNECTION\n134: + \" is not specified, all drivers on the classpath are displayed.\");\n135: commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\n136: commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\n137: commandLineOptions\n138: .addOption(\n139: OPT_PASSWORD,\n140: OPT_PASSWORD_L,\n141: true,\n142: \"The database password for the user specified with the \"\n143: + OPT\n144: + OPT_USER\n145: + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\n146: commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\n147: commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\n148: commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\n149: commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\n150: commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\n151: commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n152: \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\n153: commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n154: \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\n155: commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\n156: commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\n157: commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\n158: Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n159: + OPT\n160: + OPT_COLUMN_NAMES\n161: + \" \\\"cname1 cname2\\\"\");\n162: commandLineOptions.addOption(option);\n163: option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n164: + OPT\n165: + OPT_PARAM_NAMES\n166: + \" \\\"pname1 pname2\\\"\");\n167: commandLineOptions.addOption(option);\n168: //\n169: OptionGroup pOutTypesOptionGroup = new OptionGroup();\n170: String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\n171: final String typesClassName = Types.class.getName();\n172: option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n173: + typesClassName\n174: + \". \"\n175: + pOutTypesOptionGroupDoc\n176: + \" Example: \"\n177: + OPT\n178: + OPT_PARAM_TYPES_INT\n179: + \" \\\"-10 12\\\"\");\n180: commandLineOptions.addOption(option);\n181: option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n182: + typesClassName\n183: + \" names. \"\n184: + pOutTypesOptionGroupDoc\n185: + \" Example: \"\n186: + OPT\n187: + OPT_PARAM_TYPES_NAME\n188: + \" \\\"CURSOR VARCHAR\\\"\");\n189: commandLineOptions.addOption(option);\n190: commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n191: //\n192: OptionGroup modesOptionGroup = new OptionGroup();\n193: String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\n194: option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n195: + ParameterMetaData.parameterModeIn\n196: + \"=IN, \"\n197: + ParameterMetaData.parameterModeInOut\n198: + \"=INOUT, \"\n199: + ParameterMetaData.parameterModeOut\n200: + \"=OUT, \"\n201: + ParameterMetaData.parameterModeUnknown\n202: + \"=Unknown\"\n203: + \"). \"\n204: + modesOptionGroupDoc\n205: + \" Example for 2 parameters, OUT and IN: \"\n206: + OPT\n207: + OPT_PARAM_MODES_INT\n208: + \" \\\"\"\n209: + ParameterMetaData.parameterModeOut\n210: + \" \"\n211: + ParameterMetaData.parameterModeIn\n212: + \"\\\"\");\n213: modesOptionGroup.addOption(option);\n214: option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n215: + PMODES\n216: + \"). \"\n217: + modesOptionGroupDoc\n218: + \" Example for 2 parameters, OUT and IN: \"\n219: + OPT\n220: + OPT_PARAM_MODES_NAME\n221: + \" \\\"\"\n222: + _PMODE_OUT\n223: + \" \"\n224: + _PMODE_IN\n225: + \"\\\"\");\n226: modesOptionGroup.addOption(option);\n227: commandLineOptions.addOptionGroup(modesOptionGroup);\n228: option = new Option(null, OPT_TRIM_L, true,\n229: \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\n230: option.setOptionalArg(true);\n231: commandLineOptions.addOption(option);\n232: option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n233: \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n234: option.setArgs(2);\n235: commandLineOptions.addOption(option);\n236: this.testPrintHelp(commandLineOptions);\n237: }\n",
    "stack_trace": "java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                              used if omited. Example: -e \"Runs such and such\"\nat org.apache.commons.cli.HelpFormatter.renderWrappedText(HelpFormatter.java:836)\nat org.apache.commons.cli.HelpFormatter.renderOptions(HelpFormatter.java:783)\nat org.apache.commons.cli.HelpFormatter.printOptions(HelpFormatter.java:662)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:485)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:418)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:334)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelp(BugCLI162Test.java:49)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines(BugCLI162Test.java:236)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn longOpt;\nreturn opt;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map optionMap = new HashMap();\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getDescription()Ljava/lang/String;",
            "method_body": "public String getDescription()\nreturn description;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn optionMap.values();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgName()Z",
            "method_body": "public boolean hasArgName()\nreturn argName != null && argName.length() > 0;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getArgName()Ljava/lang/String;",
            "method_body": "public String getArgName()\nreturn argName;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter$OptionComparator:compare(Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "public int compare(Object o1, Object o2)\nOption opt1 = (Option) o1;\nOption opt2 = (Option) o2;\nreturn opt1.getKey().compareToIgnoreCase(opt2.getKey());\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nreturn;\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 37
        }
    ]
}