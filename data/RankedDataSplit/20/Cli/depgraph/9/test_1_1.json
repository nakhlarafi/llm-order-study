{
    "bug_id": 9,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionsTest.testMissingOptionsException",
    "test_body": "108: public void testMissingOptionsException() throws ParseException {\n109: Options options = new Options();\n110: options.addOption(OptionBuilder.isRequired().create(\"f\"));\n111: options.addOption(OptionBuilder.isRequired().create(\"x\"));\n112: try {\n113: new PosixParser().parse(options, new String[0]);\n114: fail(\"Expected MissingOptionException to be thrown\");\n115: } catch (MissingOptionException e) {\n116: assertEquals(\"Missing required options: f, x\", e.getMessage());\n117: }",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<... required options: f[, ]x> but was:<... required options: f[]x>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.OptionsTest.testMissingOptionsException(OptionsTest.java:116)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn this.required;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "public Options()\n{\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.MissingOptionException:<init>(Ljava/lang/String;)V",
            "method_body": "public MissingOptionException(String message)\nsuper(message);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\nsuper(message);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nObject item = iter.next();\nif (!opts.contains(item))\n}\nreturn new ArrayList(opts);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 35
        }
    ]
}