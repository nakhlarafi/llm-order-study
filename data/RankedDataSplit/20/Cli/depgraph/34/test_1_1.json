{
    "bug_id": 34,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions",
    "test_body": "42: public void testTwoCompleteOptions( ) {\n43: Option simple = OptionBuilder.withLongOpt( \"simple option\")\n44: .hasArg( )\n45: .isRequired( )\n46: .hasArgs( )\n47: .withType( Float.class )\n48: .withDescription( \"this is a simple option\" )\n49: .create( 's' );\n50: 51: assertEquals( \"s\", simple.getOpt() );\n52: assertEquals( \"simple option\", simple.getLongOpt() );\n53: assertEquals( \"this is a simple option\", simple.getDescription() );\n54: assertEquals( simple.getType(), Float.class );\n55: assertTrue( simple.hasArg() );\n56: assertTrue( simple.isRequired() );\n57: assertTrue( simple.hasArgs() );\n58: 59: simple = OptionBuilder.withLongOpt( \"dimple option\")\n60: .hasArg( )\n61: .withDescription( \"this is a dimple option\" )\n62: .create( 'd' );\n63: 64: assertEquals( \"d\", simple.getOpt() );\n65: assertEquals( \"dimple option\", simple.getLongOpt() );\n66: assertEquals( \"this is a dimple option\", simple.getDescription() );\n67: assertEquals( String.class, simple.getType() );\n68: assertTrue( simple.hasArg() );",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.String> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions(OptionBuilderTest.java:67)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getDescription()Ljava/lang/String;",
            "method_body": "public String getDescription()\nreturn description;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn type;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgs()Z",
            "method_body": "public boolean hasArgs()\nreturn numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 29
        }
    ]
}