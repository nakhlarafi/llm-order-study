{
    "bug_id": 34,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.CommandLineTest.testGetParsedOptionValue",
    "test_body": "65: public void testGetParsedOptionValue() throws Exception {\n66: Options options = new Options();\n67: options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n68: options.addOption(OptionBuilder.hasArg().create(\"f\"));\n69: 70: CommandLineParser parser = new DefaultParser();\n71: CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n72: 73: assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());\n74: assertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));\n75: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<foo> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.CommandLineTest.testGetParsedOptionValue(CommandLineTest.java:74)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions() throws MissingOptionException\nif (!expectedOpts.isEmpty())\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\ncheckRequiredArgs();\noption = (Option) option.clone();\nupdateRequiredOptions(option);\ncmd.addOption(option);\nif (option.hasArg())\ncurrentOption = option;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(Option option) throws AlreadySelectedException\nif (option.isRequired())\nif (options.getOptionGroup(option) != null)\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\nif (currentOption != null && currentOption.requiresArg())\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleToken(Ljava/lang/String;)V",
            "method_body": "private void handleToken(String token) throws ParseException\ncurrentToken = token;\nif (skipParsing)\nelse if (\"--\".equals(token))\nelse if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\ncurrentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\nelse if (token.startsWith(\"--\"))\nelse if (token.startsWith(\"-\") && !\"-\".equals(token))\nhandleShortAndLongOption(token);\nif (currentOption != null && !currentOption.acceptsArg())\ncurrentOption = null;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\nfor (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\ncmd = new CommandLine();\nif (arguments != null)\nfor (int i = 0; i < arguments.length; i++)\nhandleToken(arguments[i]);\ncheckRequiredArgs();\nhandleProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nint length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nswitch (numberOfArgs)\nprocessValue(value);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.Option:acceptsArg()Z",
            "method_body": "boolean acceptsArg()\nreturn (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nOption option = (Option) super.clone();\noption.values = new ArrayList(values);\nreturn option;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 59
        }
    ]
}