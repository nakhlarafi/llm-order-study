{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI13Test.testCLI13",
    "test_body": "33: public void testCLI13()\n34: throws ParseException\n35: {\n36: final String debugOpt = \"debug\";\n37: Option debug = OptionBuilder\n38: .withArgName( debugOpt )\n39: .withDescription( \"turn on debugging\" )\n40: .withLongOpt( debugOpt )\n41: .hasArg()\n42: .create( 'd' );\n43: Options options = new Options();\n44: options.addOption( debug );\n45: CommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n46: 47: assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\n48: assertEquals(\"true\", commandLine.getOptionValue( 'd' ));\n49: assertTrue(commandLine.hasOption( 'd'));\n50: assertTrue(commandLine.hasOption( debugOpt));\n51: }\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.bug.BugCLI13Test.testCLI13(BugCLI13Test.java:50)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\nString[] values = getOptionValues(opt);\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.containsKey(opt);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn this.values.size() == 0;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValues()[Ljava/lang/String;",
            "method_body": "public String[] getValues()\nreturn hasNoValues()\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private ArrayList tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn this.required;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nreturn create(String.valueOf(opt));\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(C)Ljava/lang/String;",
            "method_body": "public String getOptionValue(char opt)\nreturn getOptionValue(String.valueOf(opt));\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\nif (this.options.hasOption(token))\ncurrentOption = this.options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 39
        }
    ]
}