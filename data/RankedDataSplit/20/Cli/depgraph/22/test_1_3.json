{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.ApplicationTest.testGroovy",
    "test_body": "105: public void testGroovy() throws Exception {\n106: Options options = new Options();\n107: 108: options.addOption(\n109: OptionBuilder.withLongOpt(\"define\").\n110: withDescription(\"define a system property\").\n111: hasArg(true).\n112: withArgName(\"name=value\").\n113: create('D'));\n114: options.addOption(\n115: OptionBuilder.hasArg(false)\n116: .withDescription(\"usage information\")\n117: .withLongOpt(\"help\")\n118: .create('h'));\n119: options.addOption(\n120: OptionBuilder.hasArg(false)\n121: .withDescription(\"debug mode will print out full stack traces\")\n122: .withLongOpt(\"debug\")\n123: .create('d'));\n124: options.addOption(\n125: OptionBuilder.hasArg(false)\n126: .withDescription(\"display the Groovy and JVM versions\")\n127: .withLongOpt(\"version\")\n128: .create('v'));\n129: options.addOption(\n130: OptionBuilder.withArgName(\"charset\")\n131: .hasArg()\n132: .withDescription(\"specify the encoding of the files\")\n133: .withLongOpt(\"encoding\")\n134: .create('c'));\n135: options.addOption(\n136: OptionBuilder.withArgName(\"script\")\n137: .hasArg()\n138: .withDescription(\"specify a command line script\")\n139: .create('e'));\n140: options.addOption(\n141: OptionBuilder.withArgName(\"extension\")\n142: .hasOptionalArg()\n143: .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n144: .create('i'));\n145: options.addOption(\n146: OptionBuilder.hasArg(false)\n147: .withDescription(\"process files line by line using implicit 'line' variable\")\n148: .create('n'));\n149: options.addOption(\n150: OptionBuilder.hasArg(false)\n151: .withDescription(\"process files line by line and print result (see also -n)\")\n152: .create('p'));\n153: options.addOption(\n154: OptionBuilder.withArgName(\"port\")\n155: .hasOptionalArg()\n156: .withDescription(\"listen on a port and process inbound lines\")\n157: .create('l'));\n158: options.addOption(\n159: OptionBuilder.withArgName(\"splitPattern\")\n160: .hasOptionalArg()\n161: .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n162: .withLongOpt(\"autosplit\")\n163: .create('a'));\n164: 165: Parser parser = new PosixParser();\n166: CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n167: 168: assertTrue(line.hasOption('e'));\n169: assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n170: }\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.ApplicationTest.testGroovy(ApplicationTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn values.isEmpty();\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValues()[Ljava/lang/String;",
            "method_body": "public String[] getValues()\nreturn hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(C)Ljava/lang/String;",
            "method_body": "public String getOptionValue(char opt)\nreturn getOptionValue(String.valueOf(opt));\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 71
        }
    ]
}