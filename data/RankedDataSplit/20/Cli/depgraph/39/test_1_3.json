{
    "bug_id": 39,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",
    "test_body": "162: public void testExistingFilePattern() throws Exception\n163: {\n164: final Options options = PatternOptionBuilder.parsePattern(\"g<\");\n165: final CommandLineParser parser = new PosixParser();\n166: final CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n167: 168: final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n169: 170: assertNotNull(\"option g not parsed\", parsedReadableFileStream);\n171: assertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n172: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: option g not FileInputStream\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern(PatternOptionBuilderTest.java:171)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(final char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(final char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(final String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfinal char ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 66
        }
    ]
}