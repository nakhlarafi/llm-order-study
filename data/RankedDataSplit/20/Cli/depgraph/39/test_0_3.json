{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "175: public void testExistingFilePatternFileNotExist() throws Exception {\n176: final Options options = PatternOptionBuilder.parsePattern(\"f<\");\n177: final CommandLineParser parser = new PosixParser();\n178: final CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n179: 180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n181: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(final char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(final char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(final String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfinal char ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 66
        }
    ]
}