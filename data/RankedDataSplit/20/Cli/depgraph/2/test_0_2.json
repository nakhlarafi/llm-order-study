{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI51Test.test",
    "test_body": "34: public void test() throws Exception\n35: {\n36: Options options = buildCommandLineOptions();\n37: CommandLineParser parser = new PosixParser();\n38: String[] args = new String[] {\"-t\", \"-something\" };\n39: CommandLine commandLine;\n40: commandLine = parser.parse( options, args );\n41: assertEquals(\"-something\", commandLine.getOptionValue( 't'));",
    "stack_trace": "org.apache.commons.cli.UnrecognizedOptionException: Unrecognized option: -o\nat org.apache.commons.cli.Parser.processOption(Parser.java:368)\nat org.apache.commons.cli.Parser.parse(Parser.java:185)\nat org.apache.commons.cli.Parser.parse(Parser.java:70)\nat org.apache.commons.cli.bug.BugCLI51Test.test(BugCLI51Test.java:40)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter)\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (options.hasOption(str) && str.startsWith(\"-\"))\nopt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\ncatch (RuntimeException exp)\niter.previous();\nbreak;\n}\n}\nif ((opt.getValues() == null) && !opt.hasOptionalArg())\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "private void processOption(String arg, ListIterator iter)\nboolean hasOption = options.hasOption(arg);\nif (!hasOption)\nthrow new UnrecognizedOptionException(\"Unrecognized option: \"\nfinal Option opt = options.getOption(arg);\nif (opt.isRequired())\nif (options.getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nthis.options = options;\nrequiredOptions = options.getRequiredOptions();\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(this.options,\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !options.hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "private List args = new LinkedList();\nprivate Set options = new HashSet();\n{\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn (Option) shortOpts.get(opt);\n}",
            "method_id": 50
        }
    ]
}