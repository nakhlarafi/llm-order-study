{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ValueTest.testPropertyOptionFlags",
    "test_body": "192: public void testPropertyOptionFlags() throws Exception\n193: {\n194: Properties properties = new Properties();\n195: properties.setProperty( \"a\", \"true\" );\n196: properties.setProperty( \"c\", \"yes\" );\n197: properties.setProperty( \"e\", \"1\" );\n198: 199: Parser parser = new PosixParser();\n200: 201: CommandLine cmd = parser.parse(opts, null, properties);\n202: assertTrue( cmd.hasOption(\"a\") );\n203: assertTrue( cmd.hasOption(\"c\") );\n204: assertTrue( cmd.hasOption(\"e\") );\n205: 206: 207: properties = new Properties();\n208: properties.setProperty( \"a\", \"false\" );\n209: properties.setProperty( \"c\", \"no\" );\n210: properties.setProperty( \"e\", \"0\" );\n211: 212: cmd = parser.parse(opts, null, properties);\n213: assertTrue( !cmd.hasOption(\"a\") );\n214: assertTrue( !cmd.hasOption(\"c\") );\n215: assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n216: 217: 218: properties = new Properties();\n219: properties.setProperty( \"a\", \"TRUE\" );\n220: properties.setProperty( \"c\", \"nO\" );\n221: properties.setProperty( \"e\", \"TrUe\" );\n222: 223: cmd = parser.parse(opts, null, properties);\n224: assertTrue( cmd.hasOption(\"a\") );\n225: assertTrue( !cmd.hasOption(\"c\") );\n226: assertTrue( cmd.hasOption(\"e\") );\n227: 228: 229: properties = new Properties();\n230: properties.setProperty( \"a\", \"just a string\" );\n231: properties.setProperty( \"e\", \"\" );\n232: 233: cmd = parser.parse(opts, null, properties);\n234: assertTrue( !cmd.hasOption(\"a\") );\n235: assertTrue( !cmd.hasOption(\"c\") );\n236: assertTrue( cmd.hasOption(\"e\") );\n237: } \n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.ValueTest.testPropertyOptionFlags(ValueTest.java:215)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\nString option = e.nextElement().toString();\nif (!cmd.hasOption(option))\nOption opt = getOptions().getOption(option);\nString value = properties.getProperty(option);\nif (opt.hasArg())\nif (opt.getValues() == null || opt.getValues().length == 0)\nopt.addValueForProcessing(value);\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\nbreak;\ncmd.addOption(opt);\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nOption opt = (Option) getOptions().getOption(arg).clone();\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nOption option = (Option) super.clone();\noption.values = new ArrayList(values);\nreturn option;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn (Option) shortOpts.get(opt);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\nvalues.clear();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nfor (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\narguments = new String[0];\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nswitch (numberOfArgs)\nprocessValue(value);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nfor (Iterator it = options.iterator(); it.hasNext();)\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\nreturn option;\nif (opt.equals(option.getLongOpt()))\n}\nreturn null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn longOpt;\nreturn opt;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter) throws ParseException\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\niter.previous();\nbreak;\nopt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n}\n}\nif (opt.getValues() == null && !opt.hasOptionalArg())\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nif (str.startsWith(\"\\\"\"))\nif (str.endsWith(\"\\\"\"))\nreturn str;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 19
        }
    ]
}