{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ValueTest.testPropertyOptionFlags",
    "test_body": "192: public void testPropertyOptionFlags() throws Exception\n193: {\n194: Properties properties = new Properties();\n195: properties.setProperty( \"a\", \"true\" );\n196: properties.setProperty( \"c\", \"yes\" );\n197: properties.setProperty( \"e\", \"1\" );\n198: 199: Parser parser = new PosixParser();\n200: 201: CommandLine cmd = parser.parse(opts, null, properties);\n202: assertTrue( cmd.hasOption(\"a\") );\n203: assertTrue( cmd.hasOption(\"c\") );\n204: assertTrue( cmd.hasOption(\"e\") );\n205: 206: 207: properties = new Properties();\n208: properties.setProperty( \"a\", \"false\" );\n209: properties.setProperty( \"c\", \"no\" );\n210: properties.setProperty( \"e\", \"0\" );\n211: 212: cmd = parser.parse(opts, null, properties);\n213: assertTrue( !cmd.hasOption(\"a\") );\n214: assertTrue( !cmd.hasOption(\"c\") );\n215: assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n216: 217: 218: properties = new Properties();\n219: properties.setProperty( \"a\", \"TRUE\" );\n220: properties.setProperty( \"c\", \"nO\" );\n221: properties.setProperty( \"e\", \"TrUe\" );\n222: 223: cmd = parser.parse(opts, null, properties);\n224: assertTrue( cmd.hasOption(\"a\") );\n225: assertTrue( !cmd.hasOption(\"c\") );\n226: assertTrue( cmd.hasOption(\"e\") );\n227: 228: 229: properties = new Properties();\n230: properties.setProperty( \"a\", \"just a string\" );\n231: properties.setProperty( \"e\", \"\" );\n232: 233: cmd = parser.parse(opts, null, properties);\n234: assertTrue( !cmd.hasOption(\"a\") );\n235: assertTrue( !cmd.hasOption(\"c\") );\n236: assertTrue( cmd.hasOption(\"e\") );\n237: } \n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.ValueTest.testPropertyOptionFlags(ValueTest.java:215)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\nOption option = null;\noption = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\n}\nreturn option;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\nthis.type = type;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\nthis.longOpt = longOpt;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\nthis(opt, null, false, description);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasOptionalArgs(I)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasOptionalArgs(int numArgs)\nOptionBuilder.numberOfArgs = numArgs;\nOptionBuilder.optionalArg = true;\nreturn instance;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withValueSeparator(C)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withValueSeparator(char sep)\nOptionBuilder.valuesep = sep;\nreturn instance;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasOptionalArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasOptionalArg()\nOptionBuilder.numberOfArgs = 1;\nOptionBuilder.optionalArg = true;\nreturn instance;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt) throws IllegalArgumentException\nreturn create(String.valueOf(opt));\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArgs()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArgs()\nOptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\nreturn instance;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 59
        }
    ]
}