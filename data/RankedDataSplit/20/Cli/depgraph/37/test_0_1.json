{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "46: public void shouldParseShortOptionWithoutValue() throws Exception {\n47: String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n48: 49: final CommandLine commandLine = parser.parse(options, twoShortOptions);\n50: 51: assertTrue(commandLine.hasOption(\"t1\"));\n52: assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\n53: assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nfor (Option option : options)\nif (opt.equals(option.getOpt()))\nreturn option;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions() throws MissingOptionException\nif (!expectedOpts.isEmpty())\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\nif (currentOption != null && currentOption.requiresArg())\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isShortOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isShortOption(String token)\nreturn token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isArgument(Ljava/lang/String;)Z",
            "method_body": "private boolean isArgument(String token)\nreturn !isOption(token) || isNegativeNumber(token);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List<String> getValuesList()\nreturn values;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Option:acceptsArg()Z",
            "method_body": "boolean acceptsArg()\nreturn (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn optionGroups.get(opt.getKey());\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 39
        }
    ]
}