{
    "bug_id": 36,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorInsertedOrder",
    "test_body": "35: public void testOptionComparatorInsertedOrder() throws ParseException {\n36: Collection<Option> options = getOptions().getOptions();\n37: int i = 0;\n38: for(Option o: options) {\n39: Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\n40: i++;",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[p]> but was:<[x]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorInsertedOrder(BugCLI266Test.java:39)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection<Option> getOptions()\nreturn optionMap.values();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List<Option> helpOptions()\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required()\nreturn required(true);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection<Option> getOptions()\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\nreturn hasArg(true);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 28
        }
    ]
}