{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",
    "test_body": "public void testSimplePattern()\n{\ntry {\nOptions options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\nString[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n51: CommandLineParser parser = new PosixParser();\nCommandLine line = parser.parse(options,args);\n54: // tests the char methods of CommandLine that delegate to\n// the String methods\nassertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\nassertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\nassertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\nassertEquals(\"boolean true flag c\", true, line.hasOption('c'));\nassertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\nassertEquals(\"boolean false flag d\", false, line.hasOption('d'));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));",
    "stack_trace": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern(PatternOptionBuilderTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(String pattern)\nint sz = pattern.length();\nchar opt = ' ';\nchar ch = ' ';\nboolean required = false;\nObject type = null;\nOptions options = new Options();\nfor (int i = 0; i < sz; i++)\nch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nrequired = false;\ntype = null;\nopt = ' ';\nopt = ch;\nelse if (ch == '!')\ntype = getValueClass(ch);\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nreturn options;\n}",
            "method_id": 0,
            "loc": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nthis.options = options;\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nrequiredOptions = options.getRequiredOptions();\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(this.options,\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !options.hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 1,
            "loc": 25
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class STRING_VALUE = java.lang.String.class;\npublic static final Class OBJECT_VALUE = java.lang.Object.class;\npublic static final Class NUMBER_VALUE = java.lang.Number.class;\npublic static final Class DATE_VALUE = java.util.Date.class;\npublic static final Class CLASS_VALUE = java.lang.Class.class;\npublic static final Class EXISTING_FILE_VALUE =\npublic static final Class FILE_VALUE = java.io.File.class;\npublic static final Class FILES_VALUE = java.io.File[].class;\npublic static final Class URL_VALUE = java.net.URL.class;\nif (ch == '@')\nreturn PatternOptionBuilder.OBJECT_VALUE;\nelse if (ch == ':')\nreturn PatternOptionBuilder.STRING_VALUE;\nelse if (ch == '%')\nreturn PatternOptionBuilder.NUMBER_VALUE;\nelse if (ch == '+')\nreturn PatternOptionBuilder.CLASS_VALUE;\nelse if (ch == '#')\nelse if (ch == '<')\nelse if (ch == '>')\nreturn PatternOptionBuilder.FILE_VALUE;\nelse if (ch == '*')\nelse if (ch == '/')\nreturn PatternOptionBuilder.URL_VALUE;\n}",
            "method_id": 2,
            "loc": 25
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\ntoken = (String) iter.next();\nif (token.startsWith(\"--\"))\nelse if (\"-\".equals(token))\nelse if (token.startsWith(\"-\"))\nint tokenLength = token.length();\nif (tokenLength == 2)\nprocessOptionToken(token, stopAtNonOption);\n}\nif (stopAtNonOption)\ntokens.add(token);\ngobble(iter);\nreturn (String[]) tokens.toArray(new String[] {  });\n}",
            "method_id": 3,
            "loc": 18
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(char ch)\nif (ch == '@')\nreturn PatternOptionBuilder.OBJECT_VALUE;\nelse if (ch == ':')\nreturn PatternOptionBuilder.STRING_VALUE;\nelse if (ch == '%')\nreturn PatternOptionBuilder.NUMBER_VALUE;\nelse if (ch == '+')\nreturn PatternOptionBuilder.CLASS_VALUE;\nelse if (ch == '#')\nelse if (ch == '<')\nelse if (ch == '>')\nreturn PatternOptionBuilder.FILE_VALUE;\nelse if (ch == '*')\nelse if (ch == '/')\nreturn PatternOptionBuilder.URL_VALUE;\n}",
            "method_id": 4,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Class clazz)\n{\n}\n{\n}\n{\n}\n{\n{\n}\n{\n}\n}",
            "method_id": 5,
            "loc": 13
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nOption option = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\nreturn option;\n}",
            "method_id": 6,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter)\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (options.hasOption(str) && str.startsWith(\"-\"))\niter.previous();\nbreak;\nopt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n}\n}\nif ((opt.getValues() == null) && !opt.hasOptionalArg())\n}",
            "method_id": 7,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption( String opt )\nopt = Util.stripLeadingHyphens(opt);\nfor ( Iterator it = options.iterator(); it.hasNext(); )\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\nreturn option;\nif (opt.equals( option.getLongOpt()))\n}\nreturn null;\n}",
            "method_id": 8,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "private void processOption(String arg, ListIterator iter)\nboolean hasOption = options.hasOption(arg);\nif (!hasOption)\nfinal Option opt = options.getOption(arg);\nif (opt.isRequired())\nif (options.getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 9,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 10,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static Object createObject(String str)\n\n}\n\n\n}\n\n}",
            "method_id": 11,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(String opt)\nString res = getOptionValue(opt);\nOption option = resolveOption(opt);\nif (option == null)\nObject type = option.getType();\nreturn (res == null)        ? null : TypeHandler.createValue(res, type);\n}",
            "method_id": 12,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 13,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 14,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 15,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\nreturn str;\n}",
            "method_id": 16,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nreturn new ArrayList(opts);\n}",
            "method_id": 17,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate ArrayList values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 18,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\nOption key = resolveOption( opt );\nif (options.contains(key))\nreturn key.getValues();\n}",
            "method_id": 19,
            "loc": 5
        }
    ]
}