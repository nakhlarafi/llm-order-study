{
    "bug_id": 36,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorInsertedOrder",
    "test_body": "public void testOptionComparatorInsertedOrder() throws ParseException {\nCollection<Option> options = getOptions().getOptions();\nint i = 0;\nfor(Option o: options) {\nAssert.assertEquals(o.getOpt(), insertedOrder.get(i));\ni++;",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[p]> but was:<[x]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorInsertedOrder(BugCLI266Test.java:39)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 0,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 1,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOptionGroup(Lorg/apache/commons/cli/OptionGroup;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOptionGroup(OptionGroup group)\n{\n}\n{\naddOption(option);\n\n}\n\n}",
            "method_id": 2,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n\n{\n}\n{\n{\n}\n\n}",
            "method_id": 3,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 4,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 5,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 6,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:argName(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder argName(final String argName)\nthis.argName = argName;\nreturn this;\n}",
            "method_id": 7,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:desc(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder desc(final String description)\nthis.description = description;\nreturn this;\n}",
            "method_id": 8,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:longOpt(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder longOpt(final String longOpt)\nthis.longOpt = longOpt;\nreturn this;\n}",
            "method_id": 9,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required(final boolean required)\nthis.required = required;\nreturn this;\n}",
            "method_id": 10,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 11,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 12,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 13,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\nreturn hasArg(true);\n}",
            "method_id": 14,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection<Option> getOptions()\nreturn optionMap.values();\n}",
            "method_id": 15,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required()\nreturn required(true);\n}",
            "method_id": 16,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 17,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 18,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 19,
            "loc": 3
        }
    ]
}