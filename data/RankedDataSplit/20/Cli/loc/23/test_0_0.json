{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines",
    "test_body": "public void testPrintHelpLongLines() throws ParseException, IOException {\n// Constants used for options\nfinal String OPT = \"-\";\n56: final String OPT_COLUMN_NAMES = \"l\";\n58: final String OPT_CONNECTION = \"c\";\n60: final String OPT_DESCRIPTION = \"e\";\n62: final String OPT_DRIVER = \"d\";\n64: final String OPT_DRIVER_INFO = \"n\";\n66: final String OPT_FILE_BINDING = \"b\";\n68: final String OPT_FILE_JDBC = \"j\";\n70: final String OPT_FILE_SFMD = \"f\";\n72: final String OPT_HELP = \"h\";\n74: final String OPT_HELP_ = \"help\";\n76: final String OPT_INTERACTIVE = \"i\";\n78: final String OPT_JDBC_TO_SFMD = \"2\";\n80: final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n82: final String OPT_METADATA = \"m\";\n84: final String OPT_PARAM_MODES_INT = \"o\";\n86: final String OPT_PARAM_MODES_NAME = \"O\";\n88: final String OPT_PARAM_NAMES = \"a\";\n90: final String OPT_PARAM_TYPES_INT = \"y\";\n92: final String OPT_PARAM_TYPES_NAME = \"Y\";\n94: final String OPT_PASSWORD = \"p\";\n96: final String OPT_PASSWORD_L = \"password\";\n98: final String OPT_SQL = \"s\";\n100: final String OPT_SQL_L = \"sql\";\n102: final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n104: final String OPT_SQL_SPLIT_L = \"splitSql\";\n106: final String OPT_STACK_TRACE = \"t\";\n108: final String OPT_TIMING = \"g\";\n110: final String OPT_TRIM_L = \"trim\";\n112: final String OPT_USER = \"u\";\n114: final String OPT_WRITE_TO_FILE = \"w\";\n116: final String _PMODE_IN = \"IN\";\n118: final String _PMODE_INOUT = \"INOUT\";\n120: final String _PMODE_OUT = \"OUT\";\n122: final String _PMODE_UNK = \"Unknown\";\n124: final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n126: // Options build\nOptions commandLineOptions;\ncommandLineOptions = new Options();\ncommandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\ncommandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\ncommandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n+ OPT\n+ OPT_CONNECTION\n+ \" is not specified, all drivers on the classpath are displayed.\");\ncommandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\ncommandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\ncommandLineOptions\n.addOption(\nOPT_PASSWORD,\nOPT_PASSWORD_L,\ntrue,\n\"The database password for the user specified with the \"\n+ OPT\n+ OPT_USER\n+ \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\ncommandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\ncommandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\ncommandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\ncommandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\ncommandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\ncommandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n\"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\ncommandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\ncommandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\ncommandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\ncommandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\nOption option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n+ OPT\n+ OPT_COLUMN_NAMES\n+ \" \\\"cname1 cname2\\\"\");\ncommandLineOptions.addOption(option);\noption = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n+ OPT\n+ OPT_PARAM_NAMES\n+ \" \\\"pname1 pname2\\\"\");\ncommandLineOptions.addOption(option);\n//\nOptionGroup pOutTypesOptionGroup = new OptionGroup();\nString pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\nfinal String typesClassName = Types.class.getName();\noption = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n+ typesClassName\n+ \". \"\n+ pOutTypesOptionGroupDoc\n+ \" Example: \"\n+ OPT\n+ OPT_PARAM_TYPES_INT\n+ \" \\\"-10 12\\\"\");\ncommandLineOptions.addOption(option);\noption = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n+ typesClassName\n+ \" names. \"\n+ pOutTypesOptionGroupDoc\n+ \" Example: \"\n+ OPT\n+ OPT_PARAM_TYPES_NAME\n+ \" \\\"CURSOR VARCHAR\\\"\");\ncommandLineOptions.addOption(option);\ncommandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n//\nOptionGroup modesOptionGroup = new OptionGroup();\nString modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\noption = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n+ ParameterMetaData.parameterModeIn\n+ \"=IN, \"\n+ ParameterMetaData.parameterModeInOut\n+ \"=INOUT, \"\n+ ParameterMetaData.parameterModeOut\n+ \"=OUT, \"\n+ ParameterMetaData.parameterModeUnknown\n+ \"=Unknown\"\n+ \"). \"\n+ modesOptionGroupDoc\n+ \" Example for 2 parameters, OUT and IN: \"\n+ OPT\n+ OPT_PARAM_MODES_INT\n+ \" \\\"\"\n+ ParameterMetaData.parameterModeOut\n+ \" \"\n+ ParameterMetaData.parameterModeIn\n+ \"\\\"\");\nmodesOptionGroup.addOption(option);\noption = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n+ PMODES\n+ \"). \"\n+ modesOptionGroupDoc\n+ \" Example for 2 parameters, OUT and IN: \"\n+ OPT\n+ OPT_PARAM_MODES_NAME\n+ \" \\\"\"\n+ _PMODE_OUT\n+ \" \"\n+ _PMODE_IN\n+ \"\\\"\");\nmodesOptionGroup.addOption(option);\ncommandLineOptions.addOptionGroup(modesOptionGroup);\noption = new Option(null, OPT_TRIM_L, true,\n\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\noption.setOptionalArg(true);\ncommandLineOptions.addOption(option);\noption = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\noption.setArgs(2);\ncommandLineOptions.addOption(option);\nthis.testPrintHelp(commandLineOptions);\n}\n",
    "stack_trace": "java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                              used if omited. Example: -e \"Runs such and such\"\nat org.apache.commons.cli.HelpFormatter.renderWrappedText(HelpFormatter.java:836)\nat org.apache.commons.cli.HelpFormatter.renderOptions(HelpFormatter.java:783)\nat org.apache.commons.cli.HelpFormatter.printOptions(HelpFormatter.java:662)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:485)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:418)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:334)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelp(BugCLI162Test.java:49)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines(BugCLI162Test.java:236)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)\nfinal String lpad = createPadding(leftPad);\nfinal String dpad = createPadding(descPad);\nint max = 0;\nList prefixList = new ArrayList();\nList optList = options.helpOptions();\nCollections.sort(optList, getOptionComparator());\nfor (Iterator i = optList.iterator(); i.hasNext();)\nOption option = (Option) i.next();\noptBuf = new StringBuffer(8);\nif (option.getOpt() == null)\noptBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\noptBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\nif (option.hasLongOpt())\noptBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\nif (option.hasArg())\nif (option.hasArgName())\noptBuf.append(\" <\").append(option.getArgName()).append(\">\");\nprefixList.add(optBuf);\nmax = (optBuf.length() > max) ? optBuf.length() : max;\n}\nint x = 0;\nfor (Iterator i = optList.iterator(); i.hasNext();)\nOption option = (Option) i.next();\noptBuf = new StringBuffer(prefixList.get(x++).toString());\nif (optBuf.length() < max)\noptBuf.append(createPadding(max - optBuf.length()));\noptBuf.append(dpad);\nint nextLineTabStop = max + descPad;\nif (option.getDescription() != null)\noptBuf.append(option.getDescription());\nrenderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\nif (i.hasNext())\nsb.append(defaultNewLine);\n}\n}",
            "method_id": 0,
            "loc": 36
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\nfinal String padding = createPadding(nextLineTabStop);\nint lastPos = pos;\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(text);\nreturn sb;\nif (pos == lastPos)\nthrow new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n}\n}",
            "method_id": 1,
            "loc": 18
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\nthis.defaultWidth = width;\n}",
            "method_id": 2,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nint pos = -1;\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nelse if (startPos + width >= text.length())\nreturn -1;\npos = startPos + width;\n&& (c != '\\n') && (c != '\\r'))\n--pos;\nif (pos > startPos)\nreturn pos;\n}",
            "method_id": 3,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOptionGroup(Lorg/apache/commons/cli/OptionGroup;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOptionGroup(OptionGroup group)\nIterator options = group.getOptions().iterator();\nif (group.isRequired())\nwhile (options.hasNext())\nOption option = (Option) options.next();\noption.setRequired(false);\naddOption(option);\noptionGroups.put(option.getKey(), group);\n}\nreturn this;\n}",
            "method_id": 4,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.numberOfArgs = 1;\nthis.description = description;\n}",
            "method_id": 5,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nreturn;\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 6,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 7,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;Z)V",
            "method_body": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\nif ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\nif (autoUsage)\nprintUsage(pw, width, cmdLineSyntax);\nif ((header != null) && (header.trim().length() > 0))\nprintOptions(pw, width, options, leftPad, descPad);\n}",
            "method_id": 8,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:rtrim(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "protected String rtrim(String s)\nif ((s == null) || (s.length() == 0))\nint pos = s.length();\nwhile ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n--pos;\nreturn s.substring(0, pos);\n}",
            "method_id": 9,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:createPadding(I)Ljava/lang/String;",
            "method_body": "protected String createPadding(int len)\nStringBuffer sb = new StringBuffer(len);\nfor (int i = 0; i < len; ++i)\nsb.append(' ');\nreturn sb.toString();\n}",
            "method_id": 10,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map optionMap = new HashMap();\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 11,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn longOpt;\nreturn opt;\n}",
            "method_id": 12,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 13,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter$OptionComparator:compare(Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "public int compare(Object o1, Object o2)\nOption opt1 = (Option) o1;\nOption opt2 = (Option) o2;\nreturn opt1.getKey().compareToIgnoreCase(opt2.getKey());\n}",
            "method_id": 14,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 15,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printHelp(ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;Ljava/lang/String;Z)V",
            "method_body": "public void printHelp(int width, String cmdLineSyntax, String header,\nPrintWriter pw = new PrintWriter(System.out);\nprintHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\n}",
            "method_id": 16,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printUsage(Ljava/io/PrintWriter;ILjava/lang/String;)V",
            "method_body": "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)\nint argPos = cmdLineSyntax.indexOf(' ') + 1;\nprintWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\n}",
            "method_id": 17,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printOptions(Ljava/io/PrintWriter;ILorg/apache/commons/cli/Options;II)V",
            "method_body": "public void printOptions(PrintWriter pw, int width, Options options,\nStringBuffer sb = new StringBuffer();\nrenderOptions(sb, width, options, leftPad, descPad);\n}",
            "method_id": 18,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 19,
            "loc": 4
        }
    ]
}