{
    "bug_id": 30,
    "test_id": 4,
    "test_name": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties",
    "test_body": "public void testTwoOptionsFromGroupWithProperties() throws Exception\n{\nString[] args = new String[] { \"-f\" };\n195: Properties properties = new Properties();\nproperties.put(\"d\", \"true\");\n198: CommandLine cl = parser.parse( _options, args, properties);\nassertTrue(cl.hasOption(\"f\"));",
    "stack_trace": "org.apache.commons.cli.AlreadySelectedException: The option 'd' was specified but an option from this group has already been selected: 'f'\nat org.apache.commons.cli.OptionGroup.setSelected(OptionGroup.java:105)\nat org.apache.commons.cli.Parser.updateRequiredOptions(Parser.java:421)\nat org.apache.commons.cli.Parser.processProperties(Parser.java:296)\nat org.apache.commons.cli.Parser.parse(Parser.java:241)\nat org.apache.commons.cli.Parser.parse(Parser.java:103)\nat org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties(OptionGroupTest.java:198)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 20,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 21,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private List tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 22,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 23,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\nvalues.clear();\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection getOptionGroups()\nreturn new HashSet(optionGroups.values());\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.AlreadySelectedException:<init>(Ljava/lang/String;)V",
            "method_body": "public AlreadySelectedException(String message)\nsuper(message);\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 29,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 30,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 31,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 32,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 34,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions()\nreturn options;\n}",
            "method_id": 35,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 39,
            "loc": 3
        }
    ]
}