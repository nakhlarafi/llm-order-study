{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(final Options options, String[] arguments, final Properties properties, final boolean stopAtNonOption)\nfor (final Option opt : options.helpOptions())\nopt.clearValues();\n}\nfor (final OptionGroup group : options.getOptionGroups())\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nfinal List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nfinal ListIterator<String> iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nfinal String t = iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 0,
            "loc": 24
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(final String pattern)\nchar opt = ' ';\nboolean required = false;\nClass<?> type = null;\nfinal Options options = new Options();\nfor (int i = 0; i < pattern.length(); i++)\nfinal char ch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nopt = ch;\nelse if (ch == '!')\ntype = (Class<?>) getValueClass(ch);\nif (opt != ' ')\nfinal Option option = Option.builder(String.valueOf(opt))\noptions.addOption(option);\nreturn options;\n}",
            "method_id": 1,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException\ninit();\nthis.options = options;\nfinal Iterator<String> iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\nfinal String token = iter.next();\nif (\"-\".equals(token) || \"--\".equals(token))\nelse if (token.startsWith(\"--\"))\nelse if (token.startsWith(\"-\"))\nif (token.length() == 2 || options.hasOption(token))\nprocessOptionToken(token, stopAtNonOption);\nprocessNonOptionToken(token, stopAtNonOption);\ngobble(iter);\n}\nreturn tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 2,
            "loc": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 3,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 4,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class<String> STRING_VALUE = String.class;\npublic static final Class<Object> OBJECT_VALUE = Object.class;\npublic static final Class<Number> NUMBER_VALUE = Number.class;\npublic static final Class<Date> DATE_VALUE = Date.class;\npublic static final Class<?> CLASS_VALUE = Class.class;\npublic static final Class<FileInputStream> EXISTING_FILE_VALUE = FileInputStream.class;\npublic static final Class<File> FILE_VALUE = File.class;\npublic static final Class<File[]> FILES_VALUE = File[].class;\npublic static final Class<URL> URL_VALUE = URL.class;\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 5,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Class<?> clazz) throws ParseException\nif (PatternOptionBuilder.STRING_VALUE == clazz)\nelse if (PatternOptionBuilder.OBJECT_VALUE == clazz)\nelse if (PatternOptionBuilder.NUMBER_VALUE == clazz)\nelse if (PatternOptionBuilder.DATE_VALUE == clazz)\nelse if (PatternOptionBuilder.CLASS_VALUE == clazz)\nelse if (PatternOptionBuilder.FILE_VALUE == clazz)\nelse if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\nreturn createFile(str);\n}",
            "method_id": 6,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(final Option opt, final ListIterator<String> iter) throws ParseException\nwhile (iter.hasNext())\nfinal String str = iter.next();\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\nopt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n}\n}\nif (opt.getValues() == null && !opt.hasOptionalArg())\n}",
            "method_id": 7,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(final String arg, final ListIterator<String> iter) throws ParseException\nfinal boolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nfinal Option opt = (Option) getOptions().getOption(arg).clone();\nupdateRequiredOptions(opt);\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 8,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Lorg/apache/commons/cli/Option;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(final Option option)\nfinal List<String> values = new ArrayList<String>();\nfor (final Option processedOption : options)\nif (processedOption.equals(option))\nvalues.addAll(processedOption.getValuesList());\n}\nreturn values.isEmpty() ? null : values.toArray(new String[values.size()]);\n}",
            "method_id": 9,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(final String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfinal char ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 10,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(final String str)\nif (str == null)\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\nreturn str;\n}",
            "method_id": 11,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(final Option opt)\nfinal String key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 12,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nfor (final Option option : options)\nif (opt.equals(option.getOpt()))\nreturn option;\n}",
            "method_id": 13,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(final String token, final boolean stopAtNonOption)\nif (stopAtNonOption && !options.hasOption(token))\nif (options.hasOption(token))\ncurrentOption = options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 14,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final Option option) throws ParseException\nif (option == null)\nfinal String res = getOptionValue(option);\nif (res == null)\nreturn TypeHandler.createValue(res, option.getType());\n}",
            "method_id": 15,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn shortOpts.get(opt);\n}",
            "method_id": 16,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nfinal Option option = (Option) super.clone();\noption.values = new ArrayList<String>(values);\nreturn option;\n}",
            "method_id": 17,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(final Option option)\nif (option == null)\nfinal String[] values = getOptionValues(option);\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 18,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nfinal int length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 19,
            "loc": 5
        }
    ]
}