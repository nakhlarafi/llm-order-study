{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private final String opt;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\n* @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}",
            "method_id": 20,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 21,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 22,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(final String value)\nif (numberOfArgs == UNINITIALIZED)\nprocessValue(value);\n}",
            "method_id": 23,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 24,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(final String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 25,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 26,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 27,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(final Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 28,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(final Option opt) throws ParseException\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\n}",
            "method_id": 29,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 30,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processNonOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processNonOptionToken(final String value, final boolean stopAtNonOption)\nif (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\ntokens.add(value);\n}",
            "method_id": 31,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(final char ch)\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 32,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required(final boolean required)\nthis.required = required;\nreturn this;\n}",
            "method_id": 33,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:type(Ljava/lang/Class;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder type(final Class<?> type)\nthis.type = type;\nreturn this;\n}",
            "method_id": 34,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 35,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(final String opt)\nreturn getParsedOptionValue(opt);\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final String opt) throws ParseException\nreturn getParsedOptionValue(resolveOption(opt));\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Object obj) throws ParseException\nreturn createValue(str, (Class<?>) obj);\n}",
            "method_id": 39,
            "loc": 3
        }
    ]
}