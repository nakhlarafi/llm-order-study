{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines",
    "test_body": "public void testPrintHelpLongLines() throws ParseException, IOException {\n// Constants used for options\nfinal String OPT = \"-\";\n56: final String OPT_COLUMN_NAMES = \"l\";\n58: final String OPT_CONNECTION = \"c\";\n60: final String OPT_DESCRIPTION = \"e\";\n62: final String OPT_DRIVER = \"d\";\n64: final String OPT_DRIVER_INFO = \"n\";\n66: final String OPT_FILE_BINDING = \"b\";\n68: final String OPT_FILE_JDBC = \"j\";\n70: final String OPT_FILE_SFMD = \"f\";\n72: final String OPT_HELP = \"h\";\n74: final String OPT_HELP_ = \"help\";\n76: final String OPT_INTERACTIVE = \"i\";\n78: final String OPT_JDBC_TO_SFMD = \"2\";\n80: final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n82: final String OPT_METADATA = \"m\";\n84: final String OPT_PARAM_MODES_INT = \"o\";\n86: final String OPT_PARAM_MODES_NAME = \"O\";\n88: final String OPT_PARAM_NAMES = \"a\";\n90: final String OPT_PARAM_TYPES_INT = \"y\";\n92: final String OPT_PARAM_TYPES_NAME = \"Y\";\n94: final String OPT_PASSWORD = \"p\";\n96: final String OPT_PASSWORD_L = \"password\";\n98: final String OPT_SQL = \"s\";\n100: final String OPT_SQL_L = \"sql\";\n102: final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n104: final String OPT_SQL_SPLIT_L = \"splitSql\";\n106: final String OPT_STACK_TRACE = \"t\";\n108: final String OPT_TIMING = \"g\";\n110: final String OPT_TRIM_L = \"trim\";\n112: final String OPT_USER = \"u\";\n114: final String OPT_WRITE_TO_FILE = \"w\";\n116: final String _PMODE_IN = \"IN\";\n118: final String _PMODE_INOUT = \"INOUT\";\n120: final String _PMODE_OUT = \"OUT\";\n122: final String _PMODE_UNK = \"Unknown\";\n124: final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n126: // Options build\nOptions commandLineOptions;\ncommandLineOptions = new Options();\ncommandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\ncommandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\ncommandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n+ OPT\n+ OPT_CONNECTION\n+ \" is not specified, all drivers on the classpath are displayed.\");\ncommandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\ncommandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\ncommandLineOptions\n.addOption(\nOPT_PASSWORD,\nOPT_PASSWORD_L,\ntrue,\n\"The database password for the user specified with the \"\n+ OPT\n+ OPT_USER\n+ \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\ncommandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\ncommandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\ncommandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\ncommandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\ncommandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\ncommandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n\"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\ncommandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\ncommandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\ncommandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\ncommandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\nOption option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n+ OPT\n+ OPT_COLUMN_NAMES\n+ \" \\\"cname1 cname2\\\"\");\ncommandLineOptions.addOption(option);\noption = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n+ OPT\n+ OPT_PARAM_NAMES\n+ \" \\\"pname1 pname2\\\"\");\ncommandLineOptions.addOption(option);\n//\nOptionGroup pOutTypesOptionGroup = new OptionGroup();\nString pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\nfinal String typesClassName = Types.class.getName();\noption = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n+ typesClassName\n+ \". \"\n+ pOutTypesOptionGroupDoc\n+ \" Example: \"\n+ OPT\n+ OPT_PARAM_TYPES_INT\n+ \" \\\"-10 12\\\"\");\ncommandLineOptions.addOption(option);\noption = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n+ typesClassName\n+ \" names. \"\n+ pOutTypesOptionGroupDoc\n+ \" Example: \"\n+ OPT\n+ OPT_PARAM_TYPES_NAME\n+ \" \\\"CURSOR VARCHAR\\\"\");\ncommandLineOptions.addOption(option);\ncommandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n//\nOptionGroup modesOptionGroup = new OptionGroup();\nString modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\noption = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n+ ParameterMetaData.parameterModeIn\n+ \"=IN, \"\n+ ParameterMetaData.parameterModeInOut\n+ \"=INOUT, \"\n+ ParameterMetaData.parameterModeOut\n+ \"=OUT, \"\n+ ParameterMetaData.parameterModeUnknown\n+ \"=Unknown\"\n+ \"). \"\n+ modesOptionGroupDoc\n+ \" Example for 2 parameters, OUT and IN: \"\n+ OPT\n+ OPT_PARAM_MODES_INT\n+ \" \\\"\"\n+ ParameterMetaData.parameterModeOut\n+ \" \"\n+ ParameterMetaData.parameterModeIn\n+ \"\\\"\");\nmodesOptionGroup.addOption(option);\noption = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n+ PMODES\n+ \"). \"\n+ modesOptionGroupDoc\n+ \" Example for 2 parameters, OUT and IN: \"\n+ OPT\n+ OPT_PARAM_MODES_NAME\n+ \" \\\"\"\n+ _PMODE_OUT\n+ \" \"\n+ _PMODE_IN\n+ \"\\\"\");\nmodesOptionGroup.addOption(option);\ncommandLineOptions.addOptionGroup(modesOptionGroup);\noption = new Option(null, OPT_TRIM_L, true,\n\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\noption.setOptionalArg(true);\ncommandLineOptions.addOption(option);\noption = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\noption.setArgs(2);\ncommandLineOptions.addOption(option);\nthis.testPrintHelp(commandLineOptions);\n}\n",
    "stack_trace": "java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:                              used if omited. Example: -e \"Runs such and such\"\nat org.apache.commons.cli.HelpFormatter.renderWrappedText(HelpFormatter.java:836)\nat org.apache.commons.cli.HelpFormatter.renderOptions(HelpFormatter.java:783)\nat org.apache.commons.cli.HelpFormatter.printOptions(HelpFormatter.java:662)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:485)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:418)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:334)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelp(BugCLI162Test.java:49)\nat org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines(BugCLI162Test.java:236)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn optionMap.values();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn longOpt;\nreturn opt;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.numberOfArgs = 1;\nthis.description = description;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nreturn;\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 37
        }
    ]
}