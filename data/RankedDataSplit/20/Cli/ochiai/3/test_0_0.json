{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",
    "test_body": "public void testSimplePattern()\n{\ntry {\nOptions options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\nString[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n51: CommandLineParser parser = new PosixParser();\nCommandLine line = parser.parse(options,args);\n54: // tests the char methods of CommandLine that delegate to\n// the String methods\nassertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\nassertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\nassertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\nassertEquals(\"boolean true flag c\", true, line.hasOption('c'));\nassertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\nassertEquals(\"boolean false flag d\", false, line.hasOption('d'));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));",
    "stack_trace": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern(PatternOptionBuilderTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg(boolean hasArg)\nOptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\nreturn instance;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired(boolean newRequired)\nOptionBuilder.required = newRequired;\nreturn instance;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(String opt)\nString res = getOptionValue(opt);\nOption option = resolveOption(opt);\nif (option == null)\nObject type = option.getType();\nreturn (res == null)        ? null : TypeHandler.createValue(res, type);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(C)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(char opt)\nreturn getOptionObject(String.valueOf(opt));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class STRING_VALUE = java.lang.String.class;\npublic static final Class OBJECT_VALUE = java.lang.Object.class;\npublic static final Class NUMBER_VALUE = java.lang.Number.class;\npublic static final Class DATE_VALUE = java.util.Date.class;\npublic static final Class CLASS_VALUE = java.lang.Class.class;\npublic static final Class EXISTING_FILE_VALUE =\npublic static final Class FILE_VALUE = java.io.File.class;\npublic static final Class FILES_VALUE = java.io.File[].class;\npublic static final Class URL_VALUE = java.net.URL.class;\nif (ch == '@')\nreturn PatternOptionBuilder.OBJECT_VALUE;\nelse if (ch == ':')\nreturn PatternOptionBuilder.STRING_VALUE;\nelse if (ch == '%')\nreturn PatternOptionBuilder.NUMBER_VALUE;\nelse if (ch == '+')\nreturn PatternOptionBuilder.CLASS_VALUE;\nelse if (ch == '#')\nelse if (ch == '<')\nelse if (ch == '>')\nreturn PatternOptionBuilder.FILE_VALUE;\nelse if (ch == '*')\nelse if (ch == '/')\nreturn PatternOptionBuilder.URL_VALUE;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(char ch)\nif (ch == '@')\nreturn PatternOptionBuilder.OBJECT_VALUE;\nelse if (ch == ':')\nreturn PatternOptionBuilder.STRING_VALUE;\nelse if (ch == '%')\nreturn PatternOptionBuilder.NUMBER_VALUE;\nelse if (ch == '+')\nreturn PatternOptionBuilder.CLASS_VALUE;\nelse if (ch == '#')\nelse if (ch == '<')\nelse if (ch == '>')\nreturn PatternOptionBuilder.FILE_VALUE;\nelse if (ch == '*')\nelse if (ch == '/')\nreturn PatternOptionBuilder.URL_VALUE;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:isValueCode(C)Z",
            "method_body": "public static boolean isValueCode(char ch)\nif ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+')\nreturn false;\nreturn true;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(String pattern)\nint sz = pattern.length();\nchar opt = ' ';\nchar ch = ' ';\nboolean required = false;\nObject type = null;\nOptions options = new Options();\nfor (int i = 0; i < sz; i++)\nch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nrequired = false;\ntype = null;\nopt = ' ';\nopt = ch;\nelse if (ch == '!')\ntype = getValueClass(ch);\nif (opt != ' ')\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\noptions.addOption(OptionBuilder.create(opt));\nreturn options;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Object obj)\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Class clazz)\n{\n}\n{\n}\n{\n}\n{\n{\n}\n{\n}\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static Object createObject(String str)\n\n}\n\n\n}\n\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(String str)\n}\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createClass(Ljava/lang/String;)Ljava/lang/Class;",
            "method_body": "public static Class createClass(String str)\n}\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createFile(Ljava/lang/String;)Ljava/io/File;",
            "method_body": "public static File createFile(String str)\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn this.type;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withType(Ljava/lang/Object;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withType(Object newType)\nOptionBuilder.type = newType;\nreturn instance;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(C)Ljava/lang/String;",
            "method_body": "public String getOptionValue(char opt)\nreturn getOptionValue(String.valueOf(opt));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nreturn create(String.valueOf(opt));\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\nthis.type = type;\n}",
            "method_id": 19
        }
    ]
}