{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testDefaultArgName",
    "test_body": "public void testDefaultArgName()\n{\nOption option = OptionBuilder.hasArg().isRequired().create(\"f\");\n312: Options options = new Options();\noptions.addOption(option);\n315: StringWriter out = new StringWriter();\n317: HelpFormatter formatter = new HelpFormatter();\nformatter.setArgName(\"argument\");\nformatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n321: assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<usage: app -f <arg[ument]>\n> but was:<usage: app -f <arg[]>\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testDefaultArgName(HelpFormatterTest.java:321)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\nthis(opt, null, false, description);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nif (requiredOpts.contains(key))\nrequiredOpts.add(key);\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn opt;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate List values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 37
        }
    ]
}