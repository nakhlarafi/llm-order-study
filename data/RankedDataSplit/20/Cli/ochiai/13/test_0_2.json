{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2",
    "test_body": "public void testLoopingOptionLookAlike2() {\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nfinal Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\nfinal Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\nfinal Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\nfinal Group options = gbuilder.withOption(targets).create();\nfinal Parser parser = new Parser();\nparser.setGroup(options);\ntry {\nparser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\nfail(\"OptionException\");\n} catch (OptionException e) {\nassertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n}",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value \"testfile.txt\" found while processing  input]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2(BugLoopingOptionLookAlikeTest.java:76)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:withName(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder withName(final String newName) {\nif (newName == null) {\nif (\"\".equals(newName)) {\nthis.name = newName;\nreturn this;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli2.util.HelpFormatter:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
            "method_body": "public HelpFormatter(final String gutterLeft,\nfinal int fullWidth) {\nthis.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;\nthis.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;\nthis.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;\nthis.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();\nint availableWidth = fullWidth - pageWidth + this.gutterCenter.length();\nif (availableWidth < 2) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli2.util.HelpFormatter:<clinit>()V",
            "method_body": "public static final int DEFAULT_FULL_WIDTH = 80;\nfinal Set fullUsage = new HashSet(DisplaySetting.ALL);\nfullUsage.remove(DisplaySetting.DISPLAY_ALIASES);\nfullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);\nDEFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);\nfinal Set lineUsage = new HashSet();\nlineUsage.add(DisplaySetting.DISPLAY_ALIASES);\nlineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);\nlineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\nDEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);\nfinal Set displayUsage = new HashSet(DisplaySetting.ALL);\ndisplayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\nDEFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.CommandLineImpl:hasOption(Ljava/lang/String;)Z",
            "method_body": "public final boolean hasOption(final String trigger) {\nreturn hasOption(getOption(trigger));\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:hasOption(Lorg/apache/commons/cli2/Option;)Z",
            "method_body": "public boolean hasOption(final Option option) {\nfinal boolean present = options.contains(option);\nreturn present;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:create()Lorg/apache/commons/cli2/Argument;",
            "method_body": "public final Argument create() {\nfinal Argument argument =\nreset();\nreturn argument;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getOption(Ljava/lang/String;)Lorg/apache/commons/cli2/Option;",
            "method_body": "public Option getOption(final String trigger) {\nreturn (Option) nameToOption.get(trigger);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)Ljava/util/List;",
            "method_body": "public List getValues(final Option option,\nList valueList = (List) values.get(option);\nif ((valueList == null) || valueList.isEmpty()) {\nif ((valueList == null) || valueList.isEmpty()) {\nif (valueList == null) {\nreturn valueList;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.CommandLineImpl:getValues(Lorg/apache/commons/cli2/Option;)Ljava/util/List;",
            "method_body": "public final List getValues(final Option option) {\nreturn getValues(option, Collections.EMPTY_LIST);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:<init>()V",
            "method_body": "public ArgumentBuilder() {\nreset();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:<clinit>()V",
            "method_body": "private final static ResourceHelper resources = ResourceHelper.getResourceHelper();\npublic ArgumentBuilder() {\nreset();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:reset()Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder reset() {\nname = \"arg\";\ndescription = null;\nminimum = 0;\nmaximum = Integer.MAX_VALUE;\ninitialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;\nsubsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;\nvalidator = null;\nconsumeRemaining = \"--\";\ndefaultValues = null;\nid = 0;\nreturn this;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getMessage(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String getMessage(final String key,\nfinal String msgFormatStr = bundle.getString(key);\nfinal MessageFormat msgFormat = new MessageFormat(msgFormatStr);\nreturn msgFormat.format(values);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:addValue(Lorg/apache/commons/cli2/Option;Ljava/lang/Object;)V",
            "method_body": "public void addValue(final Option option,\nif (option instanceof Argument) {\naddOption(option);\nList valueList = (List) values.get(option);\nif (valueList == null) {\nvalueList = new ArrayList();\nvalues.put(option, valueList);\nvalueList.add(value);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:<init>(Ljava/lang/String;)V",
            "method_body": "private DisplaySetting(final String name) {\nthis.name = name;\nthis.hashCode = name.hashCode();\nall.add(this);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:<clinit>()V",
            "method_body": "private static final Set all = new HashSet();\npublic static final Set ALL = Collections.unmodifiableSet(all);\npublic static final Set NONE = Collections.EMPTY_SET;\npublic static final DisplaySetting DISPLAY_ALIASES =\npublic static final DisplaySetting DISPLAY_OPTIONAL =\npublic static final DisplaySetting DISPLAY_PROPERTY_OPTION =\npublic static final DisplaySetting DISPLAY_SWITCH_ENABLED =\npublic static final DisplaySetting DISPLAY_SWITCH_DISABLED =\npublic static final DisplaySetting DISPLAY_GROUP_NAME =\npublic static final DisplaySetting DISPLAY_GROUP_EXPANDED =\npublic static final DisplaySetting DISPLAY_GROUP_ARGUMENT =\npublic static final DisplaySetting DISPLAY_GROUP_OUTER =\npublic static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =\npublic static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =\npublic static final DisplaySetting DISPLAY_PARENT_ARGUMENT =\npublic static final DisplaySetting DISPLAY_PARENT_CHILDREN =\nprivate DisplaySetting(final String name) {\nthis.name = name;\nthis.hashCode = name.hashCode();\nall.add(this);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:hashCode()I",
            "method_body": "public int hashCode() {\nreturn hashCode;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getPrefixes()Ljava/util/Set;",
            "method_body": "public Set getPrefixes() {\nreturn prefixes;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:hashCode()I",
            "method_body": "public int hashCode() {\nint hashCode = getId();\nhashCode = (hashCode * 37) + getPreferredName().hashCode();\nif (getDescription() != null) {\nhashCode = (hashCode * 37) + getPrefixes().hashCode();\nhashCode = (hashCode * 37) + getTriggers().hashCode();\nreturn hashCode;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:addOption(Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void addOption(Option option) {\noptions.add(option);\nnameToOption.put(option.getPreferredName(), option);\nfor (Iterator i = option.getTriggers().iterator(); i.hasNext();) {\n}",
            "method_id": 59
        }
    ]
}