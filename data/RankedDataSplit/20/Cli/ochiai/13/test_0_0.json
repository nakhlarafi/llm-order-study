{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2",
    "test_body": "public void testLoopingOptionLookAlike2() {\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nfinal Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\nfinal Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\nfinal Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\nfinal Group options = gbuilder.withOption(targets).create();\nfinal Parser parser = new Parser();\nparser.setGroup(options);\ntry {\nparser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\nfail(\"OptionException\");\n} catch (OptionException e) {\nassertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n}",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value \"testfile.txt\" found while processing  input]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2(BugLoopingOptionLookAlikeTest.java:76)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nreturn source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:validate(Lorg/apache/commons/cli2/WriteableCommandLine;Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void validate(WriteableCommandLine commandLine,\nfinal List values = commandLine.getValues(option);\nfinal int limit = values.size() - dest.getMinimum();\nint count = 0;\nfinal Iterator i = values.iterator();\nwhile (count++ < limit) {\ncommandLine.addValue(source, i.next());\nwhile (i.hasNext()) {\ncommandLine.addValue(dest, i.next());\nsource.validate(commandLine, source);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:<init>(Lorg/apache/commons/cli2/Argument;Lorg/apache/commons/cli2/Argument;)V",
            "method_body": "public SourceDestArgument(final Argument source,\nthis(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:<init>(Lorg/apache/commons/cli2/Argument;Lorg/apache/commons/cli2/Argument;CCLjava/lang/String;Ljava/util/List;)V",
            "method_body": "public SourceDestArgument(final Argument source,\nsuper(\"SourceDestArgument\", null, sum(source.getMinimum(), dest.getMinimum()),\nthis.source = source;\nthis.dest = dest;\nif (dest.getMinimum() != dest.getMaximum()) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:sum(II)I",
            "method_body": "private static int sum(final int a,\nreturn Math.max(a, Math.max(b, a + b));\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:getMaximum()I",
            "method_body": "public int getMaximum() {\nreturn maximum;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:getMinimum()I",
            "method_body": "public int getMinimum() {\nreturn minimum;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage() {\nreturn message;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object that) {\nif (that instanceof DisplaySetting) {\nreturn name.compareTo(that.toString()) == 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn name;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nreturn true;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:validate(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void validate(final WriteableCommandLine commandLine)\nvalidate(commandLine, this);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:process(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)V",
            "method_body": "public void process(WriteableCommandLine commandLine,\nprocessValues(commandLine, args, this);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:<init>(Lorg/apache/commons/cli2/Option;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public OptionException(final Option option,\nfinal String value) {\nthis.option = option;\nif (messageKey != null) {\nfinal StringBuffer buffer = new StringBuffer();\nif (value != null) {\nbuffer.append(helper.getMessage(messageKey, value));\nbuffer.append(\" \");\noption.appendUsage(buffer, HELP_SETTINGS, null);\nmessage = buffer.toString();\n} else {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:<clinit>()V",
            "method_body": "public static final Set HELP_SETTINGS =\nprivate static final ResourceHelper helper = ResourceHelper.getResourceHelper();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nfinal boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);\nfinal boolean numbered =\nfinal boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);\nfinal int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;\nint i = 0;\nwhile (i < max) {\nif (i > 0) {\nif ((i >= minimum) && (optional || (i > 0))) {\nif (bracketed) {\nbuffer.append(name);\n++i;\nif (numbered) {\nif (bracketed) {\nif (maximum == Integer.MAX_VALUE) {\nwhile (i > 0) {\n--i;\nif ((i >= minimum) && (optional || (i > 0))) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:defaults(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void defaults(final WriteableCommandLine commandLine) {\nsuper.defaults(commandLine);\ndefaultValues(commandLine, this);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:validate(Lorg/apache/commons/cli2/WriteableCommandLine;Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void validate(final WriteableCommandLine commandLine,\nfinal List values = commandLine.getValues(option);\nif (values.size() < minimum) {\nif (values.size() > maximum) {\nthrow new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getMessage(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String getMessage(final String key,\nreturn getMessage(key, new Object[] { value });\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:defaultValues(Lorg/apache/commons/cli2/WriteableCommandLine;Lorg/apache/commons/cli2/Option;)V",
            "method_body": "public void defaultValues(final WriteableCommandLine commandLine,\ncommandLine.setDefaultValues(option, defaultValues);\n}",
            "method_id": 19
        }
    ]
}