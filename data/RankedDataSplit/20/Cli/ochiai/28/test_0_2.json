{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ValueTest.testPropertyOptionFlags",
    "test_body": "public void testPropertyOptionFlags() throws Exception\n{\nProperties properties = new Properties();\nproperties.setProperty( \"a\", \"true\" );\nproperties.setProperty( \"c\", \"yes\" );\nproperties.setProperty( \"e\", \"1\" );\n199: Parser parser = new PosixParser();\n201: CommandLine cmd = parser.parse(opts, null, properties);\nassertTrue( cmd.hasOption(\"a\") );\nassertTrue( cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n206: 207: properties = new Properties();\nproperties.setProperty( \"a\", \"false\" );\nproperties.setProperty( \"c\", \"no\" );\nproperties.setProperty( \"e\", \"0\" );\n212: cmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n217: 218: properties = new Properties();\nproperties.setProperty( \"a\", \"TRUE\" );\nproperties.setProperty( \"c\", \"nO\" );\nproperties.setProperty( \"e\", \"TrUe\" );\n223: cmd = parser.parse(opts, null, properties);\nassertTrue( cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n228: 229: properties = new Properties();\nproperties.setProperty( \"a\", \"just a string\" );\nproperties.setProperty( \"e\", \"\" );\n233: cmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n} \n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.ValueTest.testPropertyOptionFlags(ValueTest.java:215)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn values.isEmpty();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nif (str.startsWith(\"\\\"\"))\nif (str.endsWith(\"\\\"\"))\nreturn str;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\nString token = (String) iter.next();\nif (\"-\".equals(token) || \"--\".equals(token))\nelse if (token.startsWith(\"--\"))\nint pos = token.indexOf('=');\nString opt = pos == -1 ? token : token.substring(0, pos); // --foo\nList matchingOpts = options.getMatchingOptions(opt);\nif (matchingOpts.isEmpty())\nelse if (matchingOpts.size() > 1)\ncurrentOption = options.getOption((String) matchingOpts.get(0));\ntokens.add(\"--\" + currentOption.getLongOpt());\nif (pos != -1)\n}\nelse if (token.startsWith(\"-\"))\nif (token.length() == 2 || options.hasOption(token))\nprocessOptionToken(token, stopAtNonOption);\nprocessNonOptionToken(token, stopAtNonOption);\ngobble(iter);\n}\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\nif (this == o)\nreturn true;\nif (o == null || getClass() != o.getClass())\nOption option = (Option) o;\nif (opt != null ? !opt.equals(option.opt) : option.opt != null)\nreturn false;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private List tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nswitch (numberOfArgs)\nprocessValue(value);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Option:acceptsArg()Z",
            "method_body": "boolean acceptsArg()\nreturn (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nfor (Iterator it = options.iterator(); it.hasNext();)\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\nreturn option;\nif (opt.equals(option.getLongOpt()))\n}\nreturn null;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions()\nreturn requiredOptions;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\nString option = e.nextElement().toString();\nif (!cmd.hasOption(option))\nOption opt = getOptions().getOption(option);\nString value = properties.getProperty(option);\nif (opt.hasArg())\nif (opt.getValues() == null || opt.getValues().length == 0)\nopt.addValueForProcessing(value);\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\nbreak;\ncmd.addOption(opt);\n}\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions() throws MissingOptionException\nif (!getRequiredOptions().isEmpty())\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nOption opt = (Option) getOptions().getOption(arg).clone();\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 59
        }
    ]
}