{
    "bug_id": 38,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseConcatenatedShortOptions",
    "test_body": "public void shouldParseConcatenatedShortOptions() throws Exception {\nString[] concatenatedShortOptions = new String[] { \"-t1\", \"-ab\" };\n80: final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\n82: assertTrue(commandLine.hasOption(\"t1\"));\nassertNull(commandLine.getOptionValue(\"t1\"));\nassertTrue(commandLine.hasOption(\"a\"));",
    "stack_trace": "junit.framework.AssertionFailedError: expected null, but was:<-ab>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.junit.Assert.assertNull(Assert.java:656)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseConcatenatedShortOptions(BugCLI265Test.java:83)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:numberOfArgs(I)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder numberOfArgs(final int numberOfArgs)\nthis.numberOfArgs = numberOfArgs;\nreturn this;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:optionalArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder optionalArg(final boolean isOptional)\nthis.optionalArg = isOptional;\nreturn this;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:argName(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder argName(final String argName)\nthis.argName = argName;\nreturn this;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\nreturn hasArg(true);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:getLongPrefix(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String getLongPrefix(String token)\nString t = Util.stripLeadingHyphens(token);\nString opt = null;\nfor (i = t.length() - 2; i > 1; i--)\nreturn opt;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isShortOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isShortOption(String token)\nif (!token.startsWith(\"-\") || token.length() == 1)\nint pos = token.indexOf(\"=\");\nString optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\nreturn options.hasShortOption(optName);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isArgument(Ljava/lang/String;)Z",
            "method_body": "private boolean isArgument(String token)\nreturn !isOption(token) || isNegativeNumber(token);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isOption(String token)\nreturn isLongOption(token) || isShortOption(token);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isLongOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isLongOption(String token)\nif (!token.startsWith(\"-\") || token.length() == 1)\nint pos = token.indexOf(\"=\");\nString t = pos == -1 ? token : token.substring(0, pos);\nif (!options.getMatchingOptions(t).isEmpty())\nelse if (getLongPrefix(token) != null && !token.startsWith(\"--\"))\nreturn false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasShortOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasShortOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleShortAndLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleShortAndLongOption(String token) throws ParseException\nString t = Util.stripLeadingHyphens(token);\nint pos = t.indexOf('=');\nif (t.length() == 1)\nelse if (pos == -1)\nif (options.hasShortOption(t))\nhandleOption(options.getOption(t));\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions() throws MissingOptionException\nif (!expectedOpts.isEmpty())\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\ncheckRequiredArgs();\noption = (Option) option.clone();\nupdateRequiredOptions(option);\ncmd.addOption(option);\nif (option.hasArg())\ncurrentOption = option;\n}",
            "method_id": 19
        }
    ]
}