{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2",
    "test_body": "public void testLoopingOptionLookAlike2() {\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nfinal Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\nfinal Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\nfinal Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\nfinal Group options = gbuilder.withOption(targets).create();\nfinal Parser parser = new Parser();\nparser.setGroup(options);\ntry {\nparser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\nfail(\"OptionException\");\n} catch (OptionException e) {\nassertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n}",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value \"testfile.txt\" found while processing  input]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2(BugLoopingOptionLookAlikeTest.java:76)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getMessage(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String getMessage(final String key,\nfinal String msgFormatStr = bundle.getString(key);\nfinal MessageFormat msgFormat = new MessageFormat(msgFormatStr);\nreturn msgFormat.format(values);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:validate(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void validate(final WriteableCommandLine commandLine)\nvalidate(commandLine, this);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object that) {\nif (that instanceof DisplaySetting) {\nreturn name.compareTo(that.toString()) == 0;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)Ljava/util/List;",
            "method_body": "public List getValues(final Option option,\nList valueList = (List) values.get(option);\nif ((valueList == null) || valueList.isEmpty()) {\nif ((valueList == null) || valueList.isEmpty()) {\nif (valueList == null) {\nreturn valueList;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.CommandLineImpl:getValues(Lorg/apache/commons/cli2/Option;)Ljava/util/List;",
            "method_body": "public final List getValues(final Option option) {\nreturn getValues(option, Collections.EMPTY_LIST);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:getPrefixes()Ljava/util/Set;",
            "method_body": "public Set getPrefixes() {\nreturn Collections.EMPTY_SET;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:withMinimum(I)Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder withMinimum(final int newMinimum) {\nif (newMinimum < 0) {\nthis.minimum = newMinimum;\nreturn this;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:getId()I",
            "method_body": "public int getId() {\nreturn id;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nfinal boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);\nfinal boolean numbered =\nfinal boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);\nfinal int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;\nint i = 0;\nwhile (i < max) {\nif (i > 0) {\nif ((i >= minimum) && (optional || (i > 0))) {\nif (bracketed) {\nbuffer.append(name);\n++i;\nif (numbered) {\nif (bracketed) {\nif (maximum == Integer.MAX_VALUE) {\nwhile (i > 0) {\n--i;\nif ((i >= minimum) && (optional || (i > 0))) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:setGroup(Lorg/apache/commons/cli2/Group;)V",
            "method_body": "public void setGroup(final Group group) {\nthis.group = group;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:hashCode()I",
            "method_body": "public int hashCode() {\nreturn hashCode;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:parse([Ljava/lang/String;)Lorg/apache/commons/cli2/CommandLine;",
            "method_body": "public CommandLine parse(final String[] arguments)\nfinal List argumentList = new LinkedList();\nfor (int i = 0; i < arguments.length; i++) {\nfinal String argument = arguments[i];\nargumentList.add(new String(argument));\nfinal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);\ngroup.defaults(commandLine);\nfinal ListIterator iterator = argumentList.listIterator();\nObject previous = null;\nwhile (group.canProcess(commandLine, iterator)) {\nfinal Object next = iterator.next();\niterator.previous();\nif (next == previous) {\nprevious = next;\ngroup.process(commandLine, iterator);\n}\nif (iterator.hasNext()) {\nif (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {\ngroup.validate(commandLine);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:<init>(Ljava/lang/String;Ljava/lang/String;IICCLorg/apache/commons/cli2/validation/Validator;Ljava/lang/String;Ljava/util/List;I)V",
            "method_body": "public ArgumentImpl(final String name,\nsuper(id, false);\nthis.name = (name == null) ? \"arg\" : name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.initialSeparator = initialSeparator;\nthis.subsequentSeparator = subsequentSeparator;\nthis.subsequentSplit = subsequentSeparator != NUL;\nthis.validator = validator;\nthis.consumeRemaining = consumeRemaining;\nthis.defaultValues = valueDefaults;\nif (minimum > maximum) {\nif ((valueDefaults != null) && (valueDefaults.size() > 0)) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:addValue(Lorg/apache/commons/cli2/Option;Ljava/lang/Object;)V",
            "method_body": "public void addValue(final Option option,\nif (option instanceof Argument) {\naddOption(option);\nList valueList = (List) values.get(option);\nif (valueList == null) {\nvalueList = new ArrayList();\nvalues.put(option, valueList);\nvalueList.add(value);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getPrefixes()Ljava/util/Set;",
            "method_body": "public Set getPrefixes() {\nreturn prefixes;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:<init>()V",
            "method_body": "private ResourceHelper() {\nString bundleName = System.getProperty(PROP_LOCALE);\nif (bundleName == null) {\nbundleName = DEFAULT_BUNDLE;\nthis.prop = bundleName;\nint firstUnderscore = bundleName.indexOf('_');\nint secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);\nif (firstUnderscore != -1) {\nString language = bundleName.substring(firstUnderscore + 1, secondUnderscore);\nString country = bundleName.substring(secondUnderscore + 1);\nlocale = new Locale(language, country);\n}\nbundle = ResourceBundle.getBundle(bundleName, locale);\n}\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nif (arg == null) {\nif (optionMap.containsKey(arg)) {\nfinal Map tailMap = optionMap.tailMap(arg);\nfor (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {\nif (commandLine.looksLikeOption(arg)) {\nif (anonymous.size() > 0) {\nreturn true;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getMessage(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String getMessage(final String key,\nreturn getMessage(key, new Object[] { value });\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:withMaximum(I)Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder withMaximum(final int newMaximum) {\nif (newMaximum < 0) {\nthis.maximum = newMaximum;\nreturn this;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:defaults(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void defaults(final WriteableCommandLine commandLine) {\n}",
            "method_id": 39
        }
    ]
}