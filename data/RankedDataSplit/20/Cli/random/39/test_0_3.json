{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn type;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Class<?> clazz) throws ParseException\nif (PatternOptionBuilder.STRING_VALUE == clazz)\nelse if (PatternOptionBuilder.OBJECT_VALUE == clazz)\nelse if (PatternOptionBuilder.NUMBER_VALUE == clazz)\nelse if (PatternOptionBuilder.DATE_VALUE == clazz)\nelse if (PatternOptionBuilder.CLASS_VALUE == clazz)\nelse if (PatternOptionBuilder.FILE_VALUE == clazz)\nelse if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\nreturn createFile(str);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(final String pattern)\nchar opt = ' ';\nboolean required = false;\nClass<?> type = null;\nfinal Options options = new Options();\nfor (int i = 0; i < pattern.length(); i++)\nfinal char ch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nopt = ch;\nelse if (ch == '!')\ntype = (Class<?>) getValueClass(ch);\nif (opt != ' ')\nfinal Option option = Option.builder(String.valueOf(opt))\noptions.addOption(option);\nreturn options;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Object obj) throws ParseException\nreturn createValue(str, (Class<?>) obj);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final String opt) throws ParseException\nreturn getParsedOptionValue(resolveOption(opt));\n}",
            "method_id": 66
        }
    ]
}