{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PosixParserTest.testStopBursting",
    "test_body": "public void testStopBursting() throws Exception\n{\nString[] args = new String[] { \"-azc\" };\n137: CommandLine cl = parser.parse(options, args, true);\nassertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\nassertFalse( \"Confirm -c is not set\", cl.hasOption(\"c\") );\n141: assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\nassertTrue(cl.getArgList().contains(\"zc\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Confirm  1 extra arg: 2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.cli.PosixParserTest.testStopBursting(PosixParserTest.java:141)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\nString token = (String) iter.next();\nif (token.startsWith(\"--\"))\nelse if (\"-\".equals(token))\nelse if (token.startsWith(\"-\"))\nint tokenLength = token.length();\nif (tokenLength == 2)\nelse if (options.hasOption(token))\nburstToken(token, stopAtNonOption);\n}\ngobble(iter);\n}\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:burstToken(Ljava/lang/String;Z)V",
            "method_body": "protected void burstToken(String token, boolean stopAtNonOption)\nfor (int i = 1; i < token.length(); i++)\nString ch = String.valueOf(token.charAt(i));\nif (options.hasOption(ch))\ntokens.add(\"-\" + ch);\ncurrentOption = options.getOption(ch);\nif (currentOption.hasArg() && (token.length() != (i + 1)))\nelse if (stopAtNonOption)\nprocess(token.substring(i));\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg,\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions() throws MissingOptionException\nif (!getRequiredOptions().isEmpty())\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\nwhile (iter.hasNext())\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:process(Ljava/lang/String;)V",
            "method_body": "private void process(String value)\nif (currentOption != null && currentOption.hasArg())\neatTheRest = true;\ntokens.add(\"--\");\ntokens.add(value);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(getOptions(),\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\neatTheRest = true;\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\nwhile (iterator.hasNext())\nString str = (String) iterator.next();\nif (!\"--\".equals(str))\ncmd.addArg(str);\n}\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions() {\nreturn requiredOptions;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone() {\nOption option = (Option) super.clone();\noption.values = new ArrayList(values);\nreturn option;\n}",
            "method_id": 39
        }
    ]
}