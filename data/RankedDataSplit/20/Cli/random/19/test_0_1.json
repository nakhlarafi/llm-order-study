{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PosixParserTest.testUnrecognizedOption2",
    "test_body": "public void testUnrecognizedOption2() throws Exception\n{\nString[] args = new String[] { \"-z\", \"-abtoast\", \"foo\", \"bar\" };\n107: try\n{\nparser.parse(options, args);\nfail(\"UnrecognizedOptionException wasn't thrown\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: UnrecognizedOptionException wasn't thrown\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.cli.PosixParserTest.testUnrecognizedOption2(PosixParserTest.java:110)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\nString token = (String) iter.next();\nif (token.startsWith(\"--\"))\nelse if (\"-\".equals(token))\nelse if (token.startsWith(\"-\"))\nif (token.length() == 2)\nprocessOptionToken(token, stopAtNonOption);\nelse if (options.hasOption(token))\nburstToken(token, stopAtNonOption);\nelse if (stopAtNonOption)\ntokens.add(token);\ngobble(iter);\n}\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate ArrayList values = new ArrayList();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn this.opt;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn (Option) shortOpts.get(opt);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions() {\nreturn requiredOptions;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\nthrow new RuntimeException(\"Cannot add value, list full.\");\nthis.values.add(value);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter)\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nOption opt = (Option) getOptions().getOption(arg).clone();\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValues()[Ljava/lang/String;",
            "method_body": "public String[] getValues()\nreturn hasNoValues()\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private List tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter)\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\nopt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) );\ncatch (RuntimeException exp)\niter.previous();\nbreak;\n}\n}\nif ((opt.getValues() == null) && !opt.hasOptionalArg())\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nswitch (numberOfArgs)\nprocessValue(value);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions() {\nreturn options;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg,\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\n}",
            "method_id": 39
        }
    ]
}