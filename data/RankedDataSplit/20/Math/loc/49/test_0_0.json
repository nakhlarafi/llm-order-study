{
    "bug_id": 49,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification",
    "test_body": "public void testConcurrentModification() {\nfinal RealVector u = new OpenMapRealVector(3, 1e-6);\nu.setEntry(0, 1);\nu.setEntry(1, 0);\nu.setEntry(2, 2);\n1010: final RealVector v1 = new OpenMapRealVector(3, 1e-6);\nfinal double[] v2 = new double[3];\nv1.setEntry(0, 0);\nv2[0] = 0;\nv1.setEntry(1, 3);\nv2[1] = 3;\nv1.setEntry(2, 0);\nv2[2] = 0;\n1019: RealVector w;\n1021: w = u.ebeMultiply(v1);\nw = u.ebeMultiply(v2);",
    "stack_trace": "org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating\nat org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)\nat org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance(OpenIntToDoubleHashMap.java:564)\nat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)\nat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:33)\nat org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(SparseRealVectorTest.java:1021)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\ndouble previous = missingEntries;\nboolean newMapping = true;\nif (index < 0) {\nkeys[index]   = key;\nstates[index] = FULL;\nvalues[index] = value;\nif (newMapping) {\n++size;\nif (shouldGrowTable()) {\n++count;\nreturn previous;\n}",
            "method_id": 0,
            "loc": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\nfinal int length = source.keys.length;\nkeys = new int[length];\nSystem.arraycopy(source.keys, 0, keys, 0, length);\nvalues = new double[length];\nSystem.arraycopy(source.values, 0, values, 0, length);\nstates = new byte[length];\nSystem.arraycopy(source.states, 0, states, 0, length);\nmissingEntries = source.missingEntries;\nsize  = source.size;\nmask  = source.mask;\ncount = source.count;\n}",
            "method_id": 1,
            "loc": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\nfinal int capacity = computeCapacity(expectedSize);\nkeys   = new int[capacity];\nvalues = new double[capacity];\nstates = new byte[capacity];\nthis.missingEntries = missingEntries;\nmask   = capacity - 1;\n}",
            "method_id": 2,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 3,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeMultiply(RealVector v) {\ncheckVectorDimensions(v.getDimension());\nOpenMapRealVector res = new OpenMapRealVector(this);\nIterator iter = res.entries.iterator();\nwhile (iter.hasNext()) {\niter.advance();\nres.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n}",
            "method_id": 4,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:containsKey(I)Z",
            "method_body": "public boolean containsKey(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn true;\nif (states[index] == FREE) {\nreturn false;\n}",
            "method_id": 5,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn y;\n}",
            "method_id": 6,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
            "method_body": "private static int computeCapacity(final int expectedSize) {\nif (expectedSize == 0) {\nfinal int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);\nfinal int powerOfTwo = Integer.highestOneBit(capacity);\nif (powerOfTwo == capacity) {\nreturn capacity;\n}",
            "method_id": 7,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nif (states[index] == FREE) {\nreturn missingEntries;\n}",
            "method_id": 8,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}",
            "method_id": 9,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nif (referenceCount != count) {\nthrow MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);\ncurrent = next;\nwhile (states[++next] != FULL) {\n}\n}",
            "method_id": 10,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\ny = floor(x);\nif (y == x) {\nreturn y;\n}",
            "method_id": 11,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I",
            "method_body": "private static int findInsertionIndex(final int[] keys, final byte[] states,\nfinal int hash = hashOf(key);\nint index = hash & mask;\nif (states[index] == FREE) {\nreturn index;\n}",
            "method_id": 12,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 13,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:remove(I)D",
            "method_body": "public double remove(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn doRemove(index);\n}",
            "method_id": 14,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:<init>(ID)V",
            "method_body": "public OpenMapRealVector(int dimension, double epsilon) {\nvirtualSize = dimension;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\n}",
            "method_id": 15,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:key()I",
            "method_body": "public int key()\nif (referenceCount != count) {\nif (current < 0) {\nreturn keys[current];\n}",
            "method_id": 16,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 17,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\nif (current < 0) {\nreturn values[current];\n}",
            "method_id": 18,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\nreturn entries.get(index);\n}",
            "method_id": 19,
            "loc": 4
        }
    ]
}