{
    "bug_id": 69,
    "test_id": 1,
    "test_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero",
    "test_body": "public void testPValueNearZero() throws Exception {\n/*\n* Create a dataset that has r -> 1, p -> 0 as dimension increases.\n* Prior to the fix for MATH-371, p vanished for dimension >= 14.\n* Post fix, p-values diminish smoothly, vanishing at dimension = 127.\n* Tested value is ~1E-303.\n*/\nint dimension = 120; \ndouble[][] data = new double[dimension][2];\nfor (int i = 0; i < dimension; i++) {\ndata[i][0] = i;\ndata[i][1] = i + 1/((double)i + 1);\n}\nPearsonsCorrelation corrInstance = new PearsonsCorrelation(data);\nassertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 40,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 41,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 42,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 43,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b)\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 44,
            "loc": 3
        }
    ]
}