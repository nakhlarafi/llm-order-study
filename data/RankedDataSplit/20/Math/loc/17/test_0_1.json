{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.dfp.DfpTest.testMultiply",
    "test_body": "public void testMultiply()\n{\ntest(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\nfield.newDfp(\"1\"),\n0, \"Multiply #1\");\n762: test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\nfield.newDfp(\"1\"),\n0, \"Multiply #2\");\n766: test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\nfield.newDfp(\"-1\"),\n0, \"Multiply #3\");\n770: test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\nfield.newDfp(\"-1\"),\n0, \"Multiply #4\");\n774: // basic tests with integers\ntest(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\nfield.newDfp(\"6\"),\n0, \"Multiply #5\");\n779: test(field.newDfp(\"2\").multiply(3),\nfield.newDfp(\"6\"),\n0, \"Multiply #6\");\n783: test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\nfield.newDfp(\"-6\"),\n0, \"Multiply #7\");\n787: test(field.newDfp(\"-2\").multiply(3),\nfield.newDfp(\"-6\"),\n0, \"Multiply #8\");\n791: test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\nfield.newDfp(\"-6\"),\n0, \"Multiply #9\");\n795: test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\nfield.newDfp(\"6\"),\n0, \"Multiply #10\");\n799: //multiply by zero\n801: test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\nfield.newDfp(\"-0\"),\n0, \"Multiply #11\");\n805: test(field.newDfp(\"-2\").multiply(0),\nfield.newDfp(\"-0\"),\n0, \"Multiply #12\");\n809: test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\nfield.newDfp(\"0\"),\n0, \"Multiply #13\");\n813: test(field.newDfp(\"2\").multiply(0),\nfield.newDfp(\"0\"),\n0, \"Multiply #14\");\n817: test(field.newDfp(\"2\").multiply(pinf),\npinf,\n0, \"Multiply #15\");\n821: test(field.newDfp(\"2\").multiply(ninf),\nninf,\n0, \"Multiply #16\");\n825: test(field.newDfp(\"-2\").multiply(pinf),\nninf,\n0, \"Multiply #17\");\n829: test(field.newDfp(\"-2\").multiply(ninf),\npinf,\n0, \"Multiply #18\");\n833: test(ninf.multiply(field.newDfp(\"-2\")),\npinf,\n0, \"Multiply #18.1\");\n837: test(field.newDfp(\"5e131071\").multiply(2),\npinf,\nDfpField.FLAG_OVERFLOW, \"Multiply #19\");\n841: test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\nfield.newDfp(\"9.9999999999999950000e131071\"),\n0, \"Multiply #20\");\n845: test(field.newDfp(\"-5e131071\").multiply(2),\nninf,\nDfpField.FLAG_OVERFLOW, \"Multiply #22\");\n849: test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\nfield.newDfp(\"-9.9999999999999950000e131071\"),\n0, \"Multiply #23\");\n853: test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\nfield.newDfp(\"1e-131078\"),\nDfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n857: test(field.newDfp(\"1\").multiply(nan),\nnan,\n0, \"Multiply #25\");\n861: test(nan.multiply(field.newDfp(\"1\")),\nnan,\n0, \"Multiply #26\");\n865: test(nan.multiply(pinf),\nnan,\n0, \"Multiply #27\");\n869: test(pinf.multiply(nan),\nnan,\n0, \"Multiply #27\");\n873: test(pinf.multiply(field.newDfp(\"0\")),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #28\");\n877: test(field.newDfp(\"0\").multiply(pinf),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #29\");\n881: test(pinf.multiply(pinf),\npinf,\n0, \"Multiply #30\");\n885: test(ninf.multiply(pinf),\nninf,\n0, \"Multiply #31\");\n889: test(pinf.multiply(ninf),\nninf,\n0, \"Multiply #32\");\n893: test(ninf.multiply(ninf),\npinf,\n0, \"Multiply #33\");\n897: test(pinf.multiply(1),\npinf,\n0, \"Multiply #34\");\n901: test(pinf.multiply(0),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #35\");\n905: test(nan.multiply(1),\nnan,\n0, \"Multiply #36\");\n909: test(field.newDfp(\"1\").multiply(10000),\nfield.newDfp(\"10000\"),",
    "stack_trace": "junit.framework.AssertionFailedError: assersion failed Multiply #37 x = NaN flags = 1\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.dfp.DfpTest.test(DfpTest.java:74)\nat org.apache.commons.math3.dfp.DfpTest.testMultiply(DfpTest.java:909)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn field.getRadixDigits();\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn field.getZero();\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn zero;\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getField()Lorg/apache/commons/math3/dfp/DfpField;",
            "method_body": "public DfpField getField() {\nreturn field;\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:clearIEEEFlags()V",
            "method_body": "public void clearIEEEFlags() {\nieeeFlags = 0;\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn (nans == QNAN) || (nans == SNAN);\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:newDfp(BB)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp newDfp(final byte sign, final byte nans) {\nreturn new Dfp(this, sign, nans);\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(I)V",
            "method_body": "public DfpField(final int decimalDigits) {\nthis(decimalDigits, true);\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRoundingMode()Lorg/apache/commons/math3/dfp/DfpField$RoundingMode;",
            "method_body": "public RoundingMode getRoundingMode() {\nreturn rMode;\n}",
            "method_id": 29,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn radixDigits;\n}",
            "method_id": 30,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:trap(ILjava/lang/String;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\nreturn def;\n}",
            "method_id": 31,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 32,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V",
            "method_body": "public void setIEEEFlagsBits(final int bits) {\nieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getIEEEFlags()I",
            "method_body": "public int getIEEEFlags() {\nreturn ieeeFlags;\n}",
            "method_id": 34,
            "loc": 3
        }
    ]
}