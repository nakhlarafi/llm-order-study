{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "public void testLargeSample() {\nRandom randomizer = new Random(0x5551480dca5b369bl);\ndouble maxError = 0;\nfor (int degree = 0; degree < 10; ++degree) {\nPolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n233: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\nfor (int i = 0; i < 40000; ++i) {\ndouble x = -1.0 + i / 20000.0;\nfitter.addObservedPoint(1.0, x,\np.value(x) + 0.1 * randomizer.nextGaussian());\n}\n240: final double[] init = new double[degree + 1];\nPolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n243: for (double x = -1.0; x < 1.0; x += 0.01) {\ndouble error = FastMath.abs(p.value(x) - fitted.value(x)) /\n(1.0 + FastMath.abs(p.value(x)));\nmaxError = FastMath.max(maxError, error);\nAssert.assertTrue(FastMath.abs(error) < 0.01);\n}\n}\nAssert.assertTrue(maxError > 0.001);\n}\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.DiagonalMatrix.getData(DiagonalMatrix.java:204)\nat org.apache.commons.math3.linear.TriDiagonalTransformer.<init>(TriDiagonalTransformer.java:69)\nat org.apache.commons.math3.linear.EigenDecomposition.transformToTridiagonal(EigenDecomposition.java:561)\nat org.apache.commons.math3.linear.EigenDecomposition.<init>(EigenDecomposition.java:122)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.squareRoot(AbstractLeastSquaresOptimizer.java:562)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.setUp(AbstractLeastSquaresOptimizer.java:508)\nat org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.optimizeInternal(BaseAbstractMultivariateVectorOptimizer.java:239)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimizeInternal(AbstractLeastSquaresOptimizer.java:496)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:423)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:62)\nat org.apache.commons.math3.optimization.fitting.CurveFitter.fit(CurveFitter.java:189)\nat org.apache.commons.math3.optimization.fitting.CurveFitter.fit(CurveFitter.java:153)\nat org.apache.commons.math3.optimization.fitting.PolynomialFitter.fit(PolynomialFitter.java:110)\nat org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:241)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (target.length != weightMatrix.getColumnDimension()) {\n}",
            "method_id": 60,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn getRowDimension();\n}",
            "method_id": 61,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 62,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 63,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 64,
            "loc": 3
        }
    ]
}