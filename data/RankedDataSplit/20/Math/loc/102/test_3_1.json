{
    "bug_id": 102,
    "test_id": 3,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare",
    "test_body": "public void testChiSquare() throws Exception {\n46: // Target values computed using R version 1.8.1 \n// Some assembly required ;-)  \n//      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n//      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n51: long[] observed = {10, 9, 11};\ndouble[] expected = {10, 10, 10};\nassertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\nassertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n56: long[] observed1 = { 500, 623, 72, 70, 31 };\ndouble[] expected1 = { 485, 541, 82, 61, 37 };\nassertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\nassertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare(TestUtilsTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean:<init>()V",
            "method_body": "public GeometricMean() {\nsumOfLogs = new SumOfLogs();\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl:<init>()V",
            "method_body": "public SummaryStatisticsImpl() {\nsuper();\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:chiSquareTest([D[J)D",
            "method_body": "public static double chiSquareTest(double[] expected, long[] observed)\nreturn chiSquareTest.chiSquareTest(expected, observed);\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 27,
            "loc": 3
        }
    ]
}