{
    "bug_id": 102,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:getUnknownDistributionChiSquareTest()Lorg/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest;",
            "method_body": "public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\nreturn unknownDistributionChiSquareTest;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>()V",
            "method_body": "public ChiSquareTestImpl() {\nthis(new ChiSquaredDistributionImpl(1.0));\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 29,
            "loc": 3
        }
    ]
}