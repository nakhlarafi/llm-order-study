{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "public void testMath785() {\n// this test was failing due to inaccurate results from ContinuedFraction.\n150: try {\ndouble prob = 0.01;\nFDistribution f = new FDistribution(200000, 200000);\ndouble result = f.inverseCumulativeProbability(prob);\nAssert.assertTrue(result < 1.0);\n} catch (Exception e) {\nAssert.fail(\"Failing to calculate inverse cumulative probability\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.distribution.FDistributionTest.testMath785(FDistributionTest.java:156)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:<init>(DDD)V",
            "method_body": "protected BaseAbstractUnivariateSolver(final double relativeAccuracy,\nfinal double functionValueAccuracy) {\nthis.absoluteAccuracy = absoluteAccuracy;\nthis.relativeAccuracy = relativeAccuracy;\nthis.functionValueAccuracy = functionValueAccuracy;\n}",
            "method_id": 20,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nreturn sum + LANCZOS[0];\n}",
            "method_id": 21,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 22,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:solve(Lorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public static double solve(UnivariateFunction function,\nif (function == null) {\nfinal UnivariateSolver solver = new BrentSolver(absoluteAccuracy);\nreturn solver.solve(Integer.MAX_VALUE, function, x0, x1);\n}",
            "method_id": 23,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nreturn ret;\n}",
            "method_id": 24,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\nif (denominatorDF > 2) {\nreturn denominatorDF / (denominatorDF - 2);\n}",
            "method_id": 25,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalArgumentException(Localizable pattern,\nObject ... args) {\ncontext = new ExceptionContext(this);\ncontext.addMessage(pattern, args);\n}",
            "method_id": 26,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:verifySequence(DDD)V",
            "method_body": "public static void verifySequence(final double lower,\nverifyInterval(lower, initial);\nverifyInterval(initial, upper);\n}",
            "method_id": 27,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\nmsgArguments.add(ArgUtils.flatten(arguments));\n}",
            "method_id": 28,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\nnew MaxCountExceededCallback() {\n}",
            "method_id": 29,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double point)\nincrementEvaluationCount();\nreturn function.value(point);\n}",
            "method_id": 30,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:solve(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public double solve(int maxEval, FUNC f, double min, double max, double startValue) {\nsetup(maxEval, f, min, max, startValue);\nreturn doSolve();\n}",
            "method_id": 31,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:incrementEvaluationCount()V",
            "method_body": "protected void incrementEvaluationCount() {\nevaluations.incrementCount();\n}\n}",
            "method_id": 32,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportUpperBound()D",
            "method_body": "public double getSupportUpperBound() {\nreturn Double.POSITIVE_INFINITY;\n}",
            "method_id": 34,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 35,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn searchStart;\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected BaseAbstractUnivariateSolver(final double absoluteAccuracy) {\nthis(DEFAULT_RELATIVE_ACCURACY,\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:solve(ILorg/apache/commons/math3/analysis/UnivariateFunction;DD)D",
            "method_body": "public double solve(int maxEval, FUNC f, double min, double max) {\nreturn solve(maxEval, f, min, max, min + 0.5 * (max - min));\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSolverAbsoluteAccuracy()D",
            "method_body": "protected double getSolverAbsoluteAccuracy() {\nreturn solverAbsoluteAccuracy;\n}",
            "method_id": 39,
            "loc": 3
        }
    ]
}