{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "public void testMath785() {\n// this test was failing due to inaccurate results from ContinuedFraction.\n150: try {\ndouble prob = 0.01;\nFDistribution f = new FDistribution(200000, 200000);\ndouble result = f.inverseCumulativeProbability(prob);\nAssert.assertTrue(result < 1.0);\n} catch (Exception e) {\nAssert.fail(\"Failing to calculate inverse cumulative probability\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.distribution.FDistributionTest.testMath785(FDistributionTest.java:156)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\nlong bits = Double.doubleToLongBits(x);\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x == Double.POSITIVE_INFINITY) {\nint exp = (int)(bits >> 52)-1023;\nif ((bits & 0x7ff0000000000000L) == 0) {\nif (exp == -1 || exp == 0) {\nif (x < 1.01 && x > 0.99 && hiPrec == null) {\ndouble lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\ndouble epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\ndouble lnza = 0.0;\ndouble lnzb = 0.0;\nif (hiPrec != null) {\nlnza = -0.16624882440418567;\nlnza = lnza * epsilon + 0.19999954120254515;\nlnza = lnza * epsilon + -0.2499999997677497;\nlnza = lnza * epsilon + 0.3333333333332802;\nlnza = lnza * epsilon + -0.5;\nlnza = lnza * epsilon + 1.0;\nlnza = lnza * epsilon;\ndouble a = LN_2_A*exp;\ndouble b = 0.0;\ndouble c = a+lnm[0];\ndouble d = -(c-a-lnm[0]);\na = c;\nb = b + d;\nc = a + lnza;\nd = -(c - a - lnza);\na = c;\nb = b + d;\nc = a + LN_2_B*exp;\nd = -(c - a - LN_2_B*exp);\na = c;\nb = b + d;\nc = a + lnm[1];\nd = -(c - a - lnm[1]);\na = c;\nb = b + d;\nc = a + lnzb;\nd = -(c - a - lnzb);\na = c;\nb = b + d;\nif (hiPrec != null) {\nreturn a + b;\n}",
            "method_id": 0,
            "loc": 46
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\ndouble hPrev = getA(0, x);\n\n// use the value of small as epsilon criteria for zero checks\nif (Precision.equals(hPrev, 0.0, small)) {\nhPrev = small;\n}\n\nint n = 1;\ndouble dPrev = 0.0;\ndouble p0 = 1.0;\ndouble q1 = 1.0;\ndouble cPrev = hPrev;\ndouble hN = hPrev;\n\nhN = cPrev * deltaN;\nif (Double.isNaN(hN)) {\nx);\nbreak;\ndPrev = q1;\ncPrev = cN / q2;\np0 = hPrev;\nhPrev = cN;\nq1 = q2;\nn++;\n\n\n}",
            "method_id": 1,
            "loc": 29
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\nintVal = (int) -x;\nif (intVal > 746) {\nif (hiPrec != null) {\nreturn 0.0;\nif (intVal > 709) {\nif (intVal == 709) {\nintVal++;\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\nintVal = -intVal;\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\nfinal double tempC = tempB + tempA;\nif (extra != 0.0) {\nresult = tempC*z + tempB + tempA;\nif (hiPrec != null) {\nreturn result;\n}",
            "method_id": 2,
            "loc": 29
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:inverseCumulativeProbability(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 3,
            "loc": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution$1:value(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 4,
            "loc": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution$1:<init>(Lorg/apache/commons/math3/distribution/AbstractRealDistribution;D)V",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 5,
            "loc": 18
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:doSolve()D",
            "method_body": "protected double doSolve() {\ndouble min = getMin();\ndouble max = getMax();\nfinal double initial = getStartValue();\nfinal double functionValueAccuracy = getFunctionValueAccuracy();\nverifySequence(min, initial, max);\ndouble yInitial = computeObjectiveValue(initial);\nif (FastMath.abs(yInitial) <= functionValueAccuracy) {\ndouble yMin = computeObjectiveValue(min);\nif (FastMath.abs(yMin) <= functionValueAccuracy) {\nif (yInitial * yMin < 0) {\ndouble yMax = computeObjectiveValue(max);\nif (FastMath.abs(yMax) <= functionValueAccuracy) {\nif (yInitial * yMax < 0) {\nthrow new NoBracketingException(min, max, yMin, yMax);\n}",
            "method_id": 6,
            "loc": 16
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 7,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 8,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 9,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 10,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:setup(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)V",
            "method_body": "protected void setup(int maxEval,\nMathUtils.checkNotNull(f);\nsearchMin = min;\nsearchMax = max;\nsearchStart = startValue;\nfunction = f;\nevaluations.setMaximalCount(maxEval);\nevaluations.resetCount();\n}",
            "method_id": 11,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\nif (array != null) {\nfor (Object o : array) {\nif (o instanceof Object[]) {\nfor (Object oR : flatten((Object[]) o)) {\nlist.add(o);\nreturn list.toArray();\n}",
            "method_id": 12,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthrows NotStrictlyPositiveException {\nif (numeratorDegreesOfFreedom <= 0) {\nif (denominatorDegreesOfFreedom <= 0) {\nthis.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;\nthis.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 13,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x)  {\nif (x <= 0) {\nret = 0;\ndouble n = numeratorDegreesOfFreedom;\ndouble m = denominatorDegreesOfFreedom;\nret = Beta.regularizedBeta((n * x) / (m + n * x),\nreturn ret;\n}",
            "method_id": 14,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = lanczos(x);\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 15,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math3.exception.NoBracketingException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;DDDD[Ljava/lang/Object;)V",
            "method_body": "public NoBracketingException(Localizable specific,\nsuper(specific, lo, hi, fLo, fHi, args);\nthis.lo = lo;\nthis.hi = hi;\nthis.fLo = fLo;\nthis.fHi = fHi;\n}",
            "method_id": 16,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:calculateNumericalVariance()D",
            "method_body": "protected double calculateNumericalVariance() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\nif (denominatorDF > 4) {\nfinal double numeratorDF = getNumeratorDegreesOfFreedom();\nfinal double denomDFMinusTwo = denominatorDF - 2;\nreturn ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /\n}",
            "method_id": 17,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nif (!numericalVarianceIsCalculated) {\nnumericalVariance = calculateNumericalVariance();\nnumericalVarianceIsCalculated = true;\nreturn numericalVariance;\n}",
            "method_id": 18,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\nthis.throwable = throwable;\nmsgPatterns    = new ArrayList<Localizable>();\nmsgArguments   = new ArrayList<Object[]>();\ncontext        = new HashMap<String, Object>();\n}",
            "method_id": 19,
            "loc": 6
        }
    ]
}