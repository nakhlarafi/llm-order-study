{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718",
    "test_body": "public void testMath718() {\n// for large trials the evaluation of ContinuedFraction was inaccurate\n// do a sweep over several large trials to test if the current implementation is\n// numerically stable.\n138: for (int trials = 500000; trials < 20000000; trials += 100000) {\nBinomialDistribution dist = new BinomialDistribution(trials, 0.5);\nint p = dist.inverseCumulativeProbability(0.5);\nAssert.assertEquals(trials / 2, p);",
    "stack_trace": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction diverged to NaN for value 0.5\nat org.apache.commons.math3.util.ContinuedFraction.evaluate(ContinuedFraction.java:177)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:154)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:129)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:50)\nat org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(BinomialDistribution.java:101)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.checkedCumulativeProbability(AbstractIntegerDistribution.java:201)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.solveInverseCumulativeProbability(AbstractIntegerDistribution.java:143)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(AbstractIntegerDistribution.java:116)\nat org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(BinomialDistributionTest.java:140)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportLowerBound()I",
            "method_body": "public int getSupportLowerBound() {\nreturn probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nreturn numberOfTrials * probabilityOfSuccess;\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 24,
            "loc": 3
        }
    ]
}