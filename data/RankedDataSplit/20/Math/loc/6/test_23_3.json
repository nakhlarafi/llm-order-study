{
    "bug_id": 6,
    "test_id": 23,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2",
    "test_body": "public void testMinimize2() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n79: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(100),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MINIMIZE,\nnew InitialGuess(new double[] { 1, 0 }),\nnew NelderMeadSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\nAssert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\nAssert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\nAssert.assertTrue(optimizer.getEvaluations() > 60);\nAssert.assertTrue(optimizer.getEvaluations() < 90);\n91: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(SimplexOptimizerNelderMeadTest.java:92)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DD)V",
            "method_body": "public PointValuePair(final double[] point,\nthis(point, value, true);\n}",
            "method_id": 60,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction:getObjectiveFunction()Lorg/apache/commons/math3/analysis/MultivariateFunction;",
            "method_body": "public MultivariateFunction getObjectiveFunction() {\nreturn function;\n}",
            "method_id": 61,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 62,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 63,
            "loc": 3
        }
    ]
}