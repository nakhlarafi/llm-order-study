{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "protected UnivariatePointValuePair doOptimize() {\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariatePointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariatePointValuePair previous = null;\nUnivariatePointValuePair current\nUnivariatePointValuePair best = current;\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nprevious = current;\ncurrent = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\nbest = best(best,\nif (checker != null) {\nif (checker.converged(iter, previous, current)) {\nreturn best;\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else { // Default termination (Brent's criterion).\n++iter;\n}\n}",
            "method_id": 0,
            "loc": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal GoalType goal = getGoalType();\nfinal double[] guess = getStartPoint();\nfinal int n = guess.length;\nfinal double[][] direc = new double[n][n];\nfor (int i = 0; i < n; i++) {\ndirec[i][i] = 1;\nfinal ConvergenceChecker<PointValuePair> checker\ndouble[] x = guess;\ndouble fVal = computeObjectiveValue(x);\ndouble[] x1 = x.clone();\nint iter = 0;\n++iter;\ndouble fX = fVal;\ndouble fX2 = 0;\ndouble delta = 0;\nint bigInd = 0;\ndouble alphaMin = 0;\nfor (int i = 0; i < n; i++) {\nfinal double[] d = MathArrays.copyOf(direc[i]);\nfX2 = fVal;\nfinal UnivariatePointValuePair optimum = line.search(x, d);\nfVal = optimum.getValue();\nalphaMin = optimum.getPoint();\nfinal double[][] result = newPointAndDirection(x, d, alphaMin);\nx = result[0];\nif ((fX2 - fVal) > delta) {\ndelta = fX2 - fVal;\nbigInd = i;\nboolean stop = 2 * (fX - fVal) <=\nfinal PointValuePair previous = new PointValuePair(x1, fX);\nfinal PointValuePair current = new PointValuePair(x, fVal);\nif (!stop) { // User-defined stopping criteria.\nif (checker != null) {\nif (stop) {\nif (goal == GoalType.MINIMIZE) {\nreturn (fVal < fX) ? current : previous;\nfinal double[] d = new double[n];\nfinal double[] x2 = new double[n];\nfor (int i = 0; i < n; i++) {\nd[i] = x[i] - x1[i];\nx2[i] = 2 * x[i] - x1[i];\nx1 = x.clone();\nfX2 = computeObjectiveValue(x2);\nif (fX > fX2) {\ndouble t = 2 * (fX + fX2 - 2 * fVal);\ndouble temp = fX - fVal - delta;\nt *= temp * temp;\ntemp = fX - fX2;\nt -= delta * temp * temp;\nif (t < 0.0) {\n}\n}",
            "method_id": 1,
            "loc": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:search(Lorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;DD)V",
            "method_body": "public void search(UnivariateFunction func, GoalType goal, double xA, double xB) {\nevaluations.resetCount();\nfinal boolean isMinim = goal == GoalType.MINIMIZE;\ndouble fA = eval(func, xA);\ndouble fB = eval(func, xB);\nif (isMinim ?\ndouble tmp = xA;\nxA = xB;\nxB = tmp;\ntmp = fA;\nfA = fB;\nfB = tmp;\ndouble xC = xB + GOLD * (xB - xA);\ndouble fC = eval(func, xC);\nwhile (isMinim ? fC < fB : fC > fB) {\ndouble tmp1 = (xB - xA) * (fB - fC);\ndouble tmp2 = (xB - xC) * (fB - fA);\ndouble val = tmp2 - tmp1;\ndouble denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;\ndouble w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;\ndouble wLim = xB + growLimit * (xC - xB);\nif ((w - xC) * (xB - w) > 0) {\nfW = eval(func, w);\nif (isMinim ?\nxA = xB;\nxB = w;\nfA = fB;\nfB = fW;\nbreak;\n} else if ((w - wLim) * (wLim - xC) >= 0) {\n} else if ((w - wLim) * (xC - w) > 0) {\nw = xC + GOLD * (xC - xB);\nfW = eval(func, w);\nxA = xB;\nfA = fB;\nxB = xC;\nfB = fC;\nxC = w;\nfC = fW;\n}\nlo = xA;\nfLo = fA;\nmid = xB;\nfMid = fB;\nhi = xC;\nfHi = fC;\nif (lo > hi) {\ndouble tmp = lo;\nlo = hi;\nhi = tmp;\ntmp = fLo;\nfLo = fHi;\nfHi = tmp;\n}",
            "method_id": 2,
            "loc": 54
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 3,
            "loc": 38
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\nint quadrant = 0;\ndouble xb = 0.0;\nxa = x;\nif (x < 0) {\nnegative = true;\nxa = -xa;\nif (xa == 0.0) {\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nfinal CodyWaite cw = new CodyWaite(xa);\nquadrant = cw.getK() & 3;\nxa = cw.getRemA();\nxb = cw.getRemB();\nif (negative) {\nquadrant ^= 2;  // Flip bit 1\nswitch (quadrant) {\nreturn sinQ(xa, xb);\nreturn cosQ(xa, xb);\nreturn -sinQ(xa, xb);\nreturn -cosQ(xa, xb);\n}",
            "method_id": 4,
            "loc": 24
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:<init>(D)V",
            "method_body": "CodyWaite(double xa) {\nint k = (int)(xa * 0.6366197723675814);\ndouble a = -k * 1.570796251296997;\nremA = xa + a;\nremB = -(remA - xa - a);\na = -k * 7.549789948768648E-8;\ndouble b = remA;\nremA = a + b;\nremB += -(remA - b - a);\na = -k * 6.123233995736766E-17;\nb = remA;\nremA = a + b;\nremB += -(remA - b - a);\nif (remA > 0) {\nbreak;\nthis.finalK = k;\nthis.finalRemA = remA;\nthis.finalRemB = remB;\n}",
            "method_id": 5,
            "loc": 19
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof SearchInterval) {\nfinal SearchInterval interval = (SearchInterval) data;\nmin = interval.getMin();\nmax = interval.getMax();\nstart = interval.getStartValue();\ncontinue;\nif (data instanceof UnivariateObjectiveFunction) {\nfunction = ((UnivariateObjectiveFunction) data).getObjectiveFunction();\ncontinue;\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\n}",
            "method_id": 6,
            "loc": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (start != null) {\nfinal int dim = start.length;\nif (lowerBound != null) {\nif (lowerBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double lo = lowerBound[i];\nif (v < lo) {\nif (upperBound != null) {\nif (upperBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double hi = upperBound[i];\nif (v > hi) {\n}",
            "method_id": 7,
            "loc": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 8,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer$LineSearch;I[D[D)V",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 9,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:newPointAndDirection([D[DD)[[D",
            "method_body": "private double[][] newPointAndDirection(double[] p,\nfinal int n = p.length;\nfinal double[] nP = new double[n];\nfinal double[] nD = new double[n];\nfor (int i = 0; i < n; i++) {\nnD[i] = d[i] * optimum;\nnP[i] = p[i] + nD[i];\nfinal double[][] result = new double[2][];\nresult[0] = nP;\nresult[1] = nD;\nreturn result;\n}",
            "method_id": 10,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:value(D)D",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 11,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nreturn Double.NaN;\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 12,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\nif (data instanceof ObjectiveFunction) {\nfunction = ((ObjectiveFunction) data).getObjectiveFunction();\ncontinue;\n}",
            "method_id": 13,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 14,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 15,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\ndouble p = 2.479773539153719E-5;\np = p * x2 + -0.0013888888689039883;\np = p * x2 + 0.041666666666621166;\np = p * x2 + -0.49999999999999994;\np *= x2;\nreturn p;\n}",
            "method_id": 16,
            "loc": 9
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:converged(ILorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 17,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\nfinal double pi2b = 6.123233995736766E-17;\nfinal double a = pi2a - xa;\ndouble b = -(a - pi2a + xa);\nb += pi2b - xb;\nreturn sinQ(a, b);\n}",
            "method_id": 18,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:<init>(DDD)V",
            "method_body": "public SearchInterval(double lo,\ndouble init) {\nif (lo >= hi) {\nif (init < lo ||\nlower = lo;\nupper = hi;\nstart = init;\n}",
            "method_id": 19,
            "loc": 8
        }
    ]
}