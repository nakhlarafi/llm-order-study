{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "public void testQuinticMinStatistics() throws MathException {\n// The function has local minima at -0.27195613 and 0.82221643.\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setRelativeAccuracy(1e-10);\nminimizer.setAbsoluteAccuracy(1e-11);\n93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\nfor (int i = 0; i < stat.length; i++) {\nstat[i] = new DescriptiveStatistics();\n}\n98: final double min = -0.75;\nfinal double max = 0.25;\nfinal int nSamples = 200;\nfinal double delta = (max - min) / nSamples;\nfor (int i = 0; i < nSamples; i++) {\nfinal double start = min + i * delta;\nstat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\nstat[1].addValue(minimizer.getIterationCount());\nstat[2].addValue(minimizer.getEvaluations());\n}\n109: final double meanOptValue = stat[0].getMean();\nfinal double medianIter = stat[1].getPercentile(50);\nfinal double medianEval = stat[2].getPercentile(50);\nassertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\nassertEquals(medianIter, 17, Math.ulp(1d));\nassertEquals(medianEval, 18, Math.ulp(1d));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 40,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:start()I",
            "method_body": "public synchronized int start() {\nreturn startIndex;\n}",
            "method_id": 41,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 42,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getInternalValues()[D",
            "method_body": "public synchronized double[] getInternalValues() {\nreturn internalArray;\n}",
            "method_id": 43,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DII)D",
            "method_body": "public double evaluate( final double[] values, final int start, final int length) {\nreturn evaluate(values, start, length, quantile);\n}",
            "method_id": 44,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 45,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:apply(Lorg/apache/commons/math/stat/descriptive/UnivariateStatistic;)D",
            "method_body": "public double apply(UnivariateStatistic stat) {\nreturn stat.evaluate(eDA.getInternalValues(), eDA.start(), eDA.getNumElements());\n}",
            "method_id": 46,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 47,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 48,
            "loc": 3
        }
    ]
}