{
    "bug_id": 58,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519",
    "test_body": "public void testMath519() {\n// The optimizer will try negative sigma values but \"GaussianFitter\"\n// will catch the raised exceptions and return NaN values instead.\n302: final double[] data = { \n1.1143831578403364E-29,\n4.95281403484594E-28,\n1.1171347211930288E-26,\n1.7044813962636277E-25,\n1.9784716574832164E-24,\n1.8630236407866774E-23,\n1.4820532905097742E-22,\n1.0241963854632831E-21,\n6.275077366673128E-21,\n3.461808994532493E-20,\n1.7407124684715706E-19,\n8.056687953553974E-19,\n3.460193945992071E-18,\n1.3883326374011525E-17,\n5.233894983671116E-17,\n1.8630791465263745E-16,\n6.288759227922111E-16,\n2.0204433920597856E-15,\n6.198768938576155E-15,\n1.821419346860626E-14,\n5.139176445538471E-14,\n1.3956427429045787E-13,\n3.655705706448139E-13,\n9.253753324779779E-13,\n2.267636001476696E-12,\n5.3880460095836855E-12,\n1.2431632654852931E-11\n};\n332: GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\nfor (int i = 0; i < data.length; i++) {\nfitter.addObservedPoint(i, data[i]);\n}\nfinal double[] p = fitter.fit();\n338: Assert.assertEquals(53.1572792, p[1], 1e-7);\nAssert.assertEquals(5.75214622, p[2], 1e-8);\n}\n",
    "stack_trace": "org.apache.commons.math.exception.NotStrictlyPositiveException: -1.277 is smaller than, or equal to, the minimum (0)\nat org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(Gaussian.java:183)\nat org.apache.commons.math.analysis.function.Gaussian$Parametric.value(Gaussian.java:128)\nat org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(CurveFitter.java:203)\nat org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(BaseAbstractVectorialOptimizer.java:107)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost(AbstractLeastSquaresOptimizer.java:128)\nat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize(LevenbergMarquardtOptimizer.java:350)\nat org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(BaseAbstractVectorialOptimizer.java:141)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:253)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:43)\nat org.apache.commons.math.optimization.fitting.CurveFitter.fit(CurveFitter.java:160)\nat org.apache.commons.math.optimization.fitting.CurveFitter.fit(CurveFitter.java:126)\nat org.apache.commons.math.optimization.fitting.GaussianFitter.fit(GaussianFitter.java:121)\nat org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519(GaussianFitterTest.java:336)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1:value([D)[[D",
            "method_body": "public MultivariateMatrixFunction jacobian() {\nreturn new MultivariateMatrixFunction() {\nfinal double[][] jacobian = new double[observations.size()][];\nint i = 0;\nfor (WeightedObservedPoint observed : observations) {\njacobian[i++] = f.gradient(observed.getX(), point);\nreturn jacobian;\n}",
            "method_id": 20,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction:jacobian()Lorg/apache/commons/math/analysis/MultivariateMatrixFunction;",
            "method_body": "public MultivariateMatrixFunction jacobian() {\nreturn new MultivariateMatrixFunction() {\nfinal double[][] jacobian = new double[observations.size()][];\nint i = 0;\nfor (WeightedObservedPoint observed : observations) {\njacobian[i++] = f.gradient(observed.getX(), point);\nreturn jacobian;\n}",
            "method_id": 21,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1:compare(Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;)I",
            "method_body": "private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\nreturn new Comparator<WeightedObservedPoint>() {\nif (p1 == null && p2 == null) {\nif (p1 == null) {\nif (p2 == null) {\nif (p1.getX() < p2.getX()) {\nreturn -1;\n}",
            "method_id": 22,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser$1:compare(Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\nreturn new Comparator<WeightedObservedPoint>() {\nif (p1 == null && p2 == null) {\nif (p1 == null) {\nif (p2 == null) {\nif (p1.getX() < p2.getX()) {\nreturn -1;\n}",
            "method_id": 23,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:findMaxY([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;)I",
            "method_body": "private int findMaxY(WeightedObservedPoint[] points) {\nint maxYIdx = 0;\nfor (int i = 1; i < points.length; i++) {\nif (points[i].getY() > points[maxYIdx].getY()) {\nmaxYIdx = i;\nreturn maxYIdx;\n}",
            "method_id": 24,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction:value([D)[D",
            "method_body": "public double[] value(double[] point) {\nfinal double[] values = new double[observations.size()];\nint i = 0;\nfor (WeightedObservedPoint observed : observations) {\nvalues[i++] = f.value(observed.getX(), point);\nreturn values;\n}",
            "method_id": 25,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:interpolateXAtY([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;IID)D",
            "method_body": "private double interpolateXAtY(WeightedObservedPoint[] points,\nif (idxStep == 0) {\nWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\nWeightedObservedPoint pointA = twoPoints[0];\nWeightedObservedPoint pointB = twoPoints[1];\nif (pointA.getY() == y) {\n}",
            "method_id": 26,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(DD)D",
            "method_body": "public static double min(final double a, final double b) {\nif (a > b) {\nreturn b;\nif (a < b) {\nreturn a;\n}",
            "method_id": 27,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.exception.MathRuntimeException:<init>(Ljava/lang/Throwable;Lorg/apache/commons/math/exception/util/Localizable;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathRuntimeException(final Throwable cause,\nsuper(cause);\nthis.specific = specific;\nthis.general = general;\nthis.arguments = ArgUtils.flatten(arguments);\n}",
            "method_id": 28,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.analysis.function.Gaussian$Parametric:value(D[D)D",
            "method_body": "public double value(double x,\nvalidateParameters(param);\nfinal double diff = x - param[1];\nfinal double i2s2 = 1 / (2 * param[2] * param[2]);\nreturn Gaussian.value(diff, param[0], i2s2);\n}",
            "method_id": 29,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.analysis.function.Gaussian$Parametric:validateParameters([D)V",
            "method_body": "private void validateParameters(double[] param) {\nif (param == null) {\nif (param.length != 3) {\nif (param[2] <= 0) {\nthrow new NotStrictlyPositiveException(param[2]);\n}",
            "method_id": 30,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:guess()[D",
            "method_body": "public double[] guess() {\nif (parameters == null) {\nparameters = basicGuess(observations);\nreturn parameters.clone();\n}",
            "method_id": 31,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.exception.OutOfRangeException:<init>(Lorg/apache/commons/math/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public OutOfRangeException(Localizable specific,\nsuper(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,\nthis.lo = lo;\nthis.hi = hi;\n}",
            "method_id": 32,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.exception.NumberIsTooSmallException:<init>(Lorg/apache/commons/math/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V",
            "method_body": "public NumberIsTooSmallException(Localizable specific,\nsuper(specific,\nthis.min = min;\nthis.boundIsAllowed = boundIsAllowed;\n}",
            "method_id": 33,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:<init>([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;)V",
            "method_body": "public ParameterGuesser(WeightedObservedPoint[] observations) {\nif (observations == null) {\nif (observations.length < 3) {\nthis.observations = observations.clone();\n}",
            "method_id": 34,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:computeObjectiveValue([D)[D",
            "method_body": "protected double[] computeObjectiveValue(double[] point) {\nevaluations.incrementCount();\n}\nreturn function.value(point);\n}",
            "method_id": 35,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint:<init>(DDD)V",
            "method_body": "public WeightedObservedPoint(final double weight, final double x, final double y) {\nthis.weight = weight;\nthis.x      = x;\nthis.y      = y;\n}",
            "method_id": 36,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter:fit()[D",
            "method_body": "public double[] fit() {\nfinal double[] guess = (new ParameterGuesser(getObservations())).guess();\nreturn fit(new Gaussian.Parametric(), guess);\n}",
            "method_id": 37,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.VectorialPointValuePair:<init>([D[D)V",
            "method_body": "public VectorialPointValuePair(final double[] point, final double[] value) {\nthis.point = (point == null) ? null : point.clone();\nthis.value = (value == null) ? null : value.clone();\n}",
            "method_id": 38,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter:<init>(Lorg/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer;)V",
            "method_body": "public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {\nthis.optimizer = optimizer;\nobservations = new ArrayList<WeightedObservedPoint>();\n}",
            "method_id": 39,
            "loc": 4
        }
    ]
}