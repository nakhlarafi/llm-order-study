{
    "bug_id": 85,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testMath280",
    "test_body": "public void testMath280() throws MathException {\nNormalDistribution normal = new NormalDistributionImpl(0,1);\ndouble result = normal.inverseCumulativeProbability(0.9772498680518209);\nassertEquals(2.0, result, 1.0e-12);",
    "stack_trace": "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0\nat org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:104)\nat org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:162)\nat org.apache.commons.math.distribution.NormalDistributionTest.testMath280(NormalDistributionTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:getStandardDeviation()D",
            "method_body": "public double getStandardDeviation() {\nreturn standardDeviation;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.MathException:buildMessage(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\nreturn (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D",
            "method_body": "public static double[] bracket(UnivariateRealFunction function,\nreturn bracket( function, initial, lowerBound, upperBound,\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(String pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(Locale locale) {\nreturn buildMessage(locale, pattern, arguments);\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:setMean(D)V",
            "method_body": "public void setMean(double mean) {\nthis.mean = mean;\n}",
            "method_id": 26,
            "loc": 3
        }
    ]
}