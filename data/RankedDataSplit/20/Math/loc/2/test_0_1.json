{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021",
    "test_body": "public void testMath1021() {\nfinal int N = 43130568;\nfinal int m = 42976365;\nfinal int n = 50;\nfinal HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n295: for (int i = 0; i < 100; i++) {\nfinal int sample = dist.sample();\nAssert.assertTrue(\"sample=\" + sample, 0 <= sample);\nAssert.assertTrue(\"sample=\" + sample, sample <= n);",
    "stack_trace": "junit.framework.AssertionFailedError: sample=-50\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(HypergeometricDistributionTest.java:297)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportUpperBound()I",
            "method_body": "public int getSupportUpperBound() {\nreturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getPopulationSize()I",
            "method_body": "public int getPopulationSize() {\nreturn populationSize;\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumberOfSuccesses()I",
            "method_body": "public int getNumberOfSuccesses() {\nreturn numberOfSuccesses;\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSampleSize()I",
            "method_body": "public int getSampleSize() {\nreturn sampleSize;\n}",
            "method_id": 26,
            "loc": 3
        }
    ]
}