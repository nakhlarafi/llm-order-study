{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.apache.commons.math.ode.events.EventStateTest.closeEvents",
    "test_body": "public void closeEvents()\nthrows EventException, ConvergenceException, DerivativeException {\n35: final double r1  = 90.0;\nfinal double r2  = 135.0;\nfinal double gap = r2 - r1;\nEventHandler closeEventsGenerator = new EventHandler() {\npublic void resetState(double t, double[] y) {\n}\npublic double g(double t, double[] y) {\nreturn (t - r1) * (r2 - t);\n}\npublic int eventOccurred(double t, double[] y, boolean increasing) {\nreturn CONTINUE;\n}\n};\n49: final double tolerance = 0.1;\nEventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n52: double t0 = r1 - 0.5 * gap;\nes.reinitializeBegin(t0, new double[0]);\nAbstractStepInterpolator interpolator =\nnew DummyStepInterpolator(new double[0], true);\ninterpolator.storeTime(t0);\n58: interpolator.shift();\ninterpolator.storeTime(0.5 * (r1 + r2));\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r1, es.getEventTime(), tolerance);\nes.stepAccepted(es.getEventTime(), new double[0]);\n64: interpolator.shift();\ninterpolator.storeTime(r2 + 0.4 * gap);\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r2, es.getEventTime(), tolerance);",
    "stack_trace": "org.apache.commons.math.MathRuntimeException$4: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]\nat org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)\nat org.apache.commons.math.analysis.solvers.BrentSolver.solve(BrentSolver.java:178)\nat org.apache.commons.math.ode.events.EventState.evaluateStep(EventState.java:218)\nat org.apache.commons.math.ode.events.EventStateTest.closeEvents(EventStateTest.java:66)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:getEventTime()D",
            "method_body": "public double getEventTime() {\nreturn pendingEventTime;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:shift()V",
            "method_body": "public void shift() {\npreviousTime = currentTime;\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:computeInterpolatedStateAndDerivatives(DD)V",
            "method_body": "protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)\nSystem.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getCurrentTime()D",
            "method_body": "public double getCurrentTime() {\nreturn currentTime;\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:<init>([DZ)V",
            "method_body": "public DummyStepInterpolator(final double[] y, final boolean forward) {\nsuper(y, forward);\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:isForward()Z",
            "method_body": "public boolean isForward() {\nreturn forward;\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 27,
            "loc": 3
        }
    ]
}