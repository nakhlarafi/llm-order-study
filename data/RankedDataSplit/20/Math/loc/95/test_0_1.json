{
    "bug_id": 95,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom",
    "test_body": "public void testSmallDegreesOfFreedom() throws Exception {\norg.apache.commons.math.distribution.FDistributionImpl fd =\nnew org.apache.commons.math.distribution.FDistributionImpl(\n1.0, 1.0);\ndouble p = fd.cumulativeProbability(0.975);\ndouble x = fd.inverseCumulativeProbability(p);\nassertEquals(0.975, x, 1.0e-5);",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308\nat org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)\nat org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)\nat org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)\nat org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)\nat org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:getDenominatorDegreesOfFreedom()D",
            "method_body": "public double getDenominatorDegreesOfFreedom() {\nreturn denominatorDegreesOfFreedom;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:getDomainUpperBound(D)D",
            "method_body": "protected double getDomainUpperBound(double p) {\nreturn Double.MAX_VALUE;\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:getNumeratorDegreesOfFreedom()D",
            "method_body": "public double getNumeratorDegreesOfFreedom() {\nreturn numeratorDegreesOfFreedom;\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:getDomainLowerBound(D)D",
            "method_body": "protected double getDomainLowerBound(double p) {\nreturn 0.0;\n}",
            "method_id": 23,
            "loc": 3
        }
    ]
}