{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting",
    "test_body": "public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\nSubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\nSubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\nAssert.assertNull(sub1.intersection(sub2, true));\nAssert.assertNull(sub1.intersection(sub2, false));",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa(Line.java:114)\nat org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace(Line.java:129)\nat org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection(SubLine.java:116)\nat org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting(SubLineTest.java:160)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D:<init>(D)V",
            "method_body": "public Vector1D(double x) {\nthis.x = x;\n}",
            "method_id": 20,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:<init>(DD)V",
            "method_body": "public IntervalsSet(final double lower, final double upper) {\nsuper(buildTree(lower, upper));\n}",
            "method_id": 21,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:wholeHyperplane()Lorg/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint;",
            "method_body": "public SubOrientedPoint wholeHyperplane() {\nreturn new SubOrientedPoint(this, null);\n}",
            "method_id": 22,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNorm()D",
            "method_body": "public double getNorm() {\nreturn FastMath.sqrt (x * x + y * y + z * z);\n}",
            "method_id": 23,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:<init>(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\nreset(p1, p2);\n}",
            "method_id": 24,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:<init>(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V",
            "method_body": "public SubOrientedPoint(final Hyperplane<Euclidean1D> hyperplane,\nsuper(hyperplane, remainingRegion);\n}",
            "method_id": 25,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:contains(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Z",
            "method_body": "public boolean contains(final Vector3D p) {\nreturn distance(p) < 1.0e-10;\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
            "method_body": "public Vector1D toSubSpace(final Vector<Euclidean3D> point) {\nreturn new Vector1D(getAbscissa((Vector3D) point));\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion:<init>(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;)V",
            "method_body": "protected AbstractRegion(final BSPTree<S> tree) {\nthis.tree = tree;\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 29,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:getAbscissa(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D",
            "method_body": "public double getAbscissa(final Vector3D point) {\nreturn point.subtract(zero).dotProduct(direction);\n}",
            "method_id": 30,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNormSq()D",
            "method_body": "public double getNormSq() {\nreturn x * x + y * y + z * z;\n}",
            "method_id": 31,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLine:<init>(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public SubLine(final Vector3D start, final Vector3D end)\nthis(new Line(start, end), buildIntervalSet(start, end));\n}",
            "method_id": 32,
            "loc": 3
        }
    ]
}