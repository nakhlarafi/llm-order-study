{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting",
    "test_body": "public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\nCircle circle = new Circle();\ncircle.addPoint( 30.0,  68.0);\ncircle.addPoint( 50.0,  -6.0);\ncircle.addPoint(110.0, -20.0);\ncircle.addPoint( 35.0,  15.0);\ncircle.addPoint( 45.0,  97.0);\nLevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\nVectorialPointValuePair optimum =\noptimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\nnew double[] { 98.680, 47.345 });\nassertTrue(optimizer.getEvaluations() < 10);\nassertTrue(optimizer.getJacobianEvaluations() < 10);\ndouble rms = optimizer.getRMS();\nassertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\nPoint2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\nassertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\nassertEquals(96.07590211815305, center.x,      1.0e-10);\nassertEquals(48.13516790438953, center.y,      1.0e-10);\ndouble[][] cov = optimizer.getCovariances();\nassertEquals(1.839, cov[0][0], 0.001);\nassertEquals(0.731, cov[0][1], 0.001);\nassertEquals(cov[0][1], cov[1][0], 1.0e-14);\nassertEquals(0.786, cov[1][1], 0.001);\ndouble[] errors = optimizer.guessParametersErrors();\nassertEquals(1.384, errors[0], 0.001);\nassertEquals(0.905, errors[1], 0.001);\n426: // add perfect measurements and check errors are reduced\ndouble  r = circle.getRadius(center);\nfor (double d= 0; d < 2 * Math.PI; d += 0.01) {\ncircle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n}\ndouble[] target = new double[circle.getN()];\nArrays.fill(target, 0.0);\ndouble[] weights = new double[circle.getN()];\nArrays.fill(weights, 2.0);\noptimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\ncov = optimizer.getCovariances();\nassertEquals(0.0016, cov[0][0], 0.001);\nassertEquals(3.2e-7, cov[0][1], 1.0e-9);\nassertEquals(cov[0][1], cov[1][0], 1.0e-14);\nassertEquals(0.0016, cov[1][1], 0.001);\nerrors = optimizer.guessParametersErrors();\nassertEquals(0.004, errors[0], 0.001);\nassertEquals(0.004, errors[1], 0.001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.004> but was:<0.0019737107108948474>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting(LevenbergMarquardtOptimizerTest.java:442)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl:getSolver()Lorg/apache/commons/math/linear/DecompositionSolver;",
            "method_body": "public DecompositionSolver getSolver() {\nreturn new Solver(lu, pivot, singular);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl$Solver:<init>([[D[IZ)V",
            "method_body": "private Solver(final double[][] lu, final int[] pivot, final boolean singular) {\nthis.lu       = lu;\nthis.pivot    = pivot;\nthis.singular = singular;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public LUDecompositionImpl(RealMatrix matrix)\nthis(matrix, DEFAULT_TOO_SMALL);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;D)V",
            "method_body": "public LUDecompositionImpl(RealMatrix matrix, double singularityThreshold)\nthrows NonSquareMatrixException {\nif (!matrix.isSquare()) {\nfinal int m = matrix.getColumnDimension();\nlu = matrix.getData();\npivot = new int[m];\ncachedL = null;\ncachedU = null;\ncachedP = null;\nfor (int row = 0; row < m; row++) {\npivot[row] = row;\neven     = true;\nsingular = false;\nfor (int col = 0; col < m; col++) {\ndouble sum = 0;\nfor (int row = 0; row < col; row++) {\nfinal double[] luRow = lu[row];\nsum = luRow[col];\nfor (int i = 0; i < row; i++) {\nluRow[col] = sum;\nint max = col; // permutation row\ndouble largest = Double.NEGATIVE_INFINITY;\nfor (int row = col; row < m; row++) {\nfinal double[] luRow = lu[row];\nsum = luRow[col];\nfor (int i = 0; i < col; i++) {\nsum -= luRow[i] * lu[i][col];\nluRow[col] = sum;\nif (Math.abs(sum) > largest) {\nlargest = Math.abs(sum);\nmax = row;\nif (Math.abs(lu[max][col]) < singularityThreshold) {\nif (max != col) {\nfinal double luDiag = lu[col][col];\nfor (int row = col + 1; row < m; row++) {\nlu[row][col] /= luDiag;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
            "method_body": "protected void updateJacobian() throws FunctionEvaluationException {\n++jacobianEvaluations;\njacobian = jF.value(point);\nif (jacobian.length != rows) {\nfor (int i = 0; i < rows; i++) {\nfinal double[] ji = jacobian[i];\nfinal double factor = -Math.sqrt(residualsWeights[i]);\nfor (int j = 0; j < cols; ++j) {\nji[j] *= factor;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.VectorialPointValuePair:<init>([D[D)V",
            "method_body": "public VectorialPointValuePair(final double[] point, final double[] value) {\nthis.point = (point == null) ? null : point.clone();\nthis.value = (value == null) ? null : value.clone();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++objectiveEvaluations > maxEvaluations) {\nobjective = function.value(point);\nif (objective.length != rows) {\ncost = 0;\nint index = 0;\nfor (int i = 0; i < rows; i++) {\nfinal double residual = targetValues[i] - objective[i];\nresiduals[i] = residual;\ncost += residualsWeights[i] * residual * residual;\nindex += cols;\ncost = Math.sqrt(cost);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
            "method_body": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\nif (target.length != weights.length) {\niterations           = 0;\nobjectiveEvaluations = 0;\njacobianEvaluations  = 0;\nfunction         = f;\njF               = f.jacobian();\ntargetValues     = target.clone();\nresidualsWeights = weights.clone();\nthis.point       = startPoint.clone();\nthis.residuals   = new double[target.length];\nrows      = target.length;\ncols      = point.length;\njacobian  = new double[rows][cols];\ncost = Double.POSITIVE_INFINITY;\nreturn doOptimize();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:<init>()V",
            "method_body": "protected AbstractLeastSquaresOptimizer() {\nsetConvergenceChecker(new SimpleVectorialValueChecker());\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/VectorialConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) {\nthis.checker = convergenceChecker;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker:<init>()V",
            "method_body": "public SimpleVectorialValueChecker() {\nthis.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\nthis.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn (data.length * data[0].length <= 4096) ?\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nthrows IllegalArgumentException, NullPointerException {\nif (copyArray) {\nif (d == null) {\nfinal int nRows = d.length;\nif (nRows == 0) {\nfinal int nCols = d[0].length;\nif (nCols == 0) {\nfor (int r = 1; r < nRows; r++) {\nif (d[r].length != nCols) {\ndata = d;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
            "method_body": "public boolean isSquare() {\nreturn getColumnDimension() == getRowDimension();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nreturn copyOut();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nfinal int nRows = this.getRowDimension();\nfinal double[][] out = new double[nRows][this.getColumnDimension()];\nfor (int i = 0; i < nRows; i++) {\nSystem.arraycopy(data[i], 0, out[i], 0, data[i].length);\nreturn out;\n}",
            "method_id": 39
        }
    ]
}