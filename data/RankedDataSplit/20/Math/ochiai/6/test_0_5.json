{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:operate(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector operate(final RealVector v)\nreturn new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DI)D",
            "method_body": "public static double pow(double d, int e) {\nif (e == 0) {\n} else if (e < 0) {\nfinal int splitFactor = 0x8000001;\nfinal double cd       = splitFactor * d;\nfinal double d1High   = cd - (cd - d);\nfinal double d1Low    = d - d1High;\ndouble resultHigh = 1;\ndouble resultLow  = 0;\ndouble d2p     = d;\ndouble d2pHigh = d1High;\ndouble d2pLow  = d1Low;\nwhile (e != 0) {\nif ((e & 0x1) != 0) {\nfinal double tmpHigh = resultHigh * d2p;\nfinal double cRH     = splitFactor * resultHigh;\nfinal double rHH     = cRH - (cRH - resultHigh);\nfinal double rHL     = resultHigh - rHH;\nfinal double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);\nresultHigh = tmpHigh;\nresultLow  = resultLow * d2p + tmpLow;\nfinal double tmpHigh = d2pHigh * d2p;\nfinal double cD2pH   = splitFactor * d2pHigh;\nfinal double d2pHH   = cD2pH - (cD2pH - d2pHigh);\nfinal double d2pHL   = d2pHigh - d2pHH;\nfinal double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);\nfinal double cTmpH   = splitFactor * tmpHigh;\nd2pHigh = cTmpH - (cTmpH - tmpHigh);\nd2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);\nd2p     = d2pHigh + d2pLow;\ne = e >> 1;\n}\nreturn resultHigh + resultLow;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition$Solver:solve(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector solve(RealVector b) {\nfinal int m = pivot.length;\nif (b.getDimension() != m) {\nif (singular) {\nfinal double[] bp = new double[m];\nfor (int row = 0; row < m; row++) {\nbp[row] = b.getEntry(pivot[row]);\nfor (int col = 0; col < m; col++) {\nfinal double bpCol = bp[col];\nfor (int i = col + 1; i < m; i++) {\nfor (int col = m - 1; col >= 0; col--) {\nbp[col] /= lu[col][col];\nfinal double bpCol = bp[col];\nfor (int i = 0; i < col; i++) {\nreturn new ArrayRealVector(bp, false);\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getDataRef()[D",
            "method_body": "public double[] getDataRef() {\nreturn data;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "public double dotProduct(RealVector v) throws DimensionMismatchException {\nif (v instanceof ArrayRealVector) {\nfinal double[] vData = ((ArrayRealVector) v).data;\ncheckVectorDimensions(vData.length);\ndouble dot = 0;\nfor (int i = 0; i < data.length; i++) {\ndot += data[i] * vData[i];\nreturn dot;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:getSolver()Lorg/apache/commons/math3/linear/DecompositionSolver;",
            "method_body": "public DecompositionSolver getSolver() {\nreturn new Solver(lu, pivot, singular);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition$Solver:<init>([[D[IZ)V",
            "method_body": "private Solver(final double[][] lu, final int[] pivot, final boolean singular) {\nthis.lu       = lu;\nthis.pivot    = pivot;\nthis.singular = singular;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "public LUDecomposition(RealMatrix matrix) {\nthis(matrix, DEFAULT_TOO_SMALL);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
            "method_body": "public LUDecomposition(RealMatrix matrix, double singularityThreshold) {\nif (!matrix.isSquare()) {\nfinal int m = matrix.getColumnDimension();\nlu = matrix.getData();\npivot = new int[m];\ncachedL = null;\ncachedU = null;\ncachedP = null;\nfor (int row = 0; row < m; row++) {\npivot[row] = row;\neven     = true;\nsingular = false;\nfor (int col = 0; col < m; col++) {\nfor (int row = 0; row < col; row++) {\nint max = col; // permutation row\ndouble largest = Double.NEGATIVE_INFINITY;\nfor (int row = col; row < m; row++) {\nfinal double[] luRow = lu[row];\ndouble sum = luRow[col];\nfor (int i = 0; i < col; i++) {\nluRow[col] = sum;\nif (FastMath.abs(sum) > largest) {\nlargest = FastMath.abs(sum);\nmax = row;\nif (FastMath.abs(lu[max][col]) < singularityThreshold) {\nif (max != col) {\nfinal double luDiag = lu[col][col];\nfor (int row = col + 1; row < m; row++) {\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n)\nif (data.length != n) {\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nfinal double[][] data = new double[getRowDimension()][getColumnDimension()];\nfinal int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nint regularPos = 0;\nint lastPos = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nfinal double[] dataP = data[p];\nint blockIndex = iBlock * blockColumns;\nint dataPos = 0;\nfor (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {\nSystem.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);\nregularPos += BLOCK_SIZE;\nlastPos    += lastColumns;\nreturn data;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([DZ)V",
            "method_body": "public ArrayRealVector(double[] d, boolean copyArray)\nthrows NullArgumentException {\nif (d == null) {\ndata = copyArray ? d.clone() :  d;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:toArray()[D",
            "method_body": "public double[] toArray(){\nreturn data.clone();\n}",
            "method_id": 116
        }
    ]
}