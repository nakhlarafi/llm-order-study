{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:getRemB()D",
            "method_body": "double getRemB() {\nreturn finalRemB;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nreturn Double.NaN;\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\nfinal double pi2b = 6.123233995736766E-17;\nfinal double a = pi2a - xa;\ndouble b = -(a - pi2a + xa);\nb += pi2b - xb;\nreturn sinQ(a, b);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\nint quadrant = 0;\ndouble xb = 0.0;\nxa = x;\nif (x < 0) {\nnegative = true;\nxa = -xa;\nif (xa == 0.0) {\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nfinal CodyWaite cw = new CodyWaite(xa);\nquadrant = cw.getK() & 3;\nxa = cw.getRemA();\nxb = cw.getRemB();\nif (negative) {\nquadrant ^= 2;  // Flip bit 1\nswitch (quadrant) {\nreturn sinQ(xa, xb);\nreturn cosQ(xa, xb);\nreturn -sinQ(xa, xb);\nreturn -cosQ(xa, xb);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\ndouble p = 2.479773539153719E-5;\np = p * x2 + -0.0013888888689039883;\np = p * x2 + 0.041666666666621166;\np = p * x2 + -0.49999999999999994;\np *= x2;\nreturn p;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDDD)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, lineRel, lineAbs, null);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DD)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, null);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:newPointAndDirection([D[DD)[[D",
            "method_body": "private double[][] newPointAndDirection(double[] p,\nfinal int n = p.length;\nfinal double[] nP = new double[n];\nfinal double[] nD = new double[n];\nfor (int i = 0; i < n; i++) {\nnD[i] = d[i] * optimum;\nnP[i] = p[i] + nD[i];\nfinal double[][] result = new double[2][];\nresult[0] = nP;\nresult[1] = nD;\nreturn result;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:value(D)D",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDDDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nsuper(checker);\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\nline = new LineSearch(lineRel,\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal GoalType goal = getGoalType();\nfinal double[] guess = getStartPoint();\nfinal int n = guess.length;\nfinal double[][] direc = new double[n][n];\nfor (int i = 0; i < n; i++) {\ndirec[i][i] = 1;\nfinal ConvergenceChecker<PointValuePair> checker\ndouble[] x = guess;\ndouble fVal = computeObjectiveValue(x);\ndouble[] x1 = x.clone();\nint iter = 0;\n++iter;\ndouble fX = fVal;\ndouble fX2 = 0;\ndouble delta = 0;\nint bigInd = 0;\ndouble alphaMin = 0;\nfor (int i = 0; i < n; i++) {\nfinal double[] d = MathArrays.copyOf(direc[i]);\nfX2 = fVal;\nfinal UnivariatePointValuePair optimum = line.search(x, d);\nfVal = optimum.getValue();\nalphaMin = optimum.getPoint();\nfinal double[][] result = newPointAndDirection(x, d, alphaMin);\nx = result[0];\nif ((fX2 - fVal) > delta) {\ndelta = fX2 - fVal;\nbigInd = i;\nboolean stop = 2 * (fX - fVal) <=\nfinal PointValuePair previous = new PointValuePair(x1, fX);\nfinal PointValuePair current = new PointValuePair(x, fVal);\nif (!stop) { // User-defined stopping criteria.\nif (checker != null) {\nif (stop) {\nif (goal == GoalType.MINIMIZE) {\nreturn (fVal < fX) ? current : previous;\nfinal double[] d = new double[n];\nfinal double[] x2 = new double[n];\nfor (int i = 0; i < n; i++) {\nd[i] = x[i] - x1[i];\nx2[i] = 2 * x[i] - x1[i];\nx1 = x.clone();\nfX2 = computeObjectiveValue(x2);\nif (fX > fX2) {\ndouble t = 2 * (fX + fX2 - 2 * fVal);\ndouble temp = fX - fVal - delta;\nt *= temp * temp;\ntemp = fX - fX2;\nt -= delta * temp * temp;\nif (t < 0.0) {\n}\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 59
        }
    ]
}