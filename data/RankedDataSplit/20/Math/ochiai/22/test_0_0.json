{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z",
            "method_body": "public boolean isSupportLowerBoundInclusive() {\nreturn true;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:density(D)D",
            "method_body": "public double density(double x) {\nfinal double nhalf = numeratorDegreesOfFreedom / 2;\nfinal double mhalf = denominatorDegreesOfFreedom / 2;\nfinal double logx = FastMath.log(x);\nfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\nfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\nfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\nreturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DD)D",
            "method_body": "public static double logBeta(double a, double b) {\nreturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
            "method_body": "public double getSupportLowerBound() {\nreturn 0;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(new Well19937c(), numeratorDegreesOfFreedom,\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
            "method_body": "public FDistribution(RandomGenerator rng,\nsuper(rng);\nif (numeratorDegreesOfFreedom <= 0) {\nif (denominatorDegreesOfFreedom <= 0) {\nthis.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;\nthis.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\nrandom = rng;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\nfinal int w = 32;\nfinal int r = (k + w - 1) / w;\nthis.v      = new int[r];\nthis.index  = 0;\niRm1 = new int[r];\niRm2 = new int[r];\ni1   = new int[r];\ni2   = new int[r];\ni3   = new int[r];\nfor (int j = 0; j < r; ++j) {\niRm1[j] = (j + r - 1) % r;\niRm2[j] = (j + r - 2) % r;\ni1[j]   = (j + m1)    % r;\ni2[j]   = (j + m2)    % r;\ni3[j]   = (j + m3)    % r;\nsetSeed(seed);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\nsetSeed(System.currentTimeMillis() + System.identityHashCode(this));\nreturn;\nSystem.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\nif (seed.length < v.length) {\nfor (int i = seed.length; i < v.length; ++i) {\nfinal long l = v[i - seed.length];\nv[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\nindex = 0;\nclear();  // Clear normal deviate cache\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\ndelegate = new RandomDataGenerator();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma1p(D)D",
            "method_body": "public static double logGamma1p(final double x)\nif (x < -0.5) {\nif (x > 1.5) {\nreturn -FastMath.log1p(invGamma1pm1(x));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:invGamma1pm1(D)D",
            "method_body": "public static double invGamma1pm1(final double x) {\nif (x < -0.5) {\nif (x > 1.5) {\nfinal double t = x <= 0.5 ? x : (x - 0.5) - 0.5;\nif (t < 0.0) {\ndouble p = INV_GAMMA1P_M1_P6;\np = INV_GAMMA1P_M1_P5 + t * p;\np = INV_GAMMA1P_M1_P4 + t * p;\np = INV_GAMMA1P_M1_P3 + t * p;\np = INV_GAMMA1P_M1_P2 + t * p;\np = INV_GAMMA1P_M1_P1 + t * p;\np = INV_GAMMA1P_M1_P0 + t * p;\ndouble q = INV_GAMMA1P_M1_Q4;\nq = INV_GAMMA1P_M1_Q3 + t * q;\nq = INV_GAMMA1P_M1_Q2 + t * q;\nq = INV_GAMMA1P_M1_Q1 + t * q;\nq = 1.0 + t * q;\ndouble c = INV_GAMMA1P_M1_C13 + (p / q) * t;\nc = INV_GAMMA1P_M1_C12 + t * c;\nc = INV_GAMMA1P_M1_C11 + t * c;\nc = INV_GAMMA1P_M1_C10 + t * c;\nc = INV_GAMMA1P_M1_C9 + t * c;\nc = INV_GAMMA1P_M1_C8 + t * c;\nc = INV_GAMMA1P_M1_C7 + t * c;\nc = INV_GAMMA1P_M1_C6 + t * c;\nc = INV_GAMMA1P_M1_C5 + t * c;\nc = INV_GAMMA1P_M1_C4 + t * c;\nc = INV_GAMMA1P_M1_C3 + t * c;\nc = INV_GAMMA1P_M1_C2 + t * c;\nc = INV_GAMMA1P_M1_C1 + t * c;\nc = INV_GAMMA1P_M1_C0 + t * c;\nif (x > 0.5) {\nret = (t / x) * ((c - 0.5) - 0.5);\nret = x * c;\nreturn ret;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log1p(D)D",
            "method_body": "public static double log1p(final double x) {\nif (x == -1) {\nif (x == Double.POSITIVE_INFINITY) {\nif (x > 1e-6 ||\nfinal double xpa = 1 + x;\nfinal double xpb = -(xpa - 1 - x);\nfinal double[] hiPrec = new double[2];\nfinal double lores = log(xpa, hiPrec);\nif (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN\nfinal double fx1 = xpb / xpa;\nfinal double epsilon = 0.5 * fx1 + 1;\nreturn epsilon * fx1 + hiPrec[1] + hiPrec[0];\nfinal double y = (x * F_1_3 - F_1_2) * x + 1;\nreturn y * x;\n}",
            "method_id": 19
        }
    ]
}