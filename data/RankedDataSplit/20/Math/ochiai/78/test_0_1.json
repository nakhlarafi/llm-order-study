{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.apache.commons.math.ode.events.EventStateTest.closeEvents",
    "test_body": "public void closeEvents()\nthrows EventException, ConvergenceException, DerivativeException {\n35: final double r1  = 90.0;\nfinal double r2  = 135.0;\nfinal double gap = r2 - r1;\nEventHandler closeEventsGenerator = new EventHandler() {\npublic void resetState(double t, double[] y) {\n}\npublic double g(double t, double[] y) {\nreturn (t - r1) * (r2 - t);\n}\npublic int eventOccurred(double t, double[] y, boolean increasing) {\nreturn CONTINUE;\n}\n};\n49: final double tolerance = 0.1;\nEventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n52: double t0 = r1 - 0.5 * gap;\nes.reinitializeBegin(t0, new double[0]);\nAbstractStepInterpolator interpolator =\nnew DummyStepInterpolator(new double[0], true);\ninterpolator.storeTime(t0);\n58: interpolator.shift();\ninterpolator.storeTime(0.5 * (r1 + r2));\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r1, es.getEventTime(), tolerance);\nes.stepAccepted(es.getEventTime(), new double[0]);\n64: interpolator.shift();\ninterpolator.storeTime(r2 + 0.4 * gap);\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r2, es.getEventTime(), tolerance);",
    "stack_trace": "org.apache.commons.math.MathRuntimeException$4: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]\nat org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)\nat org.apache.commons.math.analysis.solvers.BrentSolver.solve(BrentSolver.java:178)\nat org.apache.commons.math.ode.events.EventState.evaluateStep(EventState.java:218)\nat org.apache.commons.math.ode.events.EventStateTest.closeEvents(EventStateTest.java:66)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.iterationCount = 0;\nthis.resultComputed = false;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
            "method_body": "protected final void setResult(final double newResult, final int iterationCount) {\nthis.result         = newResult;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
            "method_body": "protected void verifyInterval(final double lower, final double upper) {\nif (lower >= upper) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:<init>(ID)V",
            "method_body": "protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nthis.defaultFunctionValueAccuracy = 1.0e-15;\nthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$4:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState$1:<init>(Lorg/apache/commons/math/ode/events/EventState;Lorg/apache/commons/math/ode/sampling/StepInterpolator;)V",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nforward = interpolator.isForward();\nfinal double t1 = interpolator.getCurrentTime();\nfinal int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\nfinal double h  = (t1 - t0) / n;\ndouble ta = t0;\ndouble ga = g0;\ndouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\nfor (int i = 0; i < n; ++i) {\ntb += h;\ninterpolator.setInterpolatedTime(tb);\nfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\nif (g0Positive ^ (gb >= 0)) {\nincreasing = gb >= ga;\nfinal UnivariateRealFunction f = new UnivariateRealFunction() {\ninterpolator.setInterpolatedTime(t);\nreturn handler.g(t, interpolator.getInterpolatedState());\nfinal BrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(convergence);\nsolver.setMaximalIterationCount(maxIterationCount);\nfinal double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\nif ((Math.abs(root - ta) <= convergence) &&\n} else if (Double.isNaN(previousEventTime) ||\npendingEventTime = root;\nif (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\npendingEvent = true;\nreturn true;\n}",
            "method_id": 27
        }
    ]
}