{
    "bug_id": 82,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath288",
    "test_body": "public void testMath288() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n71: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\nassertEquals(10.0, solution.getValue(), .0000001);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<11.5>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath288(SimplexSolverTest.java:73)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D",
            "method_body": "public double getValue(final double[] point) {\nreturn coefficients.dotProduct(point) + constantTerm;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRowForSolution(I)Ljava/lang/Integer;",
            "method_body": "private Integer getBasicRowForSolution(final int col) {\nreturn getBasicRow(col, false);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "protected RealPointValuePair getSolution() {\ndouble[] coefficients = new double[getOriginalNumDecisionVariables()];\nInteger negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\ndouble mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\nSet<Integer> basicRows = new HashSet<Integer>();\nfor (int i = 0; i < coefficients.length; i++) {\nInteger basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\nif (basicRows.contains(basicRow)) {\nbasicRows.add(basicRow);\ncoefficients[i] =\nreturn new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNegativeDecisionVariableOffset()I",
            "method_body": "protected final int getNegativeDecisionVariableOffset() {\nreturn getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
            "method_body": "public boolean isOptimal(final SimplexTableau tableau) {\nif (tableau.getNumArtificialVariables() > 0) {\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:<init>()V",
            "method_body": "protected AbstractLinearOptimizer() {\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final LinearObjectiveFunction f,\nthis.f                     = f;\nthis.constraints           = constraints;\nthis.goalType              = goalType;\nthis.restrictToNonNegative = restrictToNonNegative;\niterations  = 0;\nreturn doOptimize();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>(D)V",
            "method_body": "public SimplexSolver(final double epsilon) {\nthis.epsilon = epsilon;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotColumn(SimplexTableau tableau) {\ndouble minValue = 0;\nInteger minPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\nminValue = tableau.getEntry(0, i);\nminPos = i;\nreturn minPos;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\ndouble minRatio = Double.MAX_VALUE;\nInteger minRatioPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\nfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nfinal double entry = tableau.getEntry(i, col);\nif (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\nfinal double ratio = rhs / entry;\nif (ratio < minRatio) {\nminRatio = ratio;\nminRatioPos = i;\nreturn minRatioPos;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(pivotCol, tableau);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nreturn;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.discardArtificialVariables();\nwhile (!isOptimal(tableau)) {\ndoIteration(tableau);\nreturn tableau.getSolution();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()V",
            "method_body": "protected void discardArtificialVariables() {\nif (numArtificialVariables == 0) {\nreturn;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 19
        }
    ]
}