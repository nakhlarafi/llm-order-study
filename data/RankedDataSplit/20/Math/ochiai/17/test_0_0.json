{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.dfp.DfpTest.testMultiply",
    "test_body": "public void testMultiply()\n{\ntest(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\nfield.newDfp(\"1\"),\n0, \"Multiply #1\");\n762: test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\nfield.newDfp(\"1\"),\n0, \"Multiply #2\");\n766: test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\nfield.newDfp(\"-1\"),\n0, \"Multiply #3\");\n770: test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\nfield.newDfp(\"-1\"),\n0, \"Multiply #4\");\n774: // basic tests with integers\ntest(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\nfield.newDfp(\"6\"),\n0, \"Multiply #5\");\n779: test(field.newDfp(\"2\").multiply(3),\nfield.newDfp(\"6\"),\n0, \"Multiply #6\");\n783: test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\nfield.newDfp(\"-6\"),\n0, \"Multiply #7\");\n787: test(field.newDfp(\"-2\").multiply(3),\nfield.newDfp(\"-6\"),\n0, \"Multiply #8\");\n791: test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\nfield.newDfp(\"-6\"),\n0, \"Multiply #9\");\n795: test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\nfield.newDfp(\"6\"),\n0, \"Multiply #10\");\n799: //multiply by zero\n801: test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\nfield.newDfp(\"-0\"),\n0, \"Multiply #11\");\n805: test(field.newDfp(\"-2\").multiply(0),\nfield.newDfp(\"-0\"),\n0, \"Multiply #12\");\n809: test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\nfield.newDfp(\"0\"),\n0, \"Multiply #13\");\n813: test(field.newDfp(\"2\").multiply(0),\nfield.newDfp(\"0\"),\n0, \"Multiply #14\");\n817: test(field.newDfp(\"2\").multiply(pinf),\npinf,\n0, \"Multiply #15\");\n821: test(field.newDfp(\"2\").multiply(ninf),\nninf,\n0, \"Multiply #16\");\n825: test(field.newDfp(\"-2\").multiply(pinf),\nninf,\n0, \"Multiply #17\");\n829: test(field.newDfp(\"-2\").multiply(ninf),\npinf,\n0, \"Multiply #18\");\n833: test(ninf.multiply(field.newDfp(\"-2\")),\npinf,\n0, \"Multiply #18.1\");\n837: test(field.newDfp(\"5e131071\").multiply(2),\npinf,\nDfpField.FLAG_OVERFLOW, \"Multiply #19\");\n841: test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\nfield.newDfp(\"9.9999999999999950000e131071\"),\n0, \"Multiply #20\");\n845: test(field.newDfp(\"-5e131071\").multiply(2),\nninf,\nDfpField.FLAG_OVERFLOW, \"Multiply #22\");\n849: test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\nfield.newDfp(\"-9.9999999999999950000e131071\"),\n0, \"Multiply #23\");\n853: test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\nfield.newDfp(\"1e-131078\"),\nDfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n857: test(field.newDfp(\"1\").multiply(nan),\nnan,\n0, \"Multiply #25\");\n861: test(nan.multiply(field.newDfp(\"1\")),\nnan,\n0, \"Multiply #26\");\n865: test(nan.multiply(pinf),\nnan,\n0, \"Multiply #27\");\n869: test(pinf.multiply(nan),\nnan,\n0, \"Multiply #27\");\n873: test(pinf.multiply(field.newDfp(\"0\")),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #28\");\n877: test(field.newDfp(\"0\").multiply(pinf),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #29\");\n881: test(pinf.multiply(pinf),\npinf,\n0, \"Multiply #30\");\n885: test(ninf.multiply(pinf),\nninf,\n0, \"Multiply #31\");\n889: test(pinf.multiply(ninf),\nninf,\n0, \"Multiply #32\");\n893: test(ninf.multiply(ninf),\npinf,\n0, \"Multiply #33\");\n897: test(pinf.multiply(1),\npinf,\n0, \"Multiply #34\");\n901: test(pinf.multiply(0),\nnan,\nDfpField.FLAG_INVALID, \"Multiply #35\");\n905: test(nan.multiply(1),\nnan,\n0, \"Multiply #36\");\n909: test(field.newDfp(\"1\").multiply(10000),\nfield.newDfp(\"10000\"),",
    "stack_trace": "junit.framework.AssertionFailedError: assersion failed Multiply #37 x = NaN flags = 1\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.dfp.DfpTest.test(DfpTest.java:74)\nat org.apache.commons.math3.dfp.DfpTest.testMultiply(DfpTest.java:909)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getIEEEFlags()I",
            "method_body": "public int getIEEEFlags() {\nreturn ieeeFlags;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:multiply(I)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp multiply(final int x) {\nreturn multiplyFast(x);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:multiplyFast(I)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "private Dfp multiplyFast(final int x) {\nDfp result = newInstance(this);\nif (nans != FINITE) {\nif (isNaN()) {\nreturn this;\nif (nans == INFINITE && x != 0) {\nresult = newInstance(this);\nreturn result;\nif (nans == INFINITE && x == 0) {\nfield.setIEEEFlagsBits(DfpField.FLAG_INVALID);\nresult = newInstance(getZero());\nresult.nans = QNAN;\nresult = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\nreturn result;\nif (x < 0 || x >= RADIX) {\nfield.setIEEEFlagsBits(DfpField.FLAG_INVALID);\nresult = newInstance(getZero());\nresult.nans = QNAN;\nresult = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\nreturn result;\nint rh = 0;\nfor (int i = 0; i < mant.length; i++) {\nfinal int r = mant[i] * x + rh;\nrh = r / RADIX;\nresult.mant[i] = r - rh * RADIX;\nint lostdigit = 0;\nif (rh != 0) {\nlostdigit = result.mant[0];\nresult.shiftRight();\nresult.mant[mant.length-1] = rh;\nif (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\nresult.exp = 0;\nfinal int excp = result.round(lostdigit);\nif (excp != 0) {\nresult = dotrap(excp, MULTIPLY_TRAP, result, result);\nreturn result;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:newDfp(Ljava/lang/String;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp newDfp(final String s) {\nreturn new Dfp(this, s);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:newDfp(BB)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp newDfp(final byte sign, final byte nans) {\nreturn new Dfp(this, sign, nans);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;BB)V",
            "method_body": "protected Dfp(final DfpField field, final byte sign, final byte nans) {\nthis.field = field;\nthis.mant    = new int[field.getRadixDigits()];\nthis.sign    = sign;\nthis.exp     = 0;\nthis.nans    = nans;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:clearIEEEFlags()V",
            "method_body": "public void clearIEEEFlags() {\nieeeFlags = 0;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(I)V",
            "method_body": "public DfpField(final int decimalDigits) {\nthis(decimalDigits, true);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\nthis.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;\nthis.rMode       = RoundingMode.ROUND_HALF_EVEN;\nthis.ieeeFlags   = 0;\nthis.zero        = new Dfp(this, 0);\nthis.one         = new Dfp(this, 1);\nthis.two         = new Dfp(this, 2);\nif (computeConstants) {\nsynchronized (DfpField.class) {\ncomputeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));\nsqr2           = new Dfp(this, sqr2String);\nsqr2Split      = split(sqr2String);\nsqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);\nsqr3           = new Dfp(this, sqr3String);\nsqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);\npi             = new Dfp(this, piString);\npiSplit        = split(piString);\ne              = new Dfp(this, eString);\neSplit         = split(eString);\nln2            = new Dfp(this, ln2String);\nln2Split       = split(ln2String);\nln5            = new Dfp(this, ln5String);\nln5Split       = split(ln5String);\nln10           = new Dfp(this, ln10String);\n}\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn radixDigits;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRoundingMode()Lorg/apache/commons/math3/dfp/DfpField$RoundingMode;",
            "method_body": "public RoundingMode getRoundingMode() {\nreturn rMode;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V",
            "method_body": "public void setIEEEFlagsBits(final int bits) {\nieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn zero;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:split(Ljava/lang/String;)[Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "private Dfp[] split(final String a) {\nDfp result[] = new Dfp[2];\nboolean leading = true;\nint sp = 0;\nint sig = 0;\nchar[] buf = new char[a.length()];\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '1' && buf[i] <= '9') {\nleading = false;\nif (buf[i] == '.') {\nsig += (400 - sig) % 4;\nleading = false;\nif (sig == (radixDigits / 2) * 4) {\nsp = i;\nbreak;\nif (buf[i] >= '0' && buf[i] <= '9' && !leading) {\nsig ++;\nresult[0] = new Dfp(this, new String(buf, 0, sp));\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '0' && buf[i] <= '9' && i < sp) {\nbuf[i] = '0';\nresult[1] = new Dfp(this, new String(buf));\nreturn result;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\nmant = new int[field.getRadixDigits()];\nnans = FINITE;\nthis.field = field;\nboolean isLongMin = false;\nif (x == Long.MIN_VALUE) {\nif (x < 0) {\nsign = 1;\nexp = 0;\nwhile (x != 0) {\nSystem.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\nmant[mant.length - 1] = (int) (x % RADIX);\nx /= RADIX;\nexp++;\nif (isLongMin) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/Dfp;)V",
            "method_body": "public Dfp(final Dfp d) {\nmant  = d.mant.clone();\nsign  = d.sign;\nexp   = d.exp;\nnans  = d.nans;\nfield = d.field;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;Ljava/lang/String;)V",
            "method_body": "protected Dfp(final DfpField field, final String s) {\nmant = new int[field.getRadixDigits()];\nsign = 1;\nexp = 0;\nnans = FINITE;\nthis.field = field;\nboolean decimalFound = false;\nfinal int rsize = 4;   // size of radix in decimal digits\nfinal int offset = 4;  // Starting offset into Striped\nfinal char[] striped = new char[getRadixDigits() * rsize + offset * 2];\nif (s.equals(POS_INFINITY_STRING)) {\nif (s.equals(NEG_INFINITY_STRING)) {\nif (s.equals(NAN_STRING)) {\nint p = s.indexOf(\"e\");\nif (p == -1) { // try upper case?\np = s.indexOf(\"E\");\nint sciexp = 0;\nif (p != -1) {\nfpdecimal = s.substring(0, p);\nString fpexp = s.substring(p+1);\nboolean negative = false;\nfor (int i=0; i<fpexp.length(); i++)\nif (fpexp.charAt(i) == '-')\nnegative = true;\ncontinue;\nif (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\nsciexp = sciexp * 10 + fpexp.charAt(i) - '0';\nif (negative) {\nsciexp = -sciexp;\n} else {\nfpdecimal = s;\nif (fpdecimal.indexOf(\"-\") !=  -1) {\nsign = -1;\np = 0;\nint decimalPos = 0;\nif (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\nbreak;\nif (decimalFound && fpdecimal.charAt(p) == '0') {\ndecimalPos--;\nif (fpdecimal.charAt(p) == '.') {\ndecimalFound = true;\np++;\nif (p == fpdecimal.length()) {\nbreak;\nint q = offset;\nstriped[0] = '0';\nstriped[1] = '0';\nstriped[2] = '0';\nstriped[3] = '0';\nint significantDigits=0;\nif (p == (fpdecimal.length())) {\nbreak;\nif (q == mant.length*rsize+offset+1) {\nbreak;\nif (fpdecimal.charAt(p) == '.') {\ndecimalFound = true;\ndecimalPos = significantDigits;\np++;\ncontinue;\nif (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\nstriped[q] = fpdecimal.charAt(p);\nq++;\np++;\nsignificantDigits++;\nif (decimalFound && q != offset) {\nq--;\nif (q == offset) {\nif (striped[q] == '0') {\nsignificantDigits--;\nif (decimalFound && significantDigits == 0) {\nif (!decimalFound) {\ndecimalPos = q-offset;\nq = offset;  // set q to point to first sig digit\np = significantDigits-1+offset;\nwhile (p > q) {\nif (striped[p] != '0') {\nbreak;\np--;\nint i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\nq -= i;\ndecimalPos += i;\nwhile ((p - q) < (mant.length * rsize)) {\nfor (i = 0; i < rsize; i++) {\nstriped[++p] = '0';\nfor (i = mant.length - 1; i >= 0; i--) {\nmant[i] = (striped[q]   - '0') * 1000 +\nq += 4;\nexp = (decimalPos+sciexp) / rsize;\nif (q < striped.length) {\nround((striped[q] - '0')*1000);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:newInstance(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp newInstance(final Dfp d) {\nif (field.getRadixDigits() != d.field.getRadixDigits()) {\nreturn new Dfp(d);\n}",
            "method_id": 19
        }
    ]
}