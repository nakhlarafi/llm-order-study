{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",
    "test_body": "public void testMath781() {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n36: ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\nconstraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\nconstraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n41: double epsilon = 1e-6;\nSimplexSolver solver = new SimplexSolver();\nPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n45: Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\nAssert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781(SimplexSolverTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optimization/GoalType;Z)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(final LinearObjectiveFunction f,\nthis.function          = f;\nthis.linearConstraints = constraints;\nthis.goal              = goalType;\nthis.nonNegative       = restrictToNonNegative;\niterations  = 0;\nreturn doOptimize();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON, DEFAULT_ULPS);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:<init>(DI)V",
            "method_body": "public SimplexSolver(final double epsilon, final int maxUlps) {\nthis.epsilon = epsilon;\nthis.maxUlps = maxUlps;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nwhile (!tableau.isOptimal()) {\ndoIteration(tableau);\nif (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.dropPhase1Objective();\nwhile (!tableau.isOptimal()) {\nreturn tableau.getSolution();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
            "method_body": "boolean isOptimal() {\nfor (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {\nfinal double entry = tableau.getEntry(0, i);\nif (Precision.compareTo(entry, 0d, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getHeight()I",
            "method_body": "protected final int getHeight() {\nreturn tableau.getRowDimension();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getWidth()I",
            "method_body": "protected final int getWidth() {\nreturn tableau.getColumnDimension();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getEntry(II)D",
            "method_body": "protected final double getEntry(final int row, final int column) {\nreturn tableau.getEntry(row, column);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getSlackVariableOffset()I",
            "method_body": "protected final int getSlackVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new ArrayRealVector(coefficients), constantTerm);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>(Lorg/apache/commons/math3/linear/RealVector;D)V",
            "method_body": "public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\nthis.coefficients = coefficients;\nthis.constantTerm = constantTerm;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:getCoefficients()Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:getConstantTerm()D",
            "method_body": "public double getConstantTerm() {\nreturn constantTerm;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>([DLorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final double[] coefficients, final Relationship relationship,\nthis(new ArrayRealVector(coefficients), relationship, value);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>(Lorg/apache/commons/math3/linear/RealVector;Lorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final RealVector coefficients, final Relationship relationship,\nfinal double value) {\nthis.coefficients = coefficients;\nthis.relationship = relationship;\nthis.value        = value;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getCoefficients()Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getRelationship()Lorg/apache/commons/math3/optimization/linear/Relationship;",
            "method_body": "public Relationship getRelationship() {\nreturn relationship;\n}",
            "method_id": 39
        }
    ]
}