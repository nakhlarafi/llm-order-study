{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021",
    "test_body": "public void testMath1021() {\nfinal int N = 43130568;\nfinal int m = 42976365;\nfinal int n = 50;\nfinal HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n295: for (int i = 0; i < 100; i++) {\nfinal int sample = dist.sample();\nAssert.assertTrue(\"sample=\" + sample, 0 <= sample);\nAssert.assertTrue(\"sample=\" + sample, sample <= n);",
    "stack_trace": "junit.framework.AssertionFailedError: sample=-50\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(HypergeometricDistributionTest.java:297)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\nfinal int w = 32;\nfinal int r = (k + w - 1) / w;\nthis.v      = new int[r];\nthis.index  = 0;\niRm1 = new int[r];\niRm2 = new int[r];\ni1   = new int[r];\ni2   = new int[r];\ni3   = new int[r];\nfor (int j = 0; j < r; ++j) {\niRm1[j] = (j + r - 1) % r;\niRm2[j] = (j + r - 2) % r;\ni1[j]   = (j + m1)    % r;\ni2[j]   = (j + m2)    % r;\ni3[j]   = (j + m3)    % r;\nsetSeed(seed);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\nsetSeed(System.currentTimeMillis() + System.identityHashCode(this));\nreturn;\nSystem.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\nif (seed.length < v.length) {\nfor (int i = seed.length; i < v.length; ++i) {\nfinal long l = v[i - seed.length];\nv[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\nindex = 0;\nclear();  // Clear normal deviate cache\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 26
        }
    ]
}