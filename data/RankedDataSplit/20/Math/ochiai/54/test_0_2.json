{
    "bug_id": 54,
    "test_id": 0,
    "test_name": "org.apache.commons.math.dfp.DfpTest.testIssue567",
    "test_body": "public void testIssue567() {\nDfpField field = new DfpField(100);\nAssert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);\nAssert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<-Infinity>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.dfp.DfpTest.testIssue567(DfpTest.java:1512)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object other) {\nif (other instanceof Dfp) {\nfinal Dfp x = (Dfp) other;\nif (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\nreturn compare(this, x) == 0;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:unequal(Lorg/apache/commons/math/dfp/Dfp;)Z",
            "method_body": "public boolean unequal(final Dfp x) {\nif (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\nreturn greaterThan(x) || lessThan(x);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:compare(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)I",
            "method_body": "private static int compare(final Dfp a, final Dfp b) {\nif (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\nreturn 0;\nif (a.sign != b.sign) {\nif (a.nans == INFINITE && b.nans == FINITE) {\nif (a.nans == FINITE && b.nans == INFINITE) {\nif (a.nans == INFINITE && b.nans == INFINITE) {\nif (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\nif (a.exp < b.exp) {\nreturn -a.sign;\nif (a.exp > b.exp) {\nreturn a.sign;\nfor (int i = a.mant.length - 1; i >= 0; i--) {\nif (a.mant[i] > b.mant[i]) {\nreturn a.sign;\nif (a.mant[i] < b.mant[i]) {\nreturn -a.sign;\nreturn 0;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:complement(I)I",
            "method_body": "protected int complement(int extra) {\nextra = RADIX-extra;\nfor (int i = 0; i < mant.length; i++) {\nmant[i] = RADIX-mant[i]-1;\nint rh = extra / RADIX;\nextra = extra - rh * RADIX;\nfor (int i = 0; i < mant.length; i++) {\nfinal int r = mant[i] + rh;\nrh = r / RADIX;\nmant[i] = r - rh * RADIX;\nreturn extra;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:add(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp add(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\nif (nans != FINITE || x.nans != FINITE) {\nDfp a = newInstance(this);\nDfp b = newInstance(x);\nDfp result = newInstance(getZero());\nfinal byte asign = a.sign;\nfinal byte bsign = b.sign;\na.sign = 1;\nb.sign = 1;\nbyte rsign = bsign;\nif (compare(a, b) > 0) {\nrsign = asign;\nif (b.mant[mant.length-1] == 0) {\nb.exp = a.exp;\nif (a.mant[mant.length-1] == 0) {\na.exp = b.exp;\nint aextradigit = 0;\nint bextradigit = 0;\nif (a.exp < b.exp) {\naextradigit = a.align(b.exp);\nbextradigit = b.align(a.exp);\nif (asign != bsign) {\nif (asign == rsign) {\nbextradigit = b.complement(bextradigit);\naextradigit = a.complement(aextradigit);\nint rh = 0; /* acts as a carry */\nfor (int i = 0; i < mant.length; i++) {\nfinal int r = a.mant[i]+b.mant[i]+rh;\nrh = r / RADIX;\nresult.mant[i] = r - rh * RADIX;\nresult.exp = a.exp;\nresult.sign = rsign;\nif (rh != 0 && (asign == bsign)) {\nfinal int lostdigit = result.mant[0];\nresult.shiftRight();\nresult.mant[mant.length-1] = rh;\nfinal int excp = result.round(lostdigit);\nif (excp != 0) {\nresult = dotrap(excp, ADD_TRAP, x, result);\nfor (int i = 0; i < mant.length; i++) {\nif (result.mant[mant.length-1] != 0) {\nbreak;\nresult.shiftLeft();\nif (i == 0) {\nresult.mant[0] = aextradigit+bextradigit;\naextradigit = 0;\nbextradigit = 0;\nif (result.mant[mant.length-1] == 0) {\nresult.exp = 0;\nif (asign != bsign) {\nresult.sign = 1;  // Per IEEE 854-1987 Section 6.3\nfinal int excp = result.round(aextradigit + bextradigit);\nif (excp != 0) {\nresult = dotrap(excp, ADD_TRAP, x, result);\nreturn result;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:negate()Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp negate() {\nDfp result = newInstance(this);\nresult.sign = (byte) - result.sign;\nreturn result;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:subtract(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp subtract(final Dfp x) {\nreturn add(x.negate());\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:round(I)I",
            "method_body": "protected int round(int n) {\nboolean inc = false;\nswitch (field.getRoundingMode()) {\ninc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\nbreak;\nif (inc) {\nint rh = 1;\nfor (int i = 0; i < mant.length; i++) {\nfinal int r = mant[i] + rh;\nrh = r / RADIX;\nmant[i] = r - rh * RADIX;\nif (rh != 0) {\nif (exp < MIN_EXP) {\nif (exp > MAX_EXP) {\nif (n != 0) {\nfield.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\nreturn DfpField.FLAG_INEXACT;\nreturn 0;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:multiply(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp multiply(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\nDfp result = newInstance(getZero());\nif (nans != FINITE || x.nans != FINITE) {\nint[] product = new int[mant.length*2];  // Big enough to hold even the largest result\nfor (int i = 0; i < mant.length; i++) {\nint rh = 0;  // acts as a carry\nfor (int j=0; j<mant.length; j++) {\nint r = mant[i] * x.mant[j];    // multiply the 2 digits\nr = r + product[i+j] + rh;  // add to the product digit with carry in\nrh = r / RADIX;\nproduct[i+j] = r - rh * RADIX;\nproduct[i+mant.length] = rh;\nint md = mant.length * 2 - 1;  // default, in case result is zero\nfor (int i = mant.length * 2 - 1; i >= 0; i--) {\nif (product[i] != 0) {\nmd = i;\nbreak;\nfor (int i = 0; i < mant.length; i++) {\nresult.mant[mant.length - i - 1] = product[md - i];\nresult.exp = exp + x.exp + md - 2 * mant.length + 1;\nresult.sign = (byte)((sign == x.sign)?1:-1);\nif (result.mant[mant.length-1] == 0) {\nresult.exp = 0;\nif (md > (mant.length-1)) {\nexcp = result.round(product[md-mant.length]);\nif (excp != 0) {\nresult = dotrap(excp, MULTIPLY_TRAP, x, result);\nreturn result;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:divide(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp divide(Dfp divisor) {\nint trial=0;    // trial quotient digit\nint md=0;       // most sig digit in result\nif (field.getRadixDigits() != divisor.field.getRadixDigits()) {\nDfp result = newInstance(getZero());\nif (nans != FINITE || divisor.nans != FINITE) {\nif (divisor.mant[mant.length-1] == 0) {\nfield.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\nresult = newInstance(getZero());\nresult.sign = (byte) (sign * divisor.sign);\nresult.nans = INFINITE;\nresult = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\nreturn result;\ndividend = new int[mant.length+1];  // one extra digit needed\nquotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\nremainder = new int[mant.length+1]; // one extra digit needed\ndividend[mant.length] = 0;\nquotient[mant.length] = 0;\nquotient[mant.length+1] = 0;\nremainder[mant.length] = 0;\nfor (int i = 0; i < mant.length; i++) {\ndividend[i] = mant[i];\nquotient[i] = 0;\nremainder[i] = 0;\nnsqd = 0;\nfor (qd = mant.length+1; qd >= 0; qd--) {\nfinal int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\nint min = divMsb       / (divisor.mant[mant.length-1]+1);\nint max = (divMsb + 1) / divisor.mant[mant.length-1];\ntrialgood = false;\nwhile (!trialgood) {\ntrial = (min+max)/2;\nint rh = 0;\nfor (int i = 0; i < mant.length + 1; i++) {\nint dm = (i<mant.length)?divisor.mant[i]:0;\nfinal int r = (dm * trial) + rh;\nrh = r / RADIX;\nremainder[i] = r - rh * RADIX;\nrh = 1;  // carry in to aid the subtraction\nfor (int i = 0; i < mant.length + 1; i++) {\nfinal int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\nrh = r / RADIX;\nremainder[i] = r - rh * RADIX;\nif (rh == 0) {\nmax = trial-1;\ncontinue;\nminadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\nminadj = minadj / (divisor.mant[mant.length-1]+1);\nif (minadj >= 2) {\nmin = trial+minadj;  // update the minimum\ncontinue;\ntrialgood = false;  // assume false\nfor (int i = mant.length - 1; i >= 0; i--) {\nif (divisor.mant[i] > remainder[i]) {\ntrialgood = true;\nif (divisor.mant[i] < remainder[i]) {\nbreak;\nif (remainder[mant.length] != 0) {\ntrialgood = false;\nif (trialgood == false) {\nmin = trial+1;\n}\nquotient[qd] = trial;\nif (trial != 0 || nsqd != 0) {\nnsqd++;\nif (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\nif (nsqd > mant.length) {\nbreak;\ndividend[0] = 0;\nfor (int i = 0; i < mant.length; i++) {\ndividend[i + 1] = remainder[i];\nmd = mant.length;  // default\nfor (int i = mant.length + 1; i >= 0; i--) {\nif (quotient[i] != 0) {\nmd = i;\nbreak;\nfor (int i=0; i<mant.length; i++) {\nresult.mant[mant.length-i-1] = quotient[md-i];\nresult.exp = exp - divisor.exp + md - mant.length;\nresult.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\nif (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\nresult.exp = 0;\nif (md > (mant.length-1)) {\nexcp = result.round(quotient[md-mant.length]);\nif (excp != 0) {\nresult = dotrap(excp, DIVIDE_TRAP, divisor, result);\nreturn result;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:divide(I)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp divide(int divisor) {\nif (nans != FINITE) {\nif (divisor == 0) {\nif (divisor < 0 || divisor >= RADIX) {\nDfp result = newInstance(this);\nint rl = 0;\nfor (int i = mant.length-1; i >= 0; i--) {\nfinal int r = rl*RADIX + result.mant[i];\nfinal int rh = r / divisor;\nrl = r - rh * divisor;\nresult.mant[i] = rh;\nif (result.mant[mant.length-1] == 0) {\nresult.shiftLeft();\nfinal int r = rl * RADIX;        // compute the next digit and put it in\nfinal int rh = r / divisor;\nrl = r - rh * divisor;\nresult.mant[0] = rh;\nfinal int excp = result.round(rl * RADIX / divisor);  // do the rounding\nif (excp != 0) {\nresult = dotrap(excp, DIVIDE_TRAP, result, result);\nreturn result;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:sqrt()Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp sqrt() {\nif (nans == FINITE && mant[mant.length-1] == 0) {\nif (nans != FINITE) {\nif (sign == -1) {\nDfp x = newInstance(this);\nif (x.exp < -1 || x.exp > 1) {\nswitch (x.mant[mant.length-1] / 2000) {\nx.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\nbreak;\nx.mant[mant.length-1] = 3000;\nDfp dx = newInstance(x);\nDfp px  = getZero();\nDfp ppx = getZero();\nwhile (x.unequal(px)) {\ndx = newInstance(x);\ndx.sign = -1;\ndx = dx.add(this.divide(x));\ndx = dx.divide(2);\nppx = px;\npx = x;\nx = x.add(dx);\nif (x.equals(ppx)) {\nif (dx.mant[mant.length-1] == 0) {\nbreak;\nreturn x;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nif (nans != FINITE) {\nif (exp > mant.length || exp < -1) {\nreturn dfp2string();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:dfp2string()Ljava/lang/String;",
            "method_body": "protected String dfp2string() {\nchar buffer[] = new char[mant.length*4 + 20];\nint p = 1;\nint e = exp;\nboolean pointInserted = false;\nbuffer[0] = ' ';\nif (e <= 0) {\nbuffer[p++] = '0';\nbuffer[p++] = '.';\npointInserted = true;\nwhile (e < 0) {\nfor (int i = mant.length - 1; i >= 0; i--) {\nbuffer[p++] = (char) ((mant[i] / 1000) + '0');\nbuffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\nbuffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\nbuffer[p++] = (char) (((mant[i]) % 10) + '0');\nif (--e == 0) {\nbuffer[p++] = '.';\npointInserted = true;\nwhile (e > 0) {\nif (!pointInserted) {\nq = 1;\nwhile (buffer[q] == '0') {\nq++;\nif (buffer[q] == '.') {\nq--;\nwhile (buffer[p-1] == '0') {\np--;\nif (sign < 0) {\nbuffer[--q] = '-';\nreturn new String(buffer, q, p - q);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\nDfp def = result;\nswitch (type) {\nif (nans == FINITE && mant[mant.length-1] != 0) {\ndef = newInstance(getZero());\ndef.sign = (byte)(sign*oper.sign);\ndef.nans = INFINITE;\nif (nans == FINITE && mant[mant.length-1] == 0) {\ndef = newInstance(getZero());\ndef.nans = QNAN;\nif (nans == INFINITE || nans == QNAN) {\nif (nans == INFINITE || nans == SNAN) {\ndefault: def = result; break;\nreturn trap(type, what, oper, def, result);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:trap(ILjava/lang/String;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\nreturn def;\n}",
            "method_id": 55
        }
    ]
}