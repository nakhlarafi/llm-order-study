{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "public void testMath785() {\n// this test was failing due to inaccurate results from ContinuedFraction.\n150: try {\ndouble prob = 0.01;\nFDistribution f = new FDistribution(200000, 200000);\ndouble result = f.inverseCumulativeProbability(prob);\nAssert.assertTrue(result < 1.0);\n} catch (Exception e) {\nAssert.fail(\"Failing to calculate inverse cumulative probability\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.distribution.FDistributionTest.testMath785(FDistributionTest.java:156)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSolverAbsoluteAccuracy()D",
            "method_body": "protected double getSolverAbsoluteAccuracy() {\nreturn solverAbsoluteAccuracy;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumeratorDegreesOfFreedom()D",
            "method_body": "public double getNumeratorDegreesOfFreedom() {\nreturn numeratorDegreesOfFreedom;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\nif (denominatorDF > 2) {\nreturn denominatorDF / (denominatorDF - 2);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nif (!numericalVarianceIsCalculated) {\nnumericalVariance = calculateNumericalVariance();\nnumericalVarianceIsCalculated = true;\nreturn numericalVariance;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:calculateNumericalVariance()D",
            "method_body": "protected double calculateNumericalVariance() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\nif (denominatorDF > 4) {\nfinal double numeratorDF = getNumeratorDegreesOfFreedom();\nfinal double denomDFMinusTwo = denominatorDF - 2;\nreturn ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
            "method_body": "public double getSupportLowerBound() {\nreturn 0;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportUpperBound()D",
            "method_body": "public double getSupportUpperBound() {\nreturn Double.POSITIVE_INFINITY;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getDenominatorDegreesOfFreedom()D",
            "method_body": "public double getDenominatorDegreesOfFreedom() {\nreturn denominatorDegreesOfFreedom;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x)  {\nif (x <= 0) {\nret = 0;\ndouble n = numeratorDegreesOfFreedom;\ndouble m = denominatorDegreesOfFreedom;\nret = Beta.regularizedBeta((n * x) / (m + n * x),\nreturn ret;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthrows NotStrictlyPositiveException {\nif (numeratorDegreesOfFreedom <= 0) {\nif (denominatorDegreesOfFreedom <= 0) {\nthis.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;\nthis.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b) {\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nreturn ret;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\ndouble hPrev = getA(0, x);\n\n// use the value of small as epsilon criteria for zero checks\nif (Precision.equals(hPrev, 0.0, small)) {\nhPrev = small;\n}\n\nint n = 1;\ndouble dPrev = 0.0;\ndouble p0 = 1.0;\ndouble q1 = 1.0;\ndouble cPrev = hPrev;\ndouble hN = hPrev;\n\nhN = cPrev * deltaN;\nif (Double.isNaN(hN)) {\nx);\nbreak;\ndPrev = q1;\ncPrev = cN / q2;\np0 = hPrev;\nhPrev = cN;\nq1 = q2;\nn++;\n\n\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution$1:value(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:solve(Lorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public static double solve(UnivariateFunction function,\nif (function == null) {\nfinal UnivariateSolver solver = new BrentSolver(absoluteAccuracy);\nreturn solver.solve(Integer.MAX_VALUE, function, x0, x1);\n}",
            "method_id": 19
        }
    ]
}