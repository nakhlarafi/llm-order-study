{
    "bug_id": 95,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom",
    "test_body": "public void testSmallDegreesOfFreedom() throws Exception {\norg.apache.commons.math.distribution.FDistributionImpl fd =\nnew org.apache.commons.math.distribution.FDistributionImpl(\n1.0, 1.0);\ndouble p = fd.cumulativeProbability(0.975);\ndouble x = fd.inverseCumulativeProbability(p);\nassertEquals(0.975, x, 1.0e-5);",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308\nat org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)\nat org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)\nat org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)\nat org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)\nat org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\nsum = sum + lanczos[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 23
        }
    ]
}