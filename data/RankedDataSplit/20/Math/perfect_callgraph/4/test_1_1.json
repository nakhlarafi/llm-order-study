{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting",
    "test_body": "public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\nSubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\nSubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\nAssert.assertNull(sub1.intersection(sub2, true));\nAssert.assertNull(sub1.intersection(sub2, false));",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa(Line.java:114)\nat org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace(Line.java:129)\nat org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection(SubLine.java:116)\nat org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting(SubLineTest.java:160)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:contains(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Z",
            "method_body": "public boolean contains(final Vector3D p) {\nreturn distance(p) < 1.0e-10;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D intersection(final Line line) {\nfinal Vector3D closest = closestPoint(line);\nreturn line.contains(closest) ? closest : null;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:<init>(Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;Z)V",
            "method_body": "public OrientedPoint(final Vector1D location, final boolean direct) {\nthis.location = location;\nthis.direct   = direct;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
            "method_body": "public Vector1D toSubSpace(final Vector<Euclidean3D> point) {\nreturn new Vector1D(getAbscissa((Vector3D) point));\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.partitioning.BSPTree:<init>(Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Ljava/lang/Object;)V",
            "method_body": "public BSPTree(final SubHyperplane<S> cut, final BSPTree<S> plus, final BSPTree<S> minus,\nfinal Object attribute) {\nthis.cut       = cut;\nthis.plus      = plus;\nthis.minus     = minus;\nthis.parent    = null;\nthis.attribute = attribute;\nplus.parent    = this;\nminus.parent   = this;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.partitioning.AbstractRegion:<init>(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;)V",
            "method_body": "protected AbstractRegion(final BSPTree<S> tree) {\nthis.tree = tree;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLine:<init>(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;Lorg/apache/commons/math3/geometry/euclidean/oned/IntervalsSet;)V",
            "method_body": "public SubLine(final Line line, final IntervalsSet remainingRegion) {\nthis.line            = line;\nthis.remainingRegion = remainingRegion;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:closestPoint(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D closestPoint(final Line line) {\nfinal double cos = direction.dotProduct(line.direction);\nfinal double n = 1 - cos * cos;\nif (n < Precision.EPSILON) {\nfinal Vector3D delta0 = line.zero.subtract(zero);\nfinal double a        = delta0.dotProduct(direction);\nfinal double b        = delta0.dotProduct(line.direction);\nreturn new Vector3D(1, zero, (a - b * cos) / n, direction);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:<init>(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V",
            "method_body": "protected AbstractSubHyperplane(final Hyperplane<S> hyperplane,\nfinal Region<T> remainingRegion) {\nthis.hyperplane      = hyperplane;\nthis.remainingRegion = remainingRegion;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:getAbscissa(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D",
            "method_body": "public double getAbscissa(final Vector3D point) {\nreturn point.subtract(zero).dotProduct(direction);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNormSq()D",
            "method_body": "public double getNormSq() {\nreturn x * x + y * y + z * z;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLine:<init>(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public SubLine(final Vector3D start, final Vector3D end)\nthis(new Line(start, end), buildIntervalSet(start, end));\n}",
            "method_id": 32
        }
    ]
}