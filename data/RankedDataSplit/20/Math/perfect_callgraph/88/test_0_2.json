{
    "bug_id": 88,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272",
    "test_body": "public void testMath272() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n42: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n45: assertEquals(0.0, solution.getPoint()[0], .0000001);\nassertEquals(1.0, solution.getPoint()[1], .0000001);\nassertEquals(1.0, solution.getPoint()[2], .0000001);\nassertEquals(3.0, solution.getValue(), .0000001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272(SimplexSolverTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getArtificialVariableOffset()I",
            "method_body": "protected final int getArtificialVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(pivotCol, tableau);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nwhile (!isPhase1Solved(tableau)) {\ndoIteration(tableau);\nif (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
            "method_body": "private void initialize() {\nfor (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\nint row = getBasicRow(getArtificialVariableOffset() + artificialVar);\nsubtractRow(0, row, 1.0);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math/optimization/linear/LinearConstraint;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;",
            "method_body": "private LinearConstraint normalize(final LinearConstraint constraint) {\nif (constraint.getValue() < 0) {\nreturn new LinearConstraint(constraint.getCoefficients(),\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.discardArtificialVariables();\nwhile (!isOptimal(tableau)) {\nreturn tableau.getSolution();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final LinearObjectiveFunction f,\nthis.f                     = f;\nthis.constraints           = constraints;\nthis.goalType              = goalType;\nthis.restrictToNonNegative = restrictToNonNegative;\niterations = 0;\nreturn doOptimize();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
            "method_body": "public boolean isOptimal(final SimplexTableau tableau) {\nif (tableau.getNumArtificialVariables() > 0) {\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\nreturn true;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y) || (Math.abs(y - x) <= eps);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getEntry(II)D",
            "method_body": "protected final double getEntry(final int row, final int column) {\nreturn tableau.getEntry(row, column);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:copyArray([D[DI)V",
            "method_body": "private void copyArray(final double[] src, final double[] dest,\nSystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D",
            "method_body": "public double getValue(final double[] point) {\nreturn coefficients.dotProduct(point) + constantTerm;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:<init>(Lorg/apache/commons/math/linear/RealVector;Lorg/apache/commons/math/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final RealVector coefficients, final Relationship relationship,\nfinal double value) {\nthis.coefficients = coefficients;\nthis.relationship = relationship;\nthis.value        = value;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn ((Double.isNaN(x) && Double.isNaN(y)) || x == y);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:<init>([DLorg/apache/commons/math/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final double[] coefficients, final Relationship relationship,\nthis(new RealVectorImpl(coefficients), relationship, value);\n}",
            "method_id": 59
        }
    ]
}