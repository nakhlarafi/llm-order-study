{
    "bug_id": 67,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer();\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053l);\nMultiStartUnivariateRealOptimizer minimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\nminimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\nminimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n68: try {\nminimizer.getOptima();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\ntry {\nminimizer.getOptimaValues();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n85: assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\nassertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\nassertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nthis.maxIterations = count;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$5:<init>(Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalStateException createIllegalStateException(final Localizable pattern,\nreturn new IllegalStateException() {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:<init>(Lorg/apache/commons/math/optimization/UnivariateRealOptimizer;ILorg/apache/commons/math/random/RandomGenerator;)V",
            "method_body": "public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,\nfinal RandomGenerator generator) {\nthis.optimizer        = optimizer;\nthis.totalIterations  = 0;\nthis.starts           = starts;\nthis.generator        = generator;\nthis.optima           = null;\nsetMaximalIterationCount(Integer.MAX_VALUE);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getFunctionValue()D",
            "method_body": "public double getFunctionValue() {\ncheckResultComputed();\nreturn functionValue;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDD)D",
            "method_body": "private double localMin(final UnivariateRealFunction f, final GoalType goalType,\ndouble x = a + GOLDEN_SECTION * (b - a);\ndouble v = x;\ndouble w = x;\ndouble e = 0;\ndouble fx = computeObjectiveValue(f, x);\nif (goalType == GoalType.MAXIMIZE) {\ndouble fv = fx;\ndouble fw = fx;\nint count = 0;\nwhile (count < maximalIterationCount) {\ndouble m = 0.5 * (a + b);\ndouble tol = eps * Math.abs(x) + t;\ndouble t2 = 2 * tol;\nif (Math.abs(x - m) > t2 - 0.5 * (b - a)) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble d = 0;\ndouble u = 0;\nif (Math.abs(e) > tol) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (Math.abs(p) < Math.abs(0.5 * q * r) &&\ne = ((x < m) ? b : a) - x;\nd = GOLDEN_SECTION * e;\nu = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));\ndouble fu = computeObjectiveValue(f, u);\nif (goalType == GoalType.MAXIMIZE) {\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif ((fu <= fw) || (w == x)) {\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else if ((fu <= fv) || (v == x) || (v == w)) {\nv = u;\nfv = fu;\n} else { // termination\nsetResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\nreturn x;\n++count;\n}\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:checkResultComputed()V",
            "method_body": "protected void checkResultComputed() throws IllegalStateException {\nif (!resultComputed) {\n}",
            "method_id": 31
        }
    ]
}