{
    "bug_id": 54,
    "test_id": 0,
    "test_name": "org.apache.commons.math.dfp.DfpTest.testIssue567",
    "test_body": "public void testIssue567() {\nDfpField field = new DfpField(100);\nAssert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);\nAssert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<-Infinity>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.dfp.DfpTest.testIssue567(DfpTest.java:1512)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:rint()Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp rint() {\nreturn trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:compare(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)I",
            "method_body": "private static int compare(final Dfp a, final Dfp b) {\nif (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\nreturn 0;\nif (a.sign != b.sign) {\nif (a.nans == INFINITE && b.nans == FINITE) {\nif (a.nans == FINITE && b.nans == INFINITE) {\nif (a.nans == INFINITE && b.nans == INFINITE) {\nif (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\nif (a.exp < b.exp) {\nreturn -a.sign;\nif (a.exp > b.exp) {\nreturn a.sign;\nfor (int i = a.mant.length - 1; i >= 0; i--) {\nif (a.mant[i] > b.mant[i]) {\nreturn a.sign;\nif (a.mant[i] < b.mant[i]) {\nreturn -a.sign;\nreturn 0;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:getRoundingMode()Lorg/apache/commons/math/dfp/DfpField$RoundingMode;",
            "method_body": "public RoundingMode getRoundingMode() {\nreturn rMode;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpMath:pow(Lorg/apache/commons/math/dfp/Dfp;I)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public static Dfp pow(Dfp base, int a)\nboolean invert = false;\nDfp result = base.getOne();\nif (a == 0) {\nif (a < 0) {\ninvert = true;\na = -a;\nDfp r = new Dfp(base);\nint trial = 1;\nprevr = new Dfp(r);\nprevtrial = trial;\nr = r.multiply(r);\ntrial = trial * 2;\n} while (a>trial);\nr = prevr;\ntrial = prevtrial;\na = a - trial;\nresult = result.multiply(r);\n} while (a >= 1);\nif (invert) {\nresult = base.getOne().divide(result);\nreturn base.newInstance(result);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:newDfp(BB)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp newDfp(final byte sign, final byte nans) {\nreturn new Dfp(this, sign, nans);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn radixDigits;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:unequal(Lorg/apache/commons/math/dfp/Dfp;)Z",
            "method_body": "public boolean unequal(final Dfp x) {\nif (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\nreturn greaterThan(x) || lessThan(x);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:newInstance(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp newInstance(final Dfp d) {\nif (field.getRadixDigits() != d.field.getRadixDigits()) {\nreturn new Dfp(d);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:shiftLeft()V",
            "method_body": "protected void shiftLeft() {\nfor (int i = mant.length - 1; i > 0; i--) {\nmant[i] = mant[i-1];\nmant[0] = 0;\nexp--;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/Dfp;)V",
            "method_body": "public Dfp(final Dfp d) {\nmant  = d.mant.clone();\nsign  = d.sign;\nexp   = d.exp;\nnans  = d.nans;\nfield = d.field;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:computePi(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) {\nDfp sqrt2   = two.sqrt();\nDfp yk      = sqrt2.subtract(one);\nDfp four    = two.add(two);\nDfp two2kp3 = two;\nDfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));\nfor (int i = 1; i < 20; i++) {\nfinal Dfp ykM1 = yk;\nfinal Dfp y2         = yk.multiply(yk);\nfinal Dfp oneMinusY4 = one.subtract(y2.multiply(y2));\nfinal Dfp s          = oneMinusY4.sqrt().sqrt();\nyk = one.subtract(s).divide(one.add(s));\ntwo2kp3 = two2kp3.multiply(four);\nfinal Dfp p = one.add(yk);\nfinal Dfp p2 = p.multiply(p);\nak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));\nif (yk.equals(ykM1)) {\nbreak;\nreturn one.divide(ak);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:computeLn(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) {\nint den = 1;\nDfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));\nDfp y = new Dfp(x);\nDfp num = new Dfp(x);\nDfp py = new Dfp(y);\nfor (int i = 0; i < 10000; i++) {\nnum = num.multiply(x);\nnum = num.multiply(x);\nden = den + 2;\nDfp t = num.divide(den);\ny = y.add(t);\nif (y.equals(py)) {\nbreak;\npy = new Dfp(y);\nreturn y.multiply(two);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:clearIEEEFlags()V",
            "method_body": "public void clearIEEEFlags() {\nieeeFlags = 0;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\nDfp def = result;\nswitch (type) {\nif (nans == FINITE && mant[mant.length-1] != 0) {\ndef = newInstance(getZero());\ndef.sign = (byte)(sign*oper.sign);\ndef.nans = INFINITE;\nif (nans == FINITE && mant[mant.length-1] == 0) {\ndef = newInstance(getZero());\ndef.nans = QNAN;\nif (nans == INFINITE || nans == QNAN) {\nif (nans == INFINITE || nans == SNAN) {\ndefault: def = result; break;\nreturn trap(type, what, oper, def, result);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\nmant = new int[field.getRadixDigits()];\nnans = FINITE;\nthis.field = field;\nboolean isLongMin = false;\nif (x == Long.MIN_VALUE) {\nif (x < 0) {\nsign = -1;\nx = -x;\nsign = 1;\nexp = 0;\nwhile (x != 0) {\nSystem.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\nmant[mant.length - 1] = (int) (x % RADIX);\nx /= RADIX;\nexp++;\nif (isLongMin) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn (nans == QNAN) || (nans == SNAN);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\nthis.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;\nthis.rMode       = RoundingMode.ROUND_HALF_EVEN;\nthis.ieeeFlags   = 0;\nthis.zero        = new Dfp(this, 0);\nthis.one         = new Dfp(this, 1);\nthis.two         = new Dfp(this, 2);\nif (computeConstants) {\nsynchronized (DfpField.class) {\ncomputeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));\nsqr2           = new Dfp(this, sqr2String);\nsqr2Split      = split(sqr2String);\nsqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);\nsqr3           = new Dfp(this, sqr3String);\nsqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);\npi             = new Dfp(this, piString);\npiSplit        = split(piString);\ne              = new Dfp(this, eString);\neSplit         = split(eString);\nln2            = new Dfp(this, ln2String);\nln2Split       = split(ln2String);\nln5            = new Dfp(this, ln5String);\nln5Split       = split(ln5String);\nln10           = new Dfp(this, ln10String);\n}\nsqr2           = null;\nsqr2Split      = null;\nsqr2Reciprocal = null;\nsqr3           = null;\nsqr3Reciprocal = null;\npi             = null;\npiSplit        = null;\ne              = null;\neSplit         = null;\nln2            = null;\nln2Split       = null;\nln5            = null;\nln5Split       = null;\nln10           = null;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:multiply(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "public Dfp multiply(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\nDfp result = newInstance(getZero());\nif (nans != FINITE || x.nans != FINITE) {\nint[] product = new int[mant.length*2];  // Big enough to hold even the largest result\nfor (int i = 0; i < mant.length; i++) {\nint rh = 0;  // acts as a carry\nfor (int j=0; j<mant.length; j++) {\nint r = mant[i] * x.mant[j];    // multiply the 2 digits\nr = r + product[i+j] + rh;  // add to the product digit with carry in\nrh = r / RADIX;\nproduct[i+j] = r - rh * RADIX;\nproduct[i+mant.length] = rh;\nint md = mant.length * 2 - 1;  // default, in case result is zero\nfor (int i = mant.length * 2 - 1; i >= 0; i--) {\nif (product[i] != 0) {\nmd = i;\nbreak;\nfor (int i = 0; i < mant.length; i++) {\nresult.mant[mant.length - i - 1] = product[md - i];\nresult.exp = exp + x.exp + md - 2 * mant.length + 1;\nresult.sign = (byte)((sign == x.sign)?1:-1);\nif (result.mant[mant.length-1] == 0) {\nresult.exp = 0;\nif (md > (mant.length-1)) {\nexcp = result.round(product[md-mant.length]);\nif (excp != 0) {\nresult = dotrap(excp, MULTIPLY_TRAP, x, result);\nreturn result;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:trap(ILjava/lang/String;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\nreturn def;\n}",
            "method_id": 39
        }
    ]
}