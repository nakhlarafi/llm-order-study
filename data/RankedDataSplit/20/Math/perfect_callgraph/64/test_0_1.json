{
    "bug_id": 64,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackJennrichSampson",
    "test_body": "public void testMinpackJennrichSampson() {\nminpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n64.5856498144943, 11.1517793413499,",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.2578199266368004> but was:<0.2578330049004441>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:576)\nat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:504)\nat org.apache.commons.math.optimization.general.MinpackTest.testMinpackJennrichSampson(MinpackTest.java:325)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
            "method_body": "protected void updateJacobian() throws FunctionEvaluationException {\n++jacobianEvaluations;\njacobian = jF.value(point);\nif (jacobian.length != rows) {\nfor (int i = 0; i < rows; i++) {\nfinal double[] ji = jacobian[i];\nfinal double factor = -Math.sqrt(residualsWeights[i]);\nfor (int j = 0; j < cols; ++j) {\nji[j] *= factor;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
            "method_body": "public double getRMS() {\nreturn Math.sqrt(getChiSquare() / rows);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.VectorialPointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn point;\n}",
            "method_id": 23
        }
    ]
}