{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "public void testExtremeValues() throws Exception {\nNormalDistribution distribution = new NormalDistributionImpl(0, 1);\nfor (int i = 0; i < 100; i++) { // make sure no convergence exception\ndouble lowerTail = distribution.cumulativeProbability(-i);\ndouble upperTail = distribution.cumulativeProbability(i);\nif (i < 9) { // make sure not top-coded \n// For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n// TODO: once MATH-364 is resolved, replace 9 with 30\nassertTrue(lowerTail > 0.0d);\nassertTrue(upperTail < 1.0d);\n}\nelse { // make sure top coding not reversed\nassertTrue(lowerTail < 0.00001);\nassertTrue(upperTail > 0.99999);\n}\n}\n174: assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\nassertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);",
    "stack_trace": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e\nat org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)\nat org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)\nat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)\nat org.apache.commons.math.special.Erf.erf(Erf.java:51)\nat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)\nat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 21
        }
    ]
}