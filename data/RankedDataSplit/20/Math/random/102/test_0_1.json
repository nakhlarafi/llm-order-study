{
    "bug_id": 102,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setAlpha(D)V",
            "method_body": "public void setAlpha(double alpha) {\nif (alpha <= 0.0) {\nthis.alpha = alpha;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setBeta(D)V",
            "method_body": "public void setBeta(double beta) {\nif (beta <= 0.0) {\nthis.beta = beta;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:setDistribution(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public void setDistribution(ChiSquaredDistribution value) {\ndistribution = value;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\ndouble p1 = getA(0, x);\ndouble q0 = 0.0;\ndouble q1 = 1.0;\ndouble c = p1 / q1;\nint n = 0;\ndouble relativeError = Double.MAX_VALUE;\nwhile (n < maxIterations && relativeError > epsilon) {\n++n;\ndouble a = getA(n, x);\ndouble b = getB(n, x);\ndouble p2 = a * p1 + b * p0;\ndouble q2 = a * q1 + b * q0;\nif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\ndouble r = p2 / q2;\nrelativeError = Math.abs(r / c - 1.0);\nc = p2 / q2;\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\n}\nif (n >= maxIterations) {\nreturn c;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n}",
            "method_id": 29
        }
    ]
}