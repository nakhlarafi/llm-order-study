{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\nrandom = rng;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\nsetSeed(System.currentTimeMillis() + System.identityHashCode(this));\nreturn;\nSystem.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\nif (seed.length < v.length) {\nfor (int i = seed.length; i < v.length; ++i) {\nfinal long l = v[i - seed.length];\nv[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\nindex = 0;\nclear();  // Clear normal deviate cache\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:invGamma1pm1(D)D",
            "method_body": "public static double invGamma1pm1(final double x) {\nif (x < -0.5) {\nif (x > 1.5) {\nfinal double t = x <= 0.5 ? x : (x - 0.5) - 0.5;\nif (t < 0.0) {\ndouble p = INV_GAMMA1P_M1_P6;\np = INV_GAMMA1P_M1_P5 + t * p;\np = INV_GAMMA1P_M1_P4 + t * p;\np = INV_GAMMA1P_M1_P3 + t * p;\np = INV_GAMMA1P_M1_P2 + t * p;\np = INV_GAMMA1P_M1_P1 + t * p;\np = INV_GAMMA1P_M1_P0 + t * p;\ndouble q = INV_GAMMA1P_M1_Q4;\nq = INV_GAMMA1P_M1_Q3 + t * q;\nq = INV_GAMMA1P_M1_Q2 + t * q;\nq = INV_GAMMA1P_M1_Q1 + t * q;\nq = 1.0 + t * q;\ndouble c = INV_GAMMA1P_M1_C13 + (p / q) * t;\nc = INV_GAMMA1P_M1_C12 + t * c;\nc = INV_GAMMA1P_M1_C11 + t * c;\nc = INV_GAMMA1P_M1_C10 + t * c;\nc = INV_GAMMA1P_M1_C9 + t * c;\nc = INV_GAMMA1P_M1_C8 + t * c;\nc = INV_GAMMA1P_M1_C7 + t * c;\nc = INV_GAMMA1P_M1_C6 + t * c;\nc = INV_GAMMA1P_M1_C5 + t * c;\nc = INV_GAMMA1P_M1_C4 + t * c;\nc = INV_GAMMA1P_M1_C3 + t * c;\nc = INV_GAMMA1P_M1_C2 + t * c;\nc = INV_GAMMA1P_M1_C1 + t * c;\nc = INV_GAMMA1P_M1_C0 + t * c;\nif (x > 0.5) {\nret = (t / x) * ((c - 0.5) - 0.5);\nret = x * c;\nreturn ret;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn y;\n}",
            "method_id": 25
        }
    ]
}