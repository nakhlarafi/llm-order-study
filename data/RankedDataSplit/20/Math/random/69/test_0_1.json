{
    "bug_id": 69,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
            "method_body": "public void addData(double x, double y) {\nif (n == 0) {\nxbar = x;\nybar = y;\ndouble dx = x - xbar;\ndouble dy = y - ybar;\nsumXX += dx * dx * (double) n / (n + 1d);\nsumYY += dy * dy * (double) n / (n + 1d);\nsumXY += dx * dy * (double) n / (n + 1d);\nxbar += dx / (n + 1.0);\nybar += dy / (n + 1.0);\nsumX += x;\nsumY += y;\nn++;\nif (n > 2) {\ndistribution.setDegreesOfFreedom(n - 2);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\ndouble p1 = getA(0, x);\ndouble q0 = 0.0;\ndouble q1 = 1.0;\ndouble c = p1 / q1;\nint n = 0;\ndouble relativeError = Double.MAX_VALUE;\nwhile (n < maxIterations && relativeError > epsilon) {\n++n;\ndouble a = getA(n, x);\ndouble b = getB(n, x);\ndouble p2 = a * p1 + b * p0;\ndouble q2 = a * q1 + b * q0;\nboolean infinite = false;\nif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\nif (infinite) {\ndouble r = p2 / q2;\nif (Double.isNaN(r)) {\nrelativeError = Math.abs(r / c - 1.0);\nc = p2 / q2;\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\n}\nif (n >= maxIterations) {\nreturn c;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
            "method_body": "public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\nSimpleRegression regression = new SimpleRegression();\nif(xArray.length == yArray.length && xArray.length > 1) {\nfor(int i=0; i<xArray.length; i++) {\nregression.addData(xArray[i], yArray[i]);\nreturn regression.getR();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nreturn blocks[iBlock * blockColumns + jBlock][k];\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D",
            "method_body": "public double getSumSquaredErrors() {\nreturn Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedomInternal(D)V",
            "method_body": "private void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {\nif (newDegreesOfFreedom <= 0.0) {\nthis.degreesOfFreedom = newDegreesOfFreedom;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getTotalSumSquares()D",
            "method_body": "public double getTotalSumSquares() {\nif (n < 2) {\nreturn sumYY;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nsum = sum + LANCZOS[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare()D",
            "method_body": "public double getRSquare() {\ndouble ssto = getTotalSumSquares();\nreturn (ssto - getSumSquaredErrors()) / ssto;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart  = iBlock * BLOCK_SIZE;\nfinal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nblocks[blockIndex] = new double[iHeight * jWidth];\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public PearsonsCorrelation(RealMatrix matrix) {\ncheckSufficientData(matrix);\nnObs = matrix.getRowDimension();\ncorrelationMatrix = computeCorrelationMatrix(matrix);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\nif (rowDimension <= 0 ) {\nif (columnDimension <= 0) {\nlu = null;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(DD)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {\nsuper();\nsetDegreesOfFreedomInternal(degreesOfFreedom);\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:setDistribution(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public void setDistribution(TDistribution value) {\ndistribution = value;\nif (n > 2) {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nblocks[iBlock * blockColumns + jBlock][k] = value;\n}\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "private void checkSufficientData(final RealMatrix matrix) {\nint nRows = matrix.getRowDimension();\nint nCols = matrix.getColumnDimension();\nif (nRows < 2 || nCols < 2) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 39
        }
    ]
}