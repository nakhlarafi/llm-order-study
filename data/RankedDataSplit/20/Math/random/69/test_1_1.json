{
    "bug_id": 69,
    "test_id": 1,
    "test_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero",
    "test_body": "public void testPValueNearZero() throws Exception {\n/*\n* Create a dataset that has r -> 1, p -> 0 as dimension increases.\n* Prior to the fix for MATH-371, p vanished for dimension >= 14.\n* Post fix, p-values diminish smoothly, vanishing at dimension = 127.\n* Tested value is ~1E-303.\n*/\nint dimension = 120; \ndouble[][] data = new double[dimension][2];\nfor (int i = 0; i < dimension; i++) {\ndata[i][0] = i;\ndata[i][1] = i + 1/((double)i + 1);\n}\nPearsonsCorrelation corrInstance = new PearsonsCorrelation(data);\nassertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:computeCorrelationMatrix(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix computeCorrelationMatrix(RealMatrix matrix) {\nint nVars = matrix.getColumnDimension();\nRealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);\nfor (int i = 0; i < nVars; i++) {\nfor (int j = 0; j < i; j++) {\ndouble corr = correlation(matrix.getColumn(i), matrix.getColumn(j));\noutMatrix.setEntry(i, j, corr);\noutMatrix.setEntry(j, i, corr);\noutMatrix.setEntry(i, i, 1d);\nreturn outMatrix;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:<init>(II)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\nthis.rows    = rows;\nthis.columns = columns;\nblockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "private void checkSufficientData(final RealMatrix matrix) {\nint nRows = matrix.getRowDimension();\nint nCols = matrix.getColumnDimension();\nif (nRows < 2 || nCols < 2) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSlope()D",
            "method_body": "public double getSlope() {\nif (n < 2) {\nif (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {\nreturn sumXY / sumXX;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nreturn blocks[iBlock * blockColumns + jBlock][k];\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>([[D)V",
            "method_body": "public PearsonsCorrelation(double[][] data) {\nthis(new BlockRealMatrix(data));\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(D)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom) {\nthis(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getColumn(I)[D",
            "method_body": "public double[] getColumn(final int column)\nMatrixUtils.checkColumnIndex(this, column);\nfinal double[] out = new double[rows];\nfinal int jBlock  = column / BLOCK_SIZE;\nfinal int jColumn = column - jBlock * BLOCK_SIZE;\nfinal int jWidth  = blockWidth(jBlock);\nint outIndex      = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int iHeight = blockHeight(iBlock);\nfinal double[] block = blocks[iBlock * blockColumns + jBlock];\nfor (int i = 0; i < iHeight; ++i) {\nout[outIndex++] = block[i * jWidth + jColumn];\nreturn out;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b)\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart  = iBlock * BLOCK_SIZE;\nfinal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nblocks[blockIndex] = new double[iHeight * jWidth];\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nblocks[iBlock * blockColumns + jBlock][k] = value;\n}\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
            "method_body": "public void addData(double x, double y) {\nif (n == 0) {\nxbar = x;\nybar = y;\ndouble dx = x - xbar;\ndouble dy = y - ybar;\nsumXX += dx * dx * (double) n / (n + 1d);\nsumYY += dy * dy * (double) n / (n + 1d);\nsumXY += dx * dy * (double) n / (n + 1d);\nxbar += dx / (n + 1.0);\nybar += dy / (n + 1.0);\nsumX += x;\nsumY += y;\nn++;\nif (n > 2) {\ndistribution.setDegreesOfFreedom(n - 2);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nsum = sum + LANCZOS[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:setDistribution(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public void setDistribution(TDistribution value) {\ndistribution = value;\nif (n > 2) {\n}",
            "method_id": 39
        }
    ]
}