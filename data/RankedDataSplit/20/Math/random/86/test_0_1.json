{
    "bug_id": 86,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNotPositiveDefinite",
    "test_body": "public void testNotPositiveDefinite() throws MathException {\nCholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n{ 14, 11, 13, 15, 24 },\n{ 11, 34, 13, 8,  25 },\n{ 13, 13, 14, 15, 21 },\n{ 15, 8,  15, 18, 23 },\n{ 24, 25, 21, 23, 45 }\n}));\nSystem.out.println(cd.getL().multiply(cd.getLT()));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.linear.NotPositiveDefiniteMatrixException\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\nat org.apache.tools.ant.Task.perform(Task.java:348)\nat org.apache.tools.ant.Target.execute(Target.java:392)\nat org.apache.tools.ant.Target.performTasks(Target.java:413)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:811)\nat org.apache.tools.ant.Main.startAnt(Main.java:217)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:transpose()Lorg/apache/commons/math/linear/DenseRealMatrix;",
            "method_body": "public DenseRealMatrix transpose() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal DenseRealMatrix out = new DenseRealMatrix(nCols, nRows);\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockColumns; ++iBlock) {\nfor (int jBlock = 0; jBlock < blockRows; ++jBlock) {\nfinal double[] outBlock = out.blocks[blockIndex];\nfinal double[] tBlock   = blocks[jBlock * blockColumns + iBlock];\nfinal int      pStart   = iBlock * BLOCK_SIZE;\nfinal int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);\nfinal int      qStart   = jBlock * BLOCK_SIZE;\nfinal int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);\nfor (int p = pStart, k = 0; p < pEnd; ++p) {\nfinal int lInc = pEnd - pStart;\nfor (int q = qStart, l = p - pStart; q < qEnd; ++q, l+= lInc) {\noutBlock[k++] = tBlock[l];\n++blockIndex;\nreturn out;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V",
            "method_body": "public CholeskyDecompositionImpl(final RealMatrix matrix,\nNotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\nif (!matrix.isSquare()) {\nfinal int order = matrix.getRowDimension();\nlTData   = matrix.getData();\ncachedL  = null;\ncachedLT = null;\nfor (int i = 0; i < order; ++i) {\nfinal double[] lI = lTData[i];\nif (lTData[i][i] < absolutePositivityThreshold) {\nfor (int j = i + 1; j < order; ++j) {\nfinal double[] lJ = lTData[j];\nfinal double lIJ = lI[j];\nfinal double lJI = lJ[i];\nfinal double maxDelta =\nif (Math.abs(lIJ - lJI) > maxDelta) {\nlJ[i] = 0;\nfor (int i = 0; i < order; ++i) {\nfinal double[] ltI = lTData[i];\nltI[i] = Math.sqrt(ltI[i]);\nfinal double inverse = 1.0 / ltI[i];\nfor (int q = order - 1; q > i; --q) {\nltI[q] *= inverse;\nfinal double[] ltQ = lTData[q];\nfor (int p = q; p < order; ++p) {\nltQ[p] -= ltI[q] * ltI[p];\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn new DenseRealMatrix(data);\n}",
            "method_id": 22
        }
    ]
}