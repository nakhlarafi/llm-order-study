{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855",
    "test_body": "public void testMath855() {\nfinal double minSin = 3 * Math.PI / 2;\nfinal double offset = 1e-8;\nfinal double delta = 1e-7;\nfinal UnivariateFunction f1 = new Sin();\nfinal UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\nnew double[] { 0, -1, 0 });\nfinal UnivariateFunction f = FunctionUtils.add(f1, f2);\nfinal UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\nfinal UnivariatePointValuePair result\n= optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\nfinal int numEval = optimizer.getEvaluations();\n206: final double sol = result.getPoint();\nfinal double expected = 4.712389027602411;\n209: // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n// System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n// System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n213: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855(BrentOptimizerTest.java:213)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.FunctionUtils$4:<init>([Lorg/apache/commons/math3/analysis/UnivariateFunction;)V",
            "method_body": "public static UnivariateFunction add(final UnivariateFunction ... f) {\nreturn new UnivariateFunction() {\ndouble r = f[0].value(x);\nfor (int i = 1; i < f.length; i++) {\nr += f[i].value(x);\nreturn r;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double point) {\nevaluations.incrementCount();\n}\nreturn function.value(point);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizer:<init>(DD)V",
            "method_body": "public BrentOptimizer(double rel,\nthis(rel, abs, null);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DDD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f,\nif (f == null) {\nif (goalType == null) {\nsearchMin = min;\nsearchMax = max;\nsearchStart = startValue;\ngoal = goalType;\nfunction = f;\nevaluations.setMaximalCount(maxEval);\nevaluations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\nnew MaxCountExceededCallback() {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.FunctionUtils:add([Lorg/apache/commons/math3/analysis/UnivariateFunction;)Lorg/apache/commons/math3/analysis/UnivariateFunction;",
            "method_body": "public static UnivariateFunction add(final UnivariateFunction ... f) {\nreturn new UnivariateFunction() {\ndouble r = f[0].value(x);\nfor (int i = 1; i < f.length; i++) {\nr += f[i].value(x);\nreturn r;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn searchStart;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nif (yInt < 0) {\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)V",
            "method_body": "public static void checkOrder(double[] val, OrderDirection dir,\ncheckOrder(val, dir, strict, true);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<UnivariatePointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([D)[D",
            "method_body": "public static double[] copyOf(double[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 39
        }
    ]
}