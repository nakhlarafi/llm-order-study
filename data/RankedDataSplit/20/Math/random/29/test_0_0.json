{
    "bug_id": 29,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyMixedTypes(RealVectorAbstractTest.java:580)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
            "method_body": "private static int computeCapacity(final int expectedSize) {\nif (expectedSize == 0) {\nfinal int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);\nfinal int powerOfTwo = Integer.highestOneBit(capacity);\nif (powerOfTwo == capacity) {\nreturn capacity;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:probe(II)I",
            "method_body": "private static int probe(final int perturb, final int j) {\nreturn (j << 2) + j + perturb + 1;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeMultiply(RealVector v) {\ncheckVectorDimensions(v.getDimension());\nOpenMapRealVector res = new OpenMapRealVector(this);\nIterator iter = entries.iterator();\nwhile (iter.hasNext()) {\niter.advance();\nres.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\nreturn res;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex(I)I",
            "method_body": "private int findInsertionIndex(final int key) {\nreturn findInsertionIndex(keys, states, key, mask);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([DD)V",
            "method_body": "public OpenMapRealVector(double[] values, double epsilon) {\nvirtualSize = values.length;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\nfor (int key = 0; key < values.length; key++) {\ndouble value = values[key];\nif (!isDefaultValue(value)) {\nentries.put(key, value);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:hashOf(I)I",
            "method_body": "private static int hashOf(final int key) {\nfinal int h = key ^ ((key >>> 20) ^ (key >>> 12));\nreturn h ^ (h >>> 7) ^ (h >>> 4);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\ny = floor(x);\nif (y == x) {\nreturn y;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([D)V",
            "method_body": "public OpenMapRealVector(double[] values) {\nthis(values, DEFAULT_ZERO_TOLERANCE);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(I)Z",
            "method_body": "public boolean containsKey(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn true;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\nfinal int capacity = computeCapacity(expectedSize);\nkeys   = new int[capacity];\nvalues = new double[capacity];\nstates = new byte[capacity];\nthis.missingEntries = missingEntries;\nmask   = capacity - 1;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n) {\nint d = getDimension();\nif (d != n) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nif (referenceCount != count) {\ncurrent = next;\nwhile (states[++next] != FULL) {\n} catch (ArrayIndexOutOfBoundsException e) {\nnext = -2;\nif (current < 0) {\n}\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\nreturn entries.get(index);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:remove(I)D",
            "method_body": "public double remove(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn doRemove(index);\n}",
            "method_id": 19
        }
    ]
}