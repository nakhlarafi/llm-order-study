{
    "bug_id": 29,
    "test_id": 2,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplySameType",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplySameType(RealVectorAbstractTest.java:575)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:perturb(I)I",
            "method_body": "private static int perturb(final int hash) {\nreturn hash & 0x7fffffff;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nif (referenceCount != count) {\ncurrent = next;\nwhile (states[++next] != FULL) {\n} catch (ArrayIndexOutOfBoundsException e) {\nnext = -2;\nif (current < 0) {\n}\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\nif (current < 0) {\nreturn values[current];\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:growTable()V",
            "method_body": "private void growTable() {\nfinal int oldLength      = states.length;\nfinal int[] oldKeys      = keys;\nfinal double[] oldValues = values;\nfinal byte[] oldStates   = states;\nfinal int newLength = RESIZE_MULTIPLIER * oldLength;\nfinal int[] newKeys = new int[newLength];\nfinal double[] newValues = new double[newLength];\nfinal byte[] newStates = new byte[newLength];\nfinal int newMask = newLength - 1;\nfor (int i = 0; i < oldLength; ++i) {\nif (oldStates[i] == FULL) {\nfinal int key = oldKeys[i];\nfinal int index = findInsertionIndex(newKeys, newStates, key, newMask);\nnewKeys[index]   = key;\nnewValues[index] = oldValues[i];\nnewStates[index] = FULL;\nmask   = newMask;\nkeys   = newKeys;\nvalues = newValues;\nstates = newStates;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:iterator()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([DD)V",
            "method_body": "public OpenMapRealVector(double[] values, double epsilon) {\nvirtualSize = values.length;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\nfor (int key = 0; key < values.length; key++) {\ndouble value = values[key];\nif (!isDefaultValue(value)) {\nentries.put(key, value);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\ndouble previous = missingEntries;\nboolean newMapping = true;\nif (index < 0) {\nindex = changeIndexSign(index);\nprevious = values[index];\nnewMapping = false;\nkeys[index]   = key;\nstates[index] = FULL;\nvalues[index] = value;\nif (newMapping) {\n++size;\nif (shouldGrowTable()) {\ngrowTable();\n++count;\nreturn previous;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeMultiply(RealVector v) {\ncheckVectorDimensions(v.getDimension());\nOpenMapRealVector res = new OpenMapRealVector(this);\nIterator iter = entries.iterator();\nwhile (iter.hasNext()) {\niter.advance();\nres.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\nreturn res;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn y;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn values[index];\nif (states[index] == FREE) {\nreturn missingEntries;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:probe(II)I",
            "method_body": "private static int probe(final int perturb, final int j) {\nreturn (j << 2) + j + perturb + 1;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\nfinal int capacity = computeCapacity(expectedSize);\nkeys   = new int[capacity];\nvalues = new double[capacity];\nstates = new byte[capacity];\nthis.missingEntries = missingEntries;\nmask   = capacity - 1;\n}",
            "method_id": 19
        }
    ]
}