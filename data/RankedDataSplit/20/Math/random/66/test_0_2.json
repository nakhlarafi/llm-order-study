{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "public void testQuinticMinStatistics() throws MathException {\n// The function has local minima at -0.27195613 and 0.82221643.\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setRelativeAccuracy(1e-10);\nminimizer.setAbsoluteAccuracy(1e-11);\n93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\nfor (int i = 0; i < stat.length; i++) {\nstat[i] = new DescriptiveStatistics();\n}\n98: final double min = -0.75;\nfinal double max = 0.25;\nfinal int nSamples = 200;\nfinal double delta = (max - min) / nSamples;\nfor (int i = 0; i < nSamples; i++) {\nfinal double start = min + i * delta;\nstat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\nstat[1].addValue(minimizer.getIterationCount());\nstat[2].addValue(minimizer.getEvaluations());\n}\n109: final double meanOptValue = stat[0].getMean();\nfinal double medianIter = stat[1].getPercentile(50);\nfinal double medianEval = stat[2].getPercentile(50);\nassertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\nassertEquals(medianIter, 17, Math.ulp(1d));\nassertEquals(medianEval, 18, Math.ulp(1d));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean:<init>()V",
            "method_body": "public GeometricMean() {\nsumOfLogs = new SumOfLogs();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble sum = Double.NaN;\nif (test(values, begin, length)) {\nsum = 0.0;\nfor (int i = begin; i < begin + length; i++) {\nsum += values[i];\nreturn sum;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DII)Z",
            "method_body": "public abstract UnivariateStatistic copy();\nif (values == null) {\nif (begin < 0) {\nif (length < 0) {\nif (begin + length > values.length) {\nif (length == 0) {\nreturn true;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:<init>()V",
            "method_body": "public SumOfLogs() {\nvalue = 0d;\nn = 0;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getPercentile(D)D",
            "method_body": "public double getPercentile(double p) {\nif (percentileImpl instanceof Percentile) {\n((Percentile) percentileImpl).setQuantile(p);\nreturn apply(percentileImpl);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values,final int begin, final int length) {\nif (test(values, begin, length)) {\nSum sum = new Sum();\ndouble sampleSize = length;\ndouble xbar = sum.evaluate(values, begin, length) / sampleSize;\ndouble correction = 0;\nfor (int i = begin; i < begin + length; i++) {\ncorrection += values[i] - xbar;\nreturn xbar + (correction/sampleSize);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Min:<init>()V",
            "method_body": "public Min() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 48
        }
    ]
}