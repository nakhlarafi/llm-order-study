{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",
    "test_body": "33: public void testMath781() {\n34: LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n35: 36: ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n37: constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\n38: constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\n39: constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n40: 41: double epsilon = 1e-6;\n42: SimplexSolver solver = new SimplexSolver();\n43: PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n44: 45: Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\n46: Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781(SimplexSolverTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:<init>(Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optimization/GoalType;ZDI)V",
            "method_body": "SimplexTableau(final LinearObjectiveFunction f,\nfinal int maxUlps) {\nthis.f                      = f;\nthis.constraints            = normalizeConstraints(constraints);\nthis.restrictToNonNegative  = restrictToNonNegative;\nthis.epsilon                = epsilon;\nthis.maxUlps                = maxUlps;\nthis.numDecisionVariables   = f.getCoefficients().getDimension() +\nthis.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\nthis.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\nthis.tableau = createTableau(goalType == GoalType.MAXIMIZE);\ninitializeColumnLabels();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.PointValuePair:getPoint()[D",
            "method_body": "public double[] getPoint() {\nfinal double[] p = getKey();\nreturn p == null ? null : p.clone();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getNumObjectiveFunctions()I",
            "method_body": "protected final int getNumObjectiveFunctions() {\nreturn this.numArtificialVariables > 0 ? 2 : 1;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getNumSlackVariables()I",
            "method_body": "protected final int getNumSlackVariables() {\nreturn numSlackVariables;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn f.getCoefficients().getDimension();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>(Lorg/apache/commons/math3/linear/RealVector;Lorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final RealVector coefficients, final Relationship relationship,\nfinal double value) {\nthis.coefficients = coefficients;\nthis.relationship = relationship;\nthis.value        = value;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>(Lorg/apache/commons/math3/linear/RealVector;D)V",
            "method_body": "public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\nthis.coefficients = coefficients;\nthis.constantTerm = constantTerm;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>([DLorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final double[] coefficients, final Relationship relationship,\nthis(new ArrayRealVector(coefficients), relationship, value);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new ArrayRealVector(coefficients), constantTerm);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON, DEFAULT_ULPS);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:copyArray([D[D)V",
            "method_body": "private void copyArray(final double[] src, final double[] dest) {\nSystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:<init>(DI)V",
            "method_body": "public SimplexSolver(final double epsilon, final int maxUlps) {\nthis.epsilon = epsilon;\nthis.maxUlps = maxUlps;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:subtractRow(IID)V",
            "method_body": "protected void subtractRow(final int minuendRow, final int subtrahendRow,\ntableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.Relationship:oppositeRelationship()Lorg/apache/commons/math3/optimization/linear/Relationship;",
            "method_body": "public Relationship oppositeRelationship() {\nswitch (this) {\nreturn GEQ;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:getValue([D)D",
            "method_body": "public double getValue(final double[] point) {\nreturn coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 39
        }
    ]
}