{
    "bug_id": 64,
    "test_id": 1,
    "test_name": "org.apache.commons.math.optimization.general.MinpackTest.testMinpackFreudensteinRoth",
    "test_body": "145: public void testMinpackFreudensteinRoth() {\n146: minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n147: 20.0124960961895, 6.99887517584575,\n148: new double[] {\n149: 11.4124844654993,\n150: -0.896827913731509\n151: }), false);\n152: minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n153: 12432.833948863, 6.9988751744895,",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<11.41300466147456> but was:<11.4121122022341>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:576)\nat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:504)\nat org.apache.commons.math.optimization.general.MinpackTest.testMinpackFreudensteinRoth(MinpackTest.java:152)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/VectorialConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) {\nthis.checker = convergenceChecker;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker:<init>()V",
            "method_body": "public SimpleVectorialValueChecker() {\nthis.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\nthis.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n}",
            "method_id": 23
        }
    ]
}