{
    "bug_id": 88,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272",
    "test_body": "35: public void testMath272() throws OptimizationException {\n36: LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n37: Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n38: constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n39: constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n40: constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n41: 42: SimplexSolver solver = new SimplexSolver();\n43: RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n44: 45: assertEquals(0.0, solution.getPoint()[0], .0000001);\n46: assertEquals(1.0, solution.getPoint()[1], .0000001);\n47: assertEquals(1.0, solution.getPoint()[2], .0000001);\n48: assertEquals(3.0, solution.getValue(), .0000001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272(SimplexSolverTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn ((Double.isNaN(x) && Double.isNaN(y)) || x == y);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {\nlu = null;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:<init>([D)V",
            "method_body": "public RealVectorImpl(double[] d) {\ndata = d.clone();\n}",
            "method_id": 62
        }
    ]
}