{
    "bug_id": 6,
    "test_id": 19,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial",
    "test_body": "125: public void testTrivial() {\n126: LinearProblem problem\n127: = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n128: NonLinearConjugateGradientOptimizer optimizer\n129: = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\n130: new SimpleValueChecker(1e-6, 1e-6));\n131: PointValuePair optimum\n132: = optimizer.optimize(new MaxEval(100),\n133: problem.getObjectiveFunction(),\n134: problem.getObjectiveFunctionGradient(),\n135: GoalType.MINIMIZE,\n136: new InitialGuess(new double[] { 0 }));\n137: Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n138: Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);\n139: 140: // Check that the number of iterations is updated (MATH-949).\n141: Assert.assertTrue(optimizer.getIterations() > 0);\n142: }\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(NonLinearConjugateGradientOptimizerTest.java:141)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nfinal double[] point = getStartPoint();\nfinal GoalType goal = getGoalType();\nfinal int n = point.length;\ndouble[] r = computeObjectiveGradient(point);\nif (goal == GoalType.MINIMIZE) {\nfor (int i = 0; i < n; i++) {\nr[i] = -r[i];\ndouble[] steepestDescent = preconditioner.precondition(point, r);\ndouble[] searchDirection = steepestDescent.clone();\ndouble delta = 0;\nfor (int i = 0; i < n; ++i) {\ndelta += r[i] * searchDirection[i];\nPointValuePair current = null;\nint iter = 0;\nint maxEval = getMaxEvaluations();\n++iter;\nfinal double objective = computeObjectiveValue(point);\nPointValuePair previous = current;\ncurrent = new PointValuePair(point, objective);\nif (previous != null) {\nif (checker.converged(iter, previous, current)) {\nreturn current;\nfinal UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);\nfinal double uB = findUpperBound(lsf, 0, initialStep);\nfinal double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);\nmaxEval -= solver.getEvaluations(); // Subtract used up evaluations.\nfor (int i = 0; i < point.length; ++i) {\npoint[i] += step * searchDirection[i];\nr = computeObjectiveGradient(point);\nif (goal == GoalType.MINIMIZE) {\nfor (int i = 0; i < n; ++i) {\nr[i] = -r[i];\nfinal double deltaOld = delta;\nfinal double[] newSteepestDescent = preconditioner.precondition(point, r);\ndelta = 0;\nfor (int i = 0; i < n; ++i) {\ndelta += r[i] * newSteepestDescent[i];\nswitch (updateFormula) {\ndouble deltaMid = 0;\nfor (int i = 0; i < r.length; ++i) {\ndeltaMid += r[i] * steepestDescent[i];\nbeta = (delta - deltaMid) / deltaOld;\nbreak;\nsteepestDescent = newSteepestDescent;\nif (iter % n == 0 ||\nsearchDirection = steepestDescent.clone();\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:findUpperBound(Lorg/apache/commons/math3/analysis/UnivariateFunction;DD)D",
            "method_body": "private double findUpperBound(final UnivariateFunction f,\nfinal double yA = f.value(a);\ndouble yB = yA;\nfor (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB)) {\nfinal double b = a + step;\nyB = f.value(b);\nif (yA * yB <= 0) {\nreturn b;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn evaluations.getMaximalCount();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:getPoint()[D",
            "method_body": "public double[] getPoint() {\nfinal double[] p = getKey();\nreturn p == null ? null : p.clone();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif  (data instanceof BracketingStep) {\ncheckParameters();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:getMaxEval()I",
            "method_body": "public int getMaxEval() {\nreturn maxEval;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nfor (OptimizationData data : optData) {\nif (data instanceof MaxEval) {\nevaluations.setMaximalCount(((MaxEval) data).getMaxEval());\ncontinue;\nif (data instanceof MaxIter) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\nevaluations.incrementCount();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 19
        }
    ]
}