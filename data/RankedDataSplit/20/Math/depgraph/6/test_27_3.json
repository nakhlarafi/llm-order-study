{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "51: public void testSumSinc() {\n52: final MultivariateFunction func = new SumSincFunction(-1);\n53: 54: int dim = 2;\n55: final double[] minPoint = new double[dim];\n56: for (int i = 0; i < dim; i++) {\n57: minPoint[i] = 0;\n58: }\n59: 60: double[] init = new double[dim];\n61: 62: // Initial is minimum.\n63: for (int i = 0; i < dim; i++) {\n64: init[i] = minPoint[i];\n65: }\n66: doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n67: 68: // Initial is far from minimum.\n69: for (int i = 0; i < dim; i++) {\n70: init[i] = minPoint[i] + 3;\n71: }\n72: doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n73: // More stringent line search tolerance enhances the precision\n74: // of the result.\n75: doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n76: }\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer;DD)V",
            "method_body": "LineSearch(double rel,\ndouble abs) {\nsuper(REL_TOL_UNUSED,\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getMid()D",
            "method_body": "public double getMid() {\nreturn mid;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:<init>(DD)V",
            "method_body": "public SimpleUnivariateValueChecker(final double relativeThreshold,\nsuper(relativeThreshold, absoluteThreshold);\nmaxIterationCount = ITERATION_CHECK_DISABLED;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:converged(ILorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:search(Lorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;DD)V",
            "method_body": "public void search(UnivariateFunction func, GoalType goal, double xA, double xB) {\nevaluations.resetCount();\nfinal boolean isMinim = goal == GoalType.MINIMIZE;\ndouble fA = eval(func, xA);\ndouble fB = eval(func, xB);\nif (isMinim ?\ndouble tmp = xA;\nxA = xB;\nxB = tmp;\ntmp = fA;\nfA = fB;\nfB = tmp;\ndouble xC = xB + GOLD * (xB - xA);\ndouble fC = eval(func, xC);\nwhile (isMinim ? fC < fB : fC > fB) {\ndouble tmp1 = (xB - xA) * (fB - fC);\ndouble tmp2 = (xB - xC) * (fB - fA);\ndouble val = tmp2 - tmp1;\ndouble denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;\ndouble w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;\ndouble wLim = xB + growLimit * (xC - xB);\nif ((w - xC) * (xB - w) > 0) {\nfW = eval(func, w);\nif (isMinim ?\nxA = xB;\nxB = w;\nfA = fB;\nfB = fW;\nbreak;\n} else if ((w - wLim) * (wLim - xC) >= 0) {\n} else if ((w - wLim) * (xC - w) > 0) {\nw = xC + GOLD * (xC - xB);\nfW = eval(func, w);\nxA = xB;\nfA = fB;\nxB = xC;\nfB = fC;\nxC = w;\nfC = fW;\n}\nlo = xA;\nfLo = fA;\nmid = xB;\nfMid = fB;\nhi = xC;\nfHi = fC;\nif (lo > hi) {\ndouble tmp = lo;\nlo = hi;\nhi = tmp;\ntmp = fLo;\nfLo = fHi;\nfHi = tmp;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getLo()D",
            "method_body": "public double getLo() {\nreturn lo;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getHi()D",
            "method_body": "public double getHi() {\nreturn hi;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:eval(Lorg/apache/commons/math3/analysis/UnivariateFunction;D)D",
            "method_body": "private double eval(UnivariateFunction f, double x) {\nevaluations.incrementCount();\n}\nreturn f.value(x);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>()V",
            "method_body": "public BracketFinder() {\nthis(100, 50);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>(DI)V",
            "method_body": "public BracketFinder(double growLimit,\nint maxEvaluations) {\nif (growLimit <= 0) {\nif (maxEvaluations <= 0) {\nthis.growLimit = growLimit;\nevaluations.setMaximalCount(maxEvaluations);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.Sinc:value(D)D",
            "method_body": "public double value(final double x) {\nfinal double scaledX = normalized ? FastMath.PI * x : x;\nif (FastMath.abs(scaledX) <= SHORTCUT) {\nfinal double scaledX2 = scaledX * scaledX;\nreturn ((scaledX2 - 20) * scaledX2 + 120) / 120;\nreturn FastMath.sin(scaledX) / scaledX;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:best(Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Z)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "private UnivariatePointValuePair best(UnivariatePointValuePair a,\nif (a == null) {\nif (b == null) {\nif (isMinim) {\nreturn a.getValue() <= b.getValue() ? a : b;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn start;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getMin()D",
            "method_body": "public double getMin() {\nreturn min;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getMax()D",
            "method_body": "public double getMax() {\nreturn max;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double x) {\nsuper.incrementEvaluationCount();\nreturn function.value(x);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "protected UnivariatePointValuePair doOptimize() {\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariatePointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariatePointValuePair previous = null;\nUnivariatePointValuePair current\nUnivariatePointValuePair best = current;\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nprevious = current;\ncurrent = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\nbest = best(best,\nif (checker != null) {\nif (checker.converged(iter, previous, current)) {\nreturn best;\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else { // Default termination (Brent's criterion).\n++iter;\n}\n}",
            "method_id": 79
        }
    ]
}