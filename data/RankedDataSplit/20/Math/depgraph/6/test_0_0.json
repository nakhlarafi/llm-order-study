{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair doOptimize() {\ncheckParameters();\nfinal ConvergenceChecker<PointVectorValuePair> checker\nif (checker == null) {\nfinal double[] targetValues = getTarget();\nfinal int nR = targetValues.length; // Number of observed data.\nfinal RealMatrix weightMatrix = getWeight();\nfinal double[] residualsWeights = new double[nR];\nfor (int i = 0; i < nR; i++) {\nresidualsWeights[i] = weightMatrix.getEntry(i, i);\nfinal double[] currentPoint = getStartPoint();\nfinal int nC = currentPoint.length;\nPointVectorValuePair current = null;\nint iter = 0;\nfor (boolean converged = false; !converged;) {\n++iter;\nPointVectorValuePair previous = current;\nfinal double[] currentObjective = computeObjectiveValue(currentPoint);\nfinal double[] currentResiduals = computeResiduals(currentObjective);\nfinal RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);\ncurrent = new PointVectorValuePair(currentPoint, currentObjective);\nfinal double[]   b = new double[nC];\nfinal double[][] a = new double[nC][nC];\nfor (int i = 0; i < nR; ++i) {\nfinal double[] grad   = weightedJacobian.getRow(i);\nfinal double weight   = residualsWeights[i];\nfinal double residual = currentResiduals[i];\nfinal double wr = weight * residual;\nfor (int j = 0; j < nC; ++j) {\nb[j] += wr * grad[j];\nfor (int k = 0; k < nC; ++k) {\ndouble[] ak = a[k];\ndouble wgk = weight * grad[k];\nfor (int l = 0; l < nC; ++l) {\nak[l] += wgk * grad[l];\nRealMatrix mA = new BlockRealMatrix(a);\nDecompositionSolver solver = useLU ?\nfinal double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\nfor (int i = 0; i < nC; ++i) {\ncurrentPoint[i] += dX[i];\n}\nif (previous != null) {\nconverged = checker.converged(iter, previous, current);\nif (converged) {\nsetCost(computeCost(currentResiduals));\nreturn current;\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:getMaxEval()I",
            "method_body": "public int getMaxEval() {\nreturn maxEval;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nfor (OptimizationData data : optData) {\nif (data instanceof MaxEval) {\nevaluations.setMaximalCount(((MaxEval) data).getMaxEval());\ncontinue;\nif (data instanceof MaxIter) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\nevaluations.incrementCount();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:<init>(ZLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public GaussNewtonOptimizer(final boolean useLU,\nsuper(checker);\nthis.useLU = useLU;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nthis(true, checker);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getLowerBound()[D",
            "method_body": "public double[] getLowerBound() {\nreturn lowerBound == null ? null : lowerBound.clone();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:getInitialGuess()[D",
            "method_body": "public double[] getInitialGuess() {\nreturn init.clone();\n}",
            "method_id": 19
        }
    ]
}