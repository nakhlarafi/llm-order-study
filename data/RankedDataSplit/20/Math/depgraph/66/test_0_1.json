{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "86: public void testQuinticMinStatistics() throws MathException {\n87: // The function has local minima at -0.27195613 and 0.82221643.\n88: UnivariateRealFunction f = new QuinticFunction();\n89: UnivariateRealOptimizer minimizer = new BrentOptimizer();\n90: minimizer.setRelativeAccuracy(1e-10);\n91: minimizer.setAbsoluteAccuracy(1e-11);\n92: 93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n94: for (int i = 0; i < stat.length; i++) {\n95: stat[i] = new DescriptiveStatistics();\n96: }\n97: 98: final double min = -0.75;\n99: final double max = 0.25;\n100: final int nSamples = 200;\n101: final double delta = (max - min) / nSamples;\n102: for (int i = 0; i < nSamples; i++) {\n103: final double start = min + i * delta;\n104: stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n105: stat[1].addValue(minimizer.getIterationCount());\n106: stat[2].addValue(minimizer.getEvaluations());\n107: }\n108: 109: final double meanOptValue = stat[0].getMean();\n110: final double medianIter = stat[1].getPercentile(50);\n111: final double medianEval = stat[2].getPercentile(50);\n112: assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\n113: assertEquals(medianIter, 17, Math.ulp(1d));\n114: assertEquals(medianEval, 18, Math.ulp(1d));\n115: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DII)D",
            "method_body": "public double evaluate( final double[] values, final int start, final int length) {\nreturn evaluate(values, start, length, quantile);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DIID)D",
            "method_body": "public double evaluate(final double[] values, final int begin,\ntest(values, begin, length);\nif ((p > 100) || (p <= 0)) {\nif (length == 0) {\nif (length == 1) {\ndouble n = length;\ndouble pos = p * (n + 1) / 100;\ndouble fpos = Math.floor(pos);\nint intPos = (int) fpos;\ndouble dif = pos - fpos;\ndouble[] sorted = new double[length];\nSystem.arraycopy(values, begin, sorted, 0, length);\nArrays.sort(sorted);\nif (pos < 1) {\nif (pos >= n) {\ndouble lower = sorted[intPos - 1];\ndouble upper = sorted[intPos];\nreturn lower + dif * (upper - lower);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis:<init>()V",
            "method_body": "public Kurtosis() {\nincMoment = true;\nmoment = new FourthMoment();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Skewness:<init>()V",
            "method_body": "public Skewness() {\nincMoment = true;\nmoment = new ThirdMoment();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:<init>()V",
            "method_body": "public ResizableDoubleArray() {\ninternalArray = new double[initialCapacity];\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment:<init>()V",
            "method_body": "public FourthMoment() {\nsuper();\nm4 = Double.NaN;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:<init>()V",
            "method_body": "public Percentile() {\nthis(50.0);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment:<init>()V",
            "method_body": "public ThirdMoment() {\nsuper();\nm3 = Double.NaN;\nnDevSq = Double.NaN;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values,final int begin, final int length) {\nif (test(values, begin, length)) {\nSum sum = new Sum();\ndouble sampleSize = length;\ndouble xbar = sum.evaluate(values, begin, length) / sampleSize;\ndouble correction = 0;\nfor (int i = begin; i < begin + length; i++) {\ncorrection += values[i] - xbar;\nreturn xbar + (correction/sampleSize);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble sum = Double.NaN;\nif (test(values, begin, length)) {\nsum = 0.0;\nfor (int i = begin; i < begin + length; i++) {\nsum += values[i];\nreturn sum;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:<init>(D)V",
            "method_body": "public Percentile(final double p) {\nsetQuantile(p);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean:<init>()V",
            "method_body": "public GeometricMean() {\nsumOfLogs = new SumOfLogs();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Max:<init>()V",
            "method_body": "public Max() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Min:<init>()V",
            "method_body": "public Min() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares:<init>()V",
            "method_body": "public SumOfSquares() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 39
        }
    ]
}