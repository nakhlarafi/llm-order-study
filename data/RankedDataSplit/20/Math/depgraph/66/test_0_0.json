{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "86: public void testQuinticMinStatistics() throws MathException {\n87: // The function has local minima at -0.27195613 and 0.82221643.\n88: UnivariateRealFunction f = new QuinticFunction();\n89: UnivariateRealOptimizer minimizer = new BrentOptimizer();\n90: minimizer.setRelativeAccuracy(1e-10);\n91: minimizer.setAbsoluteAccuracy(1e-11);\n92: 93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n94: for (int i = 0; i < stat.length; i++) {\n95: stat[i] = new DescriptiveStatistics();\n96: }\n97: 98: final double min = -0.75;\n99: final double max = 0.25;\n100: final int nSamples = 200;\n101: final double delta = (max - min) / nSamples;\n102: for (int i = 0; i < nSamples; i++) {\n103: final double start = min + i * delta;\n104: stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n105: stat[1].addValue(minimizer.getIterationCount());\n106: stat[2].addValue(minimizer.getEvaluations());\n107: }\n108: 109: final double meanOptValue = stat[0].getMean();\n110: final double medianIter = stat[1].getPercentile(50);\n111: final double medianEval = stat[2].getPercentile(50);\n112: assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\n113: assertEquals(medianIter, 17, Math.ulp(1d));\n114: assertEquals(medianEval, 18, Math.ulp(1d));\n115: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getPercentile(D)D",
            "method_body": "public double getPercentile(double p) {\nif (percentileImpl instanceof Percentile) {\n((Percentile) percentileImpl).setQuantile(p);\nreturn apply(percentileImpl);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\nreturn localMin(getGoalType() == GoalType.MINIMIZE,\nf, goalType, min, startValue, max,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:apply(Lorg/apache/commons/math/stat/descriptive/UnivariateStatistic;)D",
            "method_body": "public double apply(UnivariateStatistic stat) {\nreturn stat.evaluate(eDA.getInternalValues(), eDA.start(), eDA.getNumElements());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:start()I",
            "method_body": "public synchronized int start() {\nreturn startIndex;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getMean()D",
            "method_body": "public double getMean() {\nreturn apply(meanImpl);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:expand()V",
            "method_body": "protected synchronized void expand() {\nint newSize = 0;\nif (expansionMode == MULTIPLICATIVE_MODE) {\nnewSize = (int) Math.ceil(internalArray.length * expansionFactor);\ndouble[] tempArray = new double[newSize];\nSystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);\ninternalArray = tempArray;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:shouldContract()Z",
            "method_body": "private synchronized boolean shouldContract() {\nif (expansionMode == MULTIPLICATIVE_MODE) {\nreturn (internalArray.length / ((float) numElements)) > contractionCriteria;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getInternalValues()[D",
            "method_body": "public synchronized double[] getInternalValues() {\nreturn internalArray;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:addElement(D)V",
            "method_body": "public synchronized void addElement(double value) {\nnumElements++;\nif ((startIndex + numElements) > internalArray.length) {\nexpand();\ninternalArray[startIndex + (numElements - 1)] = value;\nif (shouldContract()) {\ncontract();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getNumElements()I",
            "method_body": "public synchronized int getNumElements() {\nreturn numElements;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:contract()V",
            "method_body": "public synchronized void contract() {\ndouble[] tempArray = new double[numElements + 1];\nSystem.arraycopy(internalArray, startIndex, tempArray, 0, numElements);\ninternalArray = tempArray;\nstartIndex = 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:setQuantile(D)V",
            "method_body": "public void setQuantile(final double p) {\nif (p <= 0 || p > 100) {\nquantile = p;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:addValue(D)V",
            "method_body": "public void addValue(double v) {\nif (windowSize != INFINITE_WINDOW) {\neDA.addElement(v);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\nsetMaxEvaluations(Integer.MAX_VALUE);\nsetMaximalIterationCount(100);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\nthis.functionValue  = fx;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 19
        }
    ]
}