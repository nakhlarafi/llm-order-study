{
    "bug_id": 84,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283",
    "test_body": "193: public void testMath283()\n194: throws FunctionEvaluationException, OptimizationException {\n195: // fails because MultiDirectional.iterateSimplex is looping forever\n196: // the while(true) should be replaced with a convergence check\n197: MultiDirectional multiDirectional = new MultiDirectional();\n198: multiDirectional.setMaxIterations(100);\n199: multiDirectional.setMaxEvaluations(1000);\n200: 201: final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n202: 203: RealPointValuePair estimate = multiDirectional.optimize(function,\n204: GoalType.MAXIMIZE, function.getMaximumPosition());",
    "stack_trace": "org.apache.commons.math.optimization.OptimizationException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter(DirectSearchOptimizer.java:320)\nat org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(MultiDirectional.java:66)\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(DirectSearchOptimizer.java:307)\nat org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283(MultiDirectionalTest.java:203)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\nthis.point = point.clone();\nthis.value  = value;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public MathException(Throwable rootCause) {\nsuper(rootCause);\nthis.pattern   = getMessage();\nthis.arguments = new Object[0];\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(String pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(Locale locale) {\nreturn buildMessage(locale, pattern, arguments);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object ... arguments) {\nsuper(buildMessage(Locale.US, pattern, arguments));\nthis.pattern   = pattern;\nthis.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\nif (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n} catch (MissingResourceException mre) {\nreturn s;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.MathException:buildMessage(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\nreturn (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n}",
            "method_id": 27
        }
    ]
}