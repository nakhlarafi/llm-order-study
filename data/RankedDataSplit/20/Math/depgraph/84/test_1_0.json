{
    "bug_id": 84,
    "test_id": 1,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMinimizeMaximize",
    "test_body": "70: public void testMinimizeMaximize()\n71: throws FunctionEvaluationException, ConvergenceException {\n72: 73: // the following function has 4 local extrema:\n74: final double xM        = -3.841947088256863675365;\n75: final double yM        = -1.391745200270734924416;\n76: final double xP        =  0.2286682237349059125691;\n77: final double yP        = -yM;\n78: final double valueXmYm =  0.2373295333134216789769; // local  maximum\n79: final double valueXmYp = -valueXmYm;                // local  minimum\n80: final double valueXpYm = -0.7290400707055187115322; // global minimum\n81: final double valueXpYp = -valueXpYm;                // global maximum\n82: MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n83: private static final long serialVersionUID = -7039124064449091152L;\n84: public double value(double[] variables) throws FunctionEvaluationException {\n85: final double x = variables[0];\n86: final double y = variables[1];\n87: return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));\n88: }\n89: };\n90: 91: MultiDirectional optimizer = new MultiDirectional();\n92: optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));\n93: optimizer.setMaxIterations(200);\n94: optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });\n95: RealPointValuePair optimum;\n96: 97: // minimization\n98: optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });\n99: Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);\n100: Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n101: Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);\n102: Assert.assertTrue(optimizer.getEvaluations() > 120);\n103: Assert.assertTrue(optimizer.getEvaluations() < 150);\n104: 105: optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });\n106: Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n107: Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);\n108: Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              \n109: Assert.assertTrue(optimizer.getEvaluations() > 120);\n110: Assert.assertTrue(optimizer.getEvaluations() < 150);\n111: 112: // maximization\n113: optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });\n114: Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);\n115: Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);\n116: Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);\n117: Assert.assertTrue(optimizer.getEvaluations() > 120);\n118: Assert.assertTrue(optimizer.getEvaluations() < 150);\n119: 120: optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));\n121: optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });\n122: Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);\n123: Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);\n124: Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);\n125: Assert.assertTrue(optimizer.getEvaluations() > 180);\n126: Assert.assertTrue(optimizer.getEvaluations() < 220);\n127: 128: }\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMinimizeMaximize(MultiDirectionalTest.java:103)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V",
            "method_body": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nincrementIterationsCounter();\nfinal RealPointValuePair[] original = simplex;\nfinal RealPointValuePair best = original[0];\nfinal RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\nif (comparator.compare(reflected, best) < 0) {\nfinal RealPointValuePair[] reflectedSimplex = simplex;\nfinal RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\nif (comparator.compare(reflected, expanded) <= 0) {\nsimplex = reflectedSimplex;\nreturn;\nfinal RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\nif (comparator.compare(contracted, best) < 0) {\nreturn;\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\nfinal double[] xSmallest = original[0].getPointRef();\nfinal int n = xSmallest.length;\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = original[0];\nfor (int i = 1; i <= n; ++i) {\nfinal double[] xOriginal    = original[i].getPointRef();\nfinal double[] xTransformed = new double[n];\nfor (int j = 0; j < n; ++j) {\nxTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);\nsimplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);\nevaluateSimplex(comparator);\nreturn simplex[0];\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getPoint()[D",
            "method_body": "public double[] getPoint() {\nreturn point.clone();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker:<init>(DD)V",
            "method_body": "public SimpleScalarValueChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker:<init>()V",
            "method_body": "public SimpleScalarValueChecker() {\nthis.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\nthis.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:<init>()V",
            "method_body": "public MultiDirectional() {\nthis.khi   = 2.0;\nthis.gamma = 0.5;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setStartConfiguration([D)V",
            "method_body": "public void setStartConfiguration(final double[] steps)\nfinal int n = steps.length;\nstartConfiguration = new double[n][n];\nfor (int i = 0; i < n; ++i) {\nfinal double[] vertexI = startConfiguration[i];\nfor (int j = 0; j < i + 1; ++j) {\nif (steps[j] == 0.0) {\nSystem.arraycopy(steps, 0, vertexI, 0, j + 1);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\nthrow new OptimizationException(new MaxIterationsExceededException(maxIterations));\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1:compare(Lorg/apache/commons/math/optimization/RealPointValuePair;Lorg/apache/commons/math/optimization/RealPointValuePair;)I",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double[] unit = new double[startPoint.length];\nArrays.fill(unit, 1.0);\nsetStartConfiguration(unit);\nthis.f = f;\nfinal Comparator<RealPointValuePair> comparator =\nnew Comparator<RealPointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goalType == GoalType.MINIMIZE) ?\niterations  = 0;\nevaluations = 0;\nbuildSimplex(startPoint);\nevaluateSimplex(comparator);\nRealPointValuePair[] previous = new RealPointValuePair[simplex.length];\nif (iterations > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.length; ++i) {\nconverged &= checker.converged(iterations, previous[i], simplex[i]);\nif (converged) {\nreturn simplex[0];\nSystem.arraycopy(simplex, 0, previous, 0, simplex.length);\niterateSimplex(comparator);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DDZ)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value,\nfinal boolean copyArray) {\nthis.point = copyArray ? point.clone() : point;\nthis.value  = value;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:<init>()V",
            "method_body": "protected DirectSearchOptimizer() {\nsetConvergenceChecker(new SimpleScalarValueChecker());\nsetMaxIterations(Integer.MAX_VALUE);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/RealConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(RealConvergenceChecker checker) {\nthis.checker = checker;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double[] unit = new double[startPoint.length];\nArrays.fill(unit, 1.0);\nsetStartConfiguration(unit);\nthis.f = f;\nfinal Comparator<RealPointValuePair> comparator =\nnew Comparator<RealPointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goalType == GoalType.MINIMIZE) ?\niterations  = 0;\nevaluations = 0;\nbuildSimplex(startPoint);\nevaluateSimplex(comparator);\nRealPointValuePair[] previous = new RealPointValuePair[simplex.length];\nif (iterations > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.length; ++i) {\nconverged &= checker.converged(iterations, previous[i], simplex[i]);\nif (converged) {\nreturn simplex[0];\nSystem.arraycopy(simplex, 0, previous, 0, simplex.length);\niterateSimplex(comparator);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluate([D)D",
            "method_body": "protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nif (++evaluations > maxEvaluations) {\nreturn f.value(x);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:buildSimplex([D)V",
            "method_body": "private void buildSimplex(final double[] startPoint)\nfinal int n = startPoint.length;\nif (n != startConfiguration.length) {\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = new RealPointValuePair(startPoint, Double.NaN);\nfor (int i = 0; i < n; ++i) {\nfinal double[] confI   = startConfiguration[i];\nfinal double[] vertexI = new double[n];\nfor (int k = 0; k < n; ++k) {\nvertexI[k] = startPoint[k] + confI[k];\nsimplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluateSimplex(Ljava/util/Comparator;)V",
            "method_body": "protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)\nfor (int i = 0; i < simplex.length; ++i) {\nfinal RealPointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new RealPointValuePair(point, evaluate(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn point;\n}",
            "method_id": 19
        }
    ]
}