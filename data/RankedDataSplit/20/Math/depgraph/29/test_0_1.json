{
    "bug_id": 29,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyMixedTypes(RealVectorAbstractTest.java:580)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:remove(I)D",
            "method_body": "public double remove(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn doRemove(index);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nif (referenceCount != count) {\ncurrent = next;\nwhile (states[++next] != FULL) {\n} catch (ArrayIndexOutOfBoundsException e) {\nnext = -2;\nif (current < 0) {\n}\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n) {\nint d = getDimension();\nif (d != n) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn values[index];\nif (states[index] == FREE) {\nreturn missingEntries;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex(I)I",
            "method_body": "private int findInsertionIndex(final int key) {\nreturn findInsertionIndex(keys, states, key, mask);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I",
            "method_body": "private static int findInsertionIndex(final int[] keys, final byte[] states,\nfinal int hash = hashOf(key);\nint index = hash & mask;\nif (states[index] == FREE) {\nreturn index;\n} else if (states[index] == FULL && keys[index] == key) {\nreturn changeIndexSign(index);\nint perturb = perturb(hash);\nint j = index;\nif (states[index] == FULL) {\nj = probe(perturb, j);\nindex = j & mask;\nperturb >>= PERTURB_SHIFT;\nif (states[index] != FULL || keys[index] == key) {\nif (states[index] == FREE) {\nreturn index;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\ndouble previous = missingEntries;\nboolean newMapping = true;\nif (index < 0) {\nindex = changeIndexSign(index);\nprevious = values[index];\nnewMapping = false;\nkeys[index]   = key;\nstates[index] = FULL;\nvalues[index] = value;\nif (newMapping) {\n++size;\nif (shouldGrowTable()) {\ngrowTable();\n++count;\nreturn previous;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:hashOf(I)I",
            "method_body": "private static int hashOf(final int key) {\nfinal int h = key ^ ((key >>> 20) ^ (key >>> 12));\nreturn h ^ (h >>> 7) ^ (h >>> 4);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\nfinal int capacity = computeCapacity(expectedSize);\nkeys   = new int[capacity];\nvalues = new double[capacity];\nstates = new byte[capacity];\nthis.missingEntries = missingEntries;\nmask   = capacity - 1;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
            "method_body": "private static int computeCapacity(final int expectedSize) {\nif (expectedSize == 0) {\nfinal int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);\nfinal int powerOfTwo = Integer.highestOneBit(capacity);\nif (powerOfTwo == capacity) {\nreturn capacity;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\ny = floor(x);\nif (y == x) {\nreturn y;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn y;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 37
        }
    ]
}