{
    "bug_id": 29,
    "test_id": 2,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplySameType",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplySameType(RealVectorAbstractTest.java:575)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeMultiply(RealVector v) {\ncheckVectorDimensions(v.getDimension());\nOpenMapRealVector res = new OpenMapRealVector(this);\nIterator iter = entries.iterator();\nwhile (iter.hasNext()) {\niter.advance();\nres.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\nreturn res;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\nreturn entries.get(index);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn virtualSize;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([DD)V",
            "method_body": "public OpenMapRealVector(double[] values, double epsilon) {\nvirtualSize = values.length;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\nfor (int key = 0; key < values.length; key++) {\ndouble value = values[key];\nif (!isDefaultValue(value)) {\nentries.put(key, value);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([D)V",
            "method_body": "public OpenMapRealVector(double[] values) {\nthis(values, DEFAULT_ZERO_TOLERANCE);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(I)Z",
            "method_body": "public boolean containsKey(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn true;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:growTable()V",
            "method_body": "private void growTable() {\nfinal int oldLength      = states.length;\nfinal int[] oldKeys      = keys;\nfinal double[] oldValues = values;\nfinal byte[] oldStates   = states;\nfinal int newLength = RESIZE_MULTIPLIER * oldLength;\nfinal int[] newKeys = new int[newLength];\nfinal double[] newValues = new double[newLength];\nfinal byte[] newStates = new byte[newLength];\nfinal int newMask = newLength - 1;\nfor (int i = 0; i < oldLength; ++i) {\nif (oldStates[i] == FULL) {\nfinal int key = oldKeys[i];\nfinal int index = findInsertionIndex(newKeys, newStates, key, newMask);\nnewKeys[index]   = key;\nnewValues[index] = oldValues[i];\nnewStates[index] = FULL;\nmask   = newMask;\nkeys   = newKeys;\nvalues = newValues;\nstates = newStates;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\nfinal int length = source.keys.length;\nkeys = new int[length];\nSystem.arraycopy(source.keys, 0, keys, 0, length);\nvalues = new double[length];\nSystem.arraycopy(source.values, 0, values, 0, length);\nstates = new byte[length];\nSystem.arraycopy(source.states, 0, states, 0, length);\nmissingEntries = source.missingEntries;\nsize  = source.size;\nmask  = source.mask;\ncount = source.count;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:key()I",
            "method_body": "public int key()\nif (referenceCount != count) {\nif (current < 0) {\nreturn keys[current];\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:perturb(I)I",
            "method_body": "private static int perturb(final int hash) {\nreturn hash & 0x7fffffff;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:probe(II)I",
            "method_body": "private static int probe(final int perturb, final int j) {\nreturn (j << 2) + j + perturb + 1;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:changeIndexSign(I)I",
            "method_body": "private static int changeIndexSign(final int index) {\nreturn -index - 1;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\nif (current < 0) {\nreturn values[current];\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:iterator()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 19
        }
    ]
}