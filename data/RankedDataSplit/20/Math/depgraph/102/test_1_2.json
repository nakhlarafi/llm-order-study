{
    "bug_id": 102,
    "test_id": 1,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",
    "test_body": "168: public void testChiSquareLargeTestStatistic() throws Exception {\n169: double[] exp = new double[] {\n170: 3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n171: 232921.0, 437665.75\n172: };\n173: 174: long[] obs = new long[] {\n175: 2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n176: };\n177: org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n178: new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n179: double cst = csti.chiSquareTest(exp, obs); \n180: assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n181: assertEquals( \"chi-square test statistic\", \n182: 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(TestUtilsTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 41
        }
    ]
}