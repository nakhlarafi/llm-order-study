{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testKeepInitIfBest",
    "test_body": "193: public void testKeepInitIfBest() {\n194: final double minSin = 3 * Math.PI / 2;\n195: final double offset = 1e-8;\n196: final double delta = 1e-7;\n197: final UnivariateFunction f1 = new Sin();\n198: final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},\n199: new double[] { 0, -1, 0 });\n200: final UnivariateFunction f = FunctionUtils.add(f1, f2);\n201: // A slightly less stringent tolerance would make the test pass\n202: // even with the previous implementation.\n203: final double relTol = 1e-8;\n204: final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);\n205: final double init = minSin + 1.5 * offset;\n206: final UnivariatePointValuePair result\n207: = optimizer.optimize(200, f, GoalType.MINIMIZE,\n208: minSin - 6.789 * delta,\n209: minSin + 9.876 * delta,\n210: init);\n211: final int numEval = optimizer.getEvaluations();\n212: 213: final double sol = result.getPoint();\n214: final double expected = init;\n215: 216: //         System.out.println(\"numEval=\" + numEval);\n217: //         System.out.println(\"min=\" + init + \" f=\" + f.value(init));\n218: //         System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n219: //         System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n220: 221: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n222: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testKeepInitIfBest(BrentOptimizerTest.java:221)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\nnew MaxCountExceededCallback() {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\nif (cb == null){\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nif (yInt < 0) {\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.FunctionUtils$4:<init>([Lorg/apache/commons/math3/analysis/UnivariateFunction;)V",
            "method_body": "public static UnivariateFunction add(final UnivariateFunction ... f) {\nreturn new UnivariateFunction() {\ndouble r = f[0].value(x);\nfor (int i = 1; i < f.length; i++) {\nr += f[i].value(x);\nreturn r;\n}",
            "method_id": 47
        }
    ]
}