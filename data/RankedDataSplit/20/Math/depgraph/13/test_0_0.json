{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "227: public void testLargeSample() {\n228: Random randomizer = new Random(0x5551480dca5b369bl);\n229: double maxError = 0;\n230: for (int degree = 0; degree < 10; ++degree) {\n231: PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n232: 233: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n234: for (int i = 0; i < 40000; ++i) {\n235: double x = -1.0 + i / 20000.0;\n236: fitter.addObservedPoint(1.0, x,\n237: p.value(x) + 0.1 * randomizer.nextGaussian());\n238: }\n239: 240: final double[] init = new double[degree + 1];\n241: PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n242: 243: for (double x = -1.0; x < 1.0; x += 0.01) {\n244: double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n245: (1.0 + FastMath.abs(p.value(x)));\n246: maxError = FastMath.max(maxError, error);\n247: Assert.assertTrue(FastMath.abs(error) < 0.01);\n248: }\n249: }\n250: Assert.assertTrue(maxError > 0.001);\n251: }\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.DiagonalMatrix.getData(DiagonalMatrix.java:204)\nat org.apache.commons.math3.linear.TriDiagonalTransformer.<init>(TriDiagonalTransformer.java:69)\nat org.apache.commons.math3.linear.EigenDecomposition.transformToTridiagonal(EigenDecomposition.java:561)\nat org.apache.commons.math3.linear.EigenDecomposition.<init>(EigenDecomposition.java:122)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.squareRoot(AbstractLeastSquaresOptimizer.java:562)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.setUp(AbstractLeastSquaresOptimizer.java:508)\nat org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.optimizeInternal(BaseAbstractMultivariateVectorOptimizer.java:239)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimizeInternal(AbstractLeastSquaresOptimizer.java:496)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:423)\nat org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:62)\nat org.apache.commons.math3.optimization.fitting.CurveFitter.fit(CurveFitter.java:189)\nat org.apache.commons.math3.optimization.fitting.CurveFitter.fit(CurveFitter.java:153)\nat org.apache.commons.math3.optimization.fitting.PolynomialFitter.fit(PolynomialFitter.java:110)\nat org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:241)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitter:fit([D)[D",
            "method_body": "public double[] fit(double[] guess) {\nreturn fit(new PolynomialFunction.Parametric(), guess);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D",
            "method_body": "protected static double evaluate(double[] coefficients, double argument)\nMathUtils.checkNotNull(coefficients);\nint n = coefficients.length;\nif (n == 0) {\ndouble result = coefficients[n - 1];\nfor (int j = n - 2; j >= 0; j--) {\nreturn result;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nif (a < b) {\nif (a != b) {\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D",
            "method_body": "public double value(double x) {\nreturn evaluate(coefficients, x);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:optimize(ILorg/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction;[D[D[D)Lorg/apache/commons/math3/optimization/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(int maxEval,\nreturn optimizeInternal(maxEval,\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V",
            "method_body": "public PolynomialFunction(double c[])\nsuper();\nMathUtils.checkNotNull(c);\nint n = c.length;\nif (n == 0) {\nwhile ((n > 1) && (c[n - 1] == 0)) {\nthis.coefficients = new double[n];\nSystem.arraycopy(c, 0, this.coefficients, 0, n);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private RealMatrix squareRoot(RealMatrix m) {\nfinal EigenDecomposition dec = new EigenDecomposition(m);\nreturn dec.getSquareRoot();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:optimizeInternal(ILorg/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction;[Lorg/apache/commons/math3/optimization/OptimizationData;)Lorg/apache/commons/math3/optimization/PointVectorValuePair;",
            "method_body": "protected PointVectorValuePair optimizeInternal(final int maxEval,\nreturn super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer:<init>(DDDDD)V",
            "method_body": "public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\nsuper(null); // No custom convergence criterion.\nthis.initialStepBoundFactor = initialStepBoundFactor;\nthis.costRelativeTolerance = costRelativeTolerance;\nthis.parRelativeTolerance = parRelativeTolerance;\nthis.orthoTolerance = orthoTolerance;\nthis.qrRankingThreshold = threshold;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:setUp()V",
            "method_body": "protected void setUp() {\nsuper.setUp();\njacobianEvaluations = 0;\nweightMatrixSqrt = squareRoot(getWeight());\njF = FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction) getObjectiveFunction());\npoint = getStartPoint();\nrows = getTarget().length;\ncols = point.length;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer;)V",
            "method_body": "public PolynomialFitter(DifferentiableMultivariateVectorOptimizer optimizer) {\nsuper(optimizer);\ndegree = -1; // To avoid compilation error until the instance variable is removed.\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
            "method_body": "public LevenbergMarquardtOptimizer() {\nthis(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
            "method_body": "public double[] fit(T f, final double[] initialGuess) {\nreturn fit(Integer.MAX_VALUE, f, initialGuess);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
            "method_body": "public double[] fit(int maxEval, T f,\ndouble[] target  = new double[observations.size()];\ndouble[] weights = new double[observations.size()];\nint i = 0;\nfor (WeightedObservedPoint point : observations) {\ntarget[i]  = point.getY();\nweights[i] = point.getWeight();\n++i;\nif (optimizer == null) {\noptimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:getWeight()D",
            "method_body": "public double getWeight() {\nreturn weight;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/optimization/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V",
            "method_body": "public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {\nthis.f = f;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.CurveFitter:addObservedPoint(DDD)V",
            "method_body": "public void addObservedPoint(double weight, double x, double y) {\nobservations.add(new WeightedObservedPoint(weight, x, y));\n}",
            "method_id": 19
        }
    ]
}