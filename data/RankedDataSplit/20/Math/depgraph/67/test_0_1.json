{
    "bug_id": 67,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "56: public void testQuinticMin() throws MathException {\n57: // The quintic function has zeros at 0, +-0.5 and +-1.\n58: // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n59: UnivariateRealFunction f = new QuinticFunction();\n60: UnivariateRealOptimizer underlying = new BrentOptimizer();\n61: JDKRandomGenerator g = new JDKRandomGenerator();\n62: g.setSeed(4312000053l);\n63: MultiStartUnivariateRealOptimizer minimizer =\n64: new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n65: minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n66: minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n67: 68: try {\n69: minimizer.getOptima();\n70: fail(\"an exception should have been thrown\");\n71: } catch (IllegalStateException ise) {\n72: // expected\n73: } catch (Exception e) {\n74: fail(\"wrong exception caught\");\n75: }\n76: try {\n77: minimizer.getOptimaValues();\n78: fail(\"an exception should have been thrown\");\n79: } catch (IllegalStateException ise) {\n80: // expected\n81: } catch (Exception e) {\n82: fail(\"wrong exception caught\");\n83: }\n84: 85: assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n86: assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n87: assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\nclearResult();\nreturn localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDD)D",
            "method_body": "private double localMin(final UnivariateRealFunction f, final GoalType goalType,\ndouble x = a + GOLDEN_SECTION * (b - a);\ndouble v = x;\ndouble w = x;\ndouble e = 0;\ndouble fx = computeObjectiveValue(f, x);\nif (goalType == GoalType.MAXIMIZE) {\ndouble fv = fx;\ndouble fw = fx;\nint count = 0;\nwhile (count < maximalIterationCount) {\ndouble m = 0.5 * (a + b);\ndouble tol = eps * Math.abs(x) + t;\ndouble t2 = 2 * tol;\nif (Math.abs(x - m) > t2 - 0.5 * (b - a)) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble d = 0;\ndouble u = 0;\nif (Math.abs(e) > tol) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (Math.abs(p) < Math.abs(0.5 * q * r) &&\ne = ((x < m) ? b : a) - x;\nd = GOLDEN_SECTION * e;\nu = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));\ndouble fu = computeObjectiveValue(f, u);\nif (goalType == GoalType.MAXIMIZE) {\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif ((fu <= fw) || (w == x)) {\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else if ((fu <= fv) || (v == x) || (v == w)) {\nv = u;\nfv = fu;\n} else { // termination\nsetResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\nreturn x;\n++count;\n}\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$5:<init>(Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalStateException createIllegalStateException(final Localizable pattern,\nreturn new IllegalStateException() {\n}",
            "method_id": 31
        }
    ]
}