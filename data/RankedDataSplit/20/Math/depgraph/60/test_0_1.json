{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "157: public void testExtremeValues() throws Exception {\n158: NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n159: for (int i = 0; i < 100; i++) { // make sure no convergence exception\n160: double lowerTail = distribution.cumulativeProbability(-i);\n161: double upperTail = distribution.cumulativeProbability(i);\n162: if (i < 9) { // make sure not top-coded \n163: // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n164: // TODO: once MATH-364 is resolved, replace 9 with 30\n165: assertTrue(lowerTail > 0.0d);\n166: assertTrue(upperTail < 1.0d);\n167: }\n168: else { // make sure top coding not reversed\n169: assertTrue(lowerTail < 0.00001);\n170: assertTrue(upperTail > 0.99999);\n171: }\n172: }\n173: 174: assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n175: assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);",
    "stack_trace": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e\nat org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)\nat org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)\nat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)\nat org.apache.commons.math.special.Erf.erf(Erf.java:51)\nat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)\nat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a + 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 21
        }
    ]
}