{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.dfp.DfpTest.testMultiply",
    "test_body": "756: public void testMultiply()\n757: {\n758: test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n759: field.newDfp(\"1\"),\n760: 0, \"Multiply #1\");\n761: 762: test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n763: field.newDfp(\"1\"),\n764: 0, \"Multiply #2\");\n765: 766: test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n767: field.newDfp(\"-1\"),\n768: 0, \"Multiply #3\");\n769: 770: test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n771: field.newDfp(\"-1\"),\n772: 0, \"Multiply #4\");\n773: 774: // basic tests with integers\n775: test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n776: field.newDfp(\"6\"),\n777: 0, \"Multiply #5\");\n778: 779: test(field.newDfp(\"2\").multiply(3),\n780: field.newDfp(\"6\"),\n781: 0, \"Multiply #6\");\n782: 783: test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n784: field.newDfp(\"-6\"),\n785: 0, \"Multiply #7\");\n786: 787: test(field.newDfp(\"-2\").multiply(3),\n788: field.newDfp(\"-6\"),\n789: 0, \"Multiply #8\");\n790: 791: test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n792: field.newDfp(\"-6\"),\n793: 0, \"Multiply #9\");\n794: 795: test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n796: field.newDfp(\"6\"),\n797: 0, \"Multiply #10\");\n798: 799: //multiply by zero\n800: 801: test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n802: field.newDfp(\"-0\"),\n803: 0, \"Multiply #11\");\n804: 805: test(field.newDfp(\"-2\").multiply(0),\n806: field.newDfp(\"-0\"),\n807: 0, \"Multiply #12\");\n808: 809: test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n810: field.newDfp(\"0\"),\n811: 0, \"Multiply #13\");\n812: 813: test(field.newDfp(\"2\").multiply(0),\n814: field.newDfp(\"0\"),\n815: 0, \"Multiply #14\");\n816: 817: test(field.newDfp(\"2\").multiply(pinf),\n818: pinf,\n819: 0, \"Multiply #15\");\n820: 821: test(field.newDfp(\"2\").multiply(ninf),\n822: ninf,\n823: 0, \"Multiply #16\");\n824: 825: test(field.newDfp(\"-2\").multiply(pinf),\n826: ninf,\n827: 0, \"Multiply #17\");\n828: 829: test(field.newDfp(\"-2\").multiply(ninf),\n830: pinf,\n831: 0, \"Multiply #18\");\n832: 833: test(ninf.multiply(field.newDfp(\"-2\")),\n834: pinf,\n835: 0, \"Multiply #18.1\");\n836: 837: test(field.newDfp(\"5e131071\").multiply(2),\n838: pinf,\n839: DfpField.FLAG_OVERFLOW, \"Multiply #19\");\n840: 841: test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n842: field.newDfp(\"9.9999999999999950000e131071\"),\n843: 0, \"Multiply #20\");\n844: 845: test(field.newDfp(\"-5e131071\").multiply(2),\n846: ninf,\n847: DfpField.FLAG_OVERFLOW, \"Multiply #22\");\n848: 849: test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n850: field.newDfp(\"-9.9999999999999950000e131071\"),\n851: 0, \"Multiply #23\");\n852: 853: test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n854: field.newDfp(\"1e-131078\"),\n855: DfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n856: 857: test(field.newDfp(\"1\").multiply(nan),\n858: nan,\n859: 0, \"Multiply #25\");\n860: 861: test(nan.multiply(field.newDfp(\"1\")),\n862: nan,\n863: 0, \"Multiply #26\");\n864: 865: test(nan.multiply(pinf),\n866: nan,\n867: 0, \"Multiply #27\");\n868: 869: test(pinf.multiply(nan),\n870: nan,\n871: 0, \"Multiply #27\");\n872: 873: test(pinf.multiply(field.newDfp(\"0\")),\n874: nan,\n875: DfpField.FLAG_INVALID, \"Multiply #28\");\n876: 877: test(field.newDfp(\"0\").multiply(pinf),\n878: nan,\n879: DfpField.FLAG_INVALID, \"Multiply #29\");\n880: 881: test(pinf.multiply(pinf),\n882: pinf,\n883: 0, \"Multiply #30\");\n884: 885: test(ninf.multiply(pinf),\n886: ninf,\n887: 0, \"Multiply #31\");\n888: 889: test(pinf.multiply(ninf),\n890: ninf,\n891: 0, \"Multiply #32\");\n892: 893: test(ninf.multiply(ninf),\n894: pinf,\n895: 0, \"Multiply #33\");\n896: 897: test(pinf.multiply(1),\n898: pinf,\n899: 0, \"Multiply #34\");\n900: 901: test(pinf.multiply(0),\n902: nan,\n903: DfpField.FLAG_INVALID, \"Multiply #35\");\n904: 905: test(nan.multiply(1),\n906: nan,\n907: 0, \"Multiply #36\");\n908: 909: test(field.newDfp(\"1\").multiply(10000),\n910: field.newDfp(\"10000\"),",
    "stack_trace": "junit.framework.AssertionFailedError: assersion failed Multiply #37 x = NaN flags = 1\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.dfp.DfpTest.test(DfpTest.java:74)\nat org.apache.commons.math3.dfp.DfpTest.testMultiply(DfpTest.java:909)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getField()Lorg/apache/commons/math3/dfp/DfpField;",
            "method_body": "public DfpField getField() {\nreturn field;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn field.getZero();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn field.getRadixDigits();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn (nans == QNAN) || (nans == SNAN);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\nmant = new int[field.getRadixDigits()];\nnans = FINITE;\nthis.field = field;\nboolean isLongMin = false;\nif (x == Long.MIN_VALUE) {\nif (x < 0) {\nsign = 1;\nexp = 0;\nwhile (x != 0) {\nSystem.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\nmant[mant.length - 1] = (int) (x % RADIX);\nx /= RADIX;\nexp++;\nif (isLongMin) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:shiftRight()V",
            "method_body": "protected void shiftRight() {\nfor (int i = 0; i < mant.length - 1; i++) {\nmant[i] = mant[i+1];\nmant[mant.length - 1] = 0;\nexp++;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/Dfp;)V",
            "method_body": "public Dfp(final Dfp d) {\nmant  = d.mant.clone();\nsign  = d.sign;\nexp   = d.exp;\nnans  = d.nans;\nfield = d.field;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V",
            "method_body": "public void setIEEEFlagsBits(final int bits) {\nieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;BB)V",
            "method_body": "protected Dfp(final DfpField field, final byte sign, final byte nans) {\nthis.field = field;\nthis.mant    = new int[field.getRadixDigits()];\nthis.sign    = sign;\nthis.exp     = 0;\nthis.nans    = nans;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:clearIEEEFlags()V",
            "method_body": "public void clearIEEEFlags() {\nieeeFlags = 0;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(I)V",
            "method_body": "public DfpField(final int decimalDigits) {\nthis(decimalDigits, true);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\nthis.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;\nthis.rMode       = RoundingMode.ROUND_HALF_EVEN;\nthis.ieeeFlags   = 0;\nthis.zero        = new Dfp(this, 0);\nthis.one         = new Dfp(this, 1);\nthis.two         = new Dfp(this, 2);\nif (computeConstants) {\nsynchronized (DfpField.class) {\ncomputeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));\nsqr2           = new Dfp(this, sqr2String);\nsqr2Split      = split(sqr2String);\nsqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);\nsqr3           = new Dfp(this, sqr3String);\nsqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);\npi             = new Dfp(this, piString);\npiSplit        = split(piString);\ne              = new Dfp(this, eString);\neSplit         = split(eString);\nln2            = new Dfp(this, ln2String);\nln2Split       = split(ln2String);\nln5            = new Dfp(this, ln5String);\nln5Split       = split(ln5String);\nln10           = new Dfp(this, ln10String);\n}\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:split(Ljava/lang/String;)[Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "private Dfp[] split(final String a) {\nDfp result[] = new Dfp[2];\nboolean leading = true;\nint sp = 0;\nint sig = 0;\nchar[] buf = new char[a.length()];\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '1' && buf[i] <= '9') {\nleading = false;\nif (buf[i] == '.') {\nsig += (400 - sig) % 4;\nleading = false;\nif (sig == (radixDigits / 2) * 4) {\nsp = i;\nbreak;\nif (buf[i] >= '0' && buf[i] <= '9' && !leading) {\nsig ++;\nresult[0] = new Dfp(this, new String(buf, 0, sp));\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '0' && buf[i] <= '9' && i < sp) {\nbuf[i] = '0';\nresult[1] = new Dfp(this, new String(buf));\nreturn result;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 34
        }
    ]
}