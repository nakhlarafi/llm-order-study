{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "224: public void testLargeSample() {\n225: Random randomizer = new Random(0x5551480dca5b369bl);\n226: double maxError = 0;\n227: for (int degree = 0; degree < 10; ++degree) {\n228: PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n229: 230: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n231: for (int i = 0; i < 40000; ++i) {\n232: double x = -1.0 + i / 20000.0;\n233: fitter.addObservedPoint(1.0, x,\n234: p.value(x) + 0.1 * randomizer.nextGaussian());\n235: }\n236: 237: final double[] init = new double[degree + 1];\n238: PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n239: 240: for (double x = -1.0; x < 1.0; x += 0.01) {\n241: double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n242: (1.0 + FastMath.abs(p.value(x)));\n243: maxError = FastMath.max(maxError, error);\n244: Assert.assertTrue(FastMath.abs(error) < 0.01);\n245: }\n246: }\n247: Assert.assertTrue(maxError > 0.001);\n248: }\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)\nat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)\nat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)\nat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)\nat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)\nat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V",
            "method_body": "public ModelFunctionJacobian(MultivariateMatrixFunction j) {\njacobian = j;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V",
            "method_body": "public ModelFunction(MultivariateVectorFunction m) {\nmodel = m;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V",
            "method_body": "public Target(double[] observations) {\ntarget = observations.clone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\nthis.rows = rows;\nthis.columns = columns;\nblockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nblocks[blockIndex] = new double[iHeight * jWidth];\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\nif (cb == null){\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nreturn super.optimize(optData);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V",
            "method_body": "public ModelFunctionJacobian getModelFunctionJacobian() {\nreturn new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nMatrixUtils.checkMatrixIndex(this, row, column);\nfinal int iBlock = row / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nblocks[iBlock * blockColumns + jBlock][k] = value;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 39
        }
    ]
}