{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "224: public void testLargeSample() {\n225: Random randomizer = new Random(0x5551480dca5b369bl);\n226: double maxError = 0;\n227: for (int degree = 0; degree < 10; ++degree) {\n228: PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n229: 230: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n231: for (int i = 0; i < 40000; ++i) {\n232: double x = -1.0 + i / 20000.0;\n233: fitter.addObservedPoint(1.0, x,\n234: p.value(x) + 0.1 * randomizer.nextGaussian());\n235: }\n236: 237: final double[] init = new double[degree + 1];\n238: PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n239: 240: for (double x = -1.0; x < 1.0; x += 0.01) {\n241: double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n242: (1.0 + FastMath.abs(p.value(x)));\n243: maxError = FastMath.max(maxError, error);\n244: Assert.assertTrue(FastMath.abs(error) < 0.01);\n245: }\n246: }\n247: Assert.assertTrue(maxError > 0.001);\n248: }\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)\nat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)\nat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)\nat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)\nat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)\nat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix;",
            "method_body": "public BlockRealMatrix copy() {\nBlockRealMatrix copied = new BlockRealMatrix(rows, columns);\nfor (int i = 0; i < blocks.length; ++i) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V",
            "method_body": "public ModelFunction getModelFunction() {\nreturn new ModelFunction(new MultivariateVectorFunction() {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "private void parseOptimizationData(OptimizationData... optData) {\nfor (OptimizationData data : optData) {\nif (data instanceof Weight) {\nweightMatrixSqrt = squareRoot(((Weight) data).getWeight());\nbreak;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 47
        }
    ]
}