{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting",
    "test_body": "398: public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n399: Circle circle = new Circle();\n400: circle.addPoint( 30.0,  68.0);\n401: circle.addPoint( 50.0,  -6.0);\n402: circle.addPoint(110.0, -20.0);\n403: circle.addPoint( 35.0,  15.0);\n404: circle.addPoint( 45.0,  97.0);\n405: LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n406: VectorialPointValuePair optimum =\n407: optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n408: new double[] { 98.680, 47.345 });\n409: assertTrue(optimizer.getEvaluations() < 10);\n410: assertTrue(optimizer.getJacobianEvaluations() < 10);\n411: double rms = optimizer.getRMS();\n412: assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n413: Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n414: assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n415: assertEquals(96.07590211815305, center.x,      1.0e-10);\n416: assertEquals(48.13516790438953, center.y,      1.0e-10);\n417: double[][] cov = optimizer.getCovariances();\n418: assertEquals(1.839, cov[0][0], 0.001);\n419: assertEquals(0.731, cov[0][1], 0.001);\n420: assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n421: assertEquals(0.786, cov[1][1], 0.001);\n422: double[] errors = optimizer.guessParametersErrors();\n423: assertEquals(1.384, errors[0], 0.001);\n424: assertEquals(0.905, errors[1], 0.001);\n425: 426: // add perfect measurements and check errors are reduced\n427: double  r = circle.getRadius(center);\n428: for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n429: circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n430: }\n431: double[] target = new double[circle.getN()];\n432: Arrays.fill(target, 0.0);\n433: double[] weights = new double[circle.getN()];\n434: Arrays.fill(weights, 2.0);\n435: optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n436: cov = optimizer.getCovariances();\n437: assertEquals(0.0016, cov[0][0], 0.001);\n438: assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n439: assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n440: assertEquals(0.0016, cov[1][1], 0.001);\n441: errors = optimizer.guessParametersErrors();\n442: assertEquals(0.004, errors[0], 0.001);\n443: assertEquals(0.004, errors[1], 0.001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.004> but was:<0.0019737107108948474>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting(LevenbergMarquardtOptimizerTest.java:442)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nreturn data[row][column];\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension)\nsuper(rowDimension, columnDimension);\ndata = new double[rowDimension][columnDimension];\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\ncopyIn(d);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\nif (data == null) {\nif (row > 0) {\nif (column > 0) {\nfinal int nRows = subMatrix.length;\nif (nRows == 0) {\nfinal int nCols = subMatrix[0].length;\nif (nCols == 0) {\ndata = new double[subMatrix.length][nCols];\nfor (int i = 0; i < data.length; ++i) {\nif (subMatrix[i].length != nCols) {\nSystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n} else {\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {\nlu = null;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\nif (rowDimension < 1 ) {\nif (columnDimension <= 0) {\nlu = null;\n}",
            "method_id": 49
        }
    ]
}