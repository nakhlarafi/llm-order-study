{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "58: public void testQuinticMin() throws MathException {\n59: // The quintic function has zeros at 0, +-0.5 and +-1.\n60: // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n61: UnivariateRealFunction f = new QuinticFunction();\n62: UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n63: underlying.setMaxEvaluations(300);\n64: JDKRandomGenerator g = new JDKRandomGenerator();\n65: g.setSeed(4312000053L);\n66: MultiStartUnivariateRealOptimizer optimizer =\n67: new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n68: 69: UnivariateRealPointValuePair optimum\n70: = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n71: assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n72: assertEquals(-0.0443342695, optimum.getValue(), 1e-9);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn searchStart;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double point)\nevaluations.incrementCount();\n}\nreturn function.value(point);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,\nif (f == null) {\nif (goalType == null) {\nsearchMin = min;\nsearchMax = max;\nsearchStart = startValue;\ngoal = goalType;\nfunction = f;\nevaluations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getConvergenceChecker()Lorg/apache/commons/math/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "protected UnivariateRealPointValuePair doOptimize()\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariateRealPointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariateRealPointValuePair previous = null;\nUnivariateRealPointValuePair current\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x <= m) {\nd = tol1;\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nif (d >= 0) {\nu = x + tol1;\nu = x - tol1;\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else if (fu <= fv ||\nv = u;\nfv = fu;\nprevious = current;\ncurrent = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);\nif (checker != null) {\n} else { // Default termination (Brent's criterion).\nreturn current;\n++iter;\n}\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nassert maxUlps > 0 && maxUlps < NAN_GAP;\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer$1:compare(Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "private void sortPairs(final GoalType goal) {\nArrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\nif (o1 == null) {\n} else if (o2 == null) {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goal == GoalType.MINIMIZE) ?\n}",
            "method_id": 32
        }
    ]
}