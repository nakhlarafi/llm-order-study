{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "58: public void testQuinticMin() throws MathException {\n59: // The quintic function has zeros at 0, +-0.5 and +-1.\n60: // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n61: UnivariateRealFunction f = new QuinticFunction();\n62: UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n63: underlying.setMaxEvaluations(300);\n64: JDKRandomGenerator g = new JDKRandomGenerator();\n65: g.setSeed(4312000053L);\n66: MultiStartUnivariateRealOptimizer optimizer =\n67: new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n68: 69: UnivariateRealPointValuePair optimum\n70: = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n71: assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n72: assertEquals(-0.0443342695, optimum.getValue(), 1e-9);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\noptima = new UnivariateRealPointValuePair[starts];\ntotalEvaluations = 0;\nfor (int i = 0; i < starts; ++i) {\nfinal double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\nfinal double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\noptima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n}\nfinal int usedEvaluations = optimizer.getEvaluations();\noptimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);\ntotalEvaluations += usedEvaluations;\nsortPairs(goal);\nif (optima[0] == null) {\nreturn optima[0];\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(final FUNC f,\nreturn optimize(f, goal, min, max, 0);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>(DD)V",
            "method_body": "public BrentOptimizer(double rel,\ndouble abs) {\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(DD)D",
            "method_body": "public static double min(final double a, final double b) {\nreturn (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nreturn (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:<init>(Lorg/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer;ILorg/apache/commons/math/random/RandomGenerator;)V",
            "method_body": "public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,\nfinal RandomGenerator generator) {\nthis.optimizer = optimizer;\nthis.starts = starts;\nthis.generator = generator;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:sortPairs(Lorg/apache/commons/math/optimization/GoalType;)V",
            "method_body": "private void sortPairs(final GoalType goal) {\nArrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\nif (o1 == null) {\n} else if (o2 == null) {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goal == GoalType.MINIMIZE) ?\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer$1:compare(Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;)I",
            "method_body": "private void sortPairs(final GoalType goal) {\nArrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\nif (o1 == null) {\n} else if (o2 == null) {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goal == GoalType.MINIMIZE) ?\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn evaluations.getMaximalCount();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations.getCount();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,\nreturn optimize(f, goalType, min, max, min + 0.5 * (max - min));\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:getMaximalCount()I",
            "method_body": "public int getMaximalCount() {\nreturn maximalCount;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nevaluations.setMaximalCount(maxEvaluations);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:<init>(DD)V",
            "method_body": "public UnivariateRealPointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getGoalType()Lorg/apache/commons/math/optimization/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMin()D",
            "method_body": "public double getMin() {\nreturn searchMin;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMax()D",
            "method_body": "public double getMax() {\nreturn searchMax;\n}",
            "method_id": 19
        }
    ]
}