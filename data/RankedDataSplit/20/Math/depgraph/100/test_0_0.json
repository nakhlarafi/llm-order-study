{
    "bug_id": 100,
    "test_id": 0,
    "test_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",
    "test_body": "451: public void testBoundParameters() throws EstimationException {\n452: EstimatedParameter[] p = {\n453: new EstimatedParameter(\"unbound0\", 2, false),\n454: new EstimatedParameter(\"unbound1\", 2, false),\n455: new EstimatedParameter(\"bound\",    2, true)\n456: };\n457: LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n458: new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n459: new EstimatedParameter[] { p[0], p[1], p[2] },\n460: 3.0),\n461: new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n462: new EstimatedParameter[] { p[0], p[1], p[2] },\n463: 1.0),\n464: new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n465: new EstimatedParameter[] { p[0], p[1], p[2] },\n466: 7.0)\n467: });\n468: 469: GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n470: estimator.estimate(problem);\n471: assertTrue(estimator.getRMS(problem) < 1.0e-10);\n472: double[][] covariances = estimator.getCovariances(problem);\n473: int i0 = 0, i1 = 1;",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 6\nat org.apache.commons.math.estimation.AbstractEstimator.getCovariances(AbstractEstimator.java:173)\nat org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters(GaussNewtonEstimatorTest.java:472)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
            "method_body": "public double[][] getCovariances(EstimationProblem problem)\nupdateJacobian();\nfinal int rows = problem.getMeasurements().length;\nfinal int cols = problem.getAllParameters().length;\nfinal int max  = cols * rows;\ndouble[][] jTj = new double[cols][cols];\nfor (int i = 0; i < cols; ++i) {\nfor (int j = i; j < cols; ++j) {\ndouble sum = 0;\nfor (int k = 0; k < max; k += cols) {\nsum += jacobian[k + i] * jacobian[k + j];\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "public void estimate(EstimationProblem problem)\ninitializeEstimate(problem);\ndouble[] grad             = new double[parameters.length];\nRealMatrixImpl bDecrement = new RealMatrixImpl(parameters.length, 1);\ndouble[][] bDecrementData = bDecrement.getDataRef();\nRealMatrixImpl wGradGradT = new RealMatrixImpl(parameters.length, parameters.length);\ndouble[][] wggData        = wGradGradT.getDataRef();\ndouble previous = Double.POSITIVE_INFINITY;\nincrementJacobianEvaluationsCounter();\nRealMatrix b = new RealMatrixImpl(parameters.length, 1);\nRealMatrix a = new RealMatrixImpl(parameters.length, parameters.length);\nfor (int i = 0; i < measurements.length; ++i) {\nif (! measurements [i].isIgnored()) {\ndouble weight   = measurements[i].getWeight();\ndouble residual = measurements[i].getResidual();\nfor (int j = 0; j < parameters.length; ++j) {\ngrad[j] = measurements[i].getPartial(parameters[j]);\nbDecrementData[j][0] = weight * residual * grad[j];\nfor (int k = 0; k < parameters.length; ++k) {\ndouble[] wggRow = wggData[k];\ndouble gk = grad[k];\nfor (int l = 0; l < parameters.length; ++l) {\nwggRow[l] =  weight * gk * grad[l];\na = a.add(wGradGradT);\nb = b.add(bDecrement);\nRealMatrix dX = a.solve(b);\nfor (int i = 0; i < parameters.length; ++i) {\nparameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));\n}\nprevious = cost;\nupdateResidualsAndCost();\n} while ((getCostEvaluations() < 2) ||\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getRMS(Lorg/apache/commons/math/estimation/EstimationProblem;)D",
            "method_body": "public double getRMS(EstimationProblem problem) {\nWeightedMeasurement[] wm = problem.getMeasurements();\ndouble criterion = 0;\nfor (int i = 0; i < wm.length; ++i) {\ndouble residual = wm[i].getResidual();\ncriterion += wm[i].getWeight() * residual * residual;\nreturn Math.sqrt(criterion / wm.length);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getCostEvaluations()I",
            "method_body": "public final int getCostEvaluations() {\nreturn costEvaluations;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateJacobian()V",
            "method_body": "protected void updateJacobian() {\nincrementJacobianEvaluationsCounter();\nArrays.fill(jacobian, 0);\nfor (int i = 0, index = 0; i < rows; i++) {\nWeightedMeasurement wm = measurements[i];\ndouble factor = -Math.sqrt(wm.getWeight());\nfor (int j = 0; j < cols; ++j) {\njacobian[index++] = factor * wm.getPartial(parameters[j]);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:isIgnored()Z",
            "method_body": "public boolean isIgnored() {\nreturn ignored;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:getWeight()D",
            "method_body": "public double getWeight() {\nreturn weight;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:getResidual()D",
            "method_body": "public double getResidual() {\nreturn measuredValue - getTheoreticalValue();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++costEvaluations > maxCostEval) {\ncost = 0;\nfor (int i = 0, index = 0; i < rows; i++, index += cols) {\nWeightedMeasurement wm = measurements[i];\ndouble residual = wm.getResidual();\nresiduals[i] = Math.sqrt(wm.getWeight()) * residual;\ncost += wm.getWeight() * residual * residual;\ncost = Math.sqrt(cost);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:initializeEstimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "protected void initializeEstimate(EstimationProblem problem) {\ncostEvaluations     = 0;\njacobianEvaluations = 0;\nmeasurements = problem.getMeasurements();\nparameters   = problem.getUnboundParameters();\nrows      = measurements.length;\ncols      = parameters.length;\njacobian  = new double[rows * cols];\nresiduals = new double[rows];\ncost = Double.POSITIVE_INFINITY;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:getEstimate()D",
            "method_body": "public double getEstimate() {\nreturn estimate;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>(II)V",
            "method_body": "public RealMatrixImpl(int rowDimension, int columnDimension) {\nif (rowDimension <= 0 || columnDimension <= 0) {\ndata = new double[rowDimension][columnDimension];\nlu = null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:<init>(Ljava/lang/String;DZ)V",
            "method_body": "public EstimatedParameter(String name,\nboolean bound) {\nthis.name  = name;\nestimate   = firstEstimate;\nthis.bound = bound;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:setEstimate(D)V",
            "method_body": "public void setEstimate(double estimate) {\nthis.estimate = estimate;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>([[D)V",
            "method_body": "public RealMatrixImpl(double[][] d) {\nthis.copyIn(d);\nlu = null;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:<init>(IDD)V",
            "method_body": "public GaussNewtonEstimator(int maxCostEval,\ndouble steadyStateThreshold) {\nsetMaxCostEval(maxCostEval);\nthis.steadyStateThreshold = steadyStateThreshold;\nthis.convergence          = convergence;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:setMaxCostEval(I)V",
            "method_body": "public final void setMaxCostEval(int maxCostEval) {\nthis.maxCostEval = maxCostEval;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:incrementJacobianEvaluationsCounter()V",
            "method_body": "protected final void incrementJacobianEvaluationsCounter() {\n++jacobianEvaluations;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getAllParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
            "method_body": "public EstimatedParameter[] getAllParameters() {\nreturn (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);\n}",
            "method_id": 19
        }
    ]
}