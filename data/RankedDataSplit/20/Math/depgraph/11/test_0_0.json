{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution",
    "test_body": "139: public void testUnivariateDistribution() {\n140: final double[] mu = { -1.5 };\n141: final double[][] sigma = { { 1 } };\n142: 143: final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);\n144: 145: final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);\n146: final Random rng = new Random();\n147: final int numCases = 100;\n148: final double tol = Math.ulp(1d);\n149: for (int i = 0; i < numCases; i++) {\n150: final double v = rng.nextDouble() * 10 - 5;\n151: Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);\n152: }",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.23644016090654427> but was:<0.5926675925866471>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:density(D)D",
            "method_body": "public double density(double x) {\nfinal double x0 = x - mean;\nfinal double x1 = x0 / standardDeviation;\nreturn FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.MultivariateNormalDistribution:getExponentTerm([D)D",
            "method_body": "private double getExponentTerm(final double[] values) {\nfinal double[] centered = new double[values.length];\nfor (int i = 0; i < centered.length; i++) {\ncentered[i] = values[i] - getMeans()[i];\nfinal double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);\ndouble sum = 0;\nfor (int i = 0; i < preMultiplied.length; i++) {\nsum += preMultiplied[i] * centered[i];\nreturn FastMath.exp(-0.5 * sum);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.MultivariateNormalDistribution:density([D)D",
            "method_body": "public double density(final double[] vals) throws DimensionMismatchException {\nfinal int dim = getDimension();\nif (vals.length != dim) {\nreturn FastMath.pow(2 * FastMath.PI, -dim / 2) *\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.MultivariateNormalDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;[D[[D)V",
            "method_body": "public MultivariateNormalDistribution(RandomGenerator rng,\nsuper(rng, means.length);\nfinal int dim = means.length;\nif (covariances.length != dim) {\nfor (int i = 0; i < dim; i++) {\nif (dim != covariances[i].length) {\nthis.means = MathArrays.copyOf(means);\ncovarianceMatrix = new Array2DRowRealMatrix(covariances);\nfinal EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\ncovarianceMatrixInverse = covMatDec.getSolver().getInverse();\ncovarianceMatrixDeterminant = covMatDec.getDeterminant();\nfinal double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\nfor (int i = 0; i < covMatEigenvalues.length; i++) {\nif (covMatEigenvalues[i] < 0) {\nfinal Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\nfor (int v = 0; v < dim; v++) {\nfinal double[] evec = covMatDec.getEigenvector(v).toArray();\ncovMatEigenvectors.setColumn(v, evec);\nfinal RealMatrix tmpMatrix = covMatEigenvectors.transpose();\nfor (int row = 0; row < dim; row++) {\nfinal double factor = FastMath.sqrt(covMatEigenvalues[row]);\nfor (int col = 0; col < dim; col++) {\ntmpMatrix.multiplyEntry(row, col, factor);\nsamplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.MultivariateNormalDistribution:getMeans()[D",
            "method_body": "public double[] getMeans() {\nreturn MathArrays.copyOf(means);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DD)D",
            "method_body": "public static double pow(double x, double y) {\nfinal double lns[] = new double[2];\nif (y == 0.0) {\nif (x != x) { // X is NaN\nif (x == 0) {\nif (x == Double.POSITIVE_INFINITY) {\nif (y == Double.POSITIVE_INFINITY) {\nif (x == Double.NEGATIVE_INFINITY) {\nif (y == Double.NEGATIVE_INFINITY) {\nif (x < 0) {\nif (y < 8e298 && y > -8e298) {\ndouble tmp1 = y * HEX_40000000;\nya = y + tmp1 - tmp1;\nyb = y - ya;\n} else {\nfinal double lores = log(x, lns);\nif (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\ndouble lna = lns[0];\ndouble lnb = lns[1];\ndouble tmp1 = lna * HEX_40000000;\ndouble tmp2 = lna + tmp1 - tmp1;\nlnb += lna - tmp2;\nlna = tmp2;\nfinal double aa = lna * ya;\nfinal double ab = lna * yb + lnb * ya + lnb * yb;\nlna = aa+ab;\nlnb = -(lna - aa - ab);\ndouble z = 1.0 / 120.0;\nz = z * lnb + (1.0 / 24.0);\nz = z * lnb + (1.0 / 6.0);\nz = z * lnb + 0.5;\nz = z * lnb + 1.0;\nz = z * lnb;\nfinal double result = exp(lna, z, null);\nreturn result;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\nlong bits = Double.doubleToLongBits(x);\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x == Double.POSITIVE_INFINITY) {\nint exp = (int)(bits >> 52)-1023;\nif ((bits & 0x7ff0000000000000L) == 0) {\nif (exp == -1 || exp == 0) {\nif (x < 1.01 && x > 0.99 && hiPrec == null) {\nfinal double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\nfinal double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\ndouble lnza = 0.0;\ndouble lnzb = 0.0;\nif (hiPrec != null) {\ndouble tmp = epsilon * HEX_40000000;\ndouble aa = epsilon + tmp - tmp;\ndouble ab = epsilon - aa;\ndouble xa = aa;\ndouble xb = ab;\nfinal double numer = bits & 0x3ffffffffffL;\nfinal double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\naa = numer - xa*denom - xb * denom;\nxb += aa / denom;\nfinal double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];\ndouble ya = lnCoef_last[0];\ndouble yb = lnCoef_last[1];\nfor (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\nfinal double[] lnCoef_i = LN_HI_PREC_COEF[i];\naa = ya + lnCoef_i[0];\nab = yb + lnCoef_i[1];\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\nlnza = aa + ab;\nlnzb = -(lnza - aa - ab);\n} else {\ndouble a = LN_2_A*exp;\ndouble b = 0.0;\ndouble c = a+lnm[0];\ndouble d = -(c-a-lnm[0]);\na = c;\nb = b + d;\nc = a + lnza;\nd = -(c - a - lnza);\na = c;\nb = b + d;\nc = a + LN_2_B*exp;\nd = -(c - a - LN_2_B*exp);\na = c;\nb = b + d;\nc = a + lnm[1];\nd = -(c - a - lnm[1]);\na = c;\nb = b + d;\nc = a + lnzb;\nd = -(c - a - lnzb);\na = c;\nb = b + d;\nif (hiPrec != null) {\nhiPrec[0] = a;\nhiPrec[1] = b;\nreturn a + b;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DI)D",
            "method_body": "public static double pow(double d, int e) {\nif (e == 0) {\nreturn 1.0;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\nintVal = (int) -x;\nif (intVal > 746) {\nif (intVal > 709) {\nif (intVal == 709) {\nintVal++;\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\nintVal = -intVal;\nintVal = (int) x;\nif (intVal > 709) {\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\nfinal double tempC = tempB + tempA;\nif (extra != 0.0) {\nresult = tempC*z + tempB + tempA;\nif (hiPrec != null) {\nreturn result;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([DI)[D",
            "method_body": "public static double[] copyOf(double[] source, int len) {\nfinal double[] output = new double[len];\nSystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\nreturn output;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([D)[D",
            "method_body": "public static double[] copyOf(double[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
            "method_body": "public NormalDistribution(RandomGenerator rng,\nsuper(rng);\nif (sd <= 0) {\nthis.mean = mean;\nstandardDeviation = sd;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DD)V",
            "method_body": "public NormalDistribution(double mean, double sd)\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DDD)V",
            "method_body": "public NormalDistribution(double mean, double sd, double inverseCumAccuracy)\nthis(new Well19937c(), mean, sd, inverseCumAccuracy);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.MultivariateNormalDistribution:<init>([D[[D)V",
            "method_body": "public MultivariateNormalDistribution(final double[] means,\nthis(new Well19937c(), means, covariances);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:preMultiply([D)[D",
            "method_body": "public double[] preMultiply(final double[] v)\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nif (v.length != nRows) {\nfinal double[] out = new double[nCols];\nfor (int col = 0; col < nCols; ++col) {\ndouble sum = 0;\nfor (int i = 0; i < nRows; ++i) {\nsum += data[i][col] * v[i];\nout[col] = sum;\nreturn out;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution:getDimension()I",
            "method_body": "public int getDimension() {\nreturn dimension;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:multiplyEntry(IID)V",
            "method_body": "public void multiplyEntry(final int row, final int column,\nMatrixUtils.checkMatrixIndex(this, row, column);\ndata[row][column] *= factor;\n}",
            "method_id": 19
        }
    ]
}