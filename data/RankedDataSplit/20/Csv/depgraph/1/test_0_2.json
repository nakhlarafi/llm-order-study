{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "505: public void testGetLineNumberWithCR() throws Exception {\n506: CSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n507: 508: assertEquals(0, parser.getLineNumber());\n509: assertNotNull(parser.getRecord());\n510: assertEquals(1, parser.getLineNumber());\n511: assertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat DEFAULT =\npublic static final CSVFormat RFC4180 =\npublic static final CSVFormat EXCEL =\npublic static final CSVFormat TDF =\npublic static final CSVFormat MYSQL =\nString[] header) {\nthis.delimiter = delimiter;\nthis.encapsulator = encapsulator;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.surroundingSpacesIgnored = surroundingSpacesIgnored;\nthis.emptyLinesIgnored = emptyLinesIgnored;\nthis.lineSeparator = lineSeparator;\nthis.header = header;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(char c) {\nreturn c == '\\n' || c == '\\r';\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEncapsulator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEncapsulator(char encapsulator) {\nif (isLineBreak(encapsulator)) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(char escape) {\nif (isLineBreak(escape)) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withSurroundingSpacesIgnored(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withSurroundingSpacesIgnored(boolean surroundingSpacesIgnored) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEmptyLinesIgnored(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEmptyLinesIgnored(boolean emptyLinesIgnored) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 46
        }
    ]
}