{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData",
    "test_body": "378: public void testExcelHeaderCountLessThanData() throws Exception {\n379: final String code = \"A,B,C,,\\r\\na,b,c,d,e\\r\\n\";\n380: final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL.withHeader());\n381: try {",
    "stack_trace": "java.lang.IllegalArgumentException: The header contains a duplicate name: \"\" in [A, B, C, , ]\nat org.apache.commons.csv.CSVParser.initializeHeader(CSVParser.java:367)\nat org.apache.commons.csv.CSVParser.<init>(CSVParser.java:248)\nat org.apache.commons.csv.CSVParser.parse(CSVParser.java:178)\nat org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData(CSVParserTest.java:380)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:values()[Ljava/lang/String;",
            "method_body": "String[] values() {\nreturn values;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
            "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\nthis.addRecordValue();\nbreak;\nthis.addRecordValue();\nbreak;\n} while (this.reusableToken.type == TOKEN);\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nreturn result;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
            "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\nString[] headerRecord = null;\nif (formatHeader.length == 0) {\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheaderRecord = nextRecord.values();\n} else {\nif (headerRecord != null) {\nfor (int i = 0; i < headerRecord.length; i++) {\nfinal String header = headerRecord[i];\nfinal boolean containsHeader = hdrMap.containsKey(header);\nfinal boolean emptyHeader = header == null || header.trim().isEmpty();\nif (containsHeader &&\nthrow new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\nhdrMap.put(header, Integer.valueOf(i));\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
            "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
            "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscapeCharacter());\nthis.quoteChar = mapNullToDisabled(format.getQuoteCharacter());\nthis.commentStart = mapNullToDisabled(format.getCommentMarker());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
            "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
            "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.csv.Token:<init>()V",
            "method_body": "Token.Type type = INVALID;\nfinal StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
            "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\nenum Type {\nINVALID,\nTOKEN,\nEOF,\nEORECORD,\nCOMMENT\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 51
        }
    ]
}