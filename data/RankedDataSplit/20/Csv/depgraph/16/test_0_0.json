{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking",
    "test_body": "1002: public void testIteratorSequenceBreaking() throws IOException {\n1003: final String fiveRows = \"1\\n2\\n3\\n4\\n5\\n\";\n1004: 1005: // Iterator hasNext() shouldn't break sequence\n1006: CSVParser parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1007: int recordNumber = 0;\n1008: Iterator<CSVRecord> iter = parser.iterator();\n1009: recordNumber = 0;\n1010: while (iter.hasNext()) {\n1011: CSVRecord record = iter.next();\n1012: recordNumber++;\n1013: assertEquals(String.valueOf(recordNumber), record.get(0));\n1014: if (recordNumber >= 2) {\n1015: break;\n1016: }\n1017: }\n1018: iter.hasNext();\n1019: while (iter.hasNext()) {\n1020: CSVRecord record = iter.next();\n1021: recordNumber++;\n1022: assertEquals(String.valueOf(recordNumber), record.get(0));\n1023: }\n1024: 1025: // Consecutive enhanced for loops shouldn't break sequence\n1026: parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1027: recordNumber = 0;\n1028: for (CSVRecord record : parser) {\n1029: recordNumber++;\n1030: assertEquals(String.valueOf(recordNumber), record.get(0));\n1031: if (recordNumber >= 2) {\n1032: break;\n1033: }\n1034: }\n1035: for (CSVRecord record : parser) {\n1036: recordNumber++;\n1037: assertEquals(String.valueOf(recordNumber), record.get(0));\n1038: }\n1039: 1040: // Consecutive enhanced for loops with hasNext() peeking shouldn't break sequence\n1041: parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1042: recordNumber = 0;\n1043: for (CSVRecord record : parser) {\n1044: recordNumber++;\n1045: assertEquals(String.valueOf(recordNumber), record.get(0));\n1046: if (recordNumber >= 2) {\n1047: break;\n1048: }\n1049: }\n1050: parser.iterator().hasNext();\n1051: for (CSVRecord record : parser) {\n1052: recordNumber++;\n1053: assertEquals(String.valueOf(recordNumber), record.get(0));\n1054: }",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[3]> but was:<[4]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking(CSVParserTest.java:1053)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.recordList.clear();\nStringBuilder sb = null;\nfinal long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\nthis.addRecordValue(true);\nbreak;\nif (this.reusableToken.isReady) {\n} while (this.reusableToken.type == TOKEN);\nif (!this.recordList.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\nreturn result;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V",
            "method_body": "public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber)\nthrows IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\nthis.characterOffset = characterOffset;\nthis.recordNumber = recordNumber - 1;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue(Z)V",
            "method_body": "private void addRecordValue(final boolean lastRecord) {\nfinal String input = this.reusableToken.content.toString();\nfinal String inputClean = this.format.getTrim() ? input.trim() : input;\nif (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) {\nfinal String nullString = this.format.getNullString();\nthis.recordList.add(inputClean.equals(nullString) ? null : inputClean);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:get(I)Ljava/lang/String;",
            "method_body": "public String get(final int i) {\nreturn values[i];\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:parse(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;",
            "method_body": "public CSVParser parse(final Reader in) throws IOException {\nreturn new CSVParser(in, this);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
            "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nreturn hdrMap;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nthis(reader, format, 0, 1);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nreturn CSVParser.this.nextRecord();\nif (CSVParser.this.isClosed()) {\nif (this.current == null) {\nthis.current = this.getNextRecord();\nreturn this.current != null;\nif (CSVParser.this.isClosed()) {\nCSVRecord next = this.current;\nthis.current = null;\nif (next == null) {\nreturn next;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:isClosed()Z",
            "method_body": "public boolean isClosed() {\nreturn this.lexer.isClosed();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$1:hasNext()Z",
            "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nreturn CSVParser.this.nextRecord();\nif (CSVParser.this.isClosed()) {\nif (this.current == null) {\nthis.current = this.getNextRecord();\nreturn this.current != null;\nif (CSVParser.this.isClosed()) {\nCSVRecord next = this.current;\nthis.current = null;\nif (next == null) {\nreturn next;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isClosed()Z",
            "method_body": "boolean isClosed() {\nreturn reader.isClosed();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:isClosed()Z",
            "method_body": "public boolean isClosed() {\nreturn closed;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$1:getNextRecord()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nreturn CSVParser.this.nextRecord();\nif (CSVParser.this.isClosed()) {\nif (this.current == null) {\nthis.current = this.getNextRecord();\nreturn this.current != null;\nif (CSVParser.this.isClosed()) {\nCSVRecord next = this.current;\nthis.current = null;\nif (next == null) {\nreturn next;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$1:next()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nreturn CSVParser.this.nextRecord();\nif (CSVParser.this.isClosed()) {\nif (this.current == null) {\nthis.current = this.getNextRecord();\nreturn this.current != null;\nif (CSVParser.this.isClosed()) {\nCSVRecord next = this.current;\nthis.current = null;\nif (next == null) {\nreturn next;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:getCharacterPosition()J",
            "method_body": "long getCharacterPosition() {\nreturn reader.getPosition();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getPosition()J",
            "method_body": "long getPosition() {\nreturn this.position;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.Token:reset()V",
            "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
            "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.recordList.clear();\nStringBuilder sb = null;\nfinal long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\nthis.addRecordValue(true);\nbreak;\nif (this.reusableToken.isReady) {\n} while (this.reusableToken.type == TOKEN);\nif (!this.recordList.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\nreturn result;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
            "method_body": "public String getNullString() {\nreturn nullString;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V",
            "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber,\nfinal long characterPosition) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\nthis.characterPosition = characterPosition;\n}",
            "method_id": 19
        }
    ]
}