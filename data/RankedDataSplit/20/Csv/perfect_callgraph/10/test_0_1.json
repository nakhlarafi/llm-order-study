{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testHeader",
    "test_body": "public void testHeader() throws IOException {\nfinal StringWriter sw = new StringWriter();\nfinal CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)\n.withHeader(\"C1\", \"C2\", \"C3\"));\nprinter.printRecord(\"a\", \"b\", \"c\");\nprinter.printRecord(\"x\", \"y\", \"z\");\nassertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\nprinter.close();",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[C1,C2,C3\n]a,b,c\nx,y,z\n> but was:<[]a,b,c\nx,y,z\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testHeader(CSVPrinterTest.java:495)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
            "method_body": "private void print(final Object object, final CharSequence value,\nif (!newRecord) {\nout.append(format.getDelimiter());\nif (format.isQuoting()) {\n} else if (format.isEscaping()) {\nout.append(value, offset, offset + len);\nnewRecord = false;\n}",
            "method_id": 24
        }
    ]
}