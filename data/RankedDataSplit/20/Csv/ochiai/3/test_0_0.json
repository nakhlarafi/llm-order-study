{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testBackslashEscaping",
    "test_body": "public void testBackslashEscaping() throws IOException {\n285: // To avoid confusion over the need for escaping chars in java code,\n// We will test with a forward slash as the escape char, and a single\n// quote as the encapsulator.\n289: final String code =\n\"one,two,three\\n\" // 0\n+ \"'',''\\n\"       // 1) empty encapsulators\n+ \"/',/'\\n\"       // 2) single encapsulators\n+ \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n+ \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n+ \"/,,/,\\n\"       // 5) separator escaped\n+ \"//,//\\n\"       // 6) escape escaped\n+ \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n+ \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n+ \"9,   /\\n   \\n\"  // escaped newline\n+ \"\";\nfinal String[][] res = {\n{\"one\", \"two\", \"three\"}, // 0\n{\"\", \"\"},                // 1\n{\"'\", \"'\"},              // 2\n{\"'\", \"'\"},              // 3\n{\"'\", \"'\"},              // 4\n{\",\", \",\"},              // 5\n{\"/\", \"/\"},              // 6\n{\"/\", \"/\"},              // 7\n{\"   8   \", \"   \\\"quoted \\\"\\\" /\\\" / string\\\"   \"},\n{\"9\", \"   \\n   \"},\n};\n314: 315: final CSVFormat format = CSVFormat.newBuilder(',').withQuoteChar('\\'').withEscape('/')\n.withIgnoreEmptyLines(true).withRecordSeparator(CRLF).build();\n318: final CSVParser parser = new CSVParser(code, format);\nfinal List<CSVRecord> records = parser.getRecords();\nassertTrue(records.size() > 0);\n322: Utils.compare(\"Records do not match expected result\", res, records);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Records do not match expected result (entry 8): arrays first differed at element [1]; expected:<   \"quoted \"\" [/]\" / string\"   > but was:<   \"quoted \"\" []\" / string\"   >\nat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:50)\nat org.junit.Assert.internalArrayEquals(Assert.java:473)\nat org.junit.Assert.assertArrayEquals(Assert.java:265)\nat org.apache.commons.csv.Utils.compare(Utils.java:59)\nat org.apache.commons.csv.CSVParserTest.testBackslashEscaping(CSVParserTest.java:322)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.Lexer:readEscape()I",
            "method_body": "int readEscape() throws IOException {\nfinal int c = in.read();\nswitch (c) {\nreturn c;\nreturn c;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
            "method_body": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\nif (readEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) unescaped);\nc = in.read(); // continue\n} else {\ntkn.content.append((char) c);\nc = in.read(); // continue\nif (ignoreSurroundingSpaces) {\nreturn tkn;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
            "method_body": "boolean isStartOfLine(final int c) {\nreturn c == LF || c == CR || c == UNDEFINED;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
            "method_body": "boolean isEscape(final int c) {\nreturn c == escape;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
            "method_body": "boolean isQuoteChar(final int c) {\nreturn c == quoteChar;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
            "method_body": "boolean isCommentStart(final int c) {\nreturn c == commmentStart;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
            "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commmentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
            "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
            "method_body": "boolean readEndOfLine(int c) throws IOException {\nif (c == CR && in.lookAhead() == LF) {\nreturn c == LF || c == CR;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
            "method_body": "boolean isEndOfFile(final int c) {\nreturn c == END_OF_STREAM;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
            "method_body": "boolean isDelimiter(final int c) {\nreturn c == delimiter;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
            "method_body": "CSVLexer(final CSVFormat format, final ExtendedBufferedReader in) {\nsuper(format, in);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
            "method_body": "Token nextToken(final Token token) throws IOException {\nint lastChar = in.getLastChar();\nint c = in.read();\nboolean eol = readEndOfLine(c);\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\nreturn token;\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nwhile (token.type == INVALID) {\nif (ignoreSurroundingSpaces) {\nif (isDelimiter(c)) {\n} else if (eol) {\n} else if (isQuoteChar(c)) {\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\nparseSimpleToken(token, c);\nreturn token;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
            "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
            "method_body": "public Character getEscape() {\nreturn escape;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
            "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
            "method_body": "int getLastChar() {\nreturn lastChar;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
            "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\nenum Type {\nINVALID,\nTOKEN,\nEOF,\nEORECORD,\nCOMMENT\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
            "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\nlineCounter++;\nlastChar = current;\nreturn lastChar;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
            "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}",
            "method_id": 19
        }
    ]
}