{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "public void testGetLineNumberWithCR() throws Exception {\nCSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n508: assertEquals(0, parser.getLineNumber());\nassertNotNull(parser.getRecord());\nassertEquals(1, parser.getLineNumber());\nassertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
            "method_body": "Lexer(CSVFormat format, ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.isEncapsulating = format.isEncapsulating();\nthis.isEscaping = format.isEscaping();\nthis.isCommentEnabled = format.isCommentingEnabled();\nthis.delimiter = format.getDelimiter();\nthis.escape = format.getEscape();\nthis.encapsulator = format.getEncapsulator();\nthis.commmentStart = format.getCommentStart();\nthis.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored();\nthis.emptyLinesIgnored = format.isEmptyLinesIgnored();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEndOfLine(I)Z",
            "method_body": "boolean isEndOfLine(int c) throws IOException {\nif (c == '\\r' && in.lookAhead() == '\\n') {\nreturn (c == '\\n' || c == '\\r');\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
            "method_body": "boolean isEndOfFile(int c) {\nreturn c == ExtendedBufferedReader.END_OF_STREAM;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
            "method_body": "abstract Token nextToken(Token reusableToken) throws IOException;\nreturn c == delimiter;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
            "method_body": "public CSVLexer(CSVFormat format, ExtendedBufferedReader in) {\nsuper(format, in);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
            "method_body": "Token nextToken(Token tkn) throws IOException {\nint lastChar = in.readAgain();\nint c = in.read();\nboolean eol = isEndOfLine(c);\nc = in.readAgain();\nif (emptyLinesIgnored) {\n&& !isEndOfFile(lastChar)) {\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\nwhile (tkn.type == INVALID) {\nif (surroundingSpacesIgnored) {\nif (isCommentStart(c)) {\n} else if (isDelimiter(c)) {\n} else if (eol) {\n} else if (isEncapsulator(c)) {\n} else if (isEndOfFile(c)) {\nsimpleTokenLexer(tkn, c);\nreturn tkn;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
            "method_body": "public int read() throws IOException {\nint current = super.read();\nif (current == '\\n') {\nlastChar = current;\nreturn lastChar;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:readAgain()I",
            "method_body": "int readAgain() {\nreturn lastChar;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isCommentingEnabled()Z",
            "method_body": "public boolean isCommentingEnabled() {\nreturn this.commentStart != DISABLED;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()C",
            "method_body": "public char getEscape() {\nreturn escape;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isSurroundingSpacesIgnored()Z",
            "method_body": "public boolean isSurroundingSpacesIgnored() {\nreturn surroundingSpacesIgnored;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEmptyLinesIgnored()Z",
            "method_body": "public boolean isEmptyLinesIgnored() {\nreturn emptyLinesIgnored;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
            "method_body": "static final int END_OF_STREAM = -1;\nprivate int lastChar = UNDEFINED;\nprivate int lineCounter = 0;\nsuper(r);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()C",
            "method_body": "public char getCommentStart() {\nreturn commentStart;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "void validate() throws IllegalArgumentException {\nif (delimiter == encapsulator) {\nif (delimiter == escape) {\nif (delimiter == commentStart) {\nif (encapsulator != DISABLED && encapsulator == commentStart) {\nif (escape != DISABLED && escape == commentStart) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEncapsulating()Z",
            "method_body": "boolean isEncapsulating() {\nreturn this.encapsulator != DISABLED;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getEncapsulator()C",
            "method_body": "public char getEncapsulator() {\nreturn encapsulator;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CCCCZZLjava/lang/String;[Ljava/lang/String;)V",
            "method_body": "CSVFormat(\nString[] header) {\nthis.delimiter = delimiter;\nthis.encapsulator = encapsulator;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.surroundingSpacesIgnored = surroundingSpacesIgnored;\nthis.emptyLinesIgnored = emptyLinesIgnored;\nthis.lineSeparator = lineSeparator;\nthis.header = header;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat DEFAULT =\npublic static final CSVFormat RFC4180 =\npublic static final CSVFormat EXCEL =\npublic static final CSVFormat TDF =\npublic static final CSVFormat MYSQL =\nString[] header) {\nthis.delimiter = delimiter;\nthis.encapsulator = encapsulator;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.surroundingSpacesIgnored = surroundingSpacesIgnored;\nthis.emptyLinesIgnored = emptyLinesIgnored;\nthis.lineSeparator = lineSeparator;\nthis.header = header;\n}",
            "method_id": 39
        }
    ]
}