{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "public void testGetLineNumberWithCR() throws Exception {\nCSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n508: assertEquals(0, parser.getLineNumber());\nassertNotNull(parser.getRecord());\nassertEquals(1, parser.getLineNumber());\nassertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVParser:getLineNumber()I",
            "method_body": "public int getLineNumber() {\nreturn lexer.getLineNumber();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(String input, CSVFormat format) throws IOException{\nthis(new StringReader(input), format);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn in.getLineNumber();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineCounter;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
            "method_body": "int lookAhead() throws IOException {\nsuper.mark(1);\nint c = super.read();\nsuper.reset();\nreturn c;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
            "method_body": "String[] getHeader() {\nreturn header;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(Reader input, CSVFormat format) throws IOException {\nformat.validate();\nthis.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\nthis.headerMapping = initializeHeader(format);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:getRecord()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\nrecord.add(reusableToken.content.toString());\nbreak;\n} while (reusableToken.type == TOKEN);\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\nreturn result;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader(Lorg/apache/commons/csv/CSVFormat;)Ljava/util/Map;",
            "method_body": "private Map<String, Integer> initializeHeader(CSVFormat format) throws IOException {\nMap<String, Integer> hdrMap = null;\nif (format.getHeader() != null) {\nreturn hdrMap;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;)V",
            "method_body": "CSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
            "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\nCSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
            "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\nrecord.add(reusableToken.content.toString());\nbreak;\n} while (reusableToken.type == TOKEN);\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\nreturn result;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.Token:reset()Lorg/apache/commons/csv/Token;",
            "method_body": "Token reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\nreturn this;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
            "method_body": "boolean isEscape(int c) {\nreturn isEscaping && c == escape;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEncapsulator(I)Z",
            "method_body": "boolean isEncapsulator(int c) {\nreturn isEncapsulating && c == encapsulator;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
            "method_body": "boolean isCommentStart(int c) {\nreturn isCommentEnabled && c == commmentStart;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:simpleTokenLexer(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
            "method_body": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\nif (isEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\n} else if (isDelimiter(c)) {\n} else if (isEscape(c)) {\ntkn.content.append((char) c);\nc = in.read();\nif (surroundingSpacesIgnored) {\nreturn tkn;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
            "method_body": "boolean isEscaping() {\nreturn this.escape != DISABLED;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.Token:<init>()V",
            "method_body": "Token.Type type = INVALID;\nStringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\nreturn this;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
            "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\nenum Type {\nINVALID,\nTOKEN,\nEOF,\nEORECORD\n}",
            "method_id": 19
        }
    ]
}