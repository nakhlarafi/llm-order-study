{
    "bug_id": 13,
    "test_id": 1,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput",
    "test_body": "public void testMySqlNullOutput() throws IOException {\nObject[] s = new String[] { \"NULL\", null };\nCSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\nStringWriter writer = new StringWriter();\nCSVPrinter printer = new CSVPrinter(writer, format);\nprinter.printRecord(s);\nprinter.close();\nString expected = \"\\\"NULL\\\"\\tNULL\\n\";\nassertEquals(expected, writer.toString());\nString[] record0 = toFirstRecordValues(expected, format);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<\"NULL\"\t[NULL]\n> but was:<\"NULL\"\t[\"NULL\"]\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput(CSVPrinterTest.java:331)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
            "method_body": "public void print(final Object value) throws IOException {\nif (value == null) {\nfinal String nullString = format.getNullString();\nstrValue = nullString == null ? Constants.EMPTY : nullString;\n} else {\nstrValue = value.toString();\nthis.print(value, strValue, 0, strValue.length());\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len)\nif (!newRecord) {\nout.append(format.getDelimiter());\nif (format.isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len);\nnewRecord = false;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
            "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
            "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nif (format.getHeaderComments() != null) {\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
            "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
            "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
            "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 37
        }
    ]
}