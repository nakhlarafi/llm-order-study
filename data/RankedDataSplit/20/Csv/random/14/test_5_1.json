{
    "bug_id": 14,
    "test_id": 5,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4",
    "test_body": "public void testEscapeBackslash4() throws IOException {\nStringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\nprinter.print(\"\\\\\\\\\");\n}\nassertEquals(\"\\\\\\\\\", sw.toString());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\\\\]> but was:<['\\\\']>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4(CSVPrinterTest.java:328)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
            "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nif (!newRecord) {\nif (object == null) {\n} else if (isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len, out, newRecord);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nif (format.getHeaderComments() != null) {\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
            "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\nif (value == null) {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();\nreturn c == LF || c == CR;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
            "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\nswitch (quoteModePolicy) {\nif (len <= 0) {\nchar c = value.charAt(pos);\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\nif (!quote) {\nif (!quote) {\nout.append(quoteChar);\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\npos++;\n}\nout.append(value, start, pos);\nout.append(quoteChar);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
            "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
            "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nif (header != null) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 35
        }
    ]
}