{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.ObjectNavigatorFactory:<init>(Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/FieldNamingStrategy2;)V",
            "method_body": "public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy2 fieldNamingPolicy) {\nPreconditions.checkNotNull(fieldNamingPolicy);\nthis.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\nthis.fieldNamingPolicy = fieldNamingPolicy;\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.google.gson.ObjectNavigatorFactory:create(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectNavigator;",
            "method_body": "public ObjectNavigator create(ObjectTypePair objTypePair) {\nreturn new ObjectNavigator(objTypePair, strategy);\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:push(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair push(ObjectTypePair obj) {\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:pop()Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair pop() {\nreturn stack.pop();\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:contains(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean contains(ObjectTypePair obj) {\nif (obj == null) {\nfor (ObjectTypePair stackObject : stack) {\nreturn false;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:<init>(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)V",
            "method_body": "ObjectTypePair(Object obj, Type type, boolean preserveType) {\nthis.obj = obj;\nthis.type = type;\nthis.preserveType = preserveType;\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getObject()Ljava/lang/Object;",
            "method_body": "Object getObject() {\nreturn obj;\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:setObject(Ljava/lang/Object;)V",
            "method_body": "void setObject(Object obj) {\nthis.obj = obj;\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getMatchingHandler(Lcom/google/gson/ParameterizedTypeHandlerMap;)Lcom/google/gson/Pair;",
            "method_body": "<HANDLER> Pair<HANDLER, ObjectTypePair> getMatchingHandler(\nHANDLER handler = null;\nif (!preserveType && obj != null) {\nhandler = handlers.getHandlerFor(type);\nreturn handler == null ? null : new Pair<HANDLER, ObjectTypePair>(handler, this);\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:toMoreSpecificType()Lcom/google/gson/ObjectTypePair;",
            "method_body": "ObjectTypePair toMoreSpecificType() {\nif (preserveType || obj == null) {\nreturn this;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:<init>(Lcom/google/gson/ObjectTypePair;Lcom/google/gson/ExclusionStrategy;)V",
            "method_body": "public void start(ObjectTypePair node);\nObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\nPreconditions.checkNotNull(exclusionStrategy);\nthis.objTypePair = objTypePair;\nthis.exclusionStrategy = exclusionStrategy;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:accept(Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "public void accept(Visitor visitor) {\nTypeInfo objTypeInfo = new TypeInfo(objTypePair.type);\nif (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\nboolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\nif (!visitedWithCustomHandler) {\nObject obj = objTypePair.getObject();\nObject objectToVisit = (obj == null) ? visitor.getTarget() : obj;\nif (objectToVisit == null) {\nobjTypePair.setObject(objectToVisit);\nvisitor.start(objTypePair);\nif (objTypeInfo.isArray()) {\n} else if (objTypeInfo.getActualType() == Object.class\nvisitor.startVisitingObject(objectToVisit);\nObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\nClass<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass();\nfor (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =\nif (!curr.isSynthetic()) {\nnavigateClassFields(objectToVisit, curr, visitor);\nvisitor.end(objTypePair);\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:navigateClassFields(Ljava/lang/Object;Ljava/lang/Class;Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field f : fields) {\nFieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\nif (exclusionStrategy.shouldSkipField(fieldAttributes)\nTypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n}",
            "method_id": 92
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:<init>(Lcom/google/gson/ObjectNavigatorFactory;ZLcom/google/gson/ParameterizedTypeHandlerMap;Lcom/google/gson/JsonSerializationContext;Lcom/google/gson/MemoryRefStack;)V",
            "method_body": "JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\nMemoryRefStack ancestors) {\nthis.factory = factory;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.context = context;\nthis.ancestors = ancestors;\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:start(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void start(ObjectTypePair node) {\nif (node == null) {\nif (ancestors.contains(node)) {\nancestors.push(node);\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:end(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void end(ObjectTypePair node) {\nif (node != null) {\nancestors.pop();\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:startVisitingObject(Ljava/lang/Object;)V",
            "method_body": "public void startVisitingObject(Object node) {\nassignToRoot(new JsonObject());\n}",
            "method_id": 96
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:visitUsingCustomHandler(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\nObject obj = objTypePair.getObject();\nif (obj == null) {\nJsonElement element = findAndInvokeCustomSerializer(objTypePair);\nif (element != null) {\nreturn false;\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:findAndInvokeCustomSerializer(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/JsonElement;",
            "method_body": "private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\nPair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\nif (pair == null) {\nreturn null;\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:assignToRoot(Lcom/google/gson/JsonElement;)V",
            "method_body": "private void assignToRoot(JsonElement newRoot) {\nPreconditions.checkNotNull(newRoot);\nroot = newRoot;\n}",
            "method_id": 99
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getTypeInfoForField(Ljava/lang/reflect/Field;Ljava/lang/reflect/Type;)Lcom/google/gson/TypeInfo;",
            "method_body": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {\nClass<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);\nType type = f.getGenericType();\nType actualType = getActualType(type, typeDefiningF, classDefiningF);\n}",
            "method_id": 100
        }
    ]
}