{
    "bug_id": 24,
    "test_id": 2,
    "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011",
    "test_body": "public void testParseLocalDate_weekyear_month_week_2011() {\nChronology chrono = GJChronology.getInstanceUTC();\nDateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\nassertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2011-01-03> but was:<2010-01-04>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011(TestDateTimeFormatter.java:434)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
            "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
            "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
            "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
            "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
            "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
            "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
            "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
            "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nreturn getWeeksInYear(year - 1);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
            "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
            "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
            "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
            "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
            "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
            "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
            "method_body": "public int getOffset() {\nreturn iOffset;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
            "method_id": 79
        }
    ]
}