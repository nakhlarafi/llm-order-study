{
    "bug_id": 26,
    "test_id": 2,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer",
    "test_body": "public void testWithMillisOfSecondInDstChange_Paris_summer() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withMillisOfSecond(0);\nassertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer(TestDateTimeZoneCutover.java:1108)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
            "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
            "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
            "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
            "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
            "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
            "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
            "method_body": "protected AbstractInstant() {\nsuper();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
            "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
            "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
            "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
            "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
            "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
            "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 79
        }
    ]
}