{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016",
    "test_body": "public void testParseLocalDate_year_month_week_2016() {\nChronology chrono = GJChronology.getInstanceUTC();\nDateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\nassertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(\"2016-01-01\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2016-01-04> but was:<2014-12-29>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016(TestDateTimeFormatter.java:490)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
            "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
            "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
            "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
            "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
            "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
            "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
            "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
            "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
            "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
            "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
            "method_id": 79
        }
    ]
}