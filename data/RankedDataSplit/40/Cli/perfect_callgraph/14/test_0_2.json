{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugCLI144Test.testFileValidator",
    "test_body": "public void testFileValidator() {\nfinal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nDefaultOption fileNameOption = obuilder.withShortName(\"f\")\n.withLongName(\"file-name\").withRequired(true).withDescription(\n\"name of an existing file\").withArgument(\nabuilder.withName(\"file-name\").withValidator(\nFileValidator.getExistingFileInstance())\n.create()).create();\nGroup options = gbuilder.withName(\"options\").withOption(fileNameOption)\n.create();\nParser parser = new Parser();\nparser.setHelpTrigger(\"--help\");\nparser.setGroup(options);\n60: final String fileName = \"src/test/org/apache/commons/cli2/bug/BugCLI144Test.java\";\nCommandLine cl = parser\n.parseAndHelp(new String[] { \"--file-name\", fileName });",
    "stack_trace": "java.lang.ClassCastException: java.io.File cannot be cast to java.lang.String\nat org.apache.commons.cli2.validation.FileValidator.validate(FileValidator.java:123)\nat org.apache.commons.cli2.option.ArgumentImpl.validate(ArgumentImpl.java:251)\nat org.apache.commons.cli2.option.ParentImpl.validate(ParentImpl.java:124)\nat org.apache.commons.cli2.option.DefaultOption.validate(DefaultOption.java:176)\nat org.apache.commons.cli2.option.GroupImpl.validate(GroupImpl.java:262)\nat org.apache.commons.cli2.commandline.Parser.parse(Parser.java:104)\nat org.apache.commons.cli2.commandline.Parser.parseAndHelp(Parser.java:124)\nat org.apache.commons.cli2.bug.BugCLI144Test.testFileValidator(BugCLI144Test.java:61)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getUndefaultedValues(Lorg/apache/commons/cli2/Option;)Ljava/util/List;",
            "method_body": "public List getUndefaultedValues(Option option) {\nList valueList = (List) values.get(option);\nif (valueList == null) {\nvalueList = Collections.EMPTY_LIST;\nreturn valueList;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:looksLikeOption(Ljava/lang/String;)Z",
            "method_body": "public boolean looksLikeOption(final String trigger) {\nfor (final Iterator i = prefixes.iterator(); i.hasNext();) {\nfinal String prefix = (String) i.next();\nif (trigger.startsWith(prefix)) {\n}\nreturn false;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:setDefaultValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)V",
            "method_body": "public void setDefaultValues(final Option option,\nif (defaults == null) {\ndefaultValues.remove(option);\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:validate(Ljava/util/List;)V",
            "method_body": "public void validate(final List values) throws InvalidArgumentException {\nfor (final ListIterator i = values.listIterator(); i.hasNext();) {\nfinal String name = (String)i.next();\nfinal File f = new File(name);\nif ((existing && !f.exists())\ni.set(f);\n}\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:setExisting(Z)V",
            "method_body": "public void setExisting(boolean existing) {\nthis.existing = existing;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:setFile(Z)V",
            "method_body": "public void setFile(boolean file) {\nthis.file = file;\n}",
            "method_id": 85
        }
    ]
}