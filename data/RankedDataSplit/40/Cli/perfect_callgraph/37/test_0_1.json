{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "public void shouldParseShortOptionWithoutValue() throws Exception {\nString[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n49: final CommandLine commandLine = parser.parse(options, twoShortOptions);\n51: assertTrue(commandLine.hasOption(\"t1\"));\nassertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\nassertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private final String opt;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\n* @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:argName(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder argName(final String argName)\nthis.argName = argName;\nreturn this;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:numberOfArgs(I)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder numberOfArgs(final int numberOfArgs)\nthis.numberOfArgs = numberOfArgs;\nreturn this;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:optionalArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder optionalArg(final boolean isOptional)\nthis.optionalArg = isOptional;\nreturn this;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\nreturn hasArg(true);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\nfor (OptionGroup group : options.getOptionGroups())\ncmd = new CommandLine();\nif (arguments != null)\nfor (String argument : arguments)\nhandleToken(argument);\ncheckRequiredArgs();\nhandleProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isOption(String token)\nreturn isLongOption(token) || isShortOption(token);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isLongOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isLongOption(String token)\nif (!token.startsWith(\"-\") || token.length() == 1)\nint pos = token.indexOf(\"=\");\nString t = pos == -1 ? token : token.substring(0, pos);\nif (!options.getMatchingOptions(t).isEmpty())\nelse if (getLongPrefix(token) != null && !token.startsWith(\"--\"))\nreturn false;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:getLongPrefix(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String getLongPrefix(String token)\nString t = Util.stripLeadingHyphens(token);\nString opt = null;\nfor (i = t.length() - 2; i > 1; i--)\nString prefix = t.substring(0, i);\nif (options.hasLongOption(prefix))\nreturn opt;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\ncheckRequiredArgs();\noption = (Option) option.clone();\nupdateRequiredOptions(option);\ncmd.addOption(option);\nif (option.hasArg())\ncurrentOption = option;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(Option option) throws AlreadySelectedException\nif (option.isRequired())\nif (options.getOptionGroup(option) != null)\n}",
            "method_id": 55
        }
    ]
}