{
    "bug_id": 12,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.GnuParserTest.testShortWithEqual",
    "test_body": "public void testShortWithEqual() throws Exception\n{\nString[] args = new String[] { \"-f=bar\" };\n203: Options options = new Options();\noptions.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n206: Parser parser = new GnuParser();\nCommandLine cl = parser.parse(options, args);\n209: assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[]bar> but was:<[=]bar>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.GnuParserTest.testShortWithEqual(GnuParserTest.java:209)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn this.required;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn (this.valuesep > 0);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\nthis.values.add(value);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\nOptionBuilder.numberOfArgs = 1;\nreturn instance;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 55
        }
    ]
}