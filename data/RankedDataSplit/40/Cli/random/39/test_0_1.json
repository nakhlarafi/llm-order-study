{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required(final boolean required)\nthis.required = required;\nreturn this;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List<Option> helpOptions()\nreturn new ArrayList<Option>(shortOpts.values());\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List<String> getValuesList()\nreturn values;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(final Iterator<String> iter)\nif (eatTheRest)\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(final String arg, final ListIterator<String> iter) throws ParseException\nfinal boolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nfinal Option opt = (Option) getOptions().getOption(arg).clone();\nupdateRequiredOptions(opt);\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(final char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(final Options options, final String[] arguments) throws ParseException\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private final String opt;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\n* @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(final Option opt, final ListIterator<String> iter) throws ParseException\nwhile (iter.hasNext())\nfinal String str = iter.next();\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\nopt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n}\n}\nif (opt.getValues() == null && !opt.hasOptionalArg())\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nfinal int length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(final Options options, String[] arguments, final Properties properties, final boolean stopAtNonOption)\nfor (final Option opt : options.helpOptions())\nopt.clearValues();\n}\nfor (final OptionGroup group : options.getOptionGroups())\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nfinal List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nfinal ListIterator<String> iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nfinal String t = iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(final Option opt) throws ParseException\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn values.isEmpty();\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:isValueCode(C)Z",
            "method_body": "public static boolean isValueCode(final char ch)\nreturn ch == '@'\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createFile(Ljava/lang/String;)Ljava/io/File;",
            "method_body": "public static File createFile(final String str)\nreturn new File(str);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn type;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Class<?> clazz) throws ParseException\nif (PatternOptionBuilder.STRING_VALUE == clazz)\nelse if (PatternOptionBuilder.OBJECT_VALUE == clazz)\nelse if (PatternOptionBuilder.NUMBER_VALUE == clazz)\nelse if (PatternOptionBuilder.DATE_VALUE == clazz)\nelse if (PatternOptionBuilder.CLASS_VALUE == clazz)\nelse if (PatternOptionBuilder.FILE_VALUE == clazz)\nelse if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\nreturn createFile(str);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(final String pattern)\nchar opt = ' ';\nboolean required = false;\nClass<?> type = null;\nfinal Options options = new Options();\nfor (int i = 0; i < pattern.length(); i++)\nfinal char ch = pattern.charAt(i);\nif (!isValueCode(ch))\nif (opt != ' ')\nopt = ch;\nelse if (ch == '!')\ntype = (Class<?>) getValueClass(ch);\nif (opt != ' ')\nfinal Option option = Option.builder(String.valueOf(opt))\noptions.addOption(option);\nreturn options;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(final String str, final Object obj) throws ParseException\nreturn createValue(str, (Class<?>) obj);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final String opt) throws ParseException\nreturn getParsedOptionValue(resolveOption(opt));\n}",
            "method_id": 66
        }
    ]
}