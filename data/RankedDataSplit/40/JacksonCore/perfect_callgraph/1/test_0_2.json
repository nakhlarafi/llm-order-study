{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestParserNonStandard.testAllowNaN",
    "test_body": "public void testAllowNaN() throws Exception {\n_testAllowNaN(false);\n_testAllowNaN(true);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected an exception with one of substrings ([can not be represented as BigDecimal]): got one with message \"null\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.test.BaseTest.verifyException(BaseTest.java:355)\nat com.fasterxml.jackson.core.json.TestParserNonStandard._testAllowNaN(TestParserNonStandard.java:394)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:getText()Ljava/lang/String;",
            "method_body": "public String getText()\nJsonToken t = _currToken;\nif (t == JsonToken.VALUE_STRING) {\nreturn _getText2(t);\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_getText2(Lcom/fasterxml/jackson/core/JsonToken;)Ljava/lang/String;",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:close()V",
            "method_body": "public void close() throws IOException\nsuper.close();\n_symbols.release();\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_handleUnexpectedValue(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "protected JsonToken _handleUnexpectedValue(int i)\nswitch (i) {\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_skipWSOrEnd()I",
            "method_body": "private int _skipWSOrEnd()\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\nreturn i;\nif (i != INT_SPACE) {\n}\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_matchToken(Ljava/lang/String;I)V",
            "method_body": "protected void _matchToken(String matchStr, int i)\nfinal int len = matchStr.length();\nif (_inputPtr >= _inputEnd) {\nif (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {\n++_inputPtr;\n} while (++i < len);\nif (_inputPtr >= _inputEnd) {\nchar c = _inputBuffer[_inputPtr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars",
            "method_id": 85
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;)V",
            "method_body": "final static char[] NO_CHARS = new char[0];\nprivate boolean _hasSegments = false;\n* Amount of characters in segments in {@link _segments}",
            "method_id": 86
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<clinit>()V",
            "method_body": "final static char[] NO_CHARS = new char[0];\nprivate boolean _hasSegments = false;\n* Amount of characters in segments in {@link _segments}",
            "method_id": 87
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:releaseBuffers()V",
            "method_body": "public void releaseBuffers()\nif (_allocator == null) {\nif (_currentSegment != null) {\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithString(Ljava/lang/String;)V",
            "method_body": "public void resetWithString(String value)\n_inputBuffer = null;\n_inputStart = -1;\n_inputLen = 0;\n_resultString = value;\n_resultArray = null;\nif (_hasSegments) {\n_currentSize = 0;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:contentsAsString()Ljava/lang/String;",
            "method_body": "public String contentsAsString()\nif (_resultString == null) {\nreturn _resultString;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:<init>(Lcom/fasterxml/jackson/core/json/JsonReadContext;III)V",
            "method_body": "public JsonReadContext(JsonReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createRootContext()Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public static JsonReadContext createRootContext()\nreturn new JsonReadContext(null, TYPE_ROOT, 1, 0);\n}",
            "method_id": 92
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createChildArrayContext(II)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext createChildArrayContext(int lineNr, int colNr)\nJsonReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new JsonReadContext(this, TYPE_ARRAY, lineNr, colNr);\nreturn ctxt;\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:expectComma()Z",
            "method_body": "public boolean expectComma()\nint ix = ++_index; // starts from -1\nreturn (_type != TYPE_ROOT && ix > 0);\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "JsonToken(String token)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n_serialized = token;\n_serializedChars = token.toCharArray();\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\n}",
            "method_id": 96
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser$1:<clinit>()V",
            "method_body": "protected String _getText2(JsonToken t)\nif (t == null) {\nswitch (t) {\nreturn _textBuffer.contentsAsString();\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<init>(Ljava/lang/Object;JII)V",
            "method_body": "public JsonLocation(Object srcRef, long totalChars, int lineNr, int colNr)\nthis(srcRef, -1L, totalChars, lineNr, colNr);\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<init>(Ljava/lang/Object;JJII)V",
            "method_body": "public JsonLocation(Object sourceRef, long totalBytes, long totalChars,\n{\n_sourceRef = sourceRef;\n_totalBytes = totalBytes;\n_totalChars = totalChars;\n_lineNr = lineNr;\n_columnNr = columnNr;\n}",
            "method_id": 99
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 1L;\npublic final static JsonLocation NA = new JsonLocation(\"N/A\", -1L, -1L, -1, -1);\nthis(srcRef, -1L, totalChars, lineNr, colNr);\n}",
            "method_id": 100
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonLocation:toString()Ljava/lang/String;",
            "method_body": "public String toString()\nStringBuilder sb = new StringBuilder(80);\nsb.append(\"[Source: \");\nif (_sourceRef == null) {\nsb.append(_sourceRef.toString());\nsb.append(\"; line: \");\nsb.append(_lineNr);\nsb.append(\", column: \");\nsb.append(_columnNr);\nsb.append(']');\nreturn sb.toString();\n}",
            "method_id": 101
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;Ljava/lang/Throwable;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause)\nsuper(msg);\nif (rootCause != null) {\n_location = loc;\n}",
            "method_id": 102
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "protected JsonProcessingException(String msg, JsonLocation loc)\nthis(msg, loc, null);\n}",
            "method_id": 103
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getLocation()Lcom/fasterxml/jackson/core/JsonLocation;",
            "method_body": "public JsonLocation getLocation() {\nreturn _location;\n}",
            "method_id": 104
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessageSuffix()Ljava/lang/String;",
            "method_body": "protected String getMessageSuffix() {\nreturn null;\n}",
            "method_id": 105
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonProcessingException:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage()\nString msg = super.getMessage();\nif (msg == null) {\nJsonLocation loc = getLocation();\nString suffix = getMessageSuffix();\nif (loc != null || suffix != null) {\nStringBuilder sb = new StringBuilder(100);\nsb.append(msg);\nif (suffix != null) {\nif (loc != null) {\nsb.append('\\n');\nsb.append(\" at \");\nsb.append(loc.toString());\nmsg = sb.toString();\nreturn msg;\n}",
            "method_id": 106
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParseException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonLocation;)V",
            "method_body": "public JsonParseException(String msg, JsonLocation loc)\nsuper(msg, loc);\n}",
            "method_id": 107
        }
    ]
}