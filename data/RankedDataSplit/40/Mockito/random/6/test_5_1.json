{
    "bug_id": 6,
    "test_id": 5,
    "test_name": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList",
    "test_body": "public void shouldAllowAnyList() {\nwhen(mock.forList(anyList())).thenReturn(\"matched\");\n34: assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));\nassertEquals(null, mock.forList(null));\n37: verify(mock, times(1)).forList(anyList());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList(NewMatchersTest.java:35)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/util/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isStubOnly()Z",
            "method_body": "public boolean isStubOnly() {\nreturn stubOnly;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getParameterTypes()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getParameterTypes() {\nreturn method.getParameterTypes();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:tryPropertyOrFieldInjection()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection tryPropertyOrFieldInjection() {\ninjectionStrategies.thenTry(new PropertyAndSetterInjection());\nreturn this;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullOngoingStubbing()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing pullOngoingStubbing() {\nreturn threadSafely().pullOngoingStubbing();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:returnValueFor(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "Object returnValueFor(Class<?> type) {\nif (Primitives.isPrimitiveOrWrapper(type)) {\n} else if (type == Collection.class) {\n} else if (type == Set.class) {\n} else if (type == HashSet.class) {\n} else if (type == SortedSet.class) {\n} else if (type == TreeSet.class) {\n} else if (type == LinkedHashSet.class) {\n} else if (type == List.class) {\n} else if (type == LinkedList.class) {\n} else if (type == ArrayList.class) {\n} else if (type == Map.class) {\n} else if (type == HashMap.class) {\n} else if (type == SortedMap.class) {\n} else if (type == TreeMap.class) {\n} else if (type == LinkedHashMap.class) {\nreturn null;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isUsingConstructor()Z",
            "method_body": "public boolean isUsingConstructor() {\nreturn useConstructor;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public TypeBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.mockito.Matchers:reportMatcher(Lorg/hamcrest/Matcher;)Lorg/mockito/internal/progress/HandyReturnValues;",
            "method_body": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\nreturn MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:when(Ljava/lang/Object;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public <T> OngoingStubbing<T> when(T methodCall) {\nmockingProgress.stubbingStarted();\nreturn (OngoingStubbing) stub();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scanDeprecatedWay(Lorg/mockito/configuration/AnnotationEngine;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scanDeprecatedWay(AnnotationEngine annotationEngine, Object testClass, Class<?> clazz) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationImpl:getMock()Ljava/lang/Object;",
            "method_body": "public Object getMock() {\nreturn mock;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:confirm(Ljava/lang/Class;)Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings<T> confirm(Class<T> typeToMock) {\nreturn validatedSettings(typeToMock, this);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/cglib/ClassImposterizer;)V",
            "method_body": "public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nClass<?>[] allMockedTypes = prepend(mockedType, interfaces);\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(allMockedTypes);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nenhancer.setSerialVersionUID(42L);\nreturn enhancer.createClass();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.stubbing.ConsecutiveStubbing:<init>(Lorg/mockito/internal/stubbing/InvocationContainerImpl;)V",
            "method_body": "public ConsecutiveStubbing(InvocationContainerImpl invocationContainerImpl) {\nthis.invocationContainerImpl = invocationContainerImpl;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:stub()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing stub() {\nIOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();\nif (stubbing == null) {\nreturn stubbing;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:addPreparedMocks(Ljava/util/Set;)V",
            "method_body": "public void addPreparedMocks(Set<Object> mocks) {\nmocks.addAll(scan());\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:<init>(Ljava/util/Set;Ljava/lang/Object;)V",
            "method_body": "private OngoingMockInjection(Set<Field> fields, Object fieldOwner) {\nthis.fieldOwner = checkNotNull(fieldOwner, \"fieldOwner\");\nthis.fields.addAll(checkItemsNotNull(fields, \"fields\"));\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullOngoingStubbing()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing pullOngoingStubbing() {\nIOngoingStubbing temp = iOngoingStubbing;\niOngoingStubbing = null;\nreturn temp;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn mockMaker.getHandler(mock) != null;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\nproxy = instantiator.newInstance(proxyClass);\n}\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:preparedMock(Ljava/lang/Object;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object preparedMock(Object instance, Field field) {\nif (isAnnotatedByMockOrSpy(field)) {\n} else if (isMockOrSpy(instance)) {\nreturn null;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nClass<?> clazz = testClass.getClass();\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nwhile (clazz != Object.class) {\nscanDeprecatedWay(annotationEngine, testClass, clazz);\nclazz = clazz.getSuperclass();\nannotationEngine.process(testClass.getClass(), testClass);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;Ljava/util/Collection;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\nreturn imposterise(interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:<init>()V",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:isAnnotatedByMockOrSpy(Ljava/lang/reflect/Field;)Z",
            "method_body": "private boolean isAnnotatedByMockOrSpy(Field field) {\nreturn null != field.getAnnotation(Spy.class)\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.Mockito:when(Ljava/lang/Object;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public static <T> OngoingStubbing<T> when(T methodCall) {\nreturn MOCKITO_CORE.when(methodCall);\n}",
            "method_id": 79
        }
    ]
}