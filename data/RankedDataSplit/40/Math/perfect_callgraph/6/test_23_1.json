{
    "bug_id": 6,
    "test_id": 23,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2",
    "test_body": "public void testMinimize2() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n79: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(100),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MINIMIZE,\nnew InitialGuess(new double[] { 1, 0 }),\nnew NelderMeadSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\nAssert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\nAssert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\nAssert.assertTrue(optimizer.getEvaluations() > 60);\nAssert.assertTrue(optimizer.getEvaluations() < 90);\n91: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(SimplexOptimizerNelderMeadTest.java:92)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2:compare(Lorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)I",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal MultivariateFunction evalFunc\n= new MultivariateFunction() {\nreturn computeObjectiveValue(point);\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal Comparator<PointValuePair> comparator\n= new Comparator<PointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\nsimplex.build(getStartPoint());\nsimplex.evaluate(evalFunc, comparator);\nPointValuePair[] previous = null;\nint iteration = 0;\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nif (iteration > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.getSize(); i++) {\nPointValuePair prev = previous[i];\nconverged = converged &&\nif (converged) {\nreturn simplex.getPoint(0);\nprevious = simplex.getPoints();\nsimplex.iterate(evalFunc, comparator);\n++iteration;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getDimension()I",
            "method_body": "public int getDimension() {\nreturn dimension;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void iterate(final MultivariateFunction evaluationFunction,\nfinal int n = getDimension();\nfinal PointValuePair best = getPoint(0);\nfinal PointValuePair secondBest = getPoint(n - 1);\nfinal PointValuePair worst = getPoint(n);\nfinal double[] xWorst = worst.getPointRef();\nfinal double[] centroid = new double[n];\nfor (int i = 0; i < n; i++) {\nfinal double[] x = getPoint(i).getPointRef();\nfor (int j = 0; j < n; j++) {\ncentroid[j] += x[j];\nfinal double scaling = 1.0 / n;\nfor (int j = 0; j < n; j++) {\ncentroid[j] *= scaling;\nfinal double[] xR = new double[n];\nfor (int j = 0; j < n; j++) {\nxR[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);\nfinal PointValuePair reflected\nif (comparator.compare(best, reflected) <= 0 &&\nreplaceWorstPoint(reflected, comparator);\n} else if (comparator.compare(reflected, best) < 0) {\nfinal double[] xE = new double[n];\nfor (int j = 0; j < n; j++) {\nxE[j] = centroid[j] + khi * (xR[j] - centroid[j]);\nfinal PointValuePair expanded\nif (comparator.compare(expanded, reflected) < 0) {\nreplaceWorstPoint(expanded, comparator);\nreplaceWorstPoint(reflected, comparator);\n} else {\nif (comparator.compare(reflected, worst) < 0) {\nfinal double[] xC = new double[n];\nfor (int j = 0; j < n; j++) {\nxC[j] = centroid[j] + gamma * (xR[j] - centroid[j]);\nfinal PointValuePair outContracted\nif (comparator.compare(outContracted, reflected) <= 0) {\nreplaceWorstPoint(outContracted, comparator);\nreturn;\nfinal double[] xC = new double[n];\nfor (int j = 0; j < n; j++) {\nxC[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);\nfinal PointValuePair inContracted\nif (comparator.compare(inContracted, worst) < 0) {\nreplaceWorstPoint(inContracted, comparator);\nreturn;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getSize()I",
            "method_body": "public int getSize() {\nreturn simplex.length;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleValueChecker:converged(ILorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn getKey();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:replaceWorstPoint(Lorg/apache/commons/math3/optim/PointValuePair;Ljava/util/Comparator;)V",
            "method_body": "protected void replaceWorstPoint(PointValuePair pointValuePair,\nfor (int i = 0; i < dimension; i++) {\nif (comparator.compare(simplex[i], pointValuePair) > 0) {\nPointValuePair tmp = simplex[i];\nsimplex[i] = pointValuePair;\npointValuePair = tmp;\nsimplex[dimension] = pointValuePair;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (simplex == null) {\nif (getLowerBound() != null ||\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getPoints()[Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair[] getPoints() {\nfinal PointValuePair[] copy = new PointValuePair[simplex.length];\nSystem.arraycopy(simplex, 0, copy, 0, simplex.length);\nreturn copy;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DD)V",
            "method_body": "public PointValuePair(final double[] point,\nthis(point, value, true);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction:getObjectiveFunction()Lorg/apache/commons/math3/analysis/MultivariateFunction;",
            "method_body": "public MultivariateFunction getObjectiveFunction() {\nreturn function;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void evaluate(final MultivariateFunction evaluationFunction,\nfor (int i = 0; i < simplex.length; i++) {\nfinal PointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 63
        }
    ]
}