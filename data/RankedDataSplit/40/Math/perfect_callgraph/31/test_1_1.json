{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "public void testMath785() {\n// this test was failing due to inaccurate results from ContinuedFraction.\n150: try {\ndouble prob = 0.01;\nFDistribution f = new FDistribution(200000, 200000);\ndouble result = f.inverseCumulativeProbability(prob);\nAssert.assertTrue(result < 1.0);\n} catch (Exception e) {\nAssert.fail(\"Failing to calculate inverse cumulative probability\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.distribution.FDistributionTest.testMath785(FDistributionTest.java:156)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:solve(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public double solve(int maxEval, FUNC f, double min, double max, double startValue) {\nsetup(maxEval, f, min, max, startValue);\nreturn doSolve();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:verifyInterval(DD)V",
            "method_body": "public static void verifyInterval(final double lower,\nif (lower >= upper) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getMin()D",
            "method_body": "public double getMin() {\nreturn searchMin;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:doSolve()D",
            "method_body": "protected double doSolve() {\ndouble min = getMin();\ndouble max = getMax();\nfinal double initial = getStartValue();\nfinal double functionValueAccuracy = getFunctionValueAccuracy();\nverifySequence(min, initial, max);\ndouble yInitial = computeObjectiveValue(initial);\nif (FastMath.abs(yInitial) <= functionValueAccuracy) {\ndouble yMin = computeObjectiveValue(min);\nif (FastMath.abs(yMin) <= functionValueAccuracy) {\nif (yInitial * yMin < 0) {\ndouble yMax = computeObjectiveValue(max);\nif (FastMath.abs(yMax) <= functionValueAccuracy) {\nif (yInitial * yMax < 0) {\nthrow new NoBracketingException(min, max, yMin, yMax);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nreturn sum + LANCZOS[0];\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution$1:<init>(Lorg/apache/commons/math3/distribution/AbstractRealDistribution;D)V",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected AbstractUnivariateSolver(final double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\nif (denominatorDF > 2) {\nreturn denominatorDF / (denominatorDF - 2);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\nif (array != null) {\nfor (Object o : array) {\nif (o instanceof Object[]) {\nfor (Object oR : flatten((Object[]) o)) {\nlist.add(o);\nreturn list.toArray();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:verifySequence(DDD)V",
            "method_body": "protected void verifySequence(final double lower,\nUnivariateSolverUtils.verifySequence(lower, initial, upper);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = lanczos(x);\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalArgumentException(Localizable pattern,\nObject ... args) {\ncontext = new ExceptionContext(this);\ncontext.addMessage(pattern, args);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:incrementEvaluationCount()V",
            "method_body": "protected void incrementEvaluationCount() {\nevaluations.incrementCount();\n}\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:<init>(D)V",
            "method_body": "public BrentSolver(double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.exception.NoBracketingException:<init>(DDDD)V",
            "method_body": "public NoBracketingException(double lo, double hi,\nthis(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
            "method_body": "public double getSupportLowerBound() {\nreturn 0;\n}",
            "method_id": 60
        }
    ]
}