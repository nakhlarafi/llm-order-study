{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar",
    "test_body": "public void testDontQuoteEuroFirstChar() throws IOException {\nfinal StringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {\nprinter.printRecord(EURO_CH, \"Deux\");\nassertEquals(EURO_CH + \",Deux\" + recordSeparator, sw.toString());\n}",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\u20ac],Deux\n> but was:<[\"\u20ac\"],Deux\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar(CSVPrinterTest.java:1040)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteMode(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSLASH = '\\\\';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nif (format.getHeaderComments() != null) {\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:close(Z)V",
            "method_body": "public void close(final boolean flush) throws IOException {\nif (flush || format.getAutoFlush()) {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}",
            "method_id": 39
        }
    ]
}