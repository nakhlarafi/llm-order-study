{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar",
    "test_body": "public void testDontQuoteEuroFirstChar() throws IOException {\nfinal StringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {\nprinter.printRecord(EURO_CH, \"Deux\");\nassertEquals(EURO_CH + \",Deux\" + recordSeparator, sw.toString());\n}",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\u20ac],Deux\n> but was:<[\"\u20ac\"],Deux\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar(CSVPrinterTest.java:1040)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
            "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
            "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
            "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getTrailingDelimiter()Z",
            "method_body": "public boolean getTrailingDelimiter() {\nreturn trailingDelimiter;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
            "method_body": "public boolean getTrim() {\nreturn trim;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getAutoFlush()Z",
            "method_body": "public boolean getAutoFlush() {\nreturn autoFlush;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
            "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
            "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\nif (value == null) {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nif (!newRecord) {\nout.append(getDelimiter());\nif (object == null) {\n} else if (isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len, out, newRecord);\n}",
            "method_id": 19
        }
    ]
}