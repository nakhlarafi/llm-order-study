{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar",
    "test_body": "public void testDontQuoteEuroFirstChar() throws IOException {\nfinal StringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {\nprinter.printRecord(EURO_CH, \"Deux\");\nassertEquals(EURO_CH + \",Deux\" + recordSeparator, sw.toString());\n}",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\u20ac],Deux\n> but was:<[\"\u20ac\"],Deux\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar(CSVPrinterTest.java:1040)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\nswitch (quoteModePolicy) {\nif (len <= 0) {\nchar c = value.charAt(pos);\nif (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\nquote = true;\n} else if (c <= COMMENT) {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\npos++;\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\nif (c <= SP) {\nif (!quote) {\nout.append(value, start, end);\nreturn;\nif (!quote) {\nout.append(quoteChar);\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\npos++;\n}\nout.append(value, start, pos);\nout.append(quoteChar);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
            "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
            "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
            "method_body": "public void printRecord(final Object... values) throws IOException {\nformat.printRecord(out, values);\nnewRecord = true;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
            "method_body": "public void close() throws IOException {\nclose(false);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZ)V",
            "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal boolean trailingDelimiter, final boolean autoFlush) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nthis.autoFlush = autoFlush;\nvalidate();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat MYSQL = DEFAULT\n* Default PostgreSQL CSV format used by the {@code COPY} operation.",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 9
        }
    ]
}