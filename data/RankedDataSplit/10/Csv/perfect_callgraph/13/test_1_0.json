{
    "bug_id": 13,
    "test_id": 1,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput",
    "test_body": "public void testMySqlNullOutput() throws IOException {\nObject[] s = new String[] { \"NULL\", null };\nCSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\nStringWriter writer = new StringWriter();\nCSVPrinter printer = new CSVPrinter(writer, format);\nprinter.printRecord(s);\nprinter.close();\nString expected = \"\\\"NULL\\\"\\tNULL\\n\";\nassertEquals(expected, writer.toString());\nString[] record0 = toFirstRecordValues(expected, format);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<\"NULL\"\t[NULL]\n> but was:<\"NULL\"\t[\"NULL\"]\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput(CSVPrinterTest.java:331)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len)\nif (!newRecord) {\nout.append(format.getDelimiter());\nif (format.isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len);\nnewRecord = false;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
            "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nif (header != null) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
            "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
            "method_body": "public void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\nnewRecord = true;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
            "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
            "method_body": "public void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\nprintln();\n}",
            "method_id": 9
        }
    ]
}