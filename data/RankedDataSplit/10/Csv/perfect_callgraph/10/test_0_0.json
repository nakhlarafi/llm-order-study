{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testHeader",
    "test_body": "public void testHeader() throws IOException {\nfinal StringWriter sw = new StringWriter();\nfinal CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)\n.withHeader(\"C1\", \"C2\", \"C3\"));\nprinter.printRecord(\"a\", \"b\", \"c\");\nprinter.printRecord(\"x\", \"y\", \"z\");\nassertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\nprinter.close();",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[C1,C2,C3\n]a,b,c\nx,y,z\n> but was:<[]a,b,c\nx,y,z\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testHeader(CSVPrinterTest.java:495)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nthis.format.validate();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nif (escape != null && delimiter == escape.charValue()) {\nif (commentStart != null && delimiter == commentStart.charValue()) {\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nif (escape != null && escape.equals(commentStart)) {\nif (escape == null && quotePolicy == Quote.NONE) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\nnewRecord = true;\n}\nfor (final Object value : values) {\nprint(value);\nprintln();\n}\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
            "method_body": "public void print(final Object value) throws IOException {\nif (value == null) {\nstrValue = value.toString();\nthis.print(value, strValue, 0, strValue.length());\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\nnewRecord = true;\n}\nfor (final Object value : values) {\nprint(value);\nprintln();\n}\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
            "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\nSet<String> dupCheck = new HashSet<String>();\nfor(String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthis.header = header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat TDF =\npublic static final CSVFormat MYSQL =\nreturn c == LF || c == CR;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 9
        }
    ]
}