{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testHeader",
    "test_body": "public void testHeader() throws IOException {\nfinal StringWriter sw = new StringWriter();\nfinal CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)\n.withHeader(\"C1\", \"C2\", \"C3\"));\nprinter.printRecord(\"a\", \"b\", \"c\");\nprinter.printRecord(\"x\", \"y\", \"z\");\nassertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\nprinter.close();",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[C1,C2,C3\n]a,b,c\nx,y,z\n> but was:<[]a,b,c\nx,y,z\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testHeader(CSVPrinterTest.java:495)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
            "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
            "method_body": "public boolean isEscaping() {\nreturn escape != null;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoting()Z",
            "method_body": "public boolean isQuoting() {\nreturn quoteChar != null;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 19
        }
    ]
}