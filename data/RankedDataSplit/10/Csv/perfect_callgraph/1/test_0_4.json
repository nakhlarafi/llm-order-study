{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "public void testGetLineNumberWithCR() throws Exception {\nCSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n508: assertEquals(0, parser.getLineNumber());\nassertNotNull(parser.getRecord());\nassertEquals(1, parser.getLineNumber());\nassertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
            "method_body": "static final int END_OF_STREAM = -1;\nprivate int lastChar = UNDEFINED;\nprivate int lineCounter = 0;\nsuper(r);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:readAgain()I",
            "method_body": "int readAgain() {\nreturn lastChar;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
            "method_body": "int lookAhead() throws IOException {\nsuper.mark(1);\nint c = super.read();\nsuper.reset();\nreturn c;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineCounter;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;)V",
            "method_body": "CSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
            "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\nCSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
            "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\nrecord.add(reusableToken.content.toString());\nbreak;\n} while (reusableToken.type == TOKEN);\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\nreturn result;\n}",
            "method_id": 46
        }
    ]
}