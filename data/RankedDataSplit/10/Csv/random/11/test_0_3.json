{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull",
    "test_body": "public void testHeaderMissingWithNull() throws Exception {\nfinal Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\nCSVFormat.DEFAULT.withHeader().withNullString(\"\").withIgnoreEmptyHeaders(true).parse(in).iterator();\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.csv.CSVParser.initializeHeader(CSVParser.java:384)\nat org.apache.commons.csv.CSVParser.<init>(CSVParser.java:250)\nat org.apache.commons.csv.CSVFormat.parse(CSVFormat.java:611)\nat org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull(CSVParserTest.java:670)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
            "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
            "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
            "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
            "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
            "method_body": "public Character getEscape() {\nreturn escape;\n}",
            "method_id": 39
        }
    ]
}