{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader",
    "test_body": "public void testToMapWithNoHeader() throws Exception {\nfinal CSVParser parser =  CSVParser.parse(\"a,b\", CSVFormat.newFormat(','));\nfinal CSVRecord shortRec = parser.iterator().next();\nMap<String, String> map = shortRec.toMap();\nassertNotNull(\"Map is not null.\", map);",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.csv.CSVRecord.putIn(CSVRecord.java:180)\nat org.apache.commons.csv.CSVRecord.toMap(CSVRecord.java:214)\nat org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader(CSVRecordTest.java:175)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
            "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nreturn CSVParser.this.nextRecord();\nif (CSVParser.this.isClosed()) {\nCSVRecord next = this.current;\nthis.current = null;\nif (next == null) {\nnext = this.getNextRecord();\nif (next == null) {\nreturn next;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:putIn(Ljava/util/Map;)Ljava/util/Map;",
            "method_body": "<M extends Map<String, String>> M putIn(final M map) {\nfor (final Entry<String, Integer> entry : mapping.entrySet()) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
            "method_body": "public String getNullString() {\nreturn nullString;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
            "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 39
        }
    ]
}