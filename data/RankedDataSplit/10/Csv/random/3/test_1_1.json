{
    "bug_id": 3,
    "test_id": 1,
    "test_name": "org.apache.commons.csv.CSVLexerTest.testEscapedCharacter",
    "test_body": "public void testEscapedCharacter() throws Exception {\nfinal Lexer lexer = getLexer(\"character\\\\aEscaped\", formatWithEscaping);\nassertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\aEscaped\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError:\nExpected: token has content \"character\\aEscaped\"\nbut: token content is \"characteraEscaped\"\nat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\nat org.junit.Assert.assertThat(Assert.java:865)\nat org.junit.Assert.assertThat(Assert.java:832)\nat org.apache.commons.csv.CSVLexerTest.testEscapedCharacter(CSVLexerTest.java:341)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
            "method_body": "public CSVFormatBuilder withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthis.escape = escape;\nreturn this;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVLexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
            "method_body": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\nif (readEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) unescaped);\nc = in.read(); // continue\n} else {\ntkn.content.append((char) c);\nc = in.read(); // continue\nif (ignoreSurroundingSpaces) {\nreturn tkn;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat DEFAULT =\npublic static final CSVFormat EXCEL =\npublic static final CSVFormat TDF =\npublic static final CSVFormat MYSQL =\nreturn c == LF || c == CR;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
            "method_body": "boolean readEndOfLine(int c) throws IOException {\nif (c == CR && in.lookAhead() == LF) {\nreturn c == LF || c == CR;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
            "method_body": "public CSVFormatBuilder withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthis.delimiter = delimiter;\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
            "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
            "method_body": "int getLastChar() {\nreturn lastChar;\n}",
            "method_id": 19
        }
    ]
}