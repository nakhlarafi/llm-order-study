{
    "bug_id": 3,
    "test_id": 2,
    "test_name": "org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue",
    "test_body": "public void testEscapedMySqlNullValue() throws Exception {\n// MySQL uses \\N to symbolize null values. We have to restore this\nfinal Lexer lexer = getLexer(\"character\\\\NEscaped\", formatWithEscaping);\nassertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\NEscaped\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError:\nExpected: token has content \"character\\NEscaped\"\nbut: token content is \"characterNEscaped\"\nat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\nat org.junit.Assert.assertThat(Assert.java:865)\nat org.junit.Assert.assertThat(Assert.java:832)\nat org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue(CSVLexerTest.java:335)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
            "method_body": "public CSVFormatBuilder withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
            "method_body": "boolean isEndOfFile(final int c) {\nreturn c == END_OF_STREAM;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
            "method_body": "boolean isStartOfLine(final int c) {\nreturn c == LF || c == CR || c == UNDEFINED;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
            "method_body": "boolean isQuoteChar(final int c) {\nreturn c == quoteChar;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
            "method_body": "boolean isCommentStart(final int c) {\nreturn c == commmentStart;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
            "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
            "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:newBuilder()Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
            "method_body": "public static CSVFormatBuilder newBuilder() {\nreturn new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, Constants.EMPTY,\n}",
            "method_id": 9
        }
    ]
}