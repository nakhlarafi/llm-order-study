{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106",
    "test_body": "public void testNullRecordSeparatorCsv106() {\nfinal CSVFormat format = CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(\"H1\", \"H2\");\nfinal String formatStr = format.format(\"A\", \"B\");\nassertNotNull(formatStr);\nassertFalse(formatStr.endsWith(\"null\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertFalse(Assert.java:64)\nat org.junit.Assert.assertFalse(Assert.java:74)\nat org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106(CSVFormatTest.java:237)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
            "method_body": "public boolean isEscaping() {\nreturn escape != null;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
            "method_body": "private void print(final Object object, final CharSequence value,\nif (!newRecord) {\nout.append(format.getDelimiter());\nif (format.isQuoting()) {\n} else if (format.isEscaping()) {\nout.append(value, offset, offset + len);\nnewRecord = false;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
            "method_body": "public void print(final Object value) throws IOException {\nif (value == null) {\nstrValue = value.toString();\nthis.print(value, strValue, 0, strValue.length());\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat TDF =\npublic static final CSVFormat MYSQL =\nreturn c == LF || c == CR;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal String recordSeparator = format.getRecordSeparator();\nout.append(recordSeparator);\nnewRecord = true;\n}\nfor (final Object value : values) {\nprint(value);\nprintln();\n}\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:newFormat(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public static CSVFormat newFormat(final char delimiter) {\nreturn new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSPACE = '\\b';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 19
        }
    ]
}