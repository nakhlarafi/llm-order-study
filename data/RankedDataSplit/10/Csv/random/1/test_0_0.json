{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "public void testGetLineNumberWithCR() throws Exception {\nCSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n508: assertEquals(0, parser.getLineNumber());\nassertNotNull(parser.getRecord());\nassertEquals(1, parser.getLineNumber());\nassertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVParser:getRecord()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\nrecord.add(reusableToken.content.toString());\nbreak;\n} while (reusableToken.type == TOKEN);\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\nreturn result;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEmptyLinesIgnored(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEmptyLinesIgnored(boolean emptyLinesIgnored) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isSurroundingSpacesIgnored()Z",
            "method_body": "public boolean isSurroundingSpacesIgnored() {\nreturn surroundingSpacesIgnored;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(Reader input, CSVFormat format) throws IOException {\nformat.validate();\nthis.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\nthis.headerMapping = initializeHeader(format);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(char c) {\nreturn c == '\\n' || c == '\\r';\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:isEncapsulator(I)Z",
            "method_body": "boolean isEncapsulator(int c) {\nreturn isEncapsulating && c == encapsulator;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
            "method_body": "public char getDelimiter() {\nreturn delimiter;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isEmptyLinesIgnored()Z",
            "method_body": "public boolean isEmptyLinesIgnored() {\nreturn emptyLinesIgnored;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
            "method_body": "String[] getHeader() {\nreturn header;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isCommentingEnabled()Z",
            "method_body": "public boolean isCommentingEnabled() {\nreturn this.commentStart != DISABLED;\n}",
            "method_id": 9
        }
    ]
}