{
    "bug_id": 14,
    "test_id": 4,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1",
    "test_body": "public void testEscapeNull1() throws IOException {\nStringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\nprinter.print(\"\\\\\");\n}\nassertEquals(\"\\\\\", sw.toString());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\\]> but was:<[\"\\\"]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testEscapeNull1(CSVPrinterTest.java:346)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
            "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
            "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\nswitch (quoteModePolicy) {\nif (len <= 0) {\nchar c = value.charAt(pos);\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\nif (!quote) {\nif (!quote) {\nout.append(quoteChar);\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\npos++;\n}\nout.append(value, start, pos);\nout.append(quoteChar);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
            "method_body": "public boolean getTrim() {\nreturn trim;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nif (header != null) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
            "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}",
            "method_id": 19
        }
    ]
}