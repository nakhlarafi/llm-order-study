{
    "bug_id": 14,
    "test_id": 4,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1",
    "test_body": "public void testEscapeNull1() throws IOException {\nStringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\nprinter.print(\"\\\\\");\n}\nassertEquals(\"\\\\\", sw.toString());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\\]> but was:<[\"\\\"]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testEscapeNull1(CSVPrinterTest.java:346)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
            "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
            "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\npublic static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();\nreturn c == LF || c == CR;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nif (!newRecord) {\nif (object == null) {\n} else if (isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len, out, newRecord);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
            "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
            "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nif (format.getHeaderComments() != null) {\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}",
            "method_id": 9
        }
    ]
}