{
    "bug_id": 14,
    "test_id": 4,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1",
    "test_body": "public void testEscapeNull1() throws IOException {\nStringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\nprinter.print(\"\\\\\");\n}\nassertEquals(\"\\\\\", sw.toString());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\\]> but was:<[\"\\\"]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testEscapeNull1(CSVPrinterTest.java:346)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
            "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
            "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\nif (value == null) {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 34
        }
    ]
}