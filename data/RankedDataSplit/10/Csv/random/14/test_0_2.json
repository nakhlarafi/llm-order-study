{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1",
    "test_body": "public void testEscapeBackslash1() throws IOException {\nStringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\nprinter.print(\"\\\\\");\n}\nassertEquals(\"\\\\\", sw.toString());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\\]> but was:<['\\']>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1(CSVPrinterTest.java:301)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
            "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
            "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
            "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
            "method_body": "static final char BACKSLASH = '\\\\';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nif (!newRecord) {\nif (object == null) {\n} else if (isQuoteCharacterSet()) {\nprintAndQuote(object, value, offset, len, out, newRecord);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
            "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
            "method_body": "public boolean getTrim() {\nreturn trim;\n}",
            "method_id": 29
        }
    ]
}