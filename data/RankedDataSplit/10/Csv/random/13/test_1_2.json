{
    "bug_id": 13,
    "test_id": 1,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput",
    "test_body": "public void testMySqlNullOutput() throws IOException {\nObject[] s = new String[] { \"NULL\", null };\nCSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\nStringWriter writer = new StringWriter();\nCSVPrinter printer = new CSVPrinter(writer, format);\nprinter.printRecord(s);\nprinter.close();\nString expected = \"\\\"NULL\\\"\\tNULL\\n\";\nassertEquals(expected, writer.toString());\nString[] record0 = toFirstRecordValues(expected, format);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<\"NULL\"\t[NULL]\n> but was:<\"NULL\"\t[\"NULL\"]\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput(CSVPrinterTest.java:331)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
            "method_body": "public void print(final Object value) throws IOException {\nif (value == null) {\nfinal String nullString = format.getNullString();\nstrValue = nullString == null ? Constants.EMPTY : nullString;\n} else {\nstrValue = value.toString();\nthis.print(value, strValue, 0, strValue.length());\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
            "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
            "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter$1:<clinit>()V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len)\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteCharacter().charValue();\nQuoteMode quoteModePolicy = format.getQuoteMode();\nif (quoteModePolicy == null) {\nswitch (quoteModePolicy) {\nquote = !(object instanceof Number);\nbreak;\nif (!quote) {\nout.append(quoteChar);\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\npos++;\n}\nout.append(value, start, pos);\nout.append(quoteChar);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
            "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}",
            "method_id": 29
        }
    ]
}