{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar",
    "test_body": "public void testDontQuoteEuroFirstChar() throws IOException {\nfinal StringWriter sw = new StringWriter();\ntry (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {\nprinter.printRecord(EURO_CH, \"Deux\");\nassertEquals(EURO_CH + \",Deux\" + recordSeparator, sw.toString());\n}",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[\u20ac],Deux\n> but was:<[\"\u20ac\"],Deux\n>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar(CSVPrinterTest.java:1040)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
            "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nif (header != null) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:close(Z)V",
            "method_body": "public void close(final boolean flush) throws IOException {\nif (flush || format.getAutoFlush()) {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:printRecord(Ljava/lang/Appendable;[Ljava/lang/Object;)V",
            "method_body": "public void printRecord(final Appendable out, final Object... values) throws IOException {\nfor (int i = 0; i < values.length; i++) {\nprint(values[i], out, i == 0);\nprintln(out);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
            "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\nswitch (quoteModePolicy) {\nif (len <= 0) {\nchar c = value.charAt(pos);\nif (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\nquote = true;\n} else if (c <= COMMENT) {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\npos++;\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\nif (c <= SP) {\nif (!quote) {\nout.append(value, start, end);\nreturn;\nif (!quote) {\nout.append(quoteChar);\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\npos++;\n}\nout.append(value, start, pos);\nout.append(quoteChar);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
            "method_body": "public void printRecord(final Object... values) throws IOException {\nformat.printRecord(out, values);\nnewRecord = true;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\nthis.out = out;\nthis.format = format;\nif (format.getHeaderComments() != null) {\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:println(Ljava/lang/Appendable;)V",
            "method_body": "public void println(final Appendable out) throws IOException {\nif (getTrailingDelimiter()) {\nif (recordSeparator != null) {\nout.append(recordSeparator);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
            "method_body": "public static final CSVFormat MYSQL = DEFAULT\n* Default PostgreSQL CSV format used by the {@code COPY} operation.",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
            "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}",
            "method_id": 9
        }
    ]
}