{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative",
    "test_body": "public void testFormatStandard_negative() {\nPeriod p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\nassertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n122: p = Period.years(-54);\nassertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n125: p = Period.seconds(4).withMillis(-8);\nassertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n128: p = Period.seconds(-4).withMillis(8);\nassertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n131: p = Period.seconds(-23);\nassertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n134: p = Period.millis(-8);\nassertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn;\nint value = (int) valueLong;\nif (iFieldType >= SECONDS_MILLIS) {\nvalue = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\nif (iPrefix != null) {\nint minDigits = iMinPrintedDigits;\nif (minDigits <= 1) {\nFormatUtils.appendUnpaddedInteger(buf, value);\nif (iFieldType >= SECONDS_MILLIS) {\nint dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\nif (iFieldType == SECONDS_MILLIS || dp > 0) {\nbuf.append('.');\nFormatUtils.appendPaddedInteger(buf, dp, 3);\nif (iSuffix != null) {\niSuffix.printTo(buf, value);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
            "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn 0;\nint sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\nif (iFieldType >= SECONDS_MILLIS) {\nsum = Math.max(sum, 4);\nsum++;\nif (iFieldType == SECONDS_OPTIONAL_MILLIS &&\nsum -= 4; // remove three digits and decimal point\nvalueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\nint value = (int) valueLong;\nif (iPrefix != null) {\nif (iSuffix != null) {\nsum += iSuffix.calculatePrintedLength(value);\nreturn sum;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
            "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
            "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\nreturn cStandard;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:checkPrinter()V",
            "method_body": "private void checkPrinter() {\nif (iPrinter == null) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.Period:years(I)Lorg/joda/time/Period;",
            "method_body": "public static Period years(int years) {\nreturn new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.Period:seconds(I)Lorg/joda/time/Period;",
            "method_body": "public static Period seconds(int seconds) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n}",
            "method_id": 9
        }
    ]
}