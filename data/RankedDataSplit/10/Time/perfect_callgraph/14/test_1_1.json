{
    "bug_id": 14,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust",
    "test_body": "public void testPlusMonths_int_negativeEndOfMonthAdjust() {\nMonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\nMonthDay result = test.plusMonths(-1);\nMonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\nassertEquals(expected, result);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.MonthDay:size()I",
            "method_body": "public int size() {\nreturn 2;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.MonthDay:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nList<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\nfields.add(DateTimeFieldType.monthOfYear());\nfields.add(DateTimeFieldType.dayOfMonth());\nreturn ISODateTimeFormat.forFields(fields, true, true).print(this);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
            "method_body": "public int[] get(ReadablePartial partial, long instant) {\nint size = partial.size();\nint[] values = new int[size];\nfor (int i = 0; i < size; i++) {\nvalues[i] = partial.getFieldType(i).getField(this).get(instant);\nreturn values;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
            "method_id": 19
        }
    ]
}