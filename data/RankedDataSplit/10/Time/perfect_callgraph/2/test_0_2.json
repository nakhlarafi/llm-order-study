{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange",
    "test_body": "public void testWith_baseAndArgHaveNoRange() {\nPartial test = new Partial(DateTimeFieldType.year(), 1);\nPartial result = test.with(DateTimeFieldType.era(), 1);\nassertEquals(2, result.size());",
    "stack_trace": "java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year\nat org.joda.time.Partial.<init>(Partial.java:224)\nat org.joda.time.Partial.with(Partial.java:466)\nat org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange(TestPartial_Basics.java:469)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType type, int value, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (type == null) {\niTypes = new DateTimeFieldType[] {type};\niValues = new int[] {value};\nchronology.validate(this, iValues);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn -1;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 29
        }
    ]
}