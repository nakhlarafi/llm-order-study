{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay",
    "test_body": "public void testFactory_daysBetween_RPartial_MonthDay() {\nMonthDay start1 = new MonthDay(2, 1);\nMonthDay start2 = new MonthDay(2, 28);\nMonthDay end1 = new MonthDay(2, 28);\nMonthDay end2 = new MonthDay(2, 29);\n129: assertEquals(27, Days.daysBetween(start1, end1).getDays());\nassertEquals(28, Days.daysBetween(start1, end2).getDays());\nassertEquals(0, Days.daysBetween(start2, end1).getDays());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Days.daysBetween(Days.java:141)\nat org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay(TestDays.java:130)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
            "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
            "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.MonthDay:size()I",
            "method_body": "public int size() {\nreturn 2;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
            "method_body": "public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\nint size = period.size();\nint[] values = new int[size];\nif (startInstant != endInstant) {\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nint value = field.getDifference(endInstant, startInstant);\nstartInstant = field.add(startInstant, value);\nvalues[i] = value;\nreturn values;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
            "method_id": 19
        }
    ]
}