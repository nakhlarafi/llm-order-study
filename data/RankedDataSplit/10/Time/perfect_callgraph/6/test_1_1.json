{
    "bug_id": 6,
    "test_id": 1,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
    "test_body": "public void test_plusYears_positiveToZero_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\nassertEquals(expected, date.plusYears(-2003));\n}\n",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\nat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\nat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\nat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\nat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\nif (upperBound == null) {\nbuf.append(\"is not supported\");\nif (explain != null) {\nreturn buf.toString();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
            "method_id": 19
        }
    ]
}