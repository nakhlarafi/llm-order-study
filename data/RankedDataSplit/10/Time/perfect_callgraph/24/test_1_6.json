{
    "bug_id": 24,
    "test_id": 1,
    "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010",
    "test_body": "public void testParseLocalDate_weekyear_month_week_2010() {\nChronology chrono = GJChronology.getInstanceUTC();\nDateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\nassertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010(TestDateTimeFormatter.java:428)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
            "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
            "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
            "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nreturn getWeeksInYear(year - 1);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 69
        }
    ]
}