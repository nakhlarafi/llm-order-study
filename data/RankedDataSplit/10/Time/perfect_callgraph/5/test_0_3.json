{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
    "test_body": "public void testNormalizedStandard_periodType_monthsWeeks() {\nPeriodType type = PeriodType.forFields(new DurationFieldType[]{\nDurationFieldType.months(),\nDurationFieldType.weeks(),\nDurationFieldType.days()});\nPeriod test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\nPeriod result = test.normalizedStandard(type);\nassertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);",
    "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.PeriodType:hashCode()I",
            "method_body": "public int hashCode() {\nint hash = 0;\nfor (int i = 0; i < iTypes.length; i++) {\nhash += iTypes[i].hashCode();\nreturn hash;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
            "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nlong current = 0;\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nif (field.isPrecise()) {\nint value = field.getDifference(duration, current);\ncurrent = field.add(current, value);\nvalues[i] = value;\nreturn values;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
            "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getFieldType(int index) {\nreturn getPeriodType().getFieldType(index);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
            "method_id": 39
        }
    ]
}