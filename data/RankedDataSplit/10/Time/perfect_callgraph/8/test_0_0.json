{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "public void testForOffsetHoursMinutes_int_int() {\nassertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\nassertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, -15);\nfail();\n} catch (IllegalArgumentException ex) {}\n314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\nassertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\n}        \n",
    "stack_trace": "java.lang.IllegalArgumentException: Minutes out of range: -15\nat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:316)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nreturn DateTimeZone.UTC;\nif (hoursOffset < -23 || hoursOffset > 23) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nthrow new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\nint offset = 0;\nint hoursInMinutes = hoursOffset * 60;\nif (hoursInMinutes < 0) {\nminutesOffset = hoursInMinutes + minutesOffset;\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
            "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nif (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
            "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nbuf.append('-');\noffset = -offset;\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
            "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\nzone = new FixedDateTimeZone(id, null, offset, offset);\niFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\nreturn zone;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nif (id.startsWith(\"+\") || id.startsWith(\"-\")) {\nint offset = parseOffset(id);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\nid = printOffset(offset);\nreturn fixedOffsetZone(id, offset);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:parseOffset(Ljava/lang/String;)I",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
            "method_id": 9
        }
    ]
}