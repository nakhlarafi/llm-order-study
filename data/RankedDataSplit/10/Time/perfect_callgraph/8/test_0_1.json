{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "public void testForOffsetHoursMinutes_int_int() {\nassertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\nassertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, -15);\nfail();\n} catch (IllegalArgumentException ex) {}\n314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\nassertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\n}        \n",
    "stack_trace": "java.lang.IllegalArgumentException: Minutes out of range: -15\nat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:316)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone$1:<init>()V",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\nif (cOffsetFormatter == null) {\nreturn cOffsetFormatter;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
            "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
            "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
            "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
            "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nif (resetFields) {\nfor (int i = 0; i < count; i++) {\n}\nif (iOffset != null) {\nmillis -= iOffset;\nreturn millis;\n}",
            "method_id": 19
        }
    ]
}