{
    "bug_id": 26,
    "test_id": 6,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange",
    "test_body": "public void testWithSecondOfMinuteInDstChange() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withSecondOfMinute(0);\nassertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange(TestDateTimeZoneCutover.java:1101)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
            "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
            "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
            "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
            "method_id": 119
        }
    ]
}