{
    "bug_id": 26,
    "test_id": 7,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone",
    "test_body": "public void testWithMinuteOfHourInDstChange_mockZone() {\nDateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\nassertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\nDateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\nDateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\nassertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\nDateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\nassertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n1072: DateTime testPre1 = pre.withMinuteOfHour(30);\nassertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\nDateTime testPre2 = pre.withMinuteOfHour(50);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone(TestDateTimeZoneCutover.java:1073)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
            "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
            "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
            "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
            "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
            "method_id": 179
        }
    ]
}