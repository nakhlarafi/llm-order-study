{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.joda.time.TestDuration_Basics.testToPeriod_fixedZone",
    "test_body": "public void testToPeriod_fixedZone() throws Throwable {\nDateTimeZone zone = DateTimeZone.getDefault();\ntry {\nDateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\nlong length =\n(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n5L * DateTimeConstants.MILLIS_PER_HOUR +\n6L * DateTimeConstants.MILLIS_PER_MINUTE +\n7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\nDuration dur = new Duration(length);\nPeriod test = dur.toPeriod();\nassertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\nassertEquals(0, test.getMonths());\nassertEquals(0, test.getWeeks());\nassertEquals(0, test.getDays());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<64>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.joda.time.TestDuration_Basics.testToPeriod_fixedZone(TestDuration_Basics.java:483)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
            "method_body": "public int getOffsetFromLocal(long instantLocal) {\nreturn iWallOffset;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.years();\nreturn chronology.months();\nreturn chronology.weeks();\nreturn chronology.days();\nreturn chronology.hours();\nreturn chronology.minutes();\nreturn chronology.seconds();\nreturn chronology.millis();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
            "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nint offset = getOffsetToAdd(subtrahendInstant);\nreturn iField.getDifference\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
            "method_id": 29
        }
    ]
}