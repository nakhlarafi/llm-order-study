{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "public void testBug2495455() {\nPeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n.appendLiteral(\"P\")\n.appendYears()\n.appendSuffix(\"Y\")\n.appendMonths()\n.appendSuffix(\"M\")\n.appendWeeks()\n.appendSuffix(\"W\")\n.appendDays()\n.appendSuffix(\"D\")\n.appendSeparatorIfFieldsAfter(\"T\")\n.appendHours()\n.appendSuffix(\"H\")\n.appendMinutes()\n.appendSuffix(\"M\")\n.appendSecondsWithOptionalMillis()\n.appendSuffix(\"S\")\n.toFormatter();\nPeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n.append(ISOPeriodFormat.standard())\n.toFormatter();\npfmt1.parsePeriod(\"PT1003199059S\");\npfmt2.parsePeriod(\"PT1003199059S\");\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BasePeriod:setFieldInto([ILorg/joda/time/DurationFieldType;I)V",
            "method_body": "protected void setFieldInto(int[] values, DurationFieldType field, int value) {\nint index = indexOf(field);\nif (index == -1) {\nvalues[index] = value;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(JLorg/joda/time/PeriodType;)V",
            "method_body": "public MutablePeriod(long duration, PeriodType type) {\nsuper(duration, type, null);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
            "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.convert.ReadablePeriodConverter:setInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V",
            "method_body": "public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {\nduration.setPeriod((ReadablePeriod) object);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparator(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\nif (text == null || finalText == null) {\nclearPrefix();\nList<Object> pairs = iElementPairs;\nif (pairs.size() == 0) {\nSeparator lastSeparator = null;\nfor (i=pairs.size(); --i>=0; ) {\nif (pairs.get(i) instanceof Separator) {\ni--;  // element pairs\nif (lastSeparator != null && pairs.size() == 0) {\nObject[] comp = createComposite(pairs);\npairs.clear();\nSeparator separator = new Separator(\npairs.add(separator);\npairs.add(separator);\nreturn this;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.Period:<init>(Ljava/lang/Object;)V",
            "method_body": "public Period(Object period) {\nsuper(period, null, null);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
            "method_id": 69
        }
    ]
}