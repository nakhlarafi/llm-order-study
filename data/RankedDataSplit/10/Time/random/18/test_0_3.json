{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction",
    "test_body": "public void testLeapYearRulesConstruction() {\n// 1500 not leap in Gregorian, but is leap in Julian\nDateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\nassertEquals(dt.getYear(), 1500);",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:233)\nat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\nat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\nat org.joda.time.chrono.GJChronology.getDateTimeMillis(GJChronology.java:364)\nat org.joda.time.base.BaseDateTime.<init>(BaseDateTime.java:254)\nat org.joda.time.DateMidnight.<init>(DateMidnight.java:343)\nat org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction(TestGJChronology.java:496)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
            "method_body": "protected AbstractDateTime() {\nsuper();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
            "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
            "method_body": "public Instant toInstant() {\nreturn this;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.DateMidnight:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 39
        }
    ]
}