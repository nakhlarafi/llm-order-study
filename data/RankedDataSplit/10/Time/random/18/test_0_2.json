{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction",
    "test_body": "public void testLeapYearRulesConstruction() {\n// 1500 not leap in Gregorian, but is leap in Julian\nDateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\nassertEquals(dt.getYear(), 1500);",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:233)\nat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\nat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\nat org.joda.time.chrono.GJChronology.getDateTimeMillis(GJChronology.java:364)\nat org.joda.time.base.BaseDateTime.<init>(BaseDateTime.java:254)\nat org.joda.time.DateMidnight.<init>(DateMidnight.java:343)\nat org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction(TestGJChronology.java:496)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
            "method_body": "protected AbstractInstant() {\nsuper();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\ninstant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
            "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.Instant:getMillis()J",
            "method_body": "public long getMillis() {\nreturn iMillis;\n}",
            "method_id": 29
        }
    ]
}