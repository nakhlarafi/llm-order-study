{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith3",
    "test_body": "public void testWith3() {\nPartial test = createHourMinPartial();\ntry {\ntest.with(DateTimeFieldType.clockhourOfDay(), 6);\nfail();\n} catch (IllegalArgumentException ex) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Basics.testWith3(TestPartial_Basics.java:364)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn getWrappedField().getMaximumValue() + 1;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.clockhourOfDay();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn 1;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getWrappedField().getMaximumValue(instant, values) + 1;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
            "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 9
        }
    ]
}