{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.joda.time.TestDuration_Basics.testToPeriod_fixedZone",
    "test_body": "public void testToPeriod_fixedZone() throws Throwable {\nDateTimeZone zone = DateTimeZone.getDefault();\ntry {\nDateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\nlong length =\n(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n5L * DateTimeConstants.MILLIS_PER_HOUR +\n6L * DateTimeConstants.MILLIS_PER_MINUTE +\n7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\nDuration dur = new Duration(length);\nPeriod test = dur.toPeriod();\nassertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\nassertEquals(0, test.getMonths());\nassertEquals(0, test.getWeeks());\nassertEquals(0, test.getDays());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<64>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.joda.time.TestDuration_Basics.testToPeriod_fixedZone(TestDuration_Basics.java:483)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
            "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
            "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
            "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nint offset = getOffsetToAdd(subtrahendInstant);\nreturn iField.getDifference\n}",
            "method_id": 59
        }
    ]
}