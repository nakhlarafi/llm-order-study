{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay",
    "test_body": "public void testFactory_monthsBetween_RPartial_MonthDay() {\nMonthDay start = new MonthDay(2, 1);\nMonthDay end1 = new MonthDay(2, 28);\nMonthDay end2 = new MonthDay(2, 29);\nMonthDay end3 = new MonthDay(3, 1);\n136: assertEquals(0, Months.monthsBetween(start, end1).getMonths());\nassertEquals(0, Months.monthsBetween(start, end2).getMonths());\nassertEquals(1, Months.monthsBetween(start, end3).getMonths());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Months.monthsBetween(Months.java:161)\nat org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay(TestMonths.java:137)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
            "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.Months:months(I)Lorg/joda/time/Months;",
            "method_body": "public static Months months(int months) {\nswitch (months) {\nreturn ZERO;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
            "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
            "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
            "method_body": "public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\nint size = period.size();\nint[] values = new int[size];\nif (startInstant != endInstant) {\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nint value = field.getDifference(endInstant, startInstant);\nstartInstant = field.add(startInstant, value);\nvalues[i] = value;\nreturn values;\n}",
            "method_id": 49
        }
    ]
}