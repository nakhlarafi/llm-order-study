{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay",
    "test_body": "public void testFactory_monthsBetween_RPartial_MonthDay() {\nMonthDay start = new MonthDay(2, 1);\nMonthDay end1 = new MonthDay(2, 28);\nMonthDay end2 = new MonthDay(2, 29);\nMonthDay end3 = new MonthDay(3, 1);\n136: assertEquals(0, Months.monthsBetween(start, end1).getMonths());\nassertEquals(0, Months.monthsBetween(start, end2).getMonths());\nassertEquals(1, Months.monthsBetween(start, end3).getMonths());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Months.monthsBetween(Months.java:161)\nat org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay(TestMonths.java:137)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
            "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDifference(JJ)I",
            "method_body": "public abstract int get(long instant);\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.Months:getMonths()I",
            "method_body": "public int getMonths() {\nreturn getValue();\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
            "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
            "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 69
        }
    ]
}