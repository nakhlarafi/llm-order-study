{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative",
    "test_body": "public void testFormatStandard_negative() {\nPeriod p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\nassertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n122: p = Period.years(-54);\nassertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n125: p = Period.seconds(4).withMillis(-8);\nassertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n128: p = Period.seconds(-4).withMillis(8);\nassertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n131: p = Period.seconds(-23);\nassertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n134: p = Period.millis(-8);\nassertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:print(Lorg/joda/time/ReadablePeriod;)Ljava/lang/String;",
            "method_body": "public String print(ReadablePeriod period) {\ncheckPrinter();\ncheckPeriod(period);\nPeriodPrinter printer = getPrinter();\nStringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\nprinter.printTo(buf, period, iLocale);\nreturn buf.toString();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:appendUnpaddedInteger(Ljava/lang/StringBuffer;I)V",
            "method_body": "public static void appendUnpaddedInteger(StringBuffer buf, int value) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
            "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nreturn iText.length();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
            "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nint sum = 0;\nPeriodPrinter[] printers = iPrinters;\nfor (int i=printers.length; --i>=0; ) {\nsum += printers[i].calculatePrintedLength(period, locale);\nreturn sum;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.Period:millis(I)Lorg/joda/time/Period;",
            "method_body": "public static Period millis(int millis) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
            "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn 0;\nint sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\nif (iFieldType >= SECONDS_MILLIS) {\nsum = Math.max(sum, 4);\nsum++;\nif (iFieldType == SECONDS_OPTIONAL_MILLIS &&\nsum -= 4; // remove three digits and decimal point\nvalueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\nint value = (int) valueLong;\nif (iPrefix != null) {\nif (iSuffix != null) {\nsum += iSuffix.calculatePrintedLength(value);\nreturn sum;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isZero(Lorg/joda/time/ReadablePeriod;)Z",
            "method_body": "boolean isZero(ReadablePeriod period) {\nfor (int i = 0, isize = period.size(); i < isize; i++) {\nif (period.getValue(i) != 0) {\nreturn false;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
            "method_id": 9
        }
    ]
}