{
    "bug_id": 3,
    "test_id": 1,
    "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero",
    "test_body": "public void testAddDays_int_dstOverlapWinter_addZero() {\nMutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\ntest.addHours(1);\nassertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\ntest.addDays(0);\nassertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:271)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
            "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
            "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
            "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
            "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 136
        }
    ]
}