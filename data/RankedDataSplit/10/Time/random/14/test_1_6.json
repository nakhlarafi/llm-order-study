{
    "bug_id": 14,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust",
    "test_body": "public void testPlusMonths_int_negativeEndOfMonthAdjust() {\nMonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\nMonthDay result = test.plusMonths(-1);\nMonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\nassertEquals(expected, result);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
            "method_body": "public int[] get(ReadablePartial partial, long instant) {\nint size = partial.size();\nint[] values = new int[size];\nfor (int i = 0; i < size; i++) {\nvalues[i] = partial.getFieldType(i).getField(this).get(instant);\nreturn values;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
            "method_body": "private boolean isFormatter(Object f) {\nreturn (isPrinter(f) || isParser(f));\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
            "method_body": "MonthDay(MonthDay partial, int[] values) {\nsuper(partial, values);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:<init>(Lorg/joda/time/base/BasePartial;[I)V",
            "method_body": "protected BasePartial(BasePartial base, int[] values) {\nsuper();\niChronology = base.iChronology;\niValues = values;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
            "method_id": 69
        }
    ]
}