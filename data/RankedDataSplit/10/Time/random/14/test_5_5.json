{
    "bug_id": 14,
    "test_id": 5,
    "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap",
    "test_body": "public void testMinusMonths_int_negativeFromLeap() {\nMonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\nMonthDay result = test.minusMonths(-1);\nMonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)\nat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:554)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
            "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
            "method_body": "public MonthDay minusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 59
        }
    ]
}