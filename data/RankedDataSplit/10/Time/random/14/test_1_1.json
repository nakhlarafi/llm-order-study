{
    "bug_id": 14,
    "test_id": 1,
    "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust",
    "test_body": "public void testPlusMonths_int_negativeEndOfMonthAdjust() {\nMonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\nMonthDay result = test.plusMonths(-1);\nMonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\nassertEquals(expected, result);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
            "method_body": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nif (DateTimeUtils.isContiguous(partial)) {\nlong instant = 0L;\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\ninstant = add(instant, valueToAdd);\nreturn iChronology.get(partial, instant);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
            "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
            "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
            "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:dateByMonth(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZ)Z",
            "method_body": "private static boolean dateByMonth(\nboolean reducedPrec = false;\nif (fields.remove(DateTimeFieldType.year())) {\n} else if (fields.remove(DateTimeFieldType.monthOfYear())) {\nbld.appendLiteral('-');\nbld.appendLiteral('-');\nbld.appendMonthOfYear(2);\nif (fields.remove(DateTimeFieldType.dayOfMonth())) {\nappendSeparator(bld, extended);\nbld.appendDayOfMonth(2);\nreturn reducedPrec;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 19
        }
    ]
}