{
    "bug_id": 14,
    "test_id": 4,
    "test_name": "org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap",
    "test_body": "public void testMinusDays_int_negativeFromLeap() {\nMonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\nMonthDay result = test.minusDays(-1);\nMonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.minusDays(MonthDay.java:672)\nat org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap(TestMonthDay_Basics.java:610)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
            "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
            "method_body": "public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nDateTimeField nextField = null;\nwhile (valueToAdd > 0) {\nint max = getMaximumValue(instant, values);\nlong proposed = values[fieldIndex] + valueToAdd;\nif (proposed <= max) {\nif (nextField == null) {\nif (fieldIndex == 0) {\nnextField = instant.getField(fieldIndex - 1);\nif (getRangeDurationField().getType() != nextField.getDurationField().getType()) {\nvalueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add\nvalues = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\nvalues[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero\n}\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
            "method_id": 19
        }
    ]
}