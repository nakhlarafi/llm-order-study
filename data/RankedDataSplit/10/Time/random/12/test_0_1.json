{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1",
    "test_body": "public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\nGregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\ncal.set(Calendar.ERA, GregorianCalendar.BC);\ncal.set(Calendar.MILLISECOND, 7);\nLocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\nassertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDateTime_Constructors.java:155)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
            "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
            "method_body": "public int getValue(int index) {\nswitch (index) {\nreturn getChronology().year().get(getLocalMillis());\nreturn getChronology().monthOfYear().get(getLocalMillis());\nreturn getChronology().dayOfMonth().get(getLocalMillis());\nreturn getChronology().millisOfDay().get(getLocalMillis());\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
            "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
            "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
            "method_id": 19
        }
    ]
}