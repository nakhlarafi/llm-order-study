{
    "bug_id": 26,
    "test_id": 7,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone",
    "test_body": "public void testWithMinuteOfHourInDstChange_mockZone() {\nDateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\nassertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\nDateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\nDateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\nassertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\nDateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\nassertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n1072: DateTime testPre1 = pre.withMinuteOfHour(30);\nassertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\nDateTime testPre2 = pre.withMinuteOfHour(50);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone(TestDateTimeZoneCutover.java:1073)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn false;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
            "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
            "method_body": "public int getOffsetFromLocal(long instantLocal) {\nint offsetLocal = getOffset(instantLocal);\nint offsetAdjusted = getOffset(instantLocal - offsetLocal);\nif (offsetLocal != offsetAdjusted) {\nif ((offsetLocal - offsetAdjusted) < 0) {\nlong nextLocal = nextTransition(instantLocal - offsetLocal);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\nif (nextLocal != nextAdjusted) {\nreturn offsetAdjusted;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
            "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
            "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
            "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
            "method_id": 79
        }
    ]
}