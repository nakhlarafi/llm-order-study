{
    "bug_id": 26,
    "test_id": 4,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange",
    "test_body": "public void testWithMinuteOfHourInDstChange() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withMinuteOfHour(0);\nassertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange(TestDateTimeZoneCutover.java:1094)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
            "method_body": "public long getMillis() {\nreturn iMillis;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
            "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
            "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}",
            "method_id": 69
        }
    ]
}