{
    "bug_id": 26,
    "test_id": 3,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter",
    "test_body": "public void testWithMillisOfSecondInDstChange_NewYork_winter() {\nDateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\nassertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());\nDateTime test = dateTime.withMillisOfSecond(0);\nassertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter(TestDateTimeZoneCutover.java:1129)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
            "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
            "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
            "method_id": 59
        }
    ]
}