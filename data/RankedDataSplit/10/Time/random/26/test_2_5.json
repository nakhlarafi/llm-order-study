{
    "bug_id": 26,
    "test_id": 2,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer",
    "test_body": "public void testWithMillisOfSecondInDstChange_Paris_summer() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withMillisOfSecond(0);\nassertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer(TestDateTimeZoneCutover.java:1108)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
            "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
            "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}",
            "method_id": 59
        }
    ]
}