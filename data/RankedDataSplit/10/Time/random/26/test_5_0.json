{
    "bug_id": 26,
    "test_id": 5,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange",
    "test_body": "public void testWithHourOfDayInDstChange() {\nDateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\nDateTime test = dateTime.withHourOfDay(2);\nassertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange(TestDateTimeZoneCutover.java:1087)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
            "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 9
        }
    ]
}