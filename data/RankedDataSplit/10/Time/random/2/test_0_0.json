{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange",
    "test_body": "public void testWith_baseAndArgHaveNoRange() {\nPartial test = new Partial(DateTimeFieldType.year(), 1);\nPartial result = test.with(DateTimeFieldType.era(), 1);\nassertEquals(2, result.size());",
    "stack_trace": "java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year\nat org.joda.time.Partial.<init>(Partial.java:224)\nat org.joda.time.Partial.with(Partial.java:466)\nat org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange(TestPartial_Basics.java:469)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField durationField) {\nreturn 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType type, int value, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (type == null) {\niTypes = new DateTimeFieldType[] {type};\niValues = new int[] {value};\nchronology.validate(this, iValues);\n}",
            "method_id": 9
        }
    ]
}