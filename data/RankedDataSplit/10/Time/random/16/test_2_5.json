{
    "bug_id": 16,
    "test_id": 2,
    "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly",
    "test_body": "public void testParseInto_monthOnly() {\nDateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\nMutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\nassertEquals(1, f.parseInto(result, \"5\", 0));\nassertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-05-09T12:20:30.000+01:00> but was:<2000-05-09T12:20:30.000+01:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly(TestDateTimeFormatter.java:870)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
            "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
            "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
            "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
            "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
            "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
            "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
            "method_id": 59
        }
    ]
}