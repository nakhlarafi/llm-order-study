{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray",
    "test_body": "public void testConstructorEx7_TypeArray_intArray() throws Throwable {\nint[] values = new int[] {1, 1, 1};\nDateTimeFieldType[] types = new DateTimeFieldType[] {\nDateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {\nassertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n}\n271: types = new DateTimeFieldType[] {\nDateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {\nassertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n}\n280: types = new DateTimeFieldType[] {\nDateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\ntry {\nnew Partial(types, values);\nfail();\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray(TestPartial_Constructors.java:284)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (types == null) {\nif (values == null) {\nif (values.length != types.length) {\nif (types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nDurationField lastUnitField = null;\nfor (int i = 0; i < types.length; i++) {\nDateTimeFieldType loopType = types[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (i > 0) {\nint compare = lastUnitField.compareTo(loopUnitField);\nif (compare < 0) {\nthrow new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n} else if (compare == 0) {\nlastUnitField = loopUnitField;\niTypes = (DateTimeFieldType[]) types.clone();\nchronology.validate(this, values);\niValues = (int[]) values.clone();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 39
        }
    ]
}