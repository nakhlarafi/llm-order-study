{
    "bug_id": 6,
    "test_id": 1,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
    "test_body": "public void test_plusYears_positiveToZero_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\nassertEquals(expected, date.plusYears(-2003));\n}\n",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\nat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\nat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\nat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\nat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
            "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\nyear++;\nreturn year;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
            "method_body": "long gregorianToJulianByYear(long instant) {\nreturn convertByYear(instant, iGregorianChronology, iJulianChronology);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
            "method_id": 9
        }
    ]
}