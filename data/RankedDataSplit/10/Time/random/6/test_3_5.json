{
    "bug_id": 6,
    "test_id": 3,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover",
    "test_body": "public void test_plusYears_positiveToNegative_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);\nassertEquals(expected, date.plusYears(-2004));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-30>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover(TestGJDate.java:105)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
            "method_body": "LocalDate withLocalMillis(long newMillis) {\nnewMillis = iChronology.dayOfMonth().roundFloor(newMillis);\nreturn (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn iField.add(instant, value);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
            "method_id": 59
        }
    ]
}