{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover",
    "test_body": "public void test_plusWeekyears_positiveToNegative_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\nassertEquals(expected, date.weekyear().addToCopy(-2004));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover(TestGJDate.java:124)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate addToCopy(int value) {\nreturn iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
            "method_id": 99
        }
    ]
}