{
    "bug_id": 6,
    "test_id": 4,
    "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
    "test_body": "public void test_cutoverPreZero() {\nDateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\ntry {\nGJChronology.getInstance(DateTimeZone.UTC, cutover);\nfail();\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
            "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
            "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nleapYears--;\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
            "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
            "method_id": 69
        }
    ]
}