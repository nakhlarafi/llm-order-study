{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.ApplicationTest.testGroovy",
    "test_body": "public void testGroovy() throws Exception {\nOptions options = new Options();\n108: options.addOption(\nOptionBuilder.withLongOpt(\"define\").\nwithDescription(\"define a system property\").\nhasArg(true).\nwithArgName(\"name=value\").\ncreate('D'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"usage information\")\n.withLongOpt(\"help\")\n.create('h'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"debug mode will print out full stack traces\")\n.withLongOpt(\"debug\")\n.create('d'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"display the Groovy and JVM versions\")\n.withLongOpt(\"version\")\n.create('v'));\noptions.addOption(\nOptionBuilder.withArgName(\"charset\")\n.hasArg()\n.withDescription(\"specify the encoding of the files\")\n.withLongOpt(\"encoding\")\n.create('c'));\noptions.addOption(\nOptionBuilder.withArgName(\"script\")\n.hasArg()\n.withDescription(\"specify a command line script\")\n.create('e'));\noptions.addOption(\nOptionBuilder.withArgName(\"extension\")\n.hasOptionalArg()\n.withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n.create('i'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line using implicit 'line' variable\")\n.create('n'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line and print result (see also -n)\")\n.create('p'));\noptions.addOption(\nOptionBuilder.withArgName(\"port\")\n.hasOptionalArg()\n.withDescription(\"listen on a port and process inbound lines\")\n.create('l'));\noptions.addOption(\nOptionBuilder.withArgName(\"splitPattern\")\n.hasOptionalArg()\n.withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n.withLongOpt(\"autosplit\")\n.create('a'));\n165: Parser parser = new PosixParser();\nCommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n168: assertTrue(line.hasOption('e'));\nassertEquals(\"println 'hello'\", line.getOptionValue('e'));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.ApplicationTest.testGroovy(ApplicationTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\ncmd.addArg(t);\nif (stopAtNonOption)\neatTheRest = true;\nif (eatTheRest)\nwhile (iterator.hasNext())\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nswitch (numberOfArgs)\nprocessValue(value);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasOptionalArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasOptionalArg()\nOptionBuilder.numberOfArgs = 1;\nOptionBuilder.optionalArg = true;\nreturn instance;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn values.isEmpty();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\nList values = new ArrayList();\nfor (Iterator it = options.iterator(); it.hasNext();)\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\nvalues.addAll(option.getValuesList());\n}\nreturn values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 29
        }
    ]
}