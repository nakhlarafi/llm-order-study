{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PosixParserTest.testStop3",
    "test_body": "public void testStop3() throws Exception\n{\nString[] args = new String[]{\"--zop==1\",\n\"-abtoast\",\n\"--b=bar\"};\n165: CommandLine cl = parser.parse(options, args, true);\n167: assertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\nassertFalse(\"Confirm -b is not set\", cl.hasOption(\"b\"));\nassertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Confirm  3 extra args: 7\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.cli.PosixParserTest.testStop3(PosixParserTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options) {\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 33
        }
    ]
}