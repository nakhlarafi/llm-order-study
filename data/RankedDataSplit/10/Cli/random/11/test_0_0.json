{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage",
    "test_body": "public void testPrintOptionWithEmptyArgNameUsage() {\nOption option = new Option(\"f\", true, null);\noption.setArgName(\"\");\noption.setRequired(true);\n265: Options options = new Options();\noptions.addOption(option);\n268: StringWriter out = new StringWriter();\n270: HelpFormatter formatter = new HelpFormatter();\nformatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n273: assertEquals(\"usage: app -f\" + EOL, out.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<usage: app -f[]\n> but was:<usage: app -f[ <>]\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage(HelpFormatterTest.java:273)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired() )\nif( requiredOpts.contains(key) ) {\nrequiredOpts.add(key);\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nreturn new ArrayList(opts);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V",
            "method_body": "public void printUsage(PrintWriter pw, int width, String app,\nStringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)\nfinal Collection processedGroups = new ArrayList();\nList optList = new ArrayList(options.getOptions());\nCollections.sort(optList, getOptionComparator() );\nfor (Iterator i = optList.iterator(); i.hasNext();)\noption = (Option) i.next();\nOptionGroup group = options.getOptionGroup(option);\nif (group != null)\nappendOption(buff, option, option.isRequired());\nif (i.hasNext())\n}\nprintWrapped(pw, width, buff.toString().indexOf(' ') + 1,\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop,\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn Collections.unmodifiableCollection(helpOptions());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg,\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.numberOfArgs = 1;\nthis.description = description;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V",
            "method_body": "private static void appendOption(final StringBuffer buff,\nif (!required)\nif (option.getOpt() != null)\nbuff.append(\"-\").append(option.getOpt());\nif (option.hasArg() && (option.getArgName() != null))\nbuff.append(\" <\").append(option.getArgName()).append(\">\");\nif (!required)\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "public Options()\n{\n}",
            "method_id": 9
        }
    ]
}