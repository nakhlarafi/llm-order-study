{
    "bug_id": 16,
    "test_id": 1,
    "test_name": "org.apache.commons.cli2.commandline.PreferencesCommandLineTest.testGetOptions_Order",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected same:<[--help (-?,-h)|login <username>] [<target1> [<target2> ...]]> was not:<[--help (-?,-h)]>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotSame(Assert.java:325)\nat junit.framework.Assert.assertSame(Assert.java:288)\nat junit.framework.Assert.assertSame(Assert.java:296)\nat junit.framework.TestCase.assertSame(TestCase.java:465)\nat org.apache.commons.cli2.CommandLineTestCase.testGetOptions_Order(CommandLineTestCase.java:436)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "public DefaultOptionBuilder(final String shortPrefix,\nthrows IllegalArgumentException {\nif ((shortPrefix == null) || (shortPrefix.length() == 0)) {\nif ((longPrefix == null) || (longPrefix.length() == 0)) {\nthis.shortPrefix = shortPrefix;\nthis.longPrefix = longPrefix;\nthis.burstEnabled = burstEnabled;\nreset();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:create()Lorg/apache/commons/cli2/Group;",
            "method_body": "public Group create() {\nfinal GroupImpl group =\nreset();\nreturn group;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:process(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)V",
            "method_body": "public void process(WriteableCommandLine commandLine,\nprocessValues(commandLine, args, this);\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:<init>(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public GroupImpl(final List options,\nsuper(0, false);\nthis.name = name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.options = Collections.unmodifiableList(options);\nfinal List newAnonymous = new ArrayList();\nfinal SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());\nfinal Set newPrefixes = new HashSet();\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\nif (option instanceof Argument) {\ni.remove();\nnewAnonymous.add(option);\nfinal Set triggers = option.getTriggers();\nfor (Iterator j = triggers.iterator(); j.hasNext();) {\nnewOptionMap.put(j.next(), option);\nnewPrefixes.addAll(option.getPrefixes());\n}\nthis.anonymous = Collections.unmodifiableList(newAnonymous);\nthis.optionMap = Collections.unmodifiableSortedMap(newOptionMap);\nthis.prefixes = Collections.unmodifiableSet(newPrefixes);\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.cli2.option.DefaultOption:processParent(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)V",
            "method_body": "public void processParent(WriteableCommandLine commandLine,\nfinal String argument = (String) arguments.next();\nif (triggers.contains(argument)) {\ncommandLine.addOption(this);\narguments.set(preferredName);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ParentImpl:validate(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void validate(WriteableCommandLine commandLine)\nif (commandLine.hasOption(this)) {\nif (argument != null) {\nargument.validate(commandLine, this);\nif (children != null) {\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:defaults(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void defaults(final WriteableCommandLine commandLine) {\n}",
            "method_id": 86
        }
    ]
}