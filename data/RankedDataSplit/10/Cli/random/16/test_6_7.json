{
    "bug_id": 16,
    "test_id": 6,
    "test_name": "org.apache.commons.cli2.commandline.DefaultingCommandLineTest.testGetOptions_Order",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected same:<[--help (-?,-h)|login <username>] [<target1> [<target2> ...]]> was not:<[--help (-?,-h)]>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotSame(Assert.java:325)\nat junit.framework.Assert.assertSame(Assert.java:288)\nat junit.framework.Assert.assertSame(Assert.java:296)\nat junit.framework.TestCase.assertSame(TestCase.java:465)\nat org.apache.commons.cli2.CommandLineTestCase.testGetOptions_Order(CommandLineTestCase.java:436)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nfinal boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);\nfinal boolean numbered =\nfinal boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);\nfinal int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;\nint i = 0;\nwhile (i < max) {\nif (i > 0) {\nbuffer.append(' ');\nif ((i >= minimum) && (optional || (i > 0))) {\nbuffer.append('[');\nif (bracketed) {\nbuffer.append('<');\nbuffer.append(name);\n++i;\nif (numbered) {\nbuffer.append(i);\nif (bracketed) {\nbuffer.append('>');\nif (maximum == Integer.MAX_VALUE) {\nbuffer.append(\" ...\");\nwhile (i > 0) {\n--i;\nif ((i >= minimum) && (optional || (i > 0))) {\nbuffer.append(']');\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:addSwitch(Lorg/apache/commons/cli2/Option;Z)V",
            "method_body": "public void addSwitch(final Option option,\naddOption(option);\nif (switches.containsKey(option)) {\nswitches.put(option, value ? Boolean.TRUE : Boolean.FALSE);\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ParentImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nfinal Set triggers = getTriggers();\nif (argument != null) {\nfinal char separator = argument.getInitialSeparator();\nif (separator != NUL) {\nreturn triggers.contains(arg);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:isRequired()Z",
            "method_body": "public boolean isRequired() {\nreturn required;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:checkPrefix(Ljava/util/Set;Ljava/lang/String;)V",
            "method_body": "private void checkPrefix(final Set prefixes,\nfor (final Iterator i = prefixes.iterator(); i.hasNext();) {\nString prefix = (String) i.next();\nif (trigger.startsWith(prefix)) {\nreturn;\n}\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:<init>(IZ)V",
            "method_body": "public OptionImpl(final int id,\nfinal boolean required) {\nthis.id = id;\nthis.required = required;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:getTriggers()Ljava/util/Set;",
            "method_body": "public Set getTriggers() {\nreturn Collections.EMPTY_SET;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:checkPrefixes(Ljava/util/Set;)V",
            "method_body": "protected void checkPrefixes(final Set prefixes) {\nif (prefixes.isEmpty()) {\ncheckPrefix(prefixes, getPreferredName());\nthis.getTriggers();\nfor (final Iterator i = getTriggers().iterator(); i.hasNext();) {\ncheckPrefix(prefixes, (String) i.next());\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:appendUsage(Ljava/lang/StringBuffer;Ljava/util/Set;Ljava/util/Comparator;)V",
            "method_body": "public void appendUsage(final StringBuffer buffer,\nappendUsage(buffer, helpSettings, comp, \"|\");\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:parse([Ljava/lang/String;)Lorg/apache/commons/cli2/CommandLine;",
            "method_body": "public CommandLine parse(final String[] arguments)\nfinal List argumentList = new LinkedList();\nfor (int i = 0; i < arguments.length; i++) {\nfinal String argument = arguments[i];\nargumentList.add(new String(argument));\nfinal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);\ngroup.defaults(commandLine);\nfinal ListIterator iterator = argumentList.listIterator();\nObject previous = null;\nwhile (group.canProcess(commandLine, iterator)) {\nfinal Object next = iterator.next();\niterator.previous();\nif (next == previous) {\nprevious = next;\ngroup.process(commandLine, iterator);\n}\nif (iterator.hasNext()) {\nif (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {\ngroup.validate(commandLine);\nreturn commandLine;\n}",
            "method_id": 79
        }
    ]
}