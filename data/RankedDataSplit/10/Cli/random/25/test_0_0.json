{
    "bug_id": 25,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored",
    "test_body": "public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\nOptions options = new Options();\noptions.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\nHelpFormatter formatter = new HelpFormatter();\nStringWriter sw = new StringWriter();\nformatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\nSystem.err.println(sw.toString());\nString expected = \"usage:\\n\" +\n\"       org.apache.comm\\n\" +\n\"       ons.cli.bug.Bug\\n\" +\n\"       CLI162Test\\n\" +\n\"Header\\n\" +\n\"-x,--extralongarg\\n\" +\n\" This description is\\n\" +\n\" Long.\\n\" +\n\"Footer\\n\";\nassertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: Long arguments did not split as expected expected:<...\n-x,--extralongarg\n[This description is\nLong].\nFooter\n> but was:<...\n-x,--extralongarg\n[                    T\nh\ni\ns\nd\ne\ns\nc\nr\ni\np\nt\ni\no\nn\ni\ns\nL\no\nn\ng\n].\nFooter\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored(BugCLI162Test.java:280)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:createPadding(I)Ljava/lang/String;",
            "method_body": "protected String createPadding(int len)\nStringBuffer sb = new StringBuffer(len);\nfor (int i = 0; i < len; ++i)\nsb.append(' ');\nreturn sb.toString();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printOptions(Ljava/io/PrintWriter;ILorg/apache/commons/cli/Options;II)V",
            "method_body": "public void printOptions(PrintWriter pw, int width, Options options,\nStringBuffer sb = new StringBuffer();\nrenderOptions(sb, width, options, leftPad, descPad);\npw.println(sb.toString());\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\nif (nextLineTabStop >= width)\nnextLineTabStop = width - 1;\nfinal String padding = createPadding(nextLineTabStop);\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(text);\nreturn sb;\nif ( (text.length() > width) && (pos == nextLineTabStop - 1) )\npos = width;\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getOptionComparator()Ljava/util/Comparator;",
            "method_body": "public Comparator getOptionComparator()\nreturn optionComparator;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn opt;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 9
        }
    ]
}