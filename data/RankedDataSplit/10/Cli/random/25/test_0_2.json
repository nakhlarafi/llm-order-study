{
    "bug_id": 25,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored",
    "test_body": "public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\nOptions options = new Options();\noptions.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\nHelpFormatter formatter = new HelpFormatter();\nStringWriter sw = new StringWriter();\nformatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\nSystem.err.println(sw.toString());\nString expected = \"usage:\\n\" +\n\"       org.apache.comm\\n\" +\n\"       ons.cli.bug.Bug\\n\" +\n\"       CLI162Test\\n\" +\n\"Header\\n\" +\n\"-x,--extralongarg\\n\" +\n\" This description is\\n\" +\n\" Long.\\n\" +\n\"Footer\\n\";\nassertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: Long arguments did not split as expected expected:<...\n-x,--extralongarg\n[This description is\nLong].\nFooter\n> but was:<...\n-x,--extralongarg\n[                    T\nh\ni\ns\nd\ne\ns\nc\nr\ni\np\nt\ni\no\nn\ni\ns\nL\no\nn\ng\n].\nFooter\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored(BugCLI162Test.java:280)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;Z)V",
            "method_body": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\nif ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\nif (autoUsage)\nprintUsage(pw, width, cmdLineSyntax);\nif ((header != null) && (header.trim().length() > 0))\nprintWrapped(pw, width, header);\nprintOptions(pw, width, options, leftPad, descPad);\nif ((footer != null) && (footer.trim().length() > 0))\nprintWrapped(pw, width, footer);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nint pos = -1;\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nelse if (startPos + width >= text.length())\nreturn -1;\npos = startPos + width;\n&& (c != '\\n') && (c != '\\r'))\n--pos;\nif (pos > startPos)\nreturn pos;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)\nfinal String lpad = createPadding(leftPad);\nfinal String dpad = createPadding(descPad);\nint max = 0;\nList prefixList = new ArrayList();\nList optList = options.helpOptions();\nCollections.sort(optList, getOptionComparator());\nfor (Iterator i = optList.iterator(); i.hasNext();)\nOption option = (Option) i.next();\noptBuf = new StringBuffer(8);\nif (option.getOpt() == null)\noptBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\nif (option.hasLongOpt())\noptBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\nif (option.hasArg())\nprefixList.add(optBuf);\nmax = (optBuf.length() > max) ? optBuf.length() : max;\n}\nint x = 0;\nfor (Iterator i = optList.iterator(); i.hasNext();)\nOption option = (Option) i.next();\noptBuf = new StringBuffer(prefixList.get(x++).toString());\nif (optBuf.length() < max)\noptBuf.append(dpad);\nint nextLineTabStop = max + descPad;\nif (option.getDescription() != null)\noptBuf.append(option.getDescription());\nrenderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\nif (i.hasNext())\n}\nreturn sb;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;)V",
            "method_body": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\nprintHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\n}",
            "method_id": 26
        }
    ]
}