{
    "bug_id": 35,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch",
    "test_body": "public void testExactOptionNameMatch() throws ParseException {\nnew DefaultParser().parse(getOptions(), new String[]{\"--prefix\"});\n}\n",
    "stack_trace": "org.apache.commons.cli.AmbiguousOptionException: Ambiguous option: '--prefix'  (could be: 'prefix', 'prefixplusplus')\nat org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(DefaultParser.java:398)\nat org.apache.commons.cli.DefaultParser.handleLongOption(DefaultParser.java:371)\nat org.apache.commons.cli.DefaultParser.handleToken(DefaultParser.java:239)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:120)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)\nat org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch(BugCLI252Test.java:10)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.UnrecognizedOptionException:<init>(Ljava/lang/String;)V",
            "method_body": "public UnrecognizedOptionException(String message)\nsuper(message);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.UnrecognizedOptionException:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public UnrecognizedOptionException(String message, String option)\nthis(message);\nthis.option = option;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:longOpt(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder longOpt(final String longOpt)\nthis.longOpt = longOpt;\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 19
        }
    ]
}