{
    "bug_id": 35,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch",
    "test_body": "public void testExactOptionNameMatch() throws ParseException {\nnew DefaultParser().parse(getOptions(), new String[]{\"--prefix\"});\n}\n",
    "stack_trace": "org.apache.commons.cli.AmbiguousOptionException: Ambiguous option: '--prefix'  (could be: 'prefix', 'prefixplusplus')\nat org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(DefaultParser.java:398)\nat org.apache.commons.cli.DefaultParser.handleLongOption(DefaultParser.java:371)\nat org.apache.commons.cli.DefaultParser.handleToken(DefaultParser.java:239)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:120)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)\nat org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch(BugCLI252Test.java:10)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\nfor (OptionGroup group : options.getOptionGroups())\ncmd = new CommandLine();\nif (arguments != null)\nfor (String argument : arguments)\nhandleToken(argument);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getMatchingOptions(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> getMatchingOptions(String opt)\nopt = Util.stripLeadingHyphens(opt);\nList<String> matchingOpts = new ArrayList<String>();\nfor (String longOpt : longOpts.keySet())\nif (longOpt.startsWith(opt))\nmatchingOpts.add(longOpt);\n}\nreturn matchingOpts;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\nsuper(message);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nreturn;\nif (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.AmbiguousOptionException:createMessage(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String option, Collection<String> matchingOptions)\nStringBuilder buf = new StringBuilder(\"Ambiguous option: '\");\nbuf.append(option);\nbuf.append(\"'  (could be: \");\nIterator<String> it = matchingOptions.iterator();\nwhile (it.hasNext())\nbuf.append(\"'\");\nbuf.append(it.next());\nbuf.append(\"'\");\nif (it.hasNext())\nbuf.append(\", \");\nbuf.append(\")\");\nreturn buf.toString();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleLongOption(String token) throws ParseException\nif (token.indexOf('=') == -1)\nhandleLongOptionWithoutEqual(token);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 29
        }
    ]
}