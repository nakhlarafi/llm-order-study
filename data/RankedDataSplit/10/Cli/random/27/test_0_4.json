{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.BasicParserTest.testOptionGroupLong",
    "test_body": null,
    "stack_trace": "junit.framework.ComparisonFailure: selected option expected:<bar> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.ParserTestCase.testOptionGroupLong(ParserTestCase.java:631)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions() throws MissingOptionException\nif (!getRequiredOptions().isEmpty())\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nreturn;\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nOption opt = (Option) getOptions().getOption(arg).clone();\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nOptionGroup group = getOptions().getOptionGroup(opt);\nif (group.isRequired())\ngroup.setSelected(opt);\nif (opt.hasArg())\ncmd.addOption(opt);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:setSelected(Lorg/apache/commons/cli/Option;)V",
            "method_body": "public void setSelected(Option option) throws AlreadySelectedException\nif (option == null)\nselected = null;\nreturn;\nif (selected == null || selected.equals(option.getOpt()))\nselected = option.getOpt();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\nvalues.clear();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 49
        }
    ]
}