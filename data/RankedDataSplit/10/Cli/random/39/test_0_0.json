{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(final char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nfinal Option option = (Option) super.clone();\noption.values = new ArrayList<String>(values);\nreturn option;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions() throws MissingOptionException\nif (!getRequiredOptions().isEmpty())\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(final Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(final Option opt)\nfinal String key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\nvalues.clear();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:type(Ljava/lang/Class;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder type(final Class<?> type)\nthis.type = type;\nreturn this;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final Option option) throws ParseException\nif (option == null)\nfinal String res = getOptionValue(option);\nif (res == null)\nreturn TypeHandler.createValue(res, option.getType());\n}",
            "method_id": 9
        }
    ]
}