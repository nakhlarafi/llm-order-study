{
    "bug_id": 39,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",
    "test_body": "public void testExistingFilePattern() throws Exception\n{\nfinal Options options = PatternOptionBuilder.parsePattern(\"g<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n168: final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n170: assertNotNull(\"option g not parsed\", parsedReadableFileStream);\nassertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option g not FileInputStream\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern(PatternOptionBuilderTest.java:171)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nfinal int length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(final Iterator<String> iter)\nif (eatTheRest)\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(final String token, final boolean stopAtNonOption)\nif (stopAtNonOption && !options.hasOption(token))\nif (options.hasOption(token))\ncurrentOption = options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class<String> STRING_VALUE = String.class;\npublic static final Class<Object> OBJECT_VALUE = Object.class;\npublic static final Class<Number> NUMBER_VALUE = Number.class;\npublic static final Class<Date> DATE_VALUE = Date.class;\npublic static final Class<?> CLASS_VALUE = Class.class;\npublic static final Class<FileInputStream> EXISTING_FILE_VALUE = FileInputStream.class;\npublic static final Class<File> FILE_VALUE = File.class;\npublic static final Class<File[]> FILES_VALUE = File[].class;\npublic static final Class<URL> URL_VALUE = URL.class;\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\nreturn values.isEmpty();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(final char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\nvalues.clear();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(final char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 29
        }
    ]
}