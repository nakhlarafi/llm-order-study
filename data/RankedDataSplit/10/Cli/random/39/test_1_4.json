{
    "bug_id": 39,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",
    "test_body": "public void testExistingFilePattern() throws Exception\n{\nfinal Options options = PatternOptionBuilder.parsePattern(\"g<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n168: final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n170: assertNotNull(\"option g not parsed\", parsedReadableFileStream);\nassertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option g not FileInputStream\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern(PatternOptionBuilderTest.java:171)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(final String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn shortOpts.get(opt);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final Option option) throws ParseException\nif (option == null)\nfinal String res = getOptionValue(option);\nif (res == null)\nreturn TypeHandler.createValue(res, option.getType());\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(final char ch)\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Lorg/apache/commons/cli/Option;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(final Option option)\nfinal List<String> values = new ArrayList<String>();\nfor (final Option processedOption : options)\nif (processedOption.equals(option))\nvalues.addAll(processedOption.getValuesList());\n}\nreturn values.isEmpty() ? null : values.toArray(new String[values.size()]);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(final Options options, final String[] arguments) throws ParseException\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(final Option opt)\noptions.add(opt);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(final Options options, String[] arguments, final Properties properties, final boolean stopAtNonOption)\nfor (final Option opt : options.helpOptions())\nopt.clearValues();\n}\nfor (final OptionGroup group : options.getOptionGroups())\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nfinal List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nfinal ListIterator<String> iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nfinal String t = iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn type;\n}",
            "method_id": 49
        }
    ]
}