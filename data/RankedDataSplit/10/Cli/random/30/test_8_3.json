{
    "bug_id": 30,
    "test_id": 8,
    "test_name": "org.apache.commons.cli.GnuParserTest.testPropertyOptionGroup",
    "test_body": null,
    "stack_trace": "org.apache.commons.cli.AlreadySelectedException: The option 'b' was specified but an option from this group has already been selected: 'a'\nat org.apache.commons.cli.OptionGroup.setSelected(OptionGroup.java:105)\nat org.apache.commons.cli.Parser.updateRequiredOptions(Parser.java:421)\nat org.apache.commons.cli.Parser.processProperties(Parser.java:296)\nat org.apache.commons.cli.Parser.parse(Parser.java:241)\nat org.apache.commons.cli.Parser.parse(Parser.java:103)\nat org.apache.commons.cli.ParserTestCase.parse(ParserTestCase.java:875)\nat org.apache.commons.cli.ParserTestCase.testPropertyOptionGroup(ParserTestCase.java:1037)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOptionGroup(Lorg/apache/commons/cli/OptionGroup;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOptionGroup(OptionGroup group)\nIterator options = group.getOptions().iterator();\nif (group.isRequired())\nwhile (options.hasNext())\nOption option = (Option) options.next();\noption.setRequired(false);\naddOption(option);\noptionGroups.put(option.getKey(), group);\n}\nreturn this;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\nsuper(message);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate List args = new LinkedList();\nprivate List options = new ArrayList();\n{\n}",
            "method_id": 39
        }
    ]
}