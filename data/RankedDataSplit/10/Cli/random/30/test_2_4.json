{
    "bug_id": 30,
    "test_id": 2,
    "test_name": "org.apache.commons.cli.PosixParserTest.testPropertyOptionGroup",
    "test_body": null,
    "stack_trace": "org.apache.commons.cli.AlreadySelectedException: The option 'b' was specified but an option from this group has already been selected: 'a'\nat org.apache.commons.cli.OptionGroup.setSelected(OptionGroup.java:105)\nat org.apache.commons.cli.Parser.updateRequiredOptions(Parser.java:421)\nat org.apache.commons.cli.Parser.processProperties(Parser.java:296)\nat org.apache.commons.cli.Parser.parse(Parser.java:241)\nat org.apache.commons.cli.Parser.parse(Parser.java:103)\nat org.apache.commons.cli.ParserTestCase.parse(ParserTestCase.java:875)\nat org.apache.commons.cli.ParserTestCase.testPropertyOptionGroup(ParserTestCase.java:1037)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nfor (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\nOptionGroup group = (OptionGroup) it.next();\ngroup.setSelected(null);\n}\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\narguments = new String[0];\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\nif (eatTheRest)\n}\nprocessProperties(properties);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn optionMap.values();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getSelected()Ljava/lang/String;",
            "method_body": "public String getSelected()\nreturn selected;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection getOptionGroups()\nreturn new HashSet(optionGroups.values());\n}",
            "method_id": 46
        }
    ]
}