{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ValueTest.testPropertyOptionFlags",
    "test_body": "public void testPropertyOptionFlags() throws Exception\n{\nProperties properties = new Properties();\nproperties.setProperty( \"a\", \"true\" );\nproperties.setProperty( \"c\", \"yes\" );\nproperties.setProperty( \"e\", \"1\" );\n199: Parser parser = new PosixParser();\n201: CommandLine cmd = parser.parse(opts, null, properties);\nassertTrue( cmd.hasOption(\"a\") );\nassertTrue( cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n206: 207: properties = new Properties();\nproperties.setProperty( \"a\", \"false\" );\nproperties.setProperty( \"c\", \"no\" );\nproperties.setProperty( \"e\", \"0\" );\n212: cmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n217: 218: properties = new Properties();\nproperties.setProperty( \"a\", \"TRUE\" );\nproperties.setProperty( \"c\", \"nO\" );\nproperties.setProperty( \"e\", \"TrUe\" );\n223: cmd = parser.parse(opts, null, properties);\nassertTrue( cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n228: 229: properties = new Properties();\nproperties.setProperty( \"a\", \"just a string\" );\nproperties.setProperty( \"e\", \"\" );\n233: cmd = parser.parse(opts, null, properties);\nassertTrue( !cmd.hasOption(\"a\") );\nassertTrue( !cmd.hasOption(\"c\") );\nassertTrue( cmd.hasOption(\"e\") );\n} \n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.ValueTest.testPropertyOptionFlags(ValueTest.java:215)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, boolean hasArg, String description)\naddOption(opt, null, hasArg, description);\nreturn this;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions()\nreturn requiredOptions;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processNonOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processNonOptionToken(String value, boolean stopAtNonOption)\nif (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\ntokens.add(value);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 19
        }
    ]
}