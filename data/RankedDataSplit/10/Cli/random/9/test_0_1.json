{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions",
    "test_body": "public void testMissingRequiredOptions()\n{\nString[] args = new String[] { \"-a\" };\n122: _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n.hasArg()\n.isRequired()\n.withDescription( \"set the value of [c]\" )\n.create( 'c' ) );\n128: try\n{\nCommandLine cl = parser.parse(_options,args);\nfail( \"exception should have been thrown\" );\n}\ncatch (MissingOptionException e)\n{\nassertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Incorrect exception message expected:<... required options: b[, ]c> but was:<... required options: b[]c>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions(ParseRequiredTest.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\nOptionBuilder.description = newDescription;\nreturn instance;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate ArrayList values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options) {\nthis.options = options;\nthis.requiredOptions = options.getRequiredOptions();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthis(opt, null, false, description);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\nthis.type = type;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nreturn create(String.valueOf(opt));\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str == null) {\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 19
        }
    ]
}