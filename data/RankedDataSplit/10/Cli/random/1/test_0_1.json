{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI13Test.testCLI13",
    "test_body": "public void testCLI13()\nthrows ParseException\n{\nfinal String debugOpt = \"debug\";\nOption debug = OptionBuilder\n.withArgName( debugOpt )\n.withDescription( \"turn on debugging\" )\n.withLongOpt( debugOpt )\n.hasArg()\n.create( 'd' );\nOptions options = new Options();\noptions.addOption( debug );\nCommandLine commandLine = new PosixParser().parse( options, new String[]{\"-d\", \"true\"} );\n47: assertEquals(\"true\", commandLine.getOptionValue( debugOpt ));\nassertEquals(\"true\", commandLine.getOptionValue( 'd' ));\nassertTrue(commandLine.hasOption( 'd'));\nassertTrue(commandLine.hasOption( debugOpt));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.cli.bug.BugCLI13Test.testCLI13(BugCLI13Test.java:50)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\nopt = Util.stripLeadingHyphens(opt);\nString key = opt;\nif (names.containsKey(opt))\n}\nreturn ((Option) options.get(key)).getValues();\n\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\nString[] values = getOptionValues(opt);\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\nthis.values.add(value);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 19
        }
    ]
}