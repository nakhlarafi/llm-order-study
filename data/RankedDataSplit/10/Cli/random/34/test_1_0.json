{
    "bug_id": 34,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions",
    "test_body": "public void testTwoCompleteOptions( ) {\nOption simple = OptionBuilder.withLongOpt( \"simple option\")\n.hasArg( )\n.isRequired( )\n.hasArgs( )\n.withType( Float.class )\n.withDescription( \"this is a simple option\" )\n.create( 's' );\n51: assertEquals( \"s\", simple.getOpt() );\nassertEquals( \"simple option\", simple.getLongOpt() );\nassertEquals( \"this is a simple option\", simple.getDescription() );\nassertEquals( simple.getType(), Float.class );\nassertTrue( simple.hasArg() );\nassertTrue( simple.isRequired() );\nassertTrue( simple.hasArgs() );\n59: simple = OptionBuilder.withLongOpt( \"dimple option\")\n.hasArg( )\n.withDescription( \"this is a dimple option\" )\n.create( 'd' );\n64: assertEquals( \"d\", simple.getOpt() );\nassertEquals( \"dimple option\", simple.getLongOpt() );\nassertEquals( \"this is a dimple option\", simple.getDescription() );\nassertEquals( String.class, simple.getType() );\nassertTrue( simple.hasArg() );",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.String> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions(OptionBuilderTest.java:67)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgs()Z",
            "method_body": "public boolean hasArgs()\nreturn numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Class;)V",
            "method_body": "public void setType(Class type)\nthis.type = type;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\nOptionBuilder.description = newDescription;\nreturn instance;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt) throws IllegalArgumentException\nreturn create(String.valueOf(opt));\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArgs()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArgs()\nOptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\nreturn instance;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\nOption option = null;\noption = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\n}\nreturn option;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.description = description;\n}",
            "method_id": 9
        }
    ]
}