{
    "bug_id": 34,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.CommandLineTest.testGetParsedOptionValue",
    "test_body": "public void testGetParsedOptionValue() throws Exception {\nOptions options = new Options();\noptions.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\noptions.addOption(OptionBuilder.hasArg().create(\"f\"));\n70: CommandLineParser parser = new DefaultParser();\nCommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n73: assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());\nassertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<foo> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.CommandLineTest.testGetParsedOptionValue(CommandLineTest.java:74)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\nthis.longOpt = longOpt;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn (Option) shortOpts.get(opt);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\nif (currentOption != null && currentOption.requiresArg())\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\ncheckRequiredArgs();\noption = (Option) option.clone();\nupdateRequiredOptions(option);\ncmd.addOption(option);\nif (option.hasArg())\ncurrentOption = option;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn opt;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasShortOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasShortOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\nthis(opt, null, false, description);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 49
        }
    ]
}