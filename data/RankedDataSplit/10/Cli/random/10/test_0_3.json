{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice",
    "test_body": "public void testReuseOptionsTwice() throws Exception\n{\nOptions opts = new Options();\nopts.addOption(OptionBuilder.isRequired().create('v'));\n148: GnuParser parser = new GnuParser();\n150: // first parsing\nparser.parse(opts, new String[] { \"-v\" });\n153: try\n{\n// second parsing, with the same Options instance and an invalid command line\nparser.parse(opts, new String[0]);\nfail(\"MissingOptionException not thrown\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: MissingOptionException not thrown\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice(ParseRequiredTest.java:157)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn this.opt;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options) {\nthis.options = options;\nthis.requiredOptions = options.getRequiredOptions();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.GnuParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\ninit();\nboolean eatTheRest = false;\nOption currentOption = null;\nfor (int i = 0; i < arguments.length; i++)\nif (\"--\".equals(arguments[i]))\nelse if (\"-\".equals(arguments[i]))\nelse if (arguments[i].startsWith(\"-\"))\nOption option = options.getOption(arguments[i]);\nif (option == null)\ncurrentOption = option;\nOption specialOption =\nif ((specialOption != null) && (option == null))\nelse if ((currentOption != null) && currentOption.hasArg())\nelse if (currentOption != null)\ntokens.add(arguments[i]);\n}\nif (eatTheRest)\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg,\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.description = description;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nreturn create(String.valueOf(opt));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nreturn new ArrayList(opts);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 39
        }
    ]
}