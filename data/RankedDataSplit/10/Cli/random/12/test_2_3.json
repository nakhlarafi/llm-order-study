{
    "bug_id": 12,
    "test_id": 2,
    "test_name": "org.apache.commons.cli.GnuParserTest.testLongWithEqual",
    "test_body": "public void testLongWithEqual() throws Exception\n{\nString[] args = new String[] { \"--foo=bar\" };\n229: Options options = new Options();\noptions.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n232: Parser parser = new GnuParser();\nCommandLine cl = parser.parse(options, args);\n235: assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n}\n",
    "stack_trace": "org.apache.commons.cli.UnrecognizedOptionException: Unrecognized option: --foo=bar\nat org.apache.commons.cli.Parser.processOption(Parser.java:394)\nat org.apache.commons.cli.Parser.parse(Parser.java:207)\nat org.apache.commons.cli.Parser.parse(Parser.java:86)\nat org.apache.commons.cli.GnuParserTest.testLongWithEqual(GnuParserTest.java:233)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.UnrecognizedOptionException:<init>(Ljava/lang/String;)V",
            "method_body": "public UnrecognizedOptionException(String message)\nsuper(message);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired() )\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options) {\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 39
        }
    ]
}