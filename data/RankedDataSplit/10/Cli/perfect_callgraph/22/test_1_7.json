{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.ApplicationTest.testGroovy",
    "test_body": "public void testGroovy() throws Exception {\nOptions options = new Options();\n108: options.addOption(\nOptionBuilder.withLongOpt(\"define\").\nwithDescription(\"define a system property\").\nhasArg(true).\nwithArgName(\"name=value\").\ncreate('D'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"usage information\")\n.withLongOpt(\"help\")\n.create('h'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"debug mode will print out full stack traces\")\n.withLongOpt(\"debug\")\n.create('d'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"display the Groovy and JVM versions\")\n.withLongOpt(\"version\")\n.create('v'));\noptions.addOption(\nOptionBuilder.withArgName(\"charset\")\n.hasArg()\n.withDescription(\"specify the encoding of the files\")\n.withLongOpt(\"encoding\")\n.create('c'));\noptions.addOption(\nOptionBuilder.withArgName(\"script\")\n.hasArg()\n.withDescription(\"specify a command line script\")\n.create('e'));\noptions.addOption(\nOptionBuilder.withArgName(\"extension\")\n.hasOptionalArg()\n.withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n.create('i'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line using implicit 'line' variable\")\n.create('n'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line and print result (see also -n)\")\n.create('p'));\noptions.addOption(\nOptionBuilder.withArgName(\"port\")\n.hasOptionalArg()\n.withDescription(\"listen on a port and process inbound lines\")\n.create('l'));\noptions.addOption(\nOptionBuilder.withArgName(\"splitPattern\")\n.hasOptionalArg()\n.withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n.withLongOpt(\"autosplit\")\n.create('a'));\n165: Parser parser = new PosixParser();\nCommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n168: assertTrue(line.hasOption('e'));\nassertEquals(\"println 'hello'\", line.getOptionValue('e'));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.ApplicationTest.testGroovy(ApplicationTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasOptionalArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasOptionalArg()\nOptionBuilder.numberOfArgs = 1;\nOptionBuilder.optionalArg = true;\nreturn instance;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\nOptionBuilder.description = newDescription;\nreturn instance;\n}",
            "method_id": 71
        }
    ]
}