{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.ApplicationTest.testGroovy",
    "test_body": "public void testGroovy() throws Exception {\nOptions options = new Options();\n108: options.addOption(\nOptionBuilder.withLongOpt(\"define\").\nwithDescription(\"define a system property\").\nhasArg(true).\nwithArgName(\"name=value\").\ncreate('D'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"usage information\")\n.withLongOpt(\"help\")\n.create('h'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"debug mode will print out full stack traces\")\n.withLongOpt(\"debug\")\n.create('d'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"display the Groovy and JVM versions\")\n.withLongOpt(\"version\")\n.create('v'));\noptions.addOption(\nOptionBuilder.withArgName(\"charset\")\n.hasArg()\n.withDescription(\"specify the encoding of the files\")\n.withLongOpt(\"encoding\")\n.create('c'));\noptions.addOption(\nOptionBuilder.withArgName(\"script\")\n.hasArg()\n.withDescription(\"specify a command line script\")\n.create('e'));\noptions.addOption(\nOptionBuilder.withArgName(\"extension\")\n.hasOptionalArg()\n.withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n.create('i'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line using implicit 'line' variable\")\n.create('n'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line and print result (see also -n)\")\n.create('p'));\noptions.addOption(\nOptionBuilder.withArgName(\"port\")\n.hasOptionalArg()\n.withDescription(\"listen on a port and process inbound lines\")\n.create('l'));\noptions.addOption(\nOptionBuilder.withArgName(\"splitPattern\")\n.hasOptionalArg()\n.withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n.withLongOpt(\"autosplit\")\n.create('a'));\n165: Parser parser = new PosixParser();\nCommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\n168: assertTrue(line.hasOption('e'));\nassertEquals(\"println 'hello'\", line.getOptionValue('e'));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.ApplicationTest.testGroovy(ApplicationTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions()\nreturn options;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions()\nreturn requiredOptions;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\nprocessOption(t, iterator);\ncmd.addArg(t);\nif (stopAtNonOption)\neatTheRest = true;\nif (eatTheRest)\nwhile (iterator.hasNext())\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter) throws ParseException\nwhile (iter.hasNext())\nString str = (String) iter.next();\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\nopt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\ncatch (RuntimeException exp)\niter.previous();\nbreak;\n}\n}\nif (opt.getValues() == null && !opt.hasOptionalArg())\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nOption opt = (Option) getOptions().getOption(arg).clone();\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nif (opt.hasArg())\nprocessArgs(opt, iter);\ncmd.addOption(opt);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\nwhile (iter.hasNext())\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 39
        }
    ]
}