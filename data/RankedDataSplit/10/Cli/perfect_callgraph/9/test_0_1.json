{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions",
    "test_body": "public void testMissingRequiredOptions()\n{\nString[] args = new String[] { \"-a\" };\n122: _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n.hasArg()\n.isRequired()\n.withDescription( \"set the value of [c]\" )\n.create( 'c' ) );\n128: try\n{\nCommandLine cl = parser.parse(_options,args);\nfail( \"exception should have been thrown\" );\n}\ncatch (MissingOptionException e)\n{\nassertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Incorrect exception message expected:<... required options: b[, ]c> but was:<... required options: b[]c>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions(ParseRequiredTest.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\nif (properties == null)\nreturn;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter)\nboolean hasOption = getOptions().hasOption(arg);\nif (!hasOption)\nfinal Option opt = getOptions().getOption(arg);\nif (opt.isRequired())\nif (getOptions().getOptionGroup(opt) != null)\nif (opt.hasArg())\ncmd.addOption(opt);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\ninit();\nthis.options = options;\nIterator iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\ntoken = (String) iter.next();\nif (token.startsWith(\"--\"))\nelse if (\"-\".equals(token))\nelse if (token.startsWith(\"-\"))\nint tokenLength = token.length();\nif (tokenLength == 2)\nprocessOptionToken(token, stopAtNonOption);\n}\ngobble(iter);\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\nif (this.options.hasOption(token))\ncurrentOption = this.options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "public Options()\n{\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg,\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired() )\nif( requiredOpts.contains(key) ) {\nrequiredOpts.add(key);\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nList opts = new ArrayList(shortOpts.values());\nIterator iter = longOpts.values().iterator();\nwhile (iter.hasNext())\nObject item = iter.next();\nif (!opts.contains(item))\n}\nreturn new ArrayList(opts);\n}",
            "method_id": 19
        }
    ]
}