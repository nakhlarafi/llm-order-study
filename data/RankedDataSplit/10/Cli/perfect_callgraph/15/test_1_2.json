{
    "bug_id": 15,
    "test_id": 1,
    "test_name": "org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionMaximumNumberOfArgument",
    "test_body": "public void testSingleOptionMaximumNumberOfArgument() throws Exception {\nString[] args = new String[]{\"-b\", \"1\", \"2\"};\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\n89: DefaultOption bOption = obuilder.withShortName(\"b\")\n.withLongName(\"b\")\n.withArgument(abuilder.withName(\"b\")\n.withMinimum(2)\n.withMaximum(4)\n.withDefault(\"100\")\n.withDefault(\"1000\")\n.withDefault(\"10000\")\n.create())\n.create();\n100: Group options = gbuilder\n.withName(\"options\")\n.withOption(bOption)\n.create();\n105: Parser parser = new Parser();\nparser.setHelpTrigger(\"--help\");\nparser.setGroup(options);\nCommandLine cl = parser.parse(args);\nCommandLine cmd = cl;\nassertNotNull(cmd);\nList b = cmd.getValues(\"-b\");\nassertEquals(\"[1, 2, 10000]\", b + \"\");\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[1, 2[, 10000]]> but was:<[1, 2[]]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli2.bug.BugCLI158Test.testSingleOptionMaximumNumberOfArgument(BugCLI158Test.java:112)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.util.HelpFormatter:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
            "method_body": "public HelpFormatter(final String gutterLeft,\nfinal int fullWidth) {\nthis.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;\nthis.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;\nthis.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;\nthis.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();\nint availableWidth = fullWidth - pageWidth + this.gutterCenter.length();\nif (availableWidth < 2) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:parse([Ljava/lang/String;)Lorg/apache/commons/cli2/CommandLine;",
            "method_body": "public CommandLine parse(final String[] arguments)\nfinal List argumentList = new LinkedList();\nfor (int i = 0; i < arguments.length; i++) {\nfinal String argument = arguments[i];\nargumentList.add(new String(argument));\nfinal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);\ngroup.defaults(commandLine);\nfinal ListIterator iterator = argumentList.listIterator();\nObject previous = null;\nwhile (group.canProcess(commandLine, iterator)) {\nfinal Object next = iterator.next();\niterator.previous();\nif (next == previous) {\nprevious = next;\ngroup.process(commandLine, iterator);\n}\nif (iterator.hasNext()) {\nif (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {\ngroup.validate(commandLine);\nreturn commandLine;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli2.util.HelpFormatter:<clinit>()V",
            "method_body": "public static final int DEFAULT_FULL_WIDTH = 80;\nfinal Set fullUsage = new HashSet(DisplaySetting.ALL);\nfullUsage.remove(DisplaySetting.DISPLAY_ALIASES);\nfullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);\nDEFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);\nfinal Set lineUsage = new HashSet();\nlineUsage.add(DisplaySetting.DISPLAY_ALIASES);\nlineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);\nlineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\nDEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);\nfinal Set displayUsage = new HashSet(DisplaySetting.ALL);\ndisplayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\nDEFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:<init>(Ljava/lang/String;)V",
            "method_body": "private DisplaySetting(final String name) {\nthis.name = name;\nthis.hashCode = name.hashCode();\nall.add(this);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:<clinit>()V",
            "method_body": "private static final Set all = new HashSet();\npublic static final Set ALL = Collections.unmodifiableSet(all);\npublic static final Set NONE = Collections.EMPTY_SET;\npublic static final DisplaySetting DISPLAY_ALIASES =\npublic static final DisplaySetting DISPLAY_OPTIONAL =\npublic static final DisplaySetting DISPLAY_PROPERTY_OPTION =\npublic static final DisplaySetting DISPLAY_SWITCH_ENABLED =\npublic static final DisplaySetting DISPLAY_SWITCH_DISABLED =\npublic static final DisplaySetting DISPLAY_GROUP_NAME =\npublic static final DisplaySetting DISPLAY_GROUP_EXPANDED =\npublic static final DisplaySetting DISPLAY_GROUP_ARGUMENT =\npublic static final DisplaySetting DISPLAY_GROUP_OUTER =\npublic static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =\npublic static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =\npublic static final DisplaySetting DISPLAY_PARENT_ARGUMENT =\npublic static final DisplaySetting DISPLAY_PARENT_CHILDREN =\nprivate DisplaySetting(final String name) {\nthis.name = name;\nthis.hashCode = name.hashCode();\nall.add(this);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli2.DisplaySetting:hashCode()I",
            "method_body": "public int hashCode() {\nreturn hashCode;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "public DefaultOptionBuilder(final String shortPrefix,\nthrows IllegalArgumentException {\nif ((shortPrefix == null) || (shortPrefix.length() == 0)) {\nif ((longPrefix == null) || (longPrefix.length() == 0)) {\nthis.shortPrefix = shortPrefix;\nthis.longPrefix = longPrefix;\nthis.burstEnabled = burstEnabled;\nreset();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withArgument(Lorg/apache/commons/cli2/Argument;)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withArgument(final Argument newArgument) {\nthis.argument = newArgument;\nreturn this;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:<init>(IZ)V",
            "method_body": "public OptionImpl(final int id,\nfinal boolean required) {\nthis.id = id;\nthis.required = required;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli2.option.OptionImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nif (arguments.hasNext()) {\nfinal String argument = (String) arguments.next();\narguments.previous();\nreturn canProcess(commandLine, argument);\nreturn false;\n}",
            "method_id": 29
        }
    ]
}