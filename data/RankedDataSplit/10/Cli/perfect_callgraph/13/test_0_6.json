{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2",
    "test_body": "public void testLoopingOptionLookAlike2() {\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nfinal Argument inputfile_opt = abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create();\nfinal Argument outputfile_opt = abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\nfinal Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);\nfinal Group options = gbuilder.withOption(targets).create();\nfinal Parser parser = new Parser();\nparser.setGroup(options);\ntry {\nparser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\nfail(\"OptionException\");\n} catch (OptionException e) {\nassertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n}",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value \"testfile.txt\" found while processing  input]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli2.bug.BugLoopingOptionLookAlikeTest.testLoopingOptionLookAlike2(BugLoopingOptionLookAlikeTest.java:76)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:hasOption(Lorg/apache/commons/cli2/Option;)Z",
            "method_body": "public boolean hasOption(final Option option) {\nfinal boolean present = options.contains(option);\nreturn present;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getOption(Ljava/lang/String;)Lorg/apache/commons/cli2/Option;",
            "method_body": "public Option getOption(final String trigger) {\nreturn (Option) nameToOption.get(trigger);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:getValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)Ljava/util/List;",
            "method_body": "public List getValues(final Option option,\nList valueList = (List) values.get(option);\nif ((valueList == null) || valueList.isEmpty()) {\nif ((valueList == null) || valueList.isEmpty()) {\nif (valueList == null) {\nreturn valueList;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:looksLikeOption(Ljava/lang/String;)Z",
            "method_body": "public boolean looksLikeOption(final String trigger) {\nfor (final Iterator i = prefixes.iterator(); i.hasNext();) {\nreturn false;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:setDefaultValues(Lorg/apache/commons/cli2/Option;Ljava/util/List;)V",
            "method_body": "public void setDefaultValues(final Option option,\nif (defaults == null) {\ndefaultValues.remove(option);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:<init>(Lorg/apache/commons/cli2/Option;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public OptionException(final Option option,\nfinal String value) {\nthis.option = option;\nif (messageKey != null) {\nfinal StringBuffer buffer = new StringBuffer();\nif (value != null) {\nbuffer.append(helper.getMessage(messageKey, value));\nbuffer.append(\" \");\noption.appendUsage(buffer, HELP_SETTINGS, null);\nmessage = buffer.toString();\n} else {\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:<clinit>()V",
            "method_body": "public static final Set HELP_SETTINGS =\nprivate static final ResourceHelper helper = ResourceHelper.getResourceHelper();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.cli2.OptionException:getMessage()Ljava/lang/String;",
            "method_body": "public String getMessage() {\nreturn message;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:<init>(Lorg/apache/commons/cli2/Argument;Lorg/apache/commons/cli2/Argument;)V",
            "method_body": "public SourceDestArgument(final Argument source,\nthis(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.cli2.option.SourceDestArgument:<init>(Lorg/apache/commons/cli2/Argument;Lorg/apache/commons/cli2/Argument;CCLjava/lang/String;Ljava/util/List;)V",
            "method_body": "public SourceDestArgument(final Argument source,\nsuper(\"SourceDestArgument\", null, sum(source.getMinimum(), dest.getMinimum()),\nthis.source = source;\nthis.dest = dest;\nif (dest.getMinimum() != dest.getMaximum()) {\n}",
            "method_id": 69
        }
    ]
}