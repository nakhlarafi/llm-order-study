{
    "bug_id": 23,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.bug.BugCLI162Test.testInfiniteLoop",
    "test_body": "public void testInfiniteLoop() {\nHelpFormatter formatter = new HelpFormatter();\nformatter.setWidth(20);\nformatter.printHelp(\"app\", options); // used to hang & crash\n}\n",
    "stack_trace": "java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:              looooong description\nat org.apache.commons.cli.HelpFormatter.renderWrappedText(HelpFormatter.java:836)\nat org.apache.commons.cli.HelpFormatter.renderOptions(HelpFormatter.java:783)\nat org.apache.commons.cli.HelpFormatter.printOptions(HelpFormatter.java:662)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:485)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:418)\nat org.apache.commons.cli.HelpFormatter.printHelp(HelpFormatter.java:334)\nat org.apache.commons.cli.bug.BugCLI162Test.testInfiniteLoop(BugCLI162Test.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\nfinal String padding = createPadding(nextLineTabStop);\nint lastPos = pos;\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(text);\nreturn sb;\nif (pos == lastPos)\nthrow new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\nthis.defaultWidth = width;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nlongOpts.put(opt.getLongOpt(), opt);\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\nthis.longOpt = longOpt;\nif (hasArg)\nthis.numberOfArgs = 1;\nthis.description = description;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn longOpt;\nreturn opt;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn longOpt;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 9
        }
    ]
}