{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "public void shouldParseShortOptionWithoutValue() throws Exception {\nString[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n49: final CommandLine commandLine = parser.parse(options, twoShortOptions);\n51: assertTrue(commandLine.hasOption(\"t1\"));\nassertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\nassertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List<String> getValuesList()\nreturn values;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nOption option = (Option) super.clone();\noption.values = new ArrayList<String>(values);\nreturn option;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfor (char ch : opt.toCharArray())\nif (!isValidChar(ch))\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 39
        }
    ]
}