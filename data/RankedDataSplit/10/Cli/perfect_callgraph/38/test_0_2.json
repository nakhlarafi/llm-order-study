{
    "bug_id": 38,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseConcatenatedShortOptions",
    "test_body": "public void shouldParseConcatenatedShortOptions() throws Exception {\nString[] concatenatedShortOptions = new String[] { \"-t1\", \"-ab\" };\n80: final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\n82: assertTrue(commandLine.hasOption(\"t1\"));\nassertNull(commandLine.getOptionValue(\"t1\"));\nassertTrue(commandLine.hasOption(\"a\"));",
    "stack_trace": "junit.framework.AssertionFailedError: expected null, but was:<-ab>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.junit.Assert.assertNull(Assert.java:656)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseConcatenatedShortOptions(BugCLI265Test.java:83)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:hasShortOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasShortOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn optionGroups.get(opt.getKey());\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 29
        }
    ]
}