{
    "bug_id": 12,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.GnuParserTest.testShortWithEqual",
    "test_body": "public void testShortWithEqual() throws Exception\n{\nString[] args = new String[] { \"-f=bar\" };\n203: Options options = new Options();\noptions.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n206: Parser parser = new GnuParser();\nCommandLine cl = parser.parse(options, args);\n209: assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[]bar> but was:<[=]bar>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.GnuParserTest.testShortWithEqual(GnuParserTest.java:209)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.GnuParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\nList tokens = new ArrayList();\nboolean eatTheRest = false;\nfor (int i = 0; i < arguments.length; i++)\nString arg = arguments[i];\nif (\"--\".equals(arg))\nelse if (\"-\".equals(arg))\nelse if (arg.startsWith(\"-\"))\nString opt = Util.stripLeadingHyphens(arg);\nif (options.hasOption(opt))\nif (options.hasOption(arg.substring(0, 2)))\ntokens.add(arg.substring(0, 2)); // -D\ntokens.add(arg.substring(2)); // property=value\neatTheRest = stopAtNonOption;\ntokens.add(arg);\n}\nif (eatTheRest)\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nreturn create(String.valueOf(opt));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nOption option = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\nreturn option;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthis(opt, null, false, description);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 9
        }
    ]
}