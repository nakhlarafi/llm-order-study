{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice",
    "test_body": "public void testReuseOptionsTwice() throws Exception\n{\nOptions opts = new Options();\nopts.addOption(OptionBuilder.isRequired().create('v'));\n148: GnuParser parser = new GnuParser();\n150: // first parsing\nparser.parse(opts, new String[] { \"-v\" });\n153: try\n{\n// second parsing, with the same Options instance and an invalid command line\nparser.parse(opts, new String[0]);\nfail(\"MissingOptionException not thrown\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: MissingOptionException not thrown\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice(ParseRequiredTest.java:157)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 39
        }
    ]
}