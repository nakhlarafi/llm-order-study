{
    "bug_id": 39,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",
    "test_body": "public void testExistingFilePattern() throws Exception\n{\nfinal Options options = PatternOptionBuilder.parsePattern(\"g<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n168: final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n170: assertNotNull(\"option g not parsed\", parsedReadableFileStream);\nassertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option g not FileInputStream\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern(PatternOptionBuilderTest.java:171)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class<String> STRING_VALUE = String.class;\npublic static final Class<Object> OBJECT_VALUE = Object.class;\npublic static final Class<Number> NUMBER_VALUE = Number.class;\npublic static final Class<Date> DATE_VALUE = Date.class;\npublic static final Class<?> CLASS_VALUE = Class.class;\npublic static final Class<FileInputStream> EXISTING_FILE_VALUE = FileInputStream.class;\npublic static final Class<File> FILE_VALUE = File.class;\npublic static final Class<File[]> FILES_VALUE = File[].class;\npublic static final Class<URL> URL_VALUE = URL.class;\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(final char ch)\nswitch (ch)\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:isValueCode(C)Z",
            "method_body": "public static boolean isValueCode(final char ch)\nreturn ch == '@'\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:required(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder required(final boolean required)\nthis.required = required;\nreturn this;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:type(Ljava/lang/Class;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder type(final Class<?> type)\nthis.type = type;\nreturn this;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createFile(Ljava/lang/String;)Ljava/io/File;",
            "method_body": "public static File createFile(final String str)\nreturn new File(str);\n}",
            "method_id": 66
        }
    ]
}