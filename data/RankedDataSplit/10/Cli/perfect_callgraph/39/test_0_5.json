{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException\ninit();\nthis.options = options;\nfinal Iterator<String> iter = Arrays.asList(arguments).iterator();\nwhile (iter.hasNext())\nfinal String token = iter.next();\nif (\"-\".equals(token) || \"--\".equals(token))\nelse if (token.startsWith(\"--\"))\nelse if (token.startsWith(\"-\"))\nif (token.length() == 2 || options.hasOption(token))\nprocessOptionToken(token, stopAtNonOption);\nprocessNonOptionToken(token, stopAtNonOption);\ngobble(iter);\n}\nreturn tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(final Iterator<String> iter)\nif (eatTheRest)\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processNonOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processNonOptionToken(final String value, final boolean stopAtNonOption)\nif (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))\ntokens.add(value);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(final String token, final boolean stopAtNonOption)\nif (stopAtNonOption && !options.hasOption(token))\nif (options.hasOption(token))\ncurrentOption = options.getOption(token);\ntokens.add(token);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getParsedOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/Object;",
            "method_body": "public Object getParsedOptionValue(final Option option) throws ParseException\nif (option == null)\nfinal String res = getOptionValue(option);\nif (res == null)\nreturn TypeHandler.createValue(res, option.getType());\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Lorg/apache/commons/cli/Option;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(final Option option)\nif (option == null)\nfinal String[] values = getOptionValues(option);\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Lorg/apache/commons/cli/Option;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(final Option option)\nfinal List<String> values = new ArrayList<String>();\nfor (final Option processedOption : options)\nif (processedOption.equals(option))\nvalues.addAll(processedOption.getValuesList());\n}\nreturn values.isEmpty() ? null : values.toArray(new String[values.size()]);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(final Option opt)\noptions.add(opt);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nfinal int length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 59
        }
    ]
}