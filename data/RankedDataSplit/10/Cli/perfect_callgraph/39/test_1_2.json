{
    "bug_id": 39,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern",
    "test_body": "public void testExistingFilePattern() throws Exception\n{\nfinal Options options = PatternOptionBuilder.parsePattern(\"g<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/existing-readable.file\" });\n168: final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n170: assertNotNull(\"option g not parsed\", parsedReadableFileStream);\nassertTrue(\"option g not FileInputStream\", parsedReadableFileStream instanceof FileInputStream);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option g not FileInputStream\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern(PatternOptionBuilderTest.java:171)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\nreturn type;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(final String value)\nif (numberOfArgs == UNINITIALIZED)\nprocessValue(value);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(final String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 29
        }
    ]
}