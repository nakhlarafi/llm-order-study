{
    "bug_id": 35,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch",
    "test_body": "public void testExactOptionNameMatch() throws ParseException {\nnew DefaultParser().parse(getOptions(), new String[]{\"--prefix\"});\n}\n",
    "stack_trace": "org.apache.commons.cli.AmbiguousOptionException: Ambiguous option: '--prefix'  (could be: 'prefix', 'prefixplusplus')\nat org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(DefaultParser.java:398)\nat org.apache.commons.cli.DefaultParser.handleLongOption(DefaultParser.java:371)\nat org.apache.commons.cli.DefaultParser.handleToken(DefaultParser.java:239)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:120)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)\nat org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch(BugCLI252Test.java:10)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:getMatchingOptions(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> getMatchingOptions(String opt)\nopt = Util.stripLeadingHyphens(opt);\nList<String> matchingOpts = new ArrayList<String>();\nfor (String longOpt : longOpts.keySet())\nif (longOpt.startsWith(opt))\nmatchingOpts.add(longOpt);\n}\nreturn matchingOpts;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder()\nreturn builder(null);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate final List<String> args = new LinkedList<String>();\nprivate final List<Option> options = new ArrayList<Option>();\n{\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleToken(Ljava/lang/String;)V",
            "method_body": "private void handleToken(String token) throws ParseException\ncurrentToken = token;\nif (skipParsing)\nelse if (\"--\".equals(token))\nelse if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\nelse if (token.startsWith(\"--\"))\nhandleLongOption(token);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleLongOption(String token) throws ParseException\nif (token.indexOf('=') == -1)\nhandleLongOptionWithoutEqual(token);\n}",
            "method_id": 9
        }
    ]
}