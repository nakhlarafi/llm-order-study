{
    "bug_id": 34,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions",
    "test_body": "public void testTwoCompleteOptions( ) {\nOption simple = OptionBuilder.withLongOpt( \"simple option\")\n.hasArg( )\n.isRequired( )\n.hasArgs( )\n.withType( Float.class )\n.withDescription( \"this is a simple option\" )\n.create( 's' );\n51: assertEquals( \"s\", simple.getOpt() );\nassertEquals( \"simple option\", simple.getLongOpt() );\nassertEquals( \"this is a simple option\", simple.getDescription() );\nassertEquals( simple.getType(), Float.class );\nassertTrue( simple.hasArg() );\nassertTrue( simple.isRequired() );\nassertTrue( simple.hasArgs() );\n59: simple = OptionBuilder.withLongOpt( \"dimple option\")\n.hasArg( )\n.withDescription( \"this is a dimple option\" )\n.create( 'd' );\n64: assertEquals( \"d\", simple.getOpt() );\nassertEquals( \"dimple option\", simple.getLongOpt() );\nassertEquals( \"this is a dimple option\", simple.getDescription() );\nassertEquals( String.class, simple.getType() );\nassertTrue( simple.hasArg() );",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.String> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions(OptionBuilderTest.java:67)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\nthis.longOpt = longOpt;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getDescription()Ljava/lang/String;",
            "method_body": "public String getDescription()\nreturn description;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgs()Z",
            "method_body": "public boolean hasArgs()\nreturn numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 19
        }
    ]
}