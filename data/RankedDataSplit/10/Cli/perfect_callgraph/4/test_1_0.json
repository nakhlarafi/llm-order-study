{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionsTest.testMissingOptionException",
    "test_body": "public void testMissingOptionException() throws ParseException {\nOptions options = new Options();\noptions.addOption(OptionBuilder.isRequired().create(\"f\"));\ntry {\nnew PosixParser().parse(options, new String[0]);\nfail(\"Expected MissingOptionException to be thrown\");\n} catch (MissingOptionException e) {\nassertEquals(\"Missing required option: f\", e.getMessage());\n}",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[Missing required option: ]f> but was:<[]f>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.OptionsTest.testMissingOptionException(OptionsTest.java:104)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions()\nif (requiredOptions.size() > 0)\nIterator iter = requiredOptions.iterator();\nStringBuffer buff = new StringBuffer();\nwhile (iter.hasNext())\nbuff.append(iter.next());\nthrow new MissingOptionException(buff.toString());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n{\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nOption option = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\nreturn option;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthis(opt, null, false, description);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nif (opt == null)\nelse if (opt.length() == 1)\nchar ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private ArrayList tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nthis.options = options;\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nrequiredOptions = options.getRequiredOptions();\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(this.options,\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nprocessProperties(properties);\ncheckRequiredOptions();\n}",
            "method_id": 9
        }
    ]
}