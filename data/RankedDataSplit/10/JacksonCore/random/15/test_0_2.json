{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches",
    "test_body": "public void testNotAllowMultipleMatches() throws Exception\n{\nString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\nJsonParser p0 = JSON_F.createParser(jsonString);\nJsonParser p = new FilteringParserDelegate(p0,\nnew NameMatchFilter(\"value\"),\nfalse, // includePath\nfalse // multipleMatches -false\n);\nString result = readAndWrite(JSON_F, p);\nassertEquals(aposToQuotes(\"3\"), result);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches(BasicParserFilteringTest.java:118)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:releaseConcatBuffer([C)V",
            "method_body": "public void releaseConcatBuffer(char[] buf) {\nif (buf != null) {\n_verifyRelease(buf, _concatCBuffer);\n_concatCBuffer = null;\n_bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf);\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_eofAsNextChar()I",
            "method_body": "protected final int _eofAsNextChar() throws JsonParseException {\n_handleEOF();\nreturn -1;\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parsePosNumber(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n++intLen;\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nif ((_inputPtr + 4) >= _inputEnd) {\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\n++_inputPtr;\nreturn i;\nif (i != INT_COMMA) {\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:makeOrphan(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "private CharsToNameCanonicalizer makeOrphan(int seed) {\nreturn new CharsToNameCanonicalizer(null, -1, _symbols, _buckets, _size, seed, _longestCollisionList);\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:calloc(I)[C",
            "method_body": "protected char[] calloc(int size) { return new char[size]; }\nprotected char[] calloc(int size) { return new char[size]; }",
            "method_id": 24
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:clearAndGetParent()Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext clearAndGetParent() {\n_currentValue = null;\nreturn _parent;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parseName()Ljava/lang/String;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n++intLen;\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nif ((_inputPtr + 4) >= _inputEnd) {\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\n++_inputPtr;\nreturn i;\nif (i != INT_COMMA) {\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterFinishArray()V",
            "method_body": "public void filterFinishArray() { }\npublic void filterFinishArray() { }",
            "method_id": 28
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:get7BitOutputEscapes()[I",
            "method_body": "public static int[] get7BitOutputEscapes() { return sOutputEscapes128; }\npublic static int[] get7BitOutputEscapes() { return sOutputEscapes128; }",
            "method_id": 29
        }
    ]
}