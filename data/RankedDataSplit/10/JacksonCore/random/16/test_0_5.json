{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized",
    "test_body": "public void testInitialized() throws Exception\n{\nJsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\nJsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n// consume '1', move to '2'\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\n58: JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());\nassertEquals(2, seq.getIntValue());\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized(ParserSequenceTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:releaseCharBuffer(I[C)V",
            "method_body": "public void releaseCharBuffer(int ix, char[] buffer) {\n_charBuffers[ix] = buffer;\n}",
            "method_id": 50
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.DefaultPrettyPrinter:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 1;\npublic final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \");\n}",
            "method_id": 51
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>()V",
            "method_body": "private CharsToNameCanonicalizer() {\n_canonicalize = true;\n_flags = -1;\n_dirty = true;\n_hashSeed = 0;\n_longestCollisionList = 0;\ninitTables(DEFAULT_T_SIZE);\n}",
            "method_id": 52
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:enabledIn(I)Z",
            "method_body": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\npublic boolean enabledIn(int flags) { return (flags & _mask) != 0; }",
            "method_id": 53
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithEmpty()V",
            "method_body": "public void resetWithEmpty()\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\nif (_hasSegments) {\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithShared([CII)V",
            "method_body": "public void resetWithShared(char[] buf, int start, int len)\n_resultString = null;\n_resultArray = null;\n_inputBuffer = buf;\n_inputStart = start;\n_inputLen = len;\nif (_hasSegments) {\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_eofAsNextChar()I",
            "method_body": "protected final int _eofAsNextChar() throws JsonParseException {\n_handleEOF();\nreturn -1;\n}",
            "method_id": 56
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:<init>(III[I[Ljava/lang/String;II)V",
            "method_body": "public TableInfo(int size, int count, int tertiaryShift,\n{\nthis.size = size;\nthis.count = count;\nthis.tertiaryShift = tertiaryShift;\nthis.mainHash = mainHash;\nthis.names = names;\nthis.spilloverEnd = spilloverEnd;\nthis.longNameOffset = longNameOffset;\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserSequence:<init>([Lcom/fasterxml/jackson/core/JsonParser;)V",
            "method_body": "protected JsonParserSequence(JsonParser[] parsers)\nsuper(parsers[0]);\n_parsers = parsers;\n_nextParser = 1;\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:enabledIn(I)Z",
            "method_body": "public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\npublic boolean enabledIn(int flags) { return (flags & getMask()) != 0; }",
            "method_id": 59
        }
    ]
}