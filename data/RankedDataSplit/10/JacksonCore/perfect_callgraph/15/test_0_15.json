{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches",
    "test_body": "public void testNotAllowMultipleMatches() throws Exception\n{\nString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\nJsonParser p0 = JSON_F.createParser(jsonString);\nJsonParser p = new FilteringParserDelegate(p0,\nnew NameMatchFilter(\"value\"),\nfalse, // includePath\nfalse // multipleMatches -false\n);\nString result = readAndWrite(JSON_F, p);\nassertEquals(aposToQuotes(\"3\"), result);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches(BasicParserFilteringTest.java:118)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 150
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:parseInt([CII)I",
            "method_body": "public static int parseInt(char[] ch, int off, int len)\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 151
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<init>()V",
            "method_body": "private InternCache() { super(MAX_ENTRIES, 0.8f, 4); }\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 152
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<clinit>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 153
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:intern(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String intern(String input) {\nString result = get(input);\nif (result != null) { return result; }\nif (size() >= MAX_ENTRIES) {\nresult = input.intern();\nput(result, result);\nreturn result;\n}",
            "method_id": 154
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$NumberType:<clinit>()V",
            "method_body": "private final static int MIN_BYTE_I = (int) Byte.MIN_VALUE;\npublic enum NumberType {\nINT, LONG, BIG_INTEGER, FLOAT, DOUBLE, BIG_DECIMAL\n};",
            "method_id": 155
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:<clinit>()V",
            "method_body": "public final static TokenFilter INCLUDE_ALL = new TokenFilter();\nprotected TokenFilter() { }",
            "method_id": 156
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterStartObject()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter filterStartObject() {\nreturn this;\n}",
            "method_id": 157
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterStartArray()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter filterStartArray() {\nreturn this;\n}",
            "method_id": 158
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterFinishArray()V",
            "method_body": "public void filterFinishArray() { }\npublic void filterFinishArray() { }",
            "method_id": 159
        }
    ]
}