{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.base64.Base64GenerationTest.testBinaryAsEmbeddedObject",
    "test_body": "public void testBinaryAsEmbeddedObject() throws Exception\n{\nJsonGenerator g;\n98: StringWriter sw = new StringWriter();\ng = JSON_F.createGenerator(sw);\ng.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);\ng.close();",
    "stack_trace": "com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects\nat com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(JsonGenerator.java:1330)\nat com.fasterxml.jackson.core.base64.Base64GenerationTest.testBinaryAsEmbeddedObject(Base64GenerationTest.java:100)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerationException:<init>(Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonGenerator;)V",
            "method_body": "public JsonGenerationException(String msg, JsonGenerator g) {\nsuper(msg, (JsonLocation) null);\n_processor = g;\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variants:<clinit>()V",
            "method_body": "public final static Base64Variant MODIFIED_FOR_URL;\nStringBuilder sb = new StringBuilder(STD_BASE64_ALPHABET);\nsb.setCharAt(sb.indexOf(\"+\"), '-');\nsb.setCharAt(sb.indexOf(\"/\"), '_');\nMODIFIED_FOR_URL = new Base64Variant(\"MODIFIED-FOR-URL\", sb.toString(), false, Base64Variant.PADDING_CHAR_NONE, Integer.MAX_VALUE);\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Ljava/lang/String;Ljava/lang/String;ZCI)V",
            "method_body": "public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength)\n{\n_name = name;\n_usesPadding = usesPadding;\n_paddingChar = paddingChar;\n_maxLineLength = maxLineLength;\nint alphaLen = base64Alphabet.length();\nif (alphaLen != 64) {\nbase64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0);\nArrays.fill(_asciiToBase64, BASE64_VALUE_INVALID);\nfor (int i = 0; i < alphaLen; ++i) {\nchar alpha = _base64ToAsciiC[i];\n_base64ToAsciiB[i] = (byte) alpha;\n_asciiToBase64[alpha] = i;\nif (usesPadding) {\n_asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/lang/String;ZCI)V",
            "method_body": "public Base64Variant(Base64Variant base, String name, boolean usesPadding, char paddingChar, int maxLineLength)\n{\n_name = name;\nbyte[] srcB = base._base64ToAsciiB;\nSystem.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length);\nchar[] srcC = base._base64ToAsciiC;\nSystem.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length);\nint[] srcV = base._asciiToBase64;\nSystem.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length);\n_usesPadding = usesPadding;\n_paddingChar = paddingChar;\n_maxLineLength = maxLineLength;\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.fasterxml.jackson.core.Base64Variant:<init>(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/lang/String;I)V",
            "method_body": "public Base64Variant(Base64Variant base, String name, int maxLineLength)\nthis(base, name, base._usesPadding, base._paddingChar, maxLineLength);\n}",
            "method_id": 74
        }
    ]
}