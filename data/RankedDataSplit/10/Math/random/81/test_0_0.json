{
    "bug_id": 81,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308",
    "test_body": "public void testMath308() {\n114: double[] mainTridiagonal = {\n22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437\n};\ndouble[] secondaryTridiagonal = {\n13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225\n};\n121: // the reference values have been computed using routine DSTEMR\n// from the fortran library LAPACK version 3.2.1\ndouble[] refEigenValues = {\n82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099\n};\nRealVector[] refEigenVectors = {\nnew ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),\nnew ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),\nnew ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),\nnew ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),\nnew ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })\n};\n134: EigenDecomposition decomposition =\nnew EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: -1\nat org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1544)\nat org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1071)\nat org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:893)\nat org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:657)\nat org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)\nat org.apache.commons.math.linear.EigenDecompositionImpl.<init>(EigenDecompositionImpl.java:205)\nat org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:134)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension)\nsuper(rowDimension, columnDimension);\ndata = new double[rowDimension][columnDimension];\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math/linear/AnyMatrix;Lorg/apache/commons/math/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\nfinal int rows    = getRowDimension();\nfinal int columns = getColumnDimension();\nvisitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\nfor (int i = 0; i < rows; ++i) {\nfinal double[] rowI = data[i];\nfor (int j = 0; j < columns; ++j) {\nvisitor.visit(i, j, rowI[j]);\nreturn visitor.end();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
            "method_body": "private void computeShiftIncrement(final int start, final int end, final int deflated) {\nfinal double cnst1 = 0.563;\nfinal double cnst2 = 1.010;\nfinal double cnst3 = 1.05;\nif (dMin <= 0.0) {\nint nn = 4 * end + pingPong - 1;\nswitch (deflated) {\nif (dMin == dN || dMin == dN1) {\ndouble b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\ndouble b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\ndouble a2 = work[nn - 7] + work[nn - 5];\nif (dMin == dN && dMin1 == dN1) {\nfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\nfinal double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\nif (gap1 > 0.0 && gap1 > b1) {\ntau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\ntType = -2;\n} else {\ntType = -4;\ndouble s = 0.25 * dMin;\nif (dMin == dN) {\ngam = dN;\na2 = 0.0;\nif (work[nn - 5]  >  work[nn - 7]) {\nb2 = work[nn - 5] / work[nn - 7];\nnp = nn - 9;\na2 = a2 + b2;\nfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\nif(b2 == 0.0) {\nb1 = b2;\nif (work[i4]  >  work[i4 - 2]) {\nreturn;\nb2 = b2 * (work[i4] / work[i4 - 2]);\na2 = a2 + b2;\nif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\na2 = cnst3 * a2;\nif (a2 < cnst1) {\ns = gam * (1 - Math.sqrt(a2)) / (1 + a2);\ntau = s;\n} else if (dMin == dN2) {\ntType = -5;\ndouble s = 0.25 * dMin;\nfinal int np = nn - 2 * pingPong;\ndouble b1 = work[np - 2];\ndouble b2 = work[np - 6];\nfinal double gam = dN2;\nif (work[np - 8] > b2 || work[np - 4] > b1) {\ndouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\nif (end - start > 2) {\nb2 = work[nn - 13] / work[nn - 15];\na2 = a2 + b2;\nfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\nif (dMin1 == dN1 && dMin2 == dN2) {\ntau = 0.25 * dMin1;\nif (dMin1 == dN1) {\ntType = -9;\nbreak;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal RealMatrix out = createMatrix(nCols, nRows);\nwalkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\nout.setEntry(column, row, value);\n}\nreturn out;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn (data.length * data[0].length <= 4096) ?\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:eigenvaluesRange(II)[D",
            "method_body": "private double[] eigenvaluesRange(final int index, final int n) {\nfinal int lowerStart = 4 * main.length;\nfinal int upperStart = 5 * main.length;\ndouble lower = Double.POSITIVE_INFINITY;\ndouble upper = Double.NEGATIVE_INFINITY;\nfor (int i = 0; i < n; ++i) {\nlower = Math.min(lower, work[lowerStart + index +i]);\nupper = Math.max(upper, work[upperStart + index +i]);\nfinal double tNorm = Math.max(Math.abs(lower), Math.abs(upper));\nfinal double relativeTolerance = Math.sqrt(MathUtils.EPSILON);\nfinal double absoluteTolerance = 4 * minPivot;\nfinal int maxIter =\nfinal double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);\ndouble left  = lower - margin;\ndouble right = upper + margin;\nfor (int i = 0; i < maxIter; ++i) {\nfinal double range = right - left;\nif ((range < absoluteTolerance) ||\nbreak;\nfinal double middle = 0.5 * (left + right);\nif (countEigenValues(middle, index, n) >= 1) {\nright = middle;\nleft = middle;\nlower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));\nleft  = lower - margin;\nright = upper + margin;\nfor (int i = 0; i < maxIter; ++i) {\nfinal double range = right - left;\nif ((range < absoluteTolerance) ||\nbreak;\nfinal double middle = 0.5 * (left + right);\nif (countEigenValues(middle, index, n) >= n) {\nright = middle;\nleft = middle;\nupper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));\nreturn new double[] { lower, upper };\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:countEigenValues(DII)I",
            "method_body": "private int countEigenValues(final double t, final int index, final int n) {\ndouble ratio = main[index] - t;\nint count = (ratio > 0) ? 0 : 1;\nfor (int i = 1; i < n; ++i) {\nratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;\nif (ratio <= 0) {\n++count;\nreturn count;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}\n}",
            "method_id": 9
        }
    ]
}