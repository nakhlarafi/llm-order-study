{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718",
    "test_body": "public void testMath718() {\n// for large trials the evaluation of ContinuedFraction was inaccurate\n// do a sweep over several large trials to test if the current implementation is\n// numerically stable.\n138: for (int trials = 500000; trials < 20000000; trials += 100000) {\nBinomialDistribution dist = new BinomialDistribution(trials, 0.5);\nint p = dist.inverseCumulativeProbability(0.5);\nAssert.assertEquals(trials / 2, p);",
    "stack_trace": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction diverged to NaN for value 0.5\nat org.apache.commons.math3.util.ContinuedFraction.evaluate(ContinuedFraction.java:177)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:154)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:129)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:50)\nat org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(BinomialDistribution.java:101)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.checkedCumulativeProbability(AbstractIntegerDistribution.java:201)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.solveInverseCumulativeProbability(AbstractIntegerDistribution.java:143)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(AbstractIntegerDistribution.java:116)\nat org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(BinomialDistributionTest.java:140)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\ndouble hPrev = getA(0, x);\n\n// use the value of small as epsilon criteria for zero checks\nif (Precision.equals(hPrev, 0.0, small)) {\nhPrev = small;\n}\n\nint n = 1;\ndouble dPrev = 0.0;\ndouble p0 = 1.0;\ndouble q1 = 1.0;\ndouble cPrev = hPrev;\ndouble hN = hPrev;\n\nhN = cPrev * deltaN;\nif (Double.isNaN(hN)) {\nx);\nbreak;\ndPrev = q1;\ncPrev = cN / q2;\np0 = hPrev;\nhPrev = cN;\nq1 = q2;\nn++;\n\n\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportUpperBound()I",
            "method_body": "public int getSupportUpperBound() {\nreturn probabilityOfSuccess > 0.0 ? numberOfTrials : 0;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:cumulativeProbability(I)D",
            "method_body": "public double cumulativeProbability(int x) {\nif (x < 0) {\n} else if (x >= numberOfTrials) {\nret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,\nreturn ret;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nreturn sum + LANCZOS[0];\n}",
            "method_id": 19
        }
    ]
}