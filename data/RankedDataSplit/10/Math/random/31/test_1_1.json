{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "public void testMath785() {\n// this test was failing due to inaccurate results from ContinuedFraction.\n150: try {\ndouble prob = 0.01;\nFDistribution f = new FDistribution(200000, 200000);\ndouble result = f.inverseCumulativeProbability(prob);\nAssert.assertTrue(result < 1.0);\n} catch (Exception e) {\nAssert.fail(\"Failing to calculate inverse cumulative probability\");\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.distribution.FDistributionTest.testMath785(FDistributionTest.java:156)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected BaseAbstractUnivariateSolver(final double absoluteAccuracy) {\nthis(DEFAULT_RELATIVE_ACCURACY,\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = lanczos(x);\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthrows NotStrictlyPositiveException {\nif (numeratorDegreesOfFreedom <= 0) {\nif (denominatorDegreesOfFreedom <= 0) {\nthis.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;\nthis.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalArgumentException(Localizable pattern,\nObject ... args) {\ncontext = new ExceptionContext(this);\ncontext.addMessage(pattern, args);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\nintVal = (int) -x;\nif (intVal > 746) {\nif (hiPrec != null) {\nreturn 0.0;\nif (intVal > 709) {\nif (intVal == 709) {\nintVal++;\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\nintVal = -intVal;\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\nfinal double tempC = tempB + tempA;\nif (extra != 0.0) {\nresult = tempC*z + tempB + tempA;\nif (hiPrec != null) {\nreturn result;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:incrementEvaluationCount()V",
            "method_body": "protected void incrementEvaluationCount() {\nevaluations.incrementCount();\n}\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:inverseCumulativeProbability(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\ndouble lowerBound = getSupportLowerBound();\nif (p == 0.0) {\ndouble upperBound = getSupportUpperBound();\nif (p == 1.0) {\nfinal double mu = getNumericalMean();\nfinal double sig = FastMath.sqrt(getNumericalVariance());\nchebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nif (lowerBound == Double.NEGATIVE_INFINITY) {\nif (upperBound == Double.POSITIVE_INFINITY) {\nif (chebyshevApplies) {\nupperBound = mu + sig * FastMath.sqrt(p / (1. - p));\nfinal UnivariateFunction toSolve = new UnivariateFunction() {\nreturn cumulativeProbability(x) - p;\ndouble x = UnivariateSolverUtils.solve(toSolve,\nif (!isSupportConnected()) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected AbstractUnivariateSolver(final double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 19
        }
    ]
}