{
    "bug_id": 102,
    "test_id": 4,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquare",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\ngetGamma().setAlpha(degreesOfFreedom / 2.0);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (a >= 1.0 && x > a) {\nret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\ndouble n = 0.0; // current element index\ndouble an = 1.0 / a; // n-th element in the series\ndouble sum = an; // partial sum\nwhile (Math.abs(an) > epsilon && n < maxIterations) {\nn = n + 1.0;\nan = an * (x / (a + n));\nsum = sum + an;\nif (n >= maxIterations) {\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\nreturn ret;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:setDistribution(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public void setDistribution(ChiSquaredDistribution value) {\ndistribution = value;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TTestImpl:setDistribution(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public void setDistribution(TDistribution value) {\ndistribution = value;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(DLorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\nsuper();\nsetGamma(g);\nsetDegreesOfFreedom(df);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(D)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom) {\nsuper();\nsetDegreesOfFreedom(degreesOfFreedom);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 9
        }
    ]
}