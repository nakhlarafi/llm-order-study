{
    "bug_id": 102,
    "test_id": 4,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquare",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\nif (degreesOfFreedom <= 0.0) {\nthis.degreesOfFreedom = degreesOfFreedom;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:getUnknownDistributionChiSquareTest()Lorg/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest;",
            "method_body": "public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\nreturn unknownDistributionChiSquareTest;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TTestImpl:<init>(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public TTestImpl(TDistribution t) {\nsuper();\nsetDistribution(t);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\nsum = sum + lanczos[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
            "method_body": "private boolean isPositive(double[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] <= 0) {\nreturn true;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TTestImpl:<init>()V",
            "method_body": "public TTestImpl() {\nthis(new TDistributionImpl(1.0));\n}",
            "method_id": 19
        }
    ]
}