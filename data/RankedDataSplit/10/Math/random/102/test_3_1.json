{
    "bug_id": 102,
    "test_id": 3,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare",
    "test_body": "public void testChiSquare() throws Exception {\n46: // Target values computed using R version 1.8.1 \n// Some assembly required ;-)  \n//      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n//      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n51: long[] observed = {10, 9, 11};\ndouble[] expected = {10, 10, 10};\nassertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\nassertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n56: long[] observed1 = { 500, 623, 72, 70, 31 };\ndouble[] expected1 = { 485, 541, 82, 61, 37 };\nassertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\nassertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare(TestUtilsTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (a >= 1.0 && x > a) {\nret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\ndouble n = 0.0; // current element index\ndouble an = 1.0 / a; // n-th element in the series\ndouble sum = an; // partial sum\nwhile (Math.abs(an) > epsilon && n < maxIterations) {\nn = n + 1.0;\nan = an * (x / (a + n));\nsum = sum + an;\nif (n >= maxIterations) {\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\nreturn ret;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:chiSquareTest([D[J)D",
            "method_body": "public static double chiSquareTest(double[] expected, long[] observed)\nreturn chiSquareTest.chiSquareTest(expected, observed);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:newInstance()Lorg/apache/commons/math/stat/descriptive/SummaryStatistics;",
            "method_body": "public static SummaryStatistics newInstance() {\nSummaryStatistics instance = null;\nDiscoverClass dc = new DiscoverClass();\ninstance = (SummaryStatistics) dc.newInstance(\n}\nreturn instance;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nif ((expected.length < 2) || (expected.length != observed.length)) {\nif (!isPositive(expected) || !isNonNegative(observed)) {\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\ndev = ((double) observed[i] - expected[i]);\nsumSq += dev * dev / expected[i];\nreturn sumSq;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 19
        }
    ]
}