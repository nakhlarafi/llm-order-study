{
    "bug_id": 102,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\nsum = sum + lanczos[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\nreturn 1.0 - distribution.cumulativeProbability(\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
            "method_body": "private boolean isNonNegative(long[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] < 0) {\nreturn true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:<init>(DD)V",
            "method_body": "public GammaDistributionImpl(double alpha, double beta) {\nsuper();\nsetAlpha(alpha);\nsetBeta(beta);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 19
        }
    ]
}