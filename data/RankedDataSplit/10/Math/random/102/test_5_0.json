{
    "bug_id": 102,
    "test_id": 5,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare",
    "test_body": "public void testChiSquare() throws Exception {\n48: // Target values computed using R version 1.8.1 \n// Some assembly required ;-)  \n//      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n//      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n53: long[] observed = {10, 9, 11};\ndouble[] expected = {10, 10, 10};\nassertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);\nassertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);\n58: long[] observed1 = { 500, 623, 72, 70, 31 };\ndouble[] expected1 = { 485, 541, 82, 61, 37 };\nassertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);\nassertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
            "method_body": "private boolean isPositive(double[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] <= 0) {\nreturn true;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:<init>(DD)V",
            "method_body": "public GammaDistributionImpl(double alpha, double beta) {\nsuper();\nsetAlpha(alpha);\nsetBeta(beta);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nif ((expected.length < 2) || (expected.length != observed.length)) {\nif (!isPositive(expected) || !isNonNegative(observed)) {\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\ndev = ((double) observed[i] - expected[i]);\nsumSq += dev * dev / expected[i];\nreturn sumSq;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
            "method_body": "private boolean isNonNegative(long[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] < 0) {\nreturn true;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setAlpha(D)V",
            "method_body": "public void setAlpha(double alpha) {\nif (alpha <= 0.0) {\nthis.alpha = alpha;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 9
        }
    ]
}