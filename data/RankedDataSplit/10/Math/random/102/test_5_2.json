{
    "bug_id": 102,
    "test_id": 5,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare",
    "test_body": "public void testChiSquare() throws Exception {\n48: // Target values computed using R version 1.8.1 \n// Some assembly required ;-)  \n//      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n//      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n53: long[] observed = {10, 9, 11};\ndouble[] expected = {10, 10, 10};\nassertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);\nassertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);\n58: long[] observed1 = { 500, 623, 72, 70, 31 };\ndouble[] expected1 = { 485, 541, 82, 61, 37 };\nassertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);\nassertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(ChiSquareTestTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:setDistribution(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public void setDistribution(ChiSquaredDistribution value) {\ndistribution = value;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setBeta(D)V",
            "method_body": "public void setBeta(double beta) {\nif (beta <= 0.0) {\nthis.beta = beta;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\nreturn 1.0 - distribution.cumulativeProbability(\n}",
            "method_id": 23
        }
    ]
}