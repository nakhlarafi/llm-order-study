{
    "bug_id": 102,
    "test_id": 1,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",
    "test_body": "public void testChiSquareLargeTestStatistic() throws Exception {\ndouble[] exp = new double[] {\n3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n232921.0, 437665.75\n};\n174: long[] obs = new long[] {\n2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n};\norg.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\nnew org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \ndouble cst = csti.chiSquareTest(exp, obs); \nassertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\nassertEquals( \"chi-square test statistic\", \n114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(TestUtilsTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:<init>()V",
            "method_body": "public Mean() {\nincMoment = true;\nmoment = new FirstMoment();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:chiSquare([D[J)D",
            "method_body": "public static double chiSquare(double[] expected, long[] observed)\nreturn chiSquareTest.chiSquare(expected, observed);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares:<init>()V",
            "method_body": "public SumOfSquares() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setAlpha(D)V",
            "method_body": "public void setAlpha(double alpha) {\nif (alpha <= 0.0) {\nthis.alpha = alpha;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Max:<init>()V",
            "method_body": "public Max() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:<init>()V",
            "method_body": "public Sum() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 29
        }
    ]
}