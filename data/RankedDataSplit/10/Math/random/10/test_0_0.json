{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2SpecialCases",
    "test_body": "public void testAtan2SpecialCases() {\n813: DerivativeStructure pp =\nDerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\nnew DerivativeStructure(2, 2, 1, +0.0));\nAssert.assertEquals(0, pp.getValue(), 1.0e-15);\nAssert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2SpecialCases(DerivativeStructureTest.java:816)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan(D)D",
            "method_body": "public static double atan(double x) {\nreturn atan(x, 0.0, false);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(IIID)V",
            "method_body": "public DerivativeStructure(final int parameters, final int order,\nthis(parameters, order, value);\nif (index >= parameters) {\nif (order > 0) {\ndata[DSCompiler.getCompiler(index, order).getSize()] = 1.0;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compose([DI[D[DI)V",
            "method_body": "public void compose(final double[] operand, final int operandOffset, final double[] f,\nfor (int i = 0; i < compIndirection.length; ++i) {\nfinal int[][] mappingI = compIndirection[i];\ndouble r = 0;\nfor (int j = 0; j < mappingI.length; ++j) {\nfinal int[] mappingIJ = mappingI[j];\ndouble product = mappingIJ[0] * f[mappingIJ[1]];\nfor (int k = 2; k < mappingIJ.length; ++k) {\nproduct *= operand[operandOffset + mappingIJ[k]];\nr += product;\nresult[resultOffset + i] = r;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:add([DI[DI[DI)V",
            "method_body": "public void add(final double[] lhs, final int lhsOffset,\nfor (int i = 0; i < getSize(); ++i) {\nresult[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V",
            "method_body": "private DerivativeStructure(final DSCompiler compiler) {\nthis.compiler = compiler;\nthis.data     = new double[compiler.getSize()];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan([DI[DI)V",
            "method_body": "public void atan(final double[] operand, final int operandOffset,\ndouble[] function = new double[1 + order];\nfinal double x = operand[operandOffset];\nfunction[0] = FastMath.atan(x);\nif (order > 0) {\nfinal double[] q = new double[order];\nq[0] = 1;\nfinal double x2    = x * x;\nfinal double f     = 1.0 / (1 + x2);\ndouble coeff = f;\nfunction[1] = coeff * q[0];\nfor (int n = 2; n <= order; ++n) {\ndouble v = 0;\nq[n - 1] = -n * q[n - 2];\nfor (int k = n - 1; k >= 0; k -= 2) {\nv = v * x2 + q[k];\nif (k > 2) {\n} else if (k == 2) {\nif ((n & 0x1) == 0) {\nv *= x;\ncoeff *= f;\nfunction[n] = coeff * v;\ncompose(operand, operandOffset, function, result, resultOffset);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:getCompiler(II)Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;",
            "method_body": "public static DSCompiler getCompiler(int parameters, int order) {\nfinal DSCompiler[][] cache = compilers.get();\nif (cache != null && cache.length > parameters && cache[parameters].length > order) {\nif (cache[parameters][order] != null) {\nreturn cache[parameters][order];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:rootN([DII[DI)V",
            "method_body": "public void rootN(final double[] operand, final int operandOffset, final int n,\ndouble[] function = new double[1 + order];\nif (n == 2) {\nfunction[0] = FastMath.sqrt(operand[operandOffset]);\nxk          = 0.5 / function[0];\nfinal double nReciprocal = 1.0 / n;\nfinal double xReciprocal = 1.0 / operand[operandOffset];\nfor (int i = 1; i <= order; ++i) {\nfunction[i] = xk;\nxk *= xReciprocal * (nReciprocal - i);\ncompose(operand, operandOffset, function, result, resultOffset);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:atan2(Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;",
            "method_body": "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\ny.compiler.checkCompatibility(x.compiler);\nfinal DerivativeStructure result = new DerivativeStructure(y.compiler);\ny.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);\nreturn result;\n}",
            "method_id": 9
        }
    ]
}