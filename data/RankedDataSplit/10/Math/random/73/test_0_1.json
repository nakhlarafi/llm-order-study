{
    "bug_id": 73,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints",
    "test_body": "public void testBadEndpoints() throws Exception {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealSolver solver = new BrentSolver();\ntry {  // bad interval\nsolver.solve(f, 1, -1);\nfail(\"Expecting IllegalArgumentException - bad interval\");\n} catch (IllegalArgumentException ex) {\n// expected\n}\ntry {  // no bracket\nsolver.solve(f, 1, 1.5);\nfail(\"Expecting IllegalArgumentException - non-bracketing\");\n} catch (IllegalArgumentException ex) {\n// expected\n}\ntry {  // no bracket\nsolver.solve(f, 1, 1.5, 1.2);\nfail(\"Expecting IllegalArgumentException - non-bracketing\");\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError: Expecting IllegalArgumentException - non-bracketing\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints(BrentSolverTest.java:334)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$4:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:<init>(ID)V",
            "method_body": "protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nthis.defaultFunctionValueAccuracy = 1.0e-15;\nthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
            "method_body": "protected final void setResult(final double newResult, final int iterationCount) {\nthis.result         = newResult;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 12
        }
    ]
}