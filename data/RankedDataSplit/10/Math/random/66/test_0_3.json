{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "public void testQuinticMinStatistics() throws MathException {\n// The function has local minima at -0.27195613 and 0.82221643.\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setRelativeAccuracy(1e-10);\nminimizer.setAbsoluteAccuracy(1e-11);\n93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\nfor (int i = 0; i < stat.length; i++) {\nstat[i] = new DescriptiveStatistics();\n}\n98: final double min = -0.75;\nfinal double max = 0.25;\nfinal int nSamples = 200;\nfinal double delta = (max - min) / nSamples;\nfor (int i = 0; i < nSamples; i++) {\nfinal double start = min + i * delta;\nstat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\nstat[1].addValue(minimizer.getIterationCount());\nstat[2].addValue(minimizer.getEvaluations());\n}\n109: final double meanOptValue = stat[0].getMean();\nfinal double medianIter = stat[1].getPercentile(50);\nfinal double medianEval = stat[2].getPercentile(50);\nassertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\nassertEquals(medianIter, 17, Math.ulp(1d));\nassertEquals(medianEval, 18, Math.ulp(1d));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:start()I",
            "method_body": "public synchronized int start() {\nreturn startIndex;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DIID)D",
            "method_body": "public double evaluate(final double[] values, final int begin,\ntest(values, begin, length);\nif ((p > 100) || (p <= 0)) {\nif (length == 0) {\nif (length == 1) {\ndouble n = length;\ndouble pos = p * (n + 1) / 100;\ndouble fpos = Math.floor(pos);\nint intPos = (int) fpos;\ndouble dif = pos - fpos;\ndouble[] sorted = new double[length];\nSystem.arraycopy(values, begin, sorted, 0, length);\nArrays.sort(sorted);\nif (pos < 1) {\nif (pos >= n) {\ndouble lower = sorted[intPos - 1];\ndouble upper = sorted[intPos];\nreturn lower + dif * (upper - lower);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:apply(Lorg/apache/commons/math/stat/descriptive/UnivariateStatistic;)D",
            "method_body": "public double apply(UnivariateStatistic stat) {\nreturn stat.evaluate(eDA.getInternalValues(), eDA.start(), eDA.getNumElements());\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:<init>()V",
            "method_body": "public Sum() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:<init>(ID)V",
            "method_body": "protected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nresultComputed = false;\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:addValue(D)V",
            "method_body": "public void addValue(double v) {\nif (windowSize != INFINITE_WINDOW) {\neDA.addElement(v);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\nsetMaxEvaluations(Integer.MAX_VALUE);\nsetMaximalIterationCount(100);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getMean()D",
            "method_body": "public double getMean() {\nreturn apply(meanImpl);\n}",
            "method_id": 39
        }
    ]
}