{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "public void testQuinticMinStatistics() throws MathException {\n// The function has local minima at -0.27195613 and 0.82221643.\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setRelativeAccuracy(1e-10);\nminimizer.setAbsoluteAccuracy(1e-11);\n93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\nfor (int i = 0; i < stat.length; i++) {\nstat[i] = new DescriptiveStatistics();\n}\n98: final double min = -0.75;\nfinal double max = 0.25;\nfinal int nSamples = 200;\nfinal double delta = (max - min) / nSamples;\nfor (int i = 0; i < nSamples; i++) {\nfinal double start = min + i * delta;\nstat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\nstat[1].addValue(minimizer.getIterationCount());\nstat[2].addValue(minimizer.getEvaluations());\n}\n109: final double meanOptValue = stat[0].getMean();\nfinal double medianIter = stat[1].getPercentile(50);\nfinal double medianEval = stat[2].getPercentile(50);\nassertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\nassertEquals(medianIter, 17, Math.ulp(1d));\nassertEquals(medianEval, 18, Math.ulp(1d));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:<init>()V",
            "method_body": "public ResizableDoubleArray() {\ninternalArray = new double[initialCapacity];\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getInternalValues()[D",
            "method_body": "public synchronized double[] getInternalValues() {\nreturn internalArray;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:addElement(D)V",
            "method_body": "public synchronized void addElement(double value) {\nnumElements++;\nif ((startIndex + numElements) > internalArray.length) {\nexpand();\ninternalArray[startIndex + (numElements - 1)] = value;\nif (shouldContract()) {\ncontract();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Max:<init>()V",
            "method_body": "public Max() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:<init>()V",
            "method_body": "public SecondMoment() {\nsuper();\nm2 = Double.NaN;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis:<init>()V",
            "method_body": "public Kurtosis() {\nincMoment = true;\nmoment = new FourthMoment();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:expand()V",
            "method_body": "protected synchronized void expand() {\nint newSize = 0;\nif (expansionMode == MULTIPLICATIVE_MODE) {\nnewSize = (int) Math.ceil(internalArray.length * expansionFactor);\ndouble[] tempArray = new double[newSize];\nSystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);\ninternalArray = tempArray;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getNumElements()I",
            "method_body": "public synchronized int getNumElements() {\nreturn numElements;\n}",
            "method_id": 9
        }
    ]
}