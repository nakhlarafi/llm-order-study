{
    "bug_id": 84,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283",
    "test_body": "public void testMath283()\nthrows FunctionEvaluationException, OptimizationException {\n// fails because MultiDirectional.iterateSimplex is looping forever\n// the while(true) should be replaced with a convergence check\nMultiDirectional multiDirectional = new MultiDirectional();\nmultiDirectional.setMaxIterations(100);\nmultiDirectional.setMaxEvaluations(1000);\n201: final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n203: RealPointValuePair estimate = multiDirectional.optimize(function,\nGoalType.MAXIMIZE, function.getMaximumPosition());",
    "stack_trace": "org.apache.commons.math.optimization.OptimizationException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter(DirectSearchOptimizer.java:320)\nat org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(MultiDirectional.java:66)\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(DirectSearchOptimizer.java:307)\nat org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283(MultiDirectionalTest.java:203)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:buildSimplex([D)V",
            "method_body": "private void buildSimplex(final double[] startPoint)\nfinal int n = startPoint.length;\nif (n != startConfiguration.length) {\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = new RealPointValuePair(startPoint, Double.NaN);\nfor (int i = 0; i < n; ++i) {\nfinal double[] confI   = startConfiguration[i];\nfinal double[] vertexI = new double[n];\nfor (int k = 0; k < n; ++k) {\nvertexI[k] = startPoint[k] + confI[k];\nsimplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\nif (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n} catch (MissingResourceException mre) {\nreturn s;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object ... arguments) {\nsuper(buildMessage(Locale.US, pattern, arguments));\nthis.pattern   = pattern;\nthis.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluateSimplex(Ljava/util/Comparator;)V",
            "method_body": "protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)\nfor (int i = 0; i < simplex.length; ++i) {\nfinal RealPointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new RealPointValuePair(point, evaluate(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/RealConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(RealConvergenceChecker checker) {\nthis.checker = checker;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluate([D)D",
            "method_body": "protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nif (++evaluations > maxEvaluations) {\nreturn f.value(x);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ConvergenceException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 27
        }
    ]
}