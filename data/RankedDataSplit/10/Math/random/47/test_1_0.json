{
    "bug_id": 47,
    "test_id": 1,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAtanI",
    "test_body": "public void testAtanI() {\nfor (int i = -10; i < 10; i++) {\nSystem.out.println(new Complex(0, 1 - 0.1 * i).atan());\n}\nAssert.assertTrue(Complex.I.atan().isInfinite());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex log() {\nif (isNaN) {\nreturn NaN;\nreturn createComplex(FastMath.log(abs()),\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex atan() {\nif (isNaN) {\nreturn this.add(I).divide(I.subtract(this)).log()\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex factor)\nMathUtils.checkNotNull(factor);\nif (isNaN || factor.isNaN) {\nreturn NaN;\nif (Double.isInfinite(real) ||\nreturn createComplex(real * factor.real - imaginary * factor.imaginary,\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:atan2(DD)D",
            "method_body": "public static double atan2(double y, double x) {\nif (x !=x || y != y) {\nif (y == 0.0) {\ndouble result = x*y;\ndouble invx = 1.0/x;\ndouble invy = 1.0/y;\nif (invx == 0.0) { // X is infinite\nif (x < 0.0 || invx < 0.0) {\nif (y < 0.0 || invy < 0.0) {\nreturn Math.PI;\nreturn result;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:abs()D",
            "method_body": "public double abs() {\nif (isNaN) {\nif (isInfinite()) {\nif (FastMath.abs(real) < FastMath.abs(imaginary)) {\nif (real == 0.0) {\ndouble q = imaginary / real;\nreturn FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n}",
            "method_id": 9
        }
    ]
}