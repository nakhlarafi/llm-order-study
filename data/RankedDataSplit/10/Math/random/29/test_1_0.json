{
    "bug_id": 29,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #0, left = 0.0, right = 0.0 expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeDivideMixedTypes(RealVectorAbstractTest.java:595)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:iterator()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\nif (current < 0) {\nreturn values[current];\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:key()I",
            "method_body": "public int key()\nif (referenceCount != count) {\nif (current < 0) {\nreturn keys[current];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([DD)V",
            "method_body": "public OpenMapRealVector(double[] values, double epsilon) {\nvirtualSize = values.length;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\nfor (int key = 0; key < values.length; key++) {\ndouble value = values[key];\nif (!isDefaultValue(value)) {\nentries.put(key, value);\n}",
            "method_id": 9
        }
    ]
}