{
    "bug_id": 29,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyMixedTypes(RealVectorAbstractTest.java:580)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn values[index];\nif (states[index] == FREE) {\nreturn missingEntries;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\nfinal int length = source.keys.length;\nkeys = new int[length];\nSystem.arraycopy(source.keys, 0, keys, 0, length);\nvalues = new double[length];\nSystem.arraycopy(source.values, 0, values, 0, length);\nstates = new byte[length];\nSystem.arraycopy(source.states, 0, states, 0, length);\nmissingEntries = source.missingEntries;\nsize  = source.size;\nmask  = source.mask;\ncount = source.count;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I",
            "method_body": "private static int findInsertionIndex(final int[] keys, final byte[] states,\nfinal int hash = hashOf(key);\nint index = hash & mask;\nif (states[index] == FREE) {\nreturn index;\n} else if (states[index] == FULL && keys[index] == key) {\nreturn changeIndexSign(index);\nint perturb = perturb(hash);\nint j = index;\nif (states[index] == FULL) {\nj = probe(perturb, j);\nindex = j & mask;\nperturb >>= PERTURB_SHIFT;\nif (states[index] != FULL || keys[index] == key) {\nif (states[index] == FREE) {\nreturn index;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:perturb(I)I",
            "method_body": "private static int perturb(final int hash) {\nreturn hash & 0x7fffffff;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\nif (current < 0) {\nreturn values[current];\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 29
        }
    ]
}