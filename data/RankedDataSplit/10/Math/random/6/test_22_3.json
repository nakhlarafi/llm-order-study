{
    "bug_id": 6,
    "test_id": 22,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2",
    "test_body": "public void testMinimize2() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n74: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(200),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MINIMIZE,\nnew InitialGuess(new double[] { 1, 0 }),\nnew MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);\nAssert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\nAssert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);\nAssert.assertTrue(optimizer.getEvaluations() > 120);\nAssert.assertTrue(optimizer.getEvaluations() < 150);\n86: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(SimplexOptimizerMultiDirectionalTest.java:87)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void iterate(final MultivariateFunction evaluationFunction,\nfinal PointValuePair[] original = getPoints();\nfinal PointValuePair best = original[0];\nfinal PointValuePair reflected = evaluateNewSimplex(evaluationFunction,\nif (comparator.compare(reflected, best) < 0) {\nfinal PointValuePair[] reflectedSimplex = getPoints();\nfinal PointValuePair expanded = evaluateNewSimplex(evaluationFunction,\nif (comparator.compare(reflected, expanded) <= 0) {\nsetPoints(reflectedSimplex);\nreturn;\nevaluateNewSimplex(evaluationFunction, original, gamma, comparator);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn getKey();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleValueChecker:converged(ILorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 39
        }
    ]
}