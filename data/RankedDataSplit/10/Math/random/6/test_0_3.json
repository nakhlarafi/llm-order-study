{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:<init>(I)V",
            "method_body": "public DiagonalMatrix(final int dimension)\nsuper(dimension, dimension);\ndata = new double[dimension];\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:<init>(DD)V",
            "method_body": "public AbstractConvergenceChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair doOptimize() {\ncheckParameters();\nfinal ConvergenceChecker<PointVectorValuePair> checker\nif (checker == null) {\nfinal double[] targetValues = getTarget();\nfinal int nR = targetValues.length; // Number of observed data.\nfinal RealMatrix weightMatrix = getWeight();\nfinal double[] residualsWeights = new double[nR];\nfor (int i = 0; i < nR; i++) {\nresidualsWeights[i] = weightMatrix.getEntry(i, i);\nfinal double[] currentPoint = getStartPoint();\nfinal int nC = currentPoint.length;\nPointVectorValuePair current = null;\nint iter = 0;\nfor (boolean converged = false; !converged;) {\n++iter;\nPointVectorValuePair previous = current;\nfinal double[] currentObjective = computeObjectiveValue(currentPoint);\nfinal double[] currentResiduals = computeResiduals(currentObjective);\nfinal RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);\ncurrent = new PointVectorValuePair(currentPoint, currentObjective);\nfinal double[]   b = new double[nC];\nfinal double[][] a = new double[nC][nC];\nfor (int i = 0; i < nR; ++i) {\nfinal double[] grad   = weightedJacobian.getRow(i);\nfinal double weight   = residualsWeights[i];\nfinal double residual = currentResiduals[i];\nfinal double wr = weight * residual;\nfor (int j = 0; j < nC; ++j) {\nb[j] += wr * grad[j];\nfor (int k = 0; k < nC; ++k) {\ndouble[] ak = a[k];\ndouble wgk = weight * grad[k];\nfor (int l = 0; l < nC; ++l) {\nak[l] += wgk * grad[l];\nRealMatrix mA = new BlockRealMatrix(a);\nDecompositionSolver solver = useLU ?\nfinal double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\nfor (int i = 0; i < nC; ++i) {\ncurrentPoint[i] += dX[i];\n}\nif (previous != null) {\nconverged = checker.converged(iter, previous, current);\nif (converged) {\nsetCost(computeCost(currentResiduals));\nreturn current;\n}\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "public double dotProduct(RealVector v) throws DimensionMismatchException {\nif (v instanceof ArrayRealVector) {\nfinal double[] vData = ((ArrayRealVector) v).data;\ncheckVectorDimensions(vData.length);\ndouble dot = 0;\nfor (int i = 0; i < data.length; i++) {\ndot += data[i] * vData[i];\nreturn dot;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getLowerBound()[D",
            "method_body": "public double[] getLowerBound() {\nreturn lowerBound == null ? null : lowerBound.clone();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data)\nif (data == null ||\nreturn (data.length * data[0].length <= 4096) ?\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 39
        }
    ]
}