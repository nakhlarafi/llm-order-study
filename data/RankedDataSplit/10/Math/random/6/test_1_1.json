{
    "bug_id": 6,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "protected PointVectorValuePair doOptimize() {\ncheckParameters();\nfinal int nR = getTarget().length; // Number of observed data.\nfinal double[] currentPoint = getStartPoint();\nfinal int nC = currentPoint.length; // Number of parameters.\nsolvedCols  = FastMath.min(nR, nC);\ndiagR       = new double[nC];\njacNorm     = new double[nC];\nbeta        = new double[nC];\npermutation = new int[nC];\nlmDir       = new double[nC];\ndouble   delta   = 0;\ndouble   xNorm   = 0;\ndouble[] diag    = new double[nC];\ndouble[] oldX    = new double[nC];\ndouble[] oldRes  = new double[nR];\ndouble[] oldObj  = new double[nR];\ndouble[] qtf     = new double[nR];\ndouble[] work1   = new double[nC];\ndouble[] work2   = new double[nC];\ndouble[] work3   = new double[nC];\nfinal RealMatrix weightMatrixSqrt = getWeightSquareRoot();\ndouble[] currentObjective = computeObjectiveValue(currentPoint);\ndouble[] currentResiduals = computeResiduals(currentObjective);\nPointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);\ndouble currentCost = computeCost(currentResiduals);\nlmPar = 0;\nboolean firstIteration = true;\nint iter = 0;\nfinal ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n++iter;\nfinal PointVectorValuePair previous = current;\nqrDecomposition(computeWeightedJacobian(currentPoint));\nweightedResidual = weightMatrixSqrt.operate(currentResiduals);\nfor (int i = 0; i < nR; i++) {\nqtf[i] = weightedResidual[i];\nqTy(qtf);\nfor (int k = 0; k < solvedCols; ++k) {\nint pk = permutation[k];\nweightedJacobian[k][pk] = diagR[pk];\nif (firstIteration) {\nxNorm = 0;\nfor (int k = 0; k < nC; ++k) {\ndouble dk = jacNorm[k];\nif (dk == 0) {\ndouble xk = dk * currentPoint[k];\nxNorm  += xk * xk;\ndiag[k] = dk;\nxNorm = FastMath.sqrt(xNorm);\ndelta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\ndouble maxCosine = 0;\nif (currentCost != 0) {\nfor (int j = 0; j < solvedCols; ++j) {\nint    pj = permutation[j];\ndouble s  = jacNorm[pj];\nif (s != 0) {\ndouble sum = 0;\nfor (int i = 0; i <= j; ++i) {\nsum += weightedJacobian[i][pj] * qtf[i];\nmaxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));\nif (maxCosine <= orthoTolerance) {\nfor (int j = 0; j < nC; ++j) {\ndiag[j] = FastMath.max(diag[j], jacNorm[j]);\nfor (double ratio = 0; ratio < 1.0e-4;) {\nfor (int j = 0; j < solvedCols; ++j) {\nint pj = permutation[j];\noldX[pj] = currentPoint[pj];\nfinal double previousCost = currentCost;\ndouble[] tmpVec = weightedResidual;\nweightedResidual = oldRes;\noldRes    = tmpVec;\ntmpVec    = currentObjective;\ncurrentObjective = oldObj;\noldObj    = tmpVec;\ndetermineLMParameter(qtf, delta, diag, work1, work2, work3);\ndouble lmNorm = 0;\nfor (int j = 0; j < solvedCols; ++j) {\nint pj = permutation[j];\nlmDir[pj] = -lmDir[pj];\ncurrentPoint[pj] = oldX[pj] + lmDir[pj];\ndouble s = diag[pj] * lmDir[pj];\nlmNorm  += s * s;\nlmNorm = FastMath.sqrt(lmNorm);\nif (firstIteration) {\ndelta = FastMath.min(delta, lmNorm);\ncurrentObjective = computeObjectiveValue(currentPoint);\ncurrentResiduals = computeResiduals(currentObjective);\ncurrent = new PointVectorValuePair(currentPoint, currentObjective);\ncurrentCost = computeCost(currentResiduals);\ndouble actRed = -1.0;\nif (0.1 * currentCost < previousCost) {\ndouble r = currentCost / previousCost;\nactRed = 1.0 - r * r;\nfor (int j = 0; j < solvedCols; ++j) {\nint pj = permutation[j];\ndouble dirJ = lmDir[pj];\nwork1[j] = 0;\nfor (int i = 0; i <= j; ++i) {\nwork1[i] += weightedJacobian[i][pj] * dirJ;\ndouble coeff1 = 0;\nfor (int j = 0; j < solvedCols; ++j) {\ncoeff1 += work1[j] * work1[j];\ndouble pc2 = previousCost * previousCost;\ncoeff1 = coeff1 / pc2;\ndouble coeff2 = lmPar * lmNorm * lmNorm / pc2;\ndouble preRed = coeff1 + 2 * coeff2;\ndouble dirDer = -(coeff1 + coeff2);\nratio = (preRed == 0) ? 0 : (actRed / preRed);\nif (ratio <= 0.25) {\ndouble tmp =\nif ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {\ntmp = 0.1;\ndelta = tmp * FastMath.min(delta, 10.0 * lmNorm);\nlmPar /= tmp;\n} else if ((lmPar == 0) || (ratio >= 0.75)) {\ndelta = 2 * lmNorm;\nlmPar *= 0.5;\nif (ratio >= 1.0e-4) {\nfirstIteration = false;\nxNorm = 0;\nfor (int k = 0; k < nC; ++k) {\ndouble xK = diag[k] * currentPoint[k];\nxNorm += xK * xK;\nxNorm = FastMath.sqrt(xNorm);\nif (checker != null) {\ncurrentCost = previousCost;\nfor (int j = 0; j < solvedCols; ++j) {\nint pj = permutation[j];\ncurrentPoint[pj] = oldX[pj];\ntmpVec    = weightedResidual;\nweightedResidual = oldRes;\noldRes    = tmpVec;\ntmpVec    = currentObjective;\ncurrentObjective = oldObj;\noldObj    = tmpVec;\ncurrent = new PointVectorValuePair(currentPoint, currentObjective);\nif ((FastMath.abs(actRed) <= costRelativeTolerance &&\nsetCost(currentCost);\nreturn current;\nif ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n} else if (delta <= 2.2204e-16 * xNorm) {\n} else if (maxCosine <= 2.2204e-16)  {\n}\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:setCost(D)V",
            "method_body": "protected void setCost(double cost) {\nthis.cost = cost;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension,\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:operate([D)[D",
            "method_body": "public double[] operate(final double[] v)\nreturn multiply(new DiagonalMatrix(v, false)).getDataRef();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nif (row == column) {\nMatrixUtils.checkRowIndex(this, row);\ndata[row] = value;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nNullArgumentException {\nif (copyArray) {\nif (d == null) {\nfinal int nRows = d.length;\nif (nRows == 0) {\nfinal int nCols = d[0].length;\nif (nCols == 0) {\nfor (int r = 1; r < nRows; r++) {\nif (d[r].length != nCols) {\ndata = d;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:operate(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector operate(final RealVector v)\nreturn new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);\n}",
            "method_id": 19
        }
    ]
}