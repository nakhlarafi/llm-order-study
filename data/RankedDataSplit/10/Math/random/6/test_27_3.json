{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
            "method_body": "protected double computeObjectiveValue(double[] params) {\nsuper.incrementEvaluationCount();\nreturn function.value(params);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>(DI)V",
            "method_body": "public BracketFinder(double growLimit,\nint maxEvaluations) {\nif (growLimit <= 0) {\nif (maxEvaluations <= 0) {\nthis.growLimit = growLimit;\nevaluations.setMaximalCount(maxEvaluations);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "protected UnivariatePointValuePair doOptimize() {\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariatePointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariatePointValuePair previous = null;\nUnivariatePointValuePair current\nUnivariatePointValuePair best = current;\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nprevious = current;\ncurrent = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\nbest = best(best,\nif (checker != null) {\nif (checker.converged(iter, previous, current)) {\nreturn best;\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else { // Default termination (Brent's criterion).\n++iter;\n}\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getLowerBound()[D",
            "method_body": "public double[] getLowerBound() {\nreturn lowerBound == null ? null : lowerBound.clone();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:<init>(DDD)V",
            "method_body": "public SearchInterval(double lo,\ndouble init) {\nif (lo >= hi) {\nif (init < lo ||\nlower = lo;\nupper = hi;\nstart = init;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 39
        }
    ]
}