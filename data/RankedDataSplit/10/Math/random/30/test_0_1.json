{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet",
    "test_body": "public void testBigDataSet() throws Exception {\ndouble[] d1 = new double[1500];\ndouble[] d2 = new double[1500];\nfor (int i = 0; i < 1500; i++) {\nd1[i] = 2 * i;\nd2[i] = 2 * i + 1;\n}\ndouble result = testStatistic.mannWhitneyUTest(d1, d2);\nAssert.assertTrue(result > 0.1);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet(MannWhitneyUTestTest.java:113)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:ensureDataConformance([D[D)V",
            "method_body": "private void ensureDataConformance(final double[] x, final double[] y)\nif (x == null ||\nif (x.length == 0 ||\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:<init>(DI)V",
            "method_body": "public IntDoublePair(double value, int position) {\nthis.value = value;\nthis.position = position;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nif (a < b) {\nreturn b;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nret = Double.NaN;\nreturn ret;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getPosition()I",
            "method_body": "public int getPosition() {\nreturn position;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyUTest([D[D)D",
            "method_body": "public double mannWhitneyUTest(final double[] x, final double[] y)\nensureDataConformance(x, y);\nfinal double Umax = mannWhitneyU(x, y);\nfinal double Umin = x.length * y.length - Umax;\nreturn calculateAsymptoticPValue(Umin, x.length, y.length);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:concatenateSamples([D[D)[D",
            "method_body": "private double[] concatenateSamples(final double[] x, final double[] y) {\nfinal double[] z = new double[x.length + y.length];\nSystem.arraycopy(x, 0, z, 0, x.length);\nSystem.arraycopy(y, 0, z, x.length, y.length);\nreturn z;\n}",
            "method_id": 19
        }
    ]
}