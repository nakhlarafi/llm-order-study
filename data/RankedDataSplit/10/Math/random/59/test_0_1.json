{
    "bug_id": 59,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.FastMathTest.testMinMaxFloat",
    "test_body": "public void testMinMaxFloat() {\nfloat[][] pairs = {\n{ -50.0f, 50.0f },\n{  Float.POSITIVE_INFINITY, 1.0f },\n{  Float.NEGATIVE_INFINITY, 1.0f },\n{  Float.NaN, 1.0f },\n{  Float.POSITIVE_INFINITY, 0.0f },\n{  Float.NEGATIVE_INFINITY, 0.0f },\n{  Float.NaN, 0.0f },\n{  Float.NaN, Float.NEGATIVE_INFINITY },\n{  Float.NaN, Float.POSITIVE_INFINITY }\n};\nfor (float[] pair : pairs) {\nAssert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\nMath.min(pair[0], pair[1]),\nFastMath.min(pair[0], pair[1]),\nMathUtils.EPSILON);\nAssert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\nMath.min(pair[1], pair[0]),\nFastMath.min(pair[1], pair[0]),\nMathUtils.EPSILON);\nAssert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\nMath.max(pair[0], pair[1]),\nFastMath.max(pair[0], pair[1]),\nMathUtils.EPSILON);\nAssert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\nMath.max(pair[1], pair[0]),",
    "stack_trace": "junit.framework.AssertionFailedError: max(50.0, -50.0) expected:<50.0> but was:<-50.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math.util.FastMathTest.testMinMaxFloat(FastMathTest.java:103)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn field.getRadixDigits();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:split(Ljava/lang/String;)[Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "private Dfp[] split(final String a) {\nDfp result[] = new Dfp[2];\nboolean leading = true;\nint sp = 0;\nint sig = 0;\nchar[] buf = new char[a.length()];\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '1' && buf[i] <= '9') {\nleading = false;\nif (buf[i] == '.') {\nsig += (400 - sig) % 4;\nleading = false;\nif (sig == (radixDigits / 2) * 4) {\nsp = i;\nbreak;\nif (buf[i] >= '0' && buf[i] <= '9' && !leading) {\nsig ++;\nresult[0] = new Dfp(this, new String(buf, 0, sp));\nfor (int i = 0; i < buf.length; i++) {\nbuf[i] = a.charAt(i);\nif (buf[i] >= '0' && buf[i] <= '9' && i < sp) {\nbuf[i] = '0';\nresult[1] = new Dfp(this, new String(buf));\nreturn result;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.random.MersenneTwister:setSeed(I)V",
            "method_body": "public void setSeed(int seed) {\nlong longMT = seed;\nmt[0]= (int) longMT;\nfor (mti = 1; mti < N; ++mti) {\nlongMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;\nmt[mti]= (int) longMT;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn radixDigits;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\nthis.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;\nthis.rMode       = RoundingMode.ROUND_HALF_EVEN;\nthis.ieeeFlags   = 0;\nthis.zero        = new Dfp(this, 0);\nthis.one         = new Dfp(this, 1);\nthis.two         = new Dfp(this, 2);\nif (computeConstants) {\nsynchronized (DfpField.class) {\ncomputeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));\nsqr2           = new Dfp(this, sqr2String);\nsqr2Split      = split(sqr2String);\nsqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);\nsqr3           = new Dfp(this, sqr3String);\nsqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);\npi             = new Dfp(this, piString);\npiSplit        = split(piString);\ne              = new Dfp(this, eString);\neSplit         = split(eString);\nln2            = new Dfp(this, ln2String);\nln2Split       = split(ln2String);\nln5            = new Dfp(this, ln5String);\nln5Split       = split(ln5String);\nln10           = new Dfp(this, ln10String);\n}\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\nmant = new int[field.getRadixDigits()];\nnans = FINITE;\nthis.field = field;\nboolean isLongMin = false;\nif (x == Long.MIN_VALUE) {\nif (x < 0) {\nsign = 1;\nexp = 0;\nwhile (x != 0) {\nSystem.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\nmant[mant.length - 1] = (int) (x % RADIX);\nx /= RADIX;\nexp++;\nif (isLongMin) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.random.MersenneTwister:<init>(J)V",
            "method_body": "public MersenneTwister(long seed) {\nmt = new int[N];\nsetSeed(seed);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(FF)F",
            "method_body": "public static float min(final float a, final float b) {\nreturn (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);\n}",
            "method_id": 19
        }
    ]
}