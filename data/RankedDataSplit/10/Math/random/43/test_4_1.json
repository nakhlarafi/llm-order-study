{
    "bug_id": 43,
    "test_id": 4,
    "test_name": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testOverrideMeanWithMathClass",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideMeanWithMathClass(SummaryStatisticsTest.java:335)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:getResult()D",
            "method_body": "public double getResult() {\nreturn moment.m1;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (n < 1) {\nm1 = m2 = 0.0;\nsuper.increment(d);\nm2 += ((double) n - 1) * dev * nDev;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble sum = Double.NaN;\nif (test(values, begin, length, true)) {\nsum = 0.0;\nfor (int i = begin; i < begin + length; i++) {\nsum += values[i];\nreturn sum;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Min:<init>()V",
            "method_body": "public Min() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>(Lorg/apache/commons/math/stat/descriptive/moment/SecondMoment;)V",
            "method_body": "public Variance(final SecondMoment m2) {\nincMoment = false;\nthis.moment = m2;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (n == 0) {\nm1 = 0.0;\nn++;\ndouble n0 = n;\ndev = d - m1;\nnDev = dev / n0;\nm1 += nDev;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:<init>()V",
            "method_body": "public SumOfLogs() {\nvalue = 0d;\nn = 0;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:getMean()D",
            "method_body": "public double getMean() {\nreturn meanImpl.getResult();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 19
        }
    ]
}