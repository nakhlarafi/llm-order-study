{
    "bug_id": 43,
    "test_id": 2,
    "test_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideMeanWithMathClass",
    "test_body": "public void testOverrideMeanWithMathClass() throws Exception {\ndouble[] scores = {1, 2, 3, 4};\nSummaryStatistics stats = new SummaryStatistics();\nstats.setMeanImpl(new Mean()); \nfor(double i : scores) {\nstats.addValue(i);\n}\nAssert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideMeanWithMathClass(SummaryStatisticsTest.java:335)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:getMean()D",
            "method_body": "public double getMean() {\nreturn meanImpl.getResult();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:increment(D)V",
            "method_body": "public void increment(final double d) {\nvalue += d;\nn++;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares:<init>()V",
            "method_body": "public SumOfSquares() {\nn = 0;\nvalue = 0;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:setMeanImpl(Lorg/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic;)V",
            "method_body": "public void setMeanImpl(StorelessUnivariateStatistic meanImpl) {\ncheckEmpty();\nthis.meanImpl = meanImpl;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:checkEmpty()V",
            "method_body": "private void checkEmpty() {\nif (n > 0) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values,final int begin, final int length) {\nif (test(values, begin, length)) {\nSum sum = new Sum();\ndouble sampleSize = length;\ndouble xbar = sum.evaluate(values, begin, length) / sampleSize;\ndouble correction = 0;\nfor (int i = begin; i < begin + length; i++) {\ncorrection += values[i] - xbar;\nreturn xbar + (correction/sampleSize);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
            "method_body": "public void addValue(double value) {\nsumImpl.increment(value);\nsumsqImpl.increment(value);\nminImpl.increment(value);\nmaxImpl.increment(value);\nsumLogImpl.increment(value);\nsecondMoment.increment(value);\nif (!(meanImpl instanceof Mean)) {\nif (!(varianceImpl instanceof Variance)) {\nif (!(geoMeanImpl instanceof GeometricMean)) {\nn++;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:<init>()V",
            "method_body": "public SecondMoment() {\nsuper();\nm2 = Double.NaN;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DIIZ)Z",
            "method_body": "protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){\nif (values == null) {\nif (begin < 0) {\nif (length < 0) {\nif (begin + length > values.length) {\nif (length == 0 && !allowEmpty) {\nreturn true;\n}",
            "method_id": 29
        }
    ]
}