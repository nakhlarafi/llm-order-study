{
    "bug_id": 87,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint",
    "test_body": "public void testSingleVariableAndConstraint() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n73: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\nassertEquals(10.0, solution.getPoint()[0], 0.0);\nassertEquals(30.0, solution.getValue(), 0.0);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint(SimplexSolverTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:getData()[D",
            "method_body": "public double[] getData() {\nreturn data.clone();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:<init>()V",
            "method_body": "protected AbstractLinearOptimizer() {\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
            "method_body": "private Integer getBasicRow(final int col) {\nInteger row = null;\nfor (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\nif (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\nif (row == null) {\nrow = i;\nreturn row;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\nthis.point = point.clone();\nthis.value  = value;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n)\nif (data.length != n) {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.discardArtificialVariables();\nwhile (!isOptimal(tableau)) {\ndoIteration(tableau);\nreturn tableau.getSolution();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
            "method_body": "private void initialize() {\nfor (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\n}",
            "method_id": 49
        }
    ]
}