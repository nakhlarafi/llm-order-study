{
    "bug_id": 87,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint",
    "test_body": "public void testSingleVariableAndConstraint() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n73: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\nassertEquals(10.0, solution.getPoint()[0], 0.0);\nassertEquals(30.0, solution.getValue(), 0.0);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint(SimplexSolverTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nreturn;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\ndouble minRatio = Double.MAX_VALUE;\nInteger minRatioPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\ndouble rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nif (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {\ndouble ratio = rhs / tableau.getEntry(i, col);\nif (ratio < minRatio) {\nminRatio = ratio;\nminRatioPos = i;\nreturn minRatioPos;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new RealVectorImpl(coefficients), constantTerm);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getWidth()I",
            "method_body": "protected final int getWidth() {\nreturn tableau.getColumnDimension();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math/optimization/linear/LinearConstraint;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;",
            "method_body": "private LinearConstraint normalize(final LinearConstraint constraint) {\nif (constraint.getValue() < 0) {\nreturn new LinearConstraint(constraint.getCoefficients(),\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getConstraintTypeCounts(Lorg/apache/commons/math/optimization/linear/Relationship;)I",
            "method_body": "private int getConstraintTypeCounts(final Relationship relationship) {\nint count = 0;\nfor (final LinearConstraint constraint : constraints) {\nif (constraint.getRelationship() == relationship) {\n++count;\nreturn count;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nreturn data[row][column];\n}",
            "method_id": 9
        }
    ]
}