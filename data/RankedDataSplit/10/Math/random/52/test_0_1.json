{
    "bug_id": 52,
    "test_id": 0,
    "test_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639",
    "test_body": "public void testIssue639(){\nVector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n-5774608829631843.0 /  268435456.0,\n-3822921525525679.0 / 4294967296.0);\nVector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n-2275058564560979.0 /    1048576.0,\n4423475992255071.0 /      65536.0);\nRotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\nAssert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);\nAssert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.6228370359608201> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639(RotationTest.java:488)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\nthis.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);\nthis.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);\nthis.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector;)Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D crossProduct(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\nreturn new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getNormSq()D",
            "method_body": "public double getNormSq() {\nreturn x * x + y * y + z * z;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DDD)V",
            "method_body": "public Vector3D(double x, double y, double z) {\nthis.x = x;\nthis.y = y;\nthis.z = z;\n}",
            "method_id": 14
        }
    ]
}