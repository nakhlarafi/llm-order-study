{
    "bug_id": 86,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNotPositiveDefinite",
    "test_body": "public void testNotPositiveDefinite() throws MathException {\nCholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n{ 14, 11, 13, 15, 24 },\n{ 11, 34, 13, 8,  25 },\n{ 13, 13, 14, 15, 21 },\n{ 15, 8,  15, 18, 23 },\n{ 24, 25, 21, 23, 45 }\n}));\nSystem.out.println(cd.getL().multiply(cd.getLT()));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.linear.NotPositiveDefiniteMatrixException\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\nat org.apache.tools.ant.Task.perform(Task.java:348)\nat org.apache.tools.ant.Target.execute(Target.java:392)\nat org.apache.tools.ant.Target.performTasks(Target.java:413)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:811)\nat org.apache.tools.ant.Main.startAnt(Main.java:217)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:getL()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getL() {\nif (cachedL == null) {\ncachedL = getLT().transpose();\nreturn cachedL;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:<init>(II)V",
            "method_body": "public DenseRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\nthis.rows    = rows;\nthis.columns = columns;\nblockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nfinal int rows         = rawData.length;\nfinal int columns      = rawData[0].length;\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfor (int i = 0; i < rawData.length; ++i) {\nfinal int length = rawData[i].length;\nif (length != columns) {\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nfor (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart  = iBlock * BLOCK_SIZE;\nfinal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nfinal double[] block = new double[iHeight * jWidth];\nblocks[blockIndex] = block;\nfor (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {\nSystem.arraycopy(rawData[p], qStart, block, index, jWidth);\nreturn blocks;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public CholeskyDecompositionImpl(final RealMatrix matrix)\nthis(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\nif (rowDimension <= 0 ) {\nif (columnDimension <= 0) {\nlu = null;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal StringBuffer res = new StringBuffer();\nString fullClassName = getClass().getName();\nString shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);\nres.append(shortClassName).append(\"{\");\nfor (int i = 0; i < nRows; ++i) {\nif (i > 0) {\nres.append(\",\");\nres.append(\"{\");\nfor (int j = 0; j < nCols; ++j) {\nif (j > 0) {\nres.append(\",\");\nres.append(getEntry(i, j));\nres.append(\"}\");\nres.append(\"}\");\nreturn res.toString();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:multiply(Lorg/apache/commons/math/linear/DenseRealMatrix;)Lorg/apache/commons/math/linear/DenseRealMatrix;",
            "method_body": "public DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {\nMatrixUtils.checkMultiplicationCompatible(this, m);\nfinal DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);\nfor (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {\nfinal int jWidth = out.blockWidth(jBlock);\nfinal int jWidth2 = jWidth  + jWidth;\nfinal int jWidth3 = jWidth2 + jWidth;\nfinal int jWidth4 = jWidth3 + jWidth;\nfinal double[] outBlock = out.blocks[blockIndex];\nfor (int kBlock = 0; kBlock < blockColumns; ++kBlock) {\nfinal int kWidth = blockWidth(kBlock);\nfinal double[] tBlock = blocks[iBlock * blockColumns + kBlock];\nfinal double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];\nfor (int p = pStart, k = 0; p < pEnd; ++p) {\nfinal int lStart = (p - pStart) * kWidth;\nfinal int lEnd   = lStart + kWidth;\nfor (int nStart = 0; nStart < jWidth; ++nStart) {\ndouble sum = 0;\nint l = lStart;\nint n = nStart;\nwhile (l < lEnd - 3) {\nsum += tBlock[l] * mBlock[n] +\nl += 4;\nn += jWidth4;\nwhile (l < lEnd) {\nsum += tBlock[l++] * mBlock[n];\nn += jWidth;\noutBlock[k++] += sum;\n++blockIndex;\nreturn out;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nreturn blocks[iBlock * blockColumns + jBlock][k];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nfinal double[][] data = new double[getRowDimension()][getColumnDimension()];\nfinal int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);\nint regularPos   = 0;\nint lastPos      = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nfinal double[] dataP = data[p];\nint blockIndex = iBlock * blockColumns;\nint dataPos    = 0;\nfor (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {\nSystem.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);\nregularPos += BLOCK_SIZE;\nlastPos    += lastColumns;\nreturn data;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 9
        }
    ]
}