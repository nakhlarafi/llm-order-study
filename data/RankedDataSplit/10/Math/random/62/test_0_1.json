{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\nunderlying.setMaxEvaluations(300);\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053L);\nMultiStartUnivariateRealOptimizer optimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\n69: UnivariateRealPointValuePair optimum\n= optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\nassertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\nassertEquals(-0.0443342695, optimum.getValue(), 1e-9);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMin()D",
            "method_body": "public double getMin() {\nreturn searchMin;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:getMaximalCount()I",
            "method_body": "public int getMaximalCount() {\nreturn maximalCount;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,\nreturn optimize(f, goalType, min, max, min + 0.5 * (max - min));\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer$1:compare(Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "private void sortPairs(final GoalType goal) {\nArrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\nif (o1 == null) {\n} else if (o2 == null) {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goal == GoalType.MINIMIZE) ?\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(final FUNC f,\nreturn optimize(f, goal, min, max, 0);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(DD)D",
            "method_body": "public static double min(final double a, final double b) {\nreturn (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn searchStart;\n}",
            "method_id": 19
        }
    ]
}