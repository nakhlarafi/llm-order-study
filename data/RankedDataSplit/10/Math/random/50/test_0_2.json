{
    "bug_id": 50,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.testIssue631",
    "test_body": "public void testIssue631() {\nfinal UnivariateRealFunction f = new UnivariateRealFunction() {\n/** {@inheritDoc} */\npublic double value(double x) {\nreturn Math.exp(x) - Math.pow(Math.PI, 3.0);\n}\n};\n53: final UnivariateRealSolver solver = new RegulaFalsiSolver();\nfinal double root = solver.solve(3624, f, 1, 10);\nAssert.assertEquals(3.4341896575482003, root, 1e-15);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.exception.TooManyEvaluationsException\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\nat org.apache.tools.ant.Task.perform(Task.java:348)\nat org.apache.tools.ant.Target.execute(Target.java:392)\nat org.apache.tools.ant.Target.performTasks(Target.java:413)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:811)\nat org.apache.tools.ant.Main.startAnt(Main.java:217)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:isBracketing(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)Z",
            "method_body": "public static boolean isBracketing(UnivariateRealFunction function,\nif (function == null) {\nfinal double fLo = function.value(lower);\nfinal double fHi = function.value(upper);\nreturn (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D",
            "method_body": "protected final double doSolve() {\ndouble x0 = getMin();\ndouble x1 = getMax();\ndouble f0 = computeObjectiveValue(x0);\ndouble f1 = computeObjectiveValue(x1);\nif (f0 == 0.0) {\nif (f1 == 0.0) {\nverifyBracketing(x0, x1);\nfinal double ftol = getFunctionValueAccuracy();\nfinal double atol = getAbsoluteAccuracy();\nfinal double rtol = getRelativeAccuracy();\nboolean inverted = false;\nfinal double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\nfinal double fx = computeObjectiveValue(x);\nif (fx == 0.0) {\nif (f1 * fx < 0) {\nx0 = x1;\nf0 = f1;\ninverted = !inverted;\nswitch (method) {\nif (x == x1) {\nx0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\nf0 = computeObjectiveValue(x0);\nx1 = x;\nf1 = fx;\nif (FastMath.abs(f1) <= ftol) {\nif (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\nswitch (allowed) {\nreturn x1;\n}\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:<init>(D)V",
            "method_body": "protected AbstractUnivariateRealSolver(final double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolver:<init>()V",
            "method_body": "public RegulaFalsiSolver() {\nsuper(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:getFunctionValueAccuracy()D",
            "method_body": "public double getFunctionValueAccuracy() {\nreturn functionValueAccuracy;\n}",
            "method_id": 27
        }
    ]
}