{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:density(D)D",
            "method_body": "public double density(double x) {\nfinal double nhalf = numeratorDegreesOfFreedom / 2;\nfinal double mhalf = denominatorDegreesOfFreedom / 2;\nfinal double logx = FastMath.log(x);\nfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\nfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\nfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\nreturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
            "method_body": "public FDistribution(RandomGenerator rng,\nsuper(rng);\nif (numeratorDegreesOfFreedom <= 0) {\nif (denominatorDegreesOfFreedom <= 0) {\nthis.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;\nthis.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log1p(D)D",
            "method_body": "public static double log1p(final double x) {\nif (x == -1) {\nif (x == Double.POSITIVE_INFINITY) {\nif (x > 1e-6 ||\nfinal double xpa = 1 + x;\nfinal double xpb = -(xpa - 1 - x);\nfinal double[] hiPrec = new double[2];\nfinal double lores = log(xpa, hiPrec);\nif (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN\nfinal double fx1 = xpb / xpa;\nfinal double epsilon = 0.5 * fx1 + 1;\nreturn epsilon * fx1 + hiPrec[1] + hiPrec[0];\nfinal double y = (x * F_1_3 - F_1_2) * x + 1;\nreturn y * x;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\nintVal = (int) x;\nif (intVal > 709) {\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\nfinal double tempC = tempB + tempA;\nif (extra != 0.0) {\nresult = tempC*z + tempB + tempA;\nif (hiPrec != null) {\nreturn result;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 19
        }
    ]
}