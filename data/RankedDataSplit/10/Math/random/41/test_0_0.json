{
    "bug_id": 41,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.descriptive.moment.VarianceTest.testEvaluateArraySegmentWeighted",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.6644508338125354> but was:<0.31909161062727365>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testEvaluateArraySegmentWeighted(UnivariateStatisticAbstractTest.java:130)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DIIZ)Z",
            "method_body": "protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){\nif (values == null) {\nif (begin < 0) {\nif (length < 0) {\nif (begin + length > values.length) {\nif (length == 0 && !allowEmpty) {\nreturn true;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DII)D",
            "method_body": "public double evaluate(final double[] values, final double[] weights,\ndouble var = Double.NaN;\nif (test(values, weights,begin, length)) {\nclear();\nif (length == 1) {\n} else if (length > 1) {\nMean mean = new Mean();\ndouble m = mean.evaluate(values, weights, begin, length);\nvar = evaluate(values, weights, m, begin, length);\nreturn var;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:<init>()V",
            "method_body": "public SecondMoment() {\nsuper();\nm2 = Double.NaN;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:clear()V",
            "method_body": "public void clear() {\nif (incMoment) {\nmoment.clear();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:clear()V",
            "method_body": "public void clear() {\nsuper.clear();\nm2 = Double.NaN;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:clear()V",
            "method_body": "public void clear() {\nm1 = Double.NaN;\nn = 0;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([D[DIIZ)Z",
            "method_body": "protected boolean test(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty){\nif (weights == null) {\nif (weights.length != values.length) {\nboolean containsPositiveWeight = false;\nfor (int i = begin; i < begin + length; i++) {\nif (Double.isNaN(weights[i])) {\nif (Double.isInfinite(weights[i])) {\nif (weights[i] < 0) {\nif (!containsPositiveWeight && weights[i] > 0.0) {\ncontainsPositiveWeight = true;\nif (!containsPositiveWeight) {\nreturn test(values, begin, length, allowEmpty);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 9
        }
    ]
}