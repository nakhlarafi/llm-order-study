{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855",
    "test_body": "public void testMath855() {\nfinal double minSin = 3 * Math.PI / 2;\nfinal double offset = 1e-8;\nfinal double delta = 1e-7;\nfinal UnivariateFunction f1 = new Sin();\nfinal UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\nnew double[] { 0, -1, 0 });\nfinal UnivariateFunction f = FunctionUtils.add(f1, f2);\nfinal UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\nfinal UnivariatePointValuePair result\n= optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\nfinal int numEval = optimizer.getEvaluations();\n206: final double sol = result.getPoint();\nfinal double expected = 4.712389027602411;\n209: // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n// System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n// System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n213: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855(BrentOptimizerTest.java:213)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:getK()I",
            "method_body": "int getK() {\nreturn finalK;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;ZZ)Z",
            "method_body": "public static boolean checkOrder(double[] val, OrderDirection dir,\ndouble previous = val[0];\nfinal int max = val.length;\nfor (index = 1; index < max; index++) {\nswitch (dir) {\nif (strict) {\nif (val[index] <= previous) {\nprevious = val[index];\nif (index == max) {\nreturn true;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair optimize(int maxEval,\nreturn optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.FunctionUtils$4:value(D)D",
            "method_body": "public static UnivariateFunction add(final UnivariateFunction ... f) {\nreturn new UnivariateFunction() {\ndouble r = f[0].value(x);\nfor (int i = 1; i < f.length; i++) {\nr += f[i].value(x);\nreturn r;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.StepFunction:<init>([D[D)V",
            "method_body": "public StepFunction(double[] x,\nDimensionMismatchException {\nif (x == null ||\nif (x.length == 0 ||\nif (y.length != x.length) {\nMathArrays.checkOrder(x);\nabscissa = MathArrays.copyOf(x);\nordinate = MathArrays.copyOf(y);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.StepFunction:value(D)D",
            "method_body": "public double value(double x) {\nint index = Arrays.binarySearch(abscissa, x);\ndouble fx = 0;\nif (index < -1) {\nfx = ordinate[-index-2];\n} else if (index >= 0) {\nfx = ordinate[0];\nreturn fx;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:<init>(DD)V",
            "method_body": "public UnivariatePointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optimization/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.Sin:value(D)D",
            "method_body": "public double value(double x) {\nreturn FastMath.sin(x);\n}",
            "method_id": 19
        }
    ]
}