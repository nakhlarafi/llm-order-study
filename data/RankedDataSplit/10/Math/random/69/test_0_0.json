{
    "bug_id": 69,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:<init>(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public SimpleRegression(TDistribution t) {\nsuper();\nsetDistribution(t);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nfinal int rows         = rawData.length;\nfinal int columns      = rawData[0].length;\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfor (int i = 0; i < rawData.length; ++i) {\nfinal int length = rawData[i].length;\nif (length != columns) {\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart  = iBlock * BLOCK_SIZE;\nfinal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nfinal double[] block = new double[iHeight * jWidth];\nblocks[blockIndex] = block;\nint index = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nSystem.arraycopy(rawData[p], qStart, block, index, jWidth);\nindex += jWidth;\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x == 0.0) {\ndouble t =\nif (x < 0.0) {\nret = 1.0 - 0.5 * t;\nreturn ret;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:<init>(II)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\nthis.rows    = rows;\nthis.columns = columns;\nblockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\nsetDegreesOfFreedomInternal(degreesOfFreedom);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b, double epsilon,\nif (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSlope()D",
            "method_body": "public double getSlope() {\nif (n < 2) {\nif (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {\nreturn sumXY / sumXX;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 9
        }
    ]
}