{
    "bug_id": 69,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart  = iBlock * BLOCK_SIZE;\nfinal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nblocks[blockIndex] = new double[iHeight * jWidth];\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public PearsonsCorrelation(RealMatrix matrix) {\ncheckSufficientData(matrix);\nnObs = matrix.getRowDimension();\ncorrelationMatrix = computeCorrelationMatrix(matrix);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\nif (rowDimension <= 0 ) {\nif (columnDimension <= 0) {\nlu = null;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(DD)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {\nsuper();\nsetDegreesOfFreedomInternal(degreesOfFreedom);\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:setDistribution(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public void setDistribution(TDistribution value) {\ndistribution = value;\nif (n > 2) {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nfinal int iBlock = row    / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nblocks[iBlock * blockColumns + jBlock][k] = value;\n}\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "private void checkSufficientData(final RealMatrix matrix) {\nint nRows = matrix.getRowDimension();\nint nCols = matrix.getColumnDimension();\nif (nRows < 2 || nCols < 2) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 39
        }
    ]
}