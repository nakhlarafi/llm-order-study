{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942",
    "test_body": "public void testIssue942() {\nList<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\nAssert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n}\n",
    "stack_trace": "java.lang.ArrayStoreException: org.apache.commons.math3.distribution.DiscreteRealDistributionTest$2\nat org.apache.commons.math3.distribution.DiscreteDistribution.sample(DiscreteDistribution.java:190)\nat org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942(DiscreteRealDistributionTest.java:212)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\nrandom = rng;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:sample()Ljava/lang/Object;",
            "method_body": "public T sample() {\nfinal double randomValue = random.nextDouble();\ndouble sum = 0;\nfor (int i = 0; i < probabilities.length; i++) {\nsum += probabilities[i];\nif (randomValue < sum) {\nreturn singletons.get(i);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextDouble()D",
            "method_body": "public double nextDouble() {\nfinal long high = ((long) next(26)) << 26;\nfinal int  low  = next(26);\nreturn (high | low) * 0x1.0p-52d;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;[D[D)V",
            "method_body": "public DiscreteRealDistribution(final RandomGenerator rng,\nsuper(rng);\nif (singletons.length != probabilities.length) {\nList<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);\nfor (int i = 0; i < singletons.length; i++) {\nsamples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));\ninnerDistribution = new DiscreteDistribution<Double>(rng, samples);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:normalizeArray([DD)[D",
            "method_body": "public static double[] normalizeArray(double[] values, double normalizedSum)\nif (Double.isInfinite(normalizedSum)) {\nif (Double.isNaN(normalizedSum)) {\ndouble sum = 0d;\nfinal int len = values.length;\ndouble[] out = new double[len];\nfor (int i = 0; i < len; i++) {\nif (Double.isInfinite(values[i])) {\nif (!Double.isNaN(values[i])) {\nsum += values[i];\nif (sum == 0) {\nfor (int i = 0; i < len; i++) {\nif (Double.isNaN(values[i])) {\nout[i] = values[i] * normalizedSum / sum;\nreturn out;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:next(I)I",
            "method_body": "protected int next(final int bits) {\nfinal int indexRm1 = iRm1[index];\nfinal int indexRm2 = iRm2[index];\nfinal int v0       = v[index];\nfinal int vM1      = v[i1[index]];\nfinal int vM2      = v[i2[index]];\nfinal int vM3      = v[i3[index]];\nfinal int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);\nfinal int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));\nfinal int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));\nfinal int z3 = z1      ^ z2;\nint z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));\nv[index]     = z3;\nv[indexRm1]  = z4;\nv[indexRm2] &= 0x80000000;\nindex        = indexRm1;\nz4 = z4 ^ ((z4 <<  7) & 0xe46e1700);\nz4 = z4 ^ ((z4 << 15) & 0x9b868000);\nreturn z4 >>> (32 - bits);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution:<init>([D[D)V",
            "method_body": "public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)\nthis(new Well19937c(), singletons, probabilities);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\nsetSeed(System.currentTimeMillis() + System.identityHashCode(this));\nreturn;\nSystem.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\nif (seed.length < v.length) {\nfor (int i = seed.length; i < v.length; ++i) {\nfinal long l = v[i - seed.length];\nv[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\nindex = 0;\nclear();  // Clear normal deviate cache\n}",
            "method_id": 9
        }
    ]
}