{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942",
    "test_body": "public void testIssue942() {\nList<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\nAssert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n}\n",
    "stack_trace": "java.lang.ArrayStoreException: org.apache.commons.math3.distribution.DiscreteRealDistributionTest$2\nat org.apache.commons.math3.distribution.DiscreteDistribution.sample(DiscreteDistribution.java:190)\nat org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942(DiscreteRealDistributionTest.java:212)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;",
            "method_body": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\nif (sampleSize <= 0) {\nfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\nfor (int i = 0; i < sampleSize; i++) {\nout[i] = sample();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\ndelegate = new RandomDataGenerator();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\nfinal int w = 32;\nfinal int r = (k + w - 1) / w;\nthis.v      = new int[r];\nthis.index  = 0;\niRm1 = new int[r];\niRm2 = new int[r];\ni1   = new int[r];\ni2   = new int[r];\ni3   = new int[r];\nfor (int j = 0; j < r; ++j) {\niRm1[j] = (j + r - 1) % r;\niRm2[j] = (j + r - 2) % r;\ni1[j]   = (j + m1)    % r;\ni2[j]   = (j + m2)    % r;\ni3[j]   = (j + m3)    % r;\nsetSeed(seed);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)\nthrows NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\nrandom = rng;\nsingletons = new ArrayList<T>(samples.size());\nfinal double[] probs = new double[samples.size()];\nfor (int i = 0; i < samples.size(); i++) {\nfinal Pair<T, Double> sample = samples.get(i);\nsingletons.add(sample.getKey());\nif (sample.getValue() < 0) {\nprobs[i] = sample.getValue();\nprobabilities = MathArrays.normalizeArray(probs, 1.0);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final List<Pair<T, Double>> samples)\nthis(new Well19937c(), samples);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 19
        }
    ]
}