{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021",
    "test_body": "public void testMath1021() {\nfinal int N = 43130568;\nfinal int m = 42976365;\nfinal int n = 50;\nfinal HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n295: for (int i = 0; i < 100; i++) {\nfinal int sample = dist.sample();\nAssert.assertTrue(\"sample=\" + sample, 0 <= sample);\nAssert.assertTrue(\"sample=\" + sample, sample <= n);",
    "stack_trace": "junit.framework.AssertionFailedError: sample=-50\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(HypergeometricDistributionTest.java:297)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:calculateNumericalVariance()D",
            "method_body": "protected double calculateNumericalVariance() {\nfinal double N = getPopulationSize();\nfinal double m = getNumberOfSuccesses();\nfinal double n = getSampleSize();\nreturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:solveInverseCumulativeProbability(DII)I",
            "method_body": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\nwhile (lower + 1 < upper) {\nreturn upper;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\nsetSeed(System.currentTimeMillis() + System.identityHashCode(this));\nreturn;\nSystem.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\nif (seed.length < v.length) {\nfor (int i = seed.length; i < v.length; ++i) {\nfinal long l = v[i - seed.length];\nv[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\nindex = 0;\nclear();  // Clear normal deviate cache\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSampleSize()I",
            "method_body": "public int getSampleSize() {\nreturn sampleSize;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:<init>(III)V",
            "method_body": "public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\nthis(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nif (!numericalVarianceIsCalculated) {\nnumericalVariance = calculateNumericalVariance();\nnumericalVarianceIsCalculated = true;\nreturn numericalVariance;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextDouble()D",
            "method_body": "public double nextDouble() {\nfinal long high = ((long) next(26)) << 26;\nfinal int  low  = next(26);\nreturn (high | low) * 0x1.0p-52d;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\nfinal int w = 32;\nfinal int r = (k + w - 1) / w;\nthis.v      = new int[r];\nthis.index  = 0;\niRm1 = new int[r];\niRm2 = new int[r];\ni1   = new int[r];\ni2   = new int[r];\ni3   = new int[r];\nfor (int j = 0; j < r; ++j) {\niRm1[j] = (j + r - 1) % r;\niRm2[j] = (j + r - 2) % r;\ni1[j]   = (j + m1)    % r;\ni2[j]   = (j + m2)    % r;\ni3[j]   = (j + m3)    % r;\nsetSeed(seed);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;III)V",
            "method_body": "public HypergeometricDistribution(RandomGenerator rng,\nsuper(rng);\nif (populationSize <= 0) {\nif (numberOfSuccesses < 0) {\nif (sampleSize < 0) {\nif (numberOfSuccesses > populationSize) {\nif (sampleSize > populationSize) {\nthis.numberOfSuccesses = numberOfSuccesses;\nthis.populationSize = populationSize;\nthis.sampleSize = sampleSize;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 19
        }
    ]
}