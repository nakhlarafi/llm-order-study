{
    "bug_id": 72,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints",
    "test_body": "public void testRootEndpoints() throws Exception {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealSolver solver = new BrentSolver();\n309: // endpoint is root\ndouble result = solver.solve(f, Math.PI, 4);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n313: result = solver.solve(f, 3, Math.PI);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n316: result = solver.solve(f, Math.PI, 4, 3.5);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n319: result = solver.solve(f, 3, Math.PI, 3.07);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n322: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<1.2246467991473532E-16>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints(BrentSolverTest.java:317)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
            "method_body": "public double solve(final UnivariateRealFunction f,\nclearResult();\nverifySequence(min, initial, max);\ndouble yInitial = f.value(initial);\nif (Math.abs(yInitial) <= functionValueAccuracy) {\ndouble yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {\nsetResult(yMin, 0);\nreturn result;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
            "method_body": "public double solve(final UnivariateRealFunction f,\nclearResult();\nverifyInterval(min, max);\ndouble ret = Double.NaN;\ndouble yMin = f.value(min);\ndouble yMax = f.value(max);\ndouble sign = yMin * yMax;\nif (sign > 0) {\nif (Math.abs(yMin) <= functionValueAccuracy) {\n} else if (Math.abs(yMax) <= functionValueAccuracy) {\nsetResult(max, 0);\nret = max;\n} else if (sign < 0){\nret = solve(f, min, yMin, max, yMax, min, yMin);\nreturn ret;\n}",
            "method_id": 11
        }
    ]
}