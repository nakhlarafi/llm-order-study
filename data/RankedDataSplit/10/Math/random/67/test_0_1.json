{
    "bug_id": 67,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer();\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053l);\nMultiStartUnivariateRealOptimizer minimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\nminimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\nminimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n68: try {\nminimizer.getOptima();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\ntry {\nminimizer.getOptimaValues();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n85: assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\nassertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\nassertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\noptimizer.setRelativeAccuracy(accuracy);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptima()[D",
            "method_body": "public double[] getOptima() throws IllegalStateException {\nif (optima == null) {\nthrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
            "method_body": "public double getResult() {\ncheckResultComputed();\nreturn result;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$5:<init>(Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalStateException createIllegalStateException(final Localizable pattern,\nreturn new IllegalStateException() {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:<init>(Lorg/apache/commons/math/optimization/UnivariateRealOptimizer;ILorg/apache/commons/math/random/RandomGenerator;)V",
            "method_body": "public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,\nfinal RandomGenerator generator) {\nthis.optimizer        = optimizer;\nthis.totalIterations  = 0;\nthis.starts           = starts;\nthis.generator        = generator;\nthis.optima           = null;\nsetMaximalIterationCount(Integer.MAX_VALUE);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
            "method_body": "public double[] getOptimaValues() throws IllegalStateException {\nif (optimaValues == null) {\nthrow MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 19
        }
    ]
}