{
    "bug_id": 37,
    "test_id": 3,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testTan",
    "test_body": "public void testTan() {\nComplex z = new Complex(3, 4);\nComplex expected = new Complex(-0.000187346, 0.999356);\nTestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n/* Check that no overflow occurs (MATH-722) */\nComplex actual = new Complex(3.0, 1E10).tan();\nexpected = new Complex(0, 1);\nTestUtils.assertEquals(expected, actual, 1.0e-5);\nactual = new Complex(3.0, -1E10).tan();",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.TestUtils.assertEquals(TestUtils.java:95)\nat org.apache.commons.math.complex.ComplexTest.testTan(ComplexTest.java:1002)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cosh(D)D",
            "method_body": "public static double cosh(double x) {\nif (x != x) {\nif (x > 20.0) {\nreturn exp(x)/2.0;\nif (x < -20) {\ndouble hiPrec[] = new double[2];\nif (x < 0.0) {\nexp(x, 0.0, hiPrec);\ndouble ya = hiPrec[0] + hiPrec[1];\ndouble yb = -(ya - hiPrec[0] - hiPrec[1]);\ndouble temp = ya * HEX_40000000;\ndouble yaa = ya + temp - temp;\ndouble yab = ya - yaa;\ndouble recip = 1.0/ya;\ntemp = recip * HEX_40000000;\ndouble recipa = recip + temp - temp;\ndouble recipb = recip - recipa;\nrecipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\nrecipb += -yb * recip * recip;\ntemp = ya + recipa;\nyb += -(temp - ya - recipa);\nya = temp;\ntemp = ya + recipb;\nyb += -(temp - ya - recipb);\nya = temp;\ndouble result = ya + yb;\nresult *= 0.5;\nreturn result;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sinh(D)D",
            "method_body": "public static double sinh(double x) {\nboolean negate = false;\nif (x != x) {\nif (x > 20.0) {\nreturn exp(x)/2.0;\nif (x < -20) {\nif (x == 0) {\nif (x < 0.0) {\nif (x > 0.25) {\ndouble hiPrec[] = new double[2];\nexp(x, 0.0, hiPrec);\ndouble ya = hiPrec[0] + hiPrec[1];\ndouble yb = -(ya - hiPrec[0] - hiPrec[1]);\ndouble temp = ya * HEX_40000000;\ndouble yaa = ya + temp - temp;\ndouble yab = ya - yaa;\ndouble recip = 1.0/ya;\ntemp = recip * HEX_40000000;\ndouble recipa = recip + temp - temp;\ndouble recipb = recip - recipa;\nrecipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\nrecipb += -yb * recip * recip;\nrecipa = -recipa;\nrecipb = -recipb;\ntemp = ya + recipa;\nyb += -(temp - ya - recipa);\nya = temp;\ntemp = ya + recipb;\nyb += -(temp - ya - recipb);\nya = temp;\nresult = ya + yb;\nresult *= 0.5;\n}\nif (negate) {\nreturn result;\n}",
            "method_id": 14
        }
    ]
}