{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testTanhInf",
    "test_body": "public void testTanhInf() {\nTestUtils.assertSame(Complex.NaN, oneInf.tanh());\nTestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\nTestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());\nTestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:77)\nat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:85)\nat org.apache.commons.math.complex.ComplexTest.testTanhInf(ComplexTest.java:1054)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\nfinal double pi2b = 6.123233995736766E-17;\nfinal double a = pi2a - xa;\ndouble b = -(a - pi2a + xa);\nb += pi2b - xb;\nreturn sinQ(a, b);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:valueOf(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public static Complex valueOf(double realPart,\nif (Double.isNaN(realPart) ||\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\nint quadrant = 0;\ndouble xb = 0.0;\nxa = x;\nif (x < 0) {\nnegative = true;\nxa = -xa;\nif (xa == 0.0) {\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nreturn Double.NaN;\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nint k = (int)(xa * 0.6366197723675814);\ndouble a = -k * 1.570796251296997;\nremA = xa + a;\nremB = -(remA - xa - a);\na = -k * 7.549789948768648E-8;\ndouble b = remA;\nremA = a + b;\nremB += -(remA - b - a);\na = -k * 6.123233995736766E-17;\nb = remA;\nremA = a + b;\nremB += -(remA - b - a);\nif (remA > 0.0) {\nbreak;\nquadrant = k & 3;\nxa = remA;\nxb = remB;\nif (negative) {\nswitch (quadrant) {\nreturn cosQ(xa, xb);\nreturn -cosQ(xa, xb);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sinh(D)D",
            "method_body": "public static double sinh(double x) {\nboolean negate = false;\nif (x != x) {\nif (x > 20.0) {\nreturn exp(x)/2.0;\nif (x < -20) {\nif (x == 0) {\nif (x < 0.0) {\nif (x > 0.25) {\ndouble hiPrec[] = new double[2];\nexp(x, 0.0, hiPrec);\ndouble ya = hiPrec[0] + hiPrec[1];\ndouble yb = -(ya - hiPrec[0] - hiPrec[1]);\ndouble temp = ya * HEX_40000000;\ndouble yaa = ya + temp - temp;\ndouble yab = ya - yaa;\ndouble recip = 1.0/ya;\ntemp = recip * HEX_40000000;\ndouble recipa = recip + temp - temp;\ndouble recipb = recip - recipa;\nrecipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;\nrecipb += -yb * recip * recip;\nrecipa = -recipa;\nrecipb = -recipb;\ntemp = ya + recipa;\nyb += -(temp - ya - recipa);\nya = temp;\ntemp = ya + recipb;\nyb += -(temp - ya - recipb);\nya = temp;\nresult = ya + yb;\nresult *= 0.5;\n}\nif (negate) {\nreturn result;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cos(D)D",
            "method_body": "public static double cos(double x) {\nint quadrant = 0;\ndouble xa = x;\nif (x < 0) {\nxa = -xa;\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nreturn Double.NaN;\ndouble xb = 0;\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nint k = (int)(xa * 0.6366197723675814);\ndouble a = -k * 1.570796251296997;\nremA = xa + a;\nremB = -(remA - xa - a);\na = -k * 7.549789948768648E-8;\ndouble b = remA;\nremA = a + b;\nremB += -(remA - b - a);\na = -k * 6.123233995736766E-17;\nb = remA;\nremA = a + b;\nremB += -(remA - b - a);\nif (remA > 0.0) {\nbreak;\nquadrant = k & 3;\nxa = remA;\nxb = remB;\nswitch (quadrant) {\nreturn -sinQ(xa, xb);\nreturn sinQ(xa, xb);\n}",
            "method_id": 15
        }
    ]
}