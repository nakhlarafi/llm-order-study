{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testKeepInitIfBest",
    "test_body": "public void testKeepInitIfBest() {\nfinal double minSin = 3 * Math.PI / 2;\nfinal double offset = 1e-8;\nfinal double delta = 1e-7;\nfinal UnivariateFunction f1 = new Sin();\nfinal UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},\nnew double[] { 0, -1, 0 });\nfinal UnivariateFunction f = FunctionUtils.add(f1, f2);\n// A slightly less stringent tolerance would make the test pass\n// even with the previous implementation.\nfinal double relTol = 1e-8;\nfinal UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);\nfinal double init = minSin + 1.5 * offset;\nfinal UnivariatePointValuePair result\n= optimizer.optimize(200, f, GoalType.MINIMIZE,\nminSin - 6.789 * delta,\nminSin + 9.876 * delta,\ninit);\nfinal int numEval = optimizer.getEvaluations();\n213: final double sol = result.getPoint();\nfinal double expected = init;\n216: //         System.out.println(\"numEval=\" + numEval);\n//         System.out.println(\"min=\" + init + \" f=\" + f.value(init));\n//         System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n//         System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n221: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testKeepInitIfBest(BrentOptimizerTest.java:221)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optimization/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<UnivariatePointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizer:<init>(DD)V",
            "method_body": "public BrentOptimizer(double rel,\nthis(rel, abs, null);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([D)V",
            "method_body": "public static void checkOrder(double[] val) throws NonMonotonicSequenceException {\ncheckOrder(val, OrderDirection.INCREASING, true);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.StepFunction:value(D)D",
            "method_body": "public double value(double x) {\nint index = Arrays.binarySearch(abscissa, x);\ndouble fx = 0;\nif (index < -1) {\nfx = ordinate[-index-2];\n} else if (index >= 0) {\nfx = ordinate[0];\nreturn fx;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)V",
            "method_body": "public static void checkOrder(double[] val, OrderDirection dir,\ncheckOrder(val, dir, strict, true);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 19
        }
    ]
}