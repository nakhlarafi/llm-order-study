{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "public void testLargeSample() {\nRandom randomizer = new Random(0x5551480dca5b369bl);\ndouble maxError = 0;\nfor (int degree = 0; degree < 10; ++degree) {\nPolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n230: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\nfor (int i = 0; i < 40000; ++i) {\ndouble x = -1.0 + i / 20000.0;\nfitter.addObservedPoint(1.0, x,\np.value(x) + 0.1 * randomizer.nextGaussian());\n}\n237: final double[] init = new double[degree + 1];\nPolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n240: for (double x = -1.0; x < 1.0; x += 0.01) {\ndouble error = FastMath.abs(p.value(x) - fitted.value(x)) /\n(1.0 + FastMath.abs(p.value(x)));\nmaxError = FastMath.max(maxError, error);\nAssert.assertTrue(FastMath.abs(error) < 0.01);\n}\n}\nAssert.assertTrue(maxError > 0.001);\n}\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)\nat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)\nat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)\nat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)\nat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)\nat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V",
            "method_body": "public ModelFunction getModelFunction() {\nreturn new ModelFunction(new MultivariateVectorFunction() {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V",
            "method_body": "public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {\nthis.f = f;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
            "method_body": "public double[] fit(T f, final double[] initialGuess) {\nreturn fit(Integer.MAX_VALUE, f, initialGuess);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "private void parseOptimizationData(OptimizationData... optData) {\nfor (OptimizationData data : optData) {\nif (data instanceof Weight) {\nweightMatrixSqrt = squareRoot(((Weight) data).getWeight());\nbreak;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V",
            "method_body": "public LevenbergMarquardtOptimizer() {\nthis(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 9
        }
    ]
}