{
    "bug_id": 67,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer();\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053l);\nMultiStartUnivariateRealOptimizer minimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\nminimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\nminimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n68: try {\nminimizer.getOptima();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\ntry {\nminimizer.getOptimaValues();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n85: assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\nassertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\nassertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalStateException(Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;",
            "method_body": "public static IllegalStateException createIllegalStateException(final Localizable pattern,\nreturn new IllegalStateException() {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\noptima           = new double[starts];\noptimaValues     = new double[starts];\ntotalIterations  = 0;\ntotalEvaluations = 0;\nfor (int i = 0; i < starts; ++i) {\noptimizer.setMaximalIterationCount(maxIterations - totalIterations);\noptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);\nfinal double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\nfinal double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\noptima[i]       = optimizer.optimize(f, goalType,\noptimaValues[i] = optimizer.getFunctionValue();\n}\ntotalIterations  += optimizer.getIterationCount();\ntotalEvaluations += optimizer.getEvaluations();\nint lastNaN = optima.length;\nfor (int i = 0; i < lastNaN; ++i) {\nif (Double.isNaN(optima[i])) {\ndouble currX = optima[0];\ndouble currY = optimaValues[0];\nfor (int j = 1; j < lastNaN; ++j) {\nfinal double prevY = currY;\ncurrX = optima[j];\ncurrY = optimaValues[j];\nif ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {\nint i = j - 1;\ndouble mIX = optima[i];\ndouble mIY = optimaValues[i];\nwhile ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {\noptima[i + 1]       = mIX;\noptimaValues[i + 1] = mIY;\nif (i-- != 0) {\nmIX = optima[i];\nmIY = optimaValues[i];\noptima[i + 1]       = currX;\noptimaValues[i + 1] = currY;\ncurrX = optima[j];\ncurrY = optimaValues[j];\nif (Double.isNaN(optima[0])) {\nreturn optima[0];\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\nclearResult();\nreturn localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\nthis.functionValue  = fx;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
            "method_body": "public double getResult() {\ncheckResultComputed();\nreturn result;\n}",
            "method_id": 19
        }
    ]
}