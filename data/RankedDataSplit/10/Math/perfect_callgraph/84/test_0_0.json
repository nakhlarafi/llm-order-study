{
    "bug_id": 84,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283",
    "test_body": "public void testMath283()\nthrows FunctionEvaluationException, OptimizationException {\n// fails because MultiDirectional.iterateSimplex is looping forever\n// the while(true) should be replaced with a convergence check\nMultiDirectional multiDirectional = new MultiDirectional();\nmultiDirectional.setMaxIterations(100);\nmultiDirectional.setMaxEvaluations(1000);\n201: final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n203: RealPointValuePair estimate = multiDirectional.optimize(function,\nGoalType.MAXIMIZE, function.getMaximumPosition());",
    "stack_trace": "org.apache.commons.math.optimization.OptimizationException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter(DirectSearchOptimizer.java:320)\nat org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(MultiDirectional.java:66)\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(DirectSearchOptimizer.java:307)\nat org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283(MultiDirectionalTest.java:203)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:<init>()V",
            "method_body": "public MultiDirectional() {\nthis.khi   = 2.0;\nthis.gamma = 0.5;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:<init>()V",
            "method_body": "protected DirectSearchOptimizer() {\nsetConvergenceChecker(new SimpleScalarValueChecker());\nsetMaxIterations(Integer.MAX_VALUE);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker:<init>()V",
            "method_body": "public SimpleScalarValueChecker() {\nthis.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\nthis.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\nif (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n} catch (MissingResourceException mre) {\nreturn s;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public MathException(Throwable rootCause) {\nsuper(rootCause);\nthis.pattern   = getMessage();\nthis.arguments = new Object[0];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\nfinal double[] xSmallest = original[0].getPointRef();\nfinal int n = xSmallest.length;\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = original[0];\nfor (int i = 1; i <= n; ++i) {\nfinal double[] xOriginal    = original[i].getPointRef();\nfinal double[] xTransformed = new double[n];\nfor (int j = 0; j < n; ++j) {\nxTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);\nsimplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);\nevaluateSimplex(comparator);\nreturn simplex[0];\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ConvergenceException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluate([D)D",
            "method_body": "protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nif (++evaluations > maxEvaluations) {\nreturn f.value(x);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/RealConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(RealConvergenceChecker checker) {\nthis.checker = checker;\n}",
            "method_id": 9
        }
    ]
}