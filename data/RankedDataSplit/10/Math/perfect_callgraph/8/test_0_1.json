{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942",
    "test_body": "public void testIssue942() {\nList<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\nlist.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\nAssert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n}\n",
    "stack_trace": "java.lang.ArrayStoreException: org.apache.commons.math3.distribution.DiscreteRealDistributionTest$2\nat org.apache.commons.math3.distribution.DiscreteDistribution.sample(DiscreteDistribution.java:190)\nat org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942(DiscreteRealDistributionTest.java:212)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final List<Pair<T, Double>> samples)\nthis(new Well19937c(), samples);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\ndelegate = new RandomDataGenerator();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:normalizeArray([DD)[D",
            "method_body": "public static double[] normalizeArray(double[] values, double normalizedSum)\nif (Double.isInfinite(normalizedSum)) {\nif (Double.isNaN(normalizedSum)) {\ndouble sum = 0d;\nfinal int len = values.length;\ndouble[] out = new double[len];\nfor (int i = 0; i < len; i++) {\nif (Double.isInfinite(values[i])) {\nif (!Double.isNaN(values[i])) {\nsum += values[i];\nif (sum == 0) {\nfor (int i = 0; i < len; i++) {\nif (Double.isNaN(values[i])) {\nout[i] = values[i] * normalizedSum / sum;\nreturn out;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:next(I)I",
            "method_body": "protected int next(final int bits) {\nfinal int indexRm1 = iRm1[index];\nfinal int indexRm2 = iRm2[index];\nfinal int v0       = v[index];\nfinal int vM1      = v[i1[index]];\nfinal int vM2      = v[i2[index]];\nfinal int vM3      = v[i3[index]];\nfinal int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);\nfinal int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));\nfinal int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));\nfinal int z3 = z1      ^ z2;\nint z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));\nv[index]     = z3;\nv[indexRm1]  = z4;\nv[indexRm2] &= 0x80000000;\nindex        = indexRm1;\nz4 = z4 ^ ((z4 <<  7) & 0xe46e1700);\nz4 = z4 ^ ((z4 << 15) & 0x9b868000);\nreturn z4 >>> (32 - bits);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\nrandom = rng;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)\nthrows NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\nrandom = rng;\nsingletons = new ArrayList<T>(samples.size());\nfinal double[] probs = new double[samples.size()];\nfor (int i = 0; i < samples.size(); i++) {\nfinal Pair<T, Double> sample = samples.get(i);\nsingletons.add(sample.getKey());\nif (sample.getValue() < 0) {\nprobs[i] = sample.getValue();\nprobabilities = MathArrays.normalizeArray(probs, 1.0);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution:<init>([D[D)V",
            "method_body": "public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)\nthis(new Well19937c(), singletons, probabilities);\n}",
            "method_id": 19
        }
    ]
}