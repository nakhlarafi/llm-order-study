{
    "bug_id": 83,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286",
    "test_body": "public void testMath286() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n57: RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\nassertEquals(6.9, solution.getValue(), .0000001);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(SimplexSolverTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getArtificialVariableOffset()I",
            "method_body": "protected final int getArtificialVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(pivotCol, tableau);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nwhile (!isPhase1Solved(tableau)) {\ndoIteration(tableau);\nif (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
            "method_body": "private void initialize() {\nfor (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\nint row = getBasicRow(getArtificialVariableOffset() + artificialVar);\nsubtractRow(0, row, 1.0);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math/optimization/linear/LinearConstraint;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;",
            "method_body": "private LinearConstraint normalize(final LinearConstraint constraint) {\nif (constraint.getValue() < 0) {\nreturn new LinearConstraint(constraint.getCoefficients(),\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getRelationship()Lorg/apache/commons/math/optimization/linear/Relationship;",
            "method_body": "public Relationship getRelationship() {\nreturn relationship;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getHeight()I",
            "method_body": "protected final int getHeight() {\nreturn tableau.getRowDimension();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNormalizedConstraints()Ljava/util/List;",
            "method_body": "public List<LinearConstraint> getNormalizedConstraints() {\nList<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\nfor (LinearConstraint constraint : constraints) {\nnormalized.add(normalize(constraint));\nreturn normalized;\n}",
            "method_id": 49
        }
    ]
}