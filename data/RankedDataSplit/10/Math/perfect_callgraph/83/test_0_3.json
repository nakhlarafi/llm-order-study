{
    "bug_id": 83,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286",
    "test_body": "public void testMath286() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n57: RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\nassertEquals(6.9, solution.getValue(), .0000001);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(SimplexSolverTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumObjectiveFunctions()I",
            "method_body": "protected final int getNumObjectiveFunctions() {\nreturn this.numArtificialVariables > 0 ? 2 : 1;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y) || (Math.abs(y - x) <= eps);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getConstraintTypeCounts(Lorg/apache/commons/math/optimization/linear/Relationship;)I",
            "method_body": "private int getConstraintTypeCounts(final Relationship relationship) {\nint count = 0;\nfor (final LinearConstraint constraint : constraints) {\nif (constraint.getRelationship() == relationship) {\n++count;\nreturn count;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
            "method_body": "protected double[][] createTableau(final boolean maximize) {\nList<LinearConstraint> constraints = getNormalizedConstraints();\nint width = numDecisionVariables + numSlackVariables +\nint height = constraints.size() + getNumObjectiveFunctions();\ndouble[][] matrix = new double[height][width];\nif (getNumObjectiveFunctions() == 2) {\nmatrix[0][0] = -1;\nint zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\nmatrix[zIndex][zIndex] = maximize ? 1 : -1;\nRealVector objectiveCoefficients =\ncopyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\nmatrix[zIndex][width - 1] =\nif (!restrictToNonNegative) {\nint slackVar = 0;\nint artificialVar = 0;\nfor (int i = 0; i < constraints.size(); i++) {\nLinearConstraint constraint = constraints.get(i);\nint row = getNumObjectiveFunctions() + i;\ncopyArray(constraint.getCoefficients().getData(), matrix[row], 1);\nif (!restrictToNonNegative) {\nmatrix[row][width - 1] = constraint.getValue();\nif (constraint.getRelationship() == Relationship.LEQ) {\n} else if (constraint.getRelationship() == Relationship.GEQ) {\nif ((constraint.getRelationship() == Relationship.EQ) ||\nmatrix[0][getArtificialVariableOffset() + artificialVar] = 1;\nmatrix[row][getArtificialVariableOffset() + artificialVar++] = 1;\nreturn matrix;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\ncopyIn(d);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNegativeDecisionVariableOffset()I",
            "method_body": "protected final int getNegativeDecisionVariableOffset() {\nreturn getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "method_id": 39
        }
    ]
}