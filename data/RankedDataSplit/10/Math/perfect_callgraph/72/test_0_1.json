{
    "bug_id": 72,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints",
    "test_body": "public void testRootEndpoints() throws Exception {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealSolver solver = new BrentSolver();\n309: // endpoint is root\ndouble result = solver.solve(f, Math.PI, 4);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n313: result = solver.solve(f, 3, Math.PI);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n316: result = solver.solve(f, Math.PI, 4, 3.5);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n319: result = solver.solve(f, 3, Math.PI, 3.07);\nassertEquals(Math.PI, result, solver.getAbsoluteAccuracy());\n322: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<1.2246467991473532E-16>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.Assert.assertEquals(Assert.java:129)\nat junit.framework.TestCase.assertEquals(TestCase.java:288)\nat org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints(BrentSolverTest.java:317)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:isSequence(DDD)Z",
            "method_body": "protected boolean isSequence(final double start, final double mid, final double end) {\nreturn (start < mid) && (mid < end);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
            "method_body": "private double solve(final UnivariateRealFunction f,\ndouble delta = x1 - x0;\ndouble oldDelta = delta;\nint i = 0;\nwhile (i < maximalIterationCount) {\nif (Math.abs(y2) < Math.abs(y1)) {\nx0 = x1;\nx1 = x2;\nx2 = x0;\ny0 = y1;\ny1 = y2;\ny2 = y0;\nif (Math.abs(y1) <= functionValueAccuracy) {\nsetResult(x1, i);\nreturn result;\n}",
            "method_id": 11
        }
    ]
}