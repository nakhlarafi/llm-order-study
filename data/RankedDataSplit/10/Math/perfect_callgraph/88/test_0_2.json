{
    "bug_id": 88,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272",
    "test_body": "public void testMath272() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n42: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n45: assertEquals(0.0, solution.getPoint()[0], .0000001);\nassertEquals(1.0, solution.getPoint()[1], .0000001);\nassertEquals(1.0, solution.getPoint()[2], .0000001);\nassertEquals(3.0, solution.getValue(), .0000001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272(SimplexSolverTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()V",
            "method_body": "protected void discardArtificialVariables() {\nif (numArtificialVariables == 0) {\nint width = getWidth() - numArtificialVariables - 1;\nint height = getHeight() - 1;\ndouble[][] matrix = new double[height][width];\nfor (int i = 0; i < height; i++) {\nfor (int j = 0; j < width - 1; j++) {\nmatrix[i][j] = getEntry(i + 1, j + 1);\nmatrix[i][width - 1] = getEntry(i + 1, getRhsOffset());\nthis.tableau = new RealMatrixImpl(matrix);\nthis.numArtificialVariables = 0;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:isPhase1Solved(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
            "method_body": "private boolean isPhase1Solved(final SimplexTableau tableau) {\nif (tableau.getNumArtificialVariables() == 0) {\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getRelationship()Lorg/apache/commons/math/optimization/linear/Relationship;",
            "method_body": "public Relationship getRelationship() {\nreturn relationship;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getConstraintTypeCounts(Lorg/apache/commons/math/optimization/linear/Relationship;)I",
            "method_body": "private int getConstraintTypeCounts(final Relationship relationship) {\nint count = 0;\nfor (final LinearConstraint constraint : constraints) {\nif (constraint.getRelationship() == relationship) {\n++count;\nreturn count;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\nthis.point = point.clone();\nthis.value  = value;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getRhsOffset()I",
            "method_body": "protected final int getRhsOffset() {\nreturn getWidth() - 1;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\ndouble minRatio = Double.MAX_VALUE;\nInteger minRatioPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\ndouble rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nif (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {\ndouble ratio = rhs / tableau.getEntry(i, col);\nif (ratio < minRatio) {\nminRatio = ratio;\nminRatioPos = i;\nreturn minRatioPos;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotColumn(SimplexTableau tableau) {\ndouble minValue = 0;\nInteger minPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\nminValue = tableau.getEntry(0, i);\nminPos = i;\nreturn minPos;\n}",
            "method_id": 29
        }
    ]
}