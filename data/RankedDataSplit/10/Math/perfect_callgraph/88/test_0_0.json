{
    "bug_id": 88,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272",
    "test_body": "public void testMath272() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n42: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n45: assertEquals(0.0, solution.getPoint()[0], .0000001);\nassertEquals(1.0, solution.getPoint()[1], .0000001);\nassertEquals(1.0, solution.getPoint()[2], .0000001);\nassertEquals(3.0, solution.getValue(), .0000001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272(SimplexSolverTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "protected RealPointValuePair getSolution() {\ndouble[] coefficients = new double[getOriginalNumDecisionVariables()];\nInteger basicRow =\ndouble mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\nfor (int i = 0; i < coefficients.length; i++) {\nbasicRow = getBasicRow(getNumObjectiveFunctions() + i);\ncoefficients[i] =\nif (basicRow != null) {\nfor (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\nif (tableau.getEntry(basicRow, j) == 1) {\ncoefficients[i] = 0;\nreturn new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:<init>([D)V",
            "method_body": "public RealVectorImpl(double[] d) {\ndata = d.clone();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>(D)V",
            "method_body": "public SimplexSolver(final double epsilon) {\nthis.epsilon = epsilon;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:<init>()V",
            "method_body": "protected AbstractLinearOptimizer() {\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getPoint()[D",
            "method_body": "public double[] getPoint() {\nreturn point.clone();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new RealVectorImpl(coefficients), constantTerm);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:<init>(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;ZD)V",
            "method_body": "SimplexTableau(final LinearObjectiveFunction f,\nfinal double epsilon) {\nthis.f                      = f;\nthis.constraints            = constraints;\nthis.restrictToNonNegative  = restrictToNonNegative;\nthis.epsilon                = epsilon;\nthis.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\nthis.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\nthis.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\nthis.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));\ninitialize();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getCoefficients()Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 9
        }
    ]
}