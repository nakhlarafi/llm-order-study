{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",
    "test_body": "public void testMath781() {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n36: ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\nconstraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\nconstraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n41: double epsilon = 1e-6;\nSimplexSolver solver = new SimplexSolver();\nPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n45: Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\nAssert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781(SimplexSolverTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:initializeColumnLabels()V",
            "method_body": "protected void initializeColumnLabels() {\nif (getNumObjectiveFunctions() == 2) {\ncolumnLabels.add(\"W\");\ncolumnLabels.add(\"Z\");\nfor (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\ncolumnLabels.add(\"x\" + i);\nif (!restrictToNonNegative) {\ncolumnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);\nfor (int i = 0; i < getNumSlackVariables(); i++) {\ncolumnLabels.add(\"s\" + i);\nfor (int i = 0; i < getNumArtificialVariables(); i++) {\ncolumnLabels.add(\"a\" + i);\ncolumnLabels.add(\"RHS\");\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getInvertedCoefficientSum(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "protected static double getInvertedCoefficientSum(final RealVector coefficients) {\ndouble sum = 0;\nfor (double coefficient : coefficients.toArray()) {\nsum -= coefficient;\nreturn sum;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:getFunction()Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;",
            "method_body": "protected LinearObjectiveFunction getFunction() {\nreturn function;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:<init>(Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optimization/GoalType;ZDI)V",
            "method_body": "SimplexTableau(final LinearObjectiveFunction f,\nfinal int maxUlps) {\nthis.f                      = f;\nthis.constraints            = normalizeConstraints(constraints);\nthis.restrictToNonNegative  = restrictToNonNegative;\nthis.epsilon                = epsilon;\nthis.maxUlps                = maxUlps;\nthis.numDecisionVariables   = f.getCoefficients().getDimension() +\nthis.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\nthis.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\nthis.tableau = createTableau(goalType == GoalType.MAXIMIZE);\ninitializeColumnLabels();\n}",
            "method_id": 59
        }
    ]
}