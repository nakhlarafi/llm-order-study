{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855",
    "test_body": "public void testMath855() {\nfinal double minSin = 3 * Math.PI / 2;\nfinal double offset = 1e-8;\nfinal double delta = 1e-7;\nfinal UnivariateFunction f1 = new Sin();\nfinal UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\nnew double[] { 0, -1, 0 });\nfinal UnivariateFunction f = FunctionUtils.add(f1, f2);\nfinal UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\nfinal UnivariatePointValuePair result\n= optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\nfinal int numEval = optimizer.getEvaluations();\n206: final double sol = result.getPoint();\nfinal double expected = 4.712389027602411;\n209: // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n// System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n// System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n213: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855(BrentOptimizerTest.java:213)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getMax()D",
            "method_body": "public double getMax() {\nreturn searchMax;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<UnivariatePointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.FunctionUtils$4:<init>([Lorg/apache/commons/math3/analysis/UnivariateFunction;)V",
            "method_body": "public static UnivariateFunction add(final UnivariateFunction ... f) {\nreturn new UnivariateFunction() {\ndouble r = f[0].value(x);\nfor (int i = 1; i < f.length; i++) {\nr += f[i].value(x);\nreturn r;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\ndouble p = 2.479773539153719E-5;\np = p * x2 + -0.0013888888689039883;\np = p * x2 + 0.041666666666621166;\np = p * x2 + -0.49999999999999994;\np *= x2;\nreturn p;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\nint quadrant = 0;\ndouble xb = 0.0;\nxa = x;\nif (x < 0) {\nif (xa == 0.0) {\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nfinal CodyWaite cw = new CodyWaite(xa, xb);\nquadrant = cw.getK() & 3;\nxa = cw.getRemA();\nxb = cw.getRemB();\nif (negative) {\nswitch (quadrant) {\nreturn -sinQ(xa, xb);\nreturn -cosQ(xa, xb);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DDD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair optimize(int maxEval, UnivariateFunction f,\nif (f == null) {\nif (goalType == null) {\nsearchMin = min;\nsearchMax = max;\nsearchStart = startValue;\ngoal = goalType;\nfunction = f;\nevaluations.setMaximalCount(maxEval);\nevaluations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.StepFunction:<init>([D[D)V",
            "method_body": "public StepFunction(double[] x,\nDimensionMismatchException {\nif (x == null ||\nif (x.length == 0 ||\nif (y.length != x.length) {\nMathArrays.checkOrder(x);\nabscissa = MathArrays.copyOf(x);\nordinate = MathArrays.copyOf(y);\n}",
            "method_id": 46
        }
    ]
}