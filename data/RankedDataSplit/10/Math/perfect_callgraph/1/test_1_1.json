{
    "bug_id": 1,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor",
    "test_body": "public void testDigitLimitConstructor() throws ConvergenceException {\nassertFraction(2, 5, new BigFraction(0.4, 9));\nassertFraction(2, 5, new BigFraction(0.4, 99));\nassertFraction(2, 5, new BigFraction(0.4, 999));\n153: assertFraction(3, 5, new BigFraction(0.6152, 9));\nassertFraction(8, 13, new BigFraction(0.6152, 99));\nassertFraction(510, 829, new BigFraction(0.6152, 999));\nassertFraction(769, 1250, new BigFraction(0.6152, 9999));\n158: // MATH-996\nassertFraction(1, 2, new BigFraction(0.5000000001, 10));\n}\n",
    "stack_trace": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)\nat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:306)\nat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:356)\nat org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor(BigFractionTest.java:159)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn x*y;\nreturn y;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\nmsgArguments.add(ArgUtils.flatten(arguments));\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\nif (array != null) {\nfor (Object o : array) {\nif (o instanceof Object[]) {\nlist.add(o);\nreturn list.toArray();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.exception.ConvergenceException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern,\nObject ... args) {\ngetContext().addMessage(pattern, args);\n}",
            "method_id": 13
        }
    ]
}