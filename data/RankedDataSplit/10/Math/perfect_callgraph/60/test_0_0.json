{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "public void testExtremeValues() throws Exception {\nNormalDistribution distribution = new NormalDistributionImpl(0, 1);\nfor (int i = 0; i < 100; i++) { // make sure no convergence exception\ndouble lowerTail = distribution.cumulativeProbability(-i);\ndouble upperTail = distribution.cumulativeProbability(i);\nif (i < 9) { // make sure not top-coded \n// For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n// TODO: once MATH-364 is resolved, replace 9 with 30\nassertTrue(lowerTail > 0.0d);\nassertTrue(upperTail < 1.0d);\n}\nelse { // make sure top coding not reversed\nassertTrue(lowerTail < 0.00001);\nassertTrue(upperTail > 0.99999);\n}\n}\n174: assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\nassertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);",
    "stack_trace": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e\nat org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)\nat org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)\nat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)\nat org.apache.commons.math.special.Erf.erf(Erf.java:51)\nat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)\nat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nfinal double dev = x - mean;\nreturn 0.5 * (1.0 + Erf.erf((dev) /\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DDD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\nif (sd <= 0) {\nthis.mean = mean;\nstandardDeviation = sd;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nsum = sum + LANCZOS[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathException(Localizable pattern, Object ... arguments) {\nthis.pattern   = pattern;\nthis.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) throws MathException {\ndouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\nif (x < 0) {\nret = -ret;\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 9
        }
    ]
}