{
    "bug_id": 82,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath288",
    "test_body": "public void testMath288() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n71: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\nassertEquals(10.0, solution.getValue(), .0000001);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<11.5>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath288(SimplexSolverTest.java:73)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\ndouble minRatio = Double.MAX_VALUE;\nInteger minRatioPos = null;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\nfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nfinal double entry = tableau.getEntry(i, col);\nif (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\nfinal double ratio = rhs / entry;\nif (ratio < minRatio) {\nminRatio = ratio;\nminRatioPos = i;\nreturn minRatioPos;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\ndata = d.clone();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>(D)V",
            "method_body": "public SimplexSolver(final double epsilon) {\nthis.epsilon = epsilon;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:<init>()V",
            "method_body": "protected AbstractLinearOptimizer() {\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\nif (data == null) {\nif (row > 0) {\nif (column > 0) {\nfinal int nRows = subMatrix.length;\nif (nRows == 0) {\nfinal int nCols = subMatrix[0].length;\nif (nCols == 0) {\ndata = new double[subMatrix.length][nCols];\nfor (int i = 0; i < data.length; ++i) {\nif (subMatrix[i].length != nCols) {\nSystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n} else {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNegativeDecisionVariableOffset()I",
            "method_body": "protected final int getNegativeDecisionVariableOffset() {\nreturn getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:<init>(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;ZD)V",
            "method_body": "SimplexTableau(final LinearObjectiveFunction f,\nfinal double epsilon) {\nthis.f                      = f;\nthis.constraints            = constraints;\nthis.restrictToNonNegative  = restrictToNonNegative;\nthis.epsilon                = epsilon;\nthis.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\nthis.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\nthis.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\nthis.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));\ninitialize();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getCoefficients()Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new ArrayRealVector(coefficients), constantTerm);\n}",
            "method_id": 9
        }
    ]
}