{
    "bug_id": 85,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testMath280",
    "test_body": "public void testMath280() throws MathException {\nNormalDistribution normal = new NormalDistributionImpl(0,1);\ndouble result = normal.inverseCumulativeProbability(0.9772498680518209);\nassertEquals(2.0, result, 1.0e-12);",
    "stack_trace": "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0\nat org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:104)\nat org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:162)\nat org.apache.commons.math.distribution.NormalDistributionTest.testMath280(NormalDistributionTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D",
            "method_body": "public static double[] bracket(UnivariateRealFunction function,\nif (function == null) {\nif (maximumIterations <= 0)  {\nif (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\ndouble a = initial;\ndouble b = initial;\nint numIterations = 0 ;\na = Math.max(a - 1.0, lowerBound);\nb = Math.min(b + 1.0, upperBound);\nfa = function.value(a);\nfb = function.value(b);\nnumIterations++ ;\n} while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\nif (fa * fb >= 0.0 ) {\nthrow new ConvergenceException(\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nsuper();\nsetMean(mean);\nsetStandardDeviation(sd);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:setStandardDeviation(D)V",
            "method_body": "public void setStandardDeviation(double sd) {\nif (sd <= 0.0) {\nstandardDeviation = sd;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\nsum = sum + lanczos[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) throws MathException {\ndouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\nif (x < 0) {\nreturn ret;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\nif (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n} catch (MissingResourceException mre) {\nreturn s;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public MathException(Throwable rootCause) {\nsuper(rootCause);\nthis.pattern   = getMessage();\nthis.arguments = new Object[0];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:getMean()D",
            "method_body": "public double getMean() {\nreturn mean;\n}",
            "method_id": 9
        }
    ]
}