{
    "bug_id": 73,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints",
    "test_body": "public void testBadEndpoints() throws Exception {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealSolver solver = new BrentSolver();\ntry {  // bad interval\nsolver.solve(f, 1, -1);\nfail(\"Expecting IllegalArgumentException - bad interval\");\n} catch (IllegalArgumentException ex) {\n// expected\n}\ntry {  // no bracket\nsolver.solve(f, 1, 1.5);\nfail(\"Expecting IllegalArgumentException - non-bracketing\");\n} catch (IllegalArgumentException ex) {\n// expected\n}\ntry {  // no bracket\nsolver.solve(f, 1, 1.5, 1.2);\nfail(\"Expecting IllegalArgumentException - non-bracketing\");\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError: Expecting IllegalArgumentException - non-bracketing\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints(BrentSolverTest.java:334)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
            "method_body": "private double solve(final UnivariateRealFunction f,\ndouble delta = x1 - x0;\ndouble oldDelta = delta;\nint i = 0;\nwhile (i < maximalIterationCount) {\nif (Math.abs(y2) < Math.abs(y1)) {\nx0 = x1;\nx1 = x2;\nx2 = x0;\ny0 = y1;\ny1 = y2;\ny2 = y0;\nif (Math.abs(y1) <= functionValueAccuracy) {\ndouble dx = x2 - x1;\ndouble tolerance =\nif (Math.abs(dx) <= tolerance) {\nsetResult(x1, i);\nreturn result;\nif ((Math.abs(oldDelta) < tolerance) ||\ndouble r3 = y1 / y0;\nif (x0 == x2) {\np = dx * r3;\np1 = 1.0 - r3;\nif (p > 0.0) {\np1 = -p1;\nif (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\ndelta = 0.5 * dx;\noldDelta = delta;\nx0 = x1;\ny0 = y1;\nif (Math.abs(delta) > tolerance) {\nx1 = x1 + delta;\n} else if (dx > 0.0) {\nx1 = x1 + 0.5 * tolerance;\ny1 = f.value(x1);\nif ((y1 > 0) == (y2 > 0)) {\nx2 = x0;\ny2 = y0;\ndelta = x1 - x0;\noldDelta = delta;\ni++;\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:isSequence(DDD)Z",
            "method_body": "protected boolean isSequence(final double start, final double mid, final double end) {\nreturn (start < mid) && (mid < end);\n}",
            "method_id": 12
        }
    ]
}