{
    "bug_id": 56,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency",
    "test_body": "public void testIterationConsistency() {\nfinal MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);\nfinal int[][] expected = new int[][] {\n{ 0, 0, 0 },\n{ 0, 0, 1 },\n{ 0, 0, 2 },\n{ 0, 0, 3 },\n{ 0, 1, 0 },\n{ 0, 1, 1 },\n{ 0, 1, 2 },\n{ 0, 1, 3 },\n{ 0, 2, 0 },\n{ 0, 2, 1 },\n{ 0, 2, 2 },\n{ 0, 2, 3 },\n{ 1, 0, 0 },\n{ 1, 0, 1 },\n{ 1, 0, 2 },\n{ 1, 0, 3 },\n{ 1, 1, 0 },\n{ 1, 1, 1 },\n{ 1, 1, 2 },\n{ 1, 1, 3 },\n{ 1, 2, 0 },\n{ 1, 2, 1 },\n{ 1, 2, 2 },\n{ 1, 2, 3 }\n};\n152: final int totalSize = c.getSize();\nfinal int nDim = c.getDimension();\nfinal MultidimensionalCounter.Iterator iter = c.iterator();\nfor (int i = 0; i < totalSize; i++) {\nif (!iter.hasNext()) {\nAssert.fail(\"Too short\");\n}\nfinal int uniDimIndex = iter.next();\nAssert.assertEquals(\"Wrong iteration at \" + i, i, uniDimIndex);\n162: for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\nAssert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\nexpected[i][dimIndex], iter.getCount(dimIndex));\n}\n167: Assert.assertEquals(\"Wrong unidimensional index for [\" + i + \"]\",\nc.getCount(expected[i]), uniDimIndex);\n170: final int[] indices = c.getCounts(uniDimIndex);\nfor (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\nAssert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\nexpected[i][dimIndex], indices[dimIndex]);",
    "stack_trace": "junit.framework.AssertionFailedError: Wrong multidimensional index for [3][2] expected:<3> but was:<2>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(MultidimensionalCounterTest.java:172)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:copyOf([I)[I",
            "method_body": "public static int[] copyOf(int[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter$Iterator:getCount(I)I",
            "method_body": "public int getCount(int dim) {\nreturn counter[dim];\n}",
            "method_id": 12
        }
    ]
}