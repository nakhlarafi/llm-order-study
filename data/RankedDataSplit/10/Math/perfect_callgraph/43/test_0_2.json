{
    "bug_id": 43,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest.testOverrideVarianceWithMathClass",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.25> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideVarianceWithMathClass(SummaryStatisticsTest.java:324)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DII)Z",
            "method_body": "public abstract UnivariateStatistic copy();\nreturn test(values, begin, length, false);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>(Z)V",
            "method_body": "public Variance(boolean isBiasCorrected) {\nmoment = new SecondMoment();\nthis.isBiasCorrected = isBiasCorrected;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D)D",
            "method_body": "public double evaluate(final double[] values) {\nif (values == null) {\nreturn evaluate(values, 0, values.length);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:getResult()D",
            "method_body": "public double getResult() {\nif (moment.n == 0) {\nreturn Double.NaN;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (n == 0) {\nm1 = 0.0;\nn++;\ndouble n0 = n;\ndev = d - m1;\nnDev = dev / n0;\nm1 += nDev;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Max:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (d > value || Double.isNaN(value)) {\nvalue = d;\nn++;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Min:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (d < value || Double.isNaN(value)) {\nvalue = d;\nn++;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:clear()V",
            "method_body": "public void clear() {\nm1 = Double.NaN;\nn = 0;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:getVariance()D",
            "method_body": "public double getVariance() {\nreturn varianceImpl.getResult();\n}",
            "method_id": 29
        }
    ]
}