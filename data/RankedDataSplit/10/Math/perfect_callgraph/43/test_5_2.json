{
    "bug_id": 43,
    "test_id": 5,
    "test_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideVarianceWithMathClass",
    "test_body": "public void testOverrideVarianceWithMathClass() throws Exception {\ndouble[] scores = {1, 2, 3, 4};\nSummaryStatistics stats = new SummaryStatistics();\nstats.setVarianceImpl(new Variance(false)); //use \"population variance\"\nfor(double i : scores) {\nstats.addValue(i);\n}\nAssert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); \n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.25> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.stat.descriptive.SummaryStatisticsTest.testOverrideVarianceWithMathClass(SummaryStatisticsTest.java:324)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble sum = Double.NaN;\nif (test(values, begin, length, true)) {\nsum = 0.0;\nfor (int i = begin; i < begin + length; i++) {\nsum += values[i];\nreturn sum;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:<init>(Lorg/apache/commons/math/stat/descriptive/moment/FirstMoment;)V",
            "method_body": "public Mean(final FirstMoment m1) {\nthis.moment = m1;\nincMoment = false;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble var = Double.NaN;\nif (test(values, begin, length)) {\nclear();\nif (length == 1) {\n} else if (length > 1) {\nMean mean = new Mean();\ndouble m = mean.evaluate(values, begin, length);\nvar = evaluate(values, m, begin, length);\nreturn var;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DIIZ)Z",
            "method_body": "protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){\nif (values == null) {\nif (begin < 0) {\nif (length < 0) {\nif (begin + length > values.length) {\nif (length == 0 && !allowEmpty) {\nreturn true;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DII)Z",
            "method_body": "public abstract UnivariateStatistic copy();\nreturn test(values, begin, length, false);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>(Z)V",
            "method_body": "public Variance(boolean isBiasCorrected) {\nmoment = new SecondMoment();\nthis.isBiasCorrected = isBiasCorrected;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D)D",
            "method_body": "public double evaluate(final double[] values) {\nif (values == null) {\nreturn evaluate(values, 0, values.length);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:getResult()D",
            "method_body": "public double getResult() {\nif (moment.n == 0) {\nreturn Double.NaN;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:increment(D)V",
            "method_body": "public void increment(final double d) {\nif (n == 0) {\nm1 = 0.0;\nn++;\ndouble n0 = n;\ndev = d - m1;\nnDev = dev / n0;\nm1 += nDev;\n}",
            "method_id": 29
        }
    ]
}