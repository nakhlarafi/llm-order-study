{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle",
    "test_body": "public void testMath828Cycle() {\nLinearObjectiveFunction f = new LinearObjectiveFunction(\nnew double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);\n59: ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();\n61: constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));\nconstraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));\nconstraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));\nconstraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));\nconstraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));\n69: double epsilon = 1e-6;\nPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);\nAssert.assertEquals(1.0d, solution.getValue(), epsilon);",
    "stack_trace": "org.apache.commons.math3.exception.MaxCountExceededException: illegal state: maximal count (100) exceeded\nat org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter(AbstractLinearOptimizer.java:128)\nat org.apache.commons.math3.optimization.linear.SimplexSolver.doIteration(SimplexSolver.java:165)\nat org.apache.commons.math3.optimization.linear.SimplexSolver.doOptimize(SimplexSolver.java:227)\nat org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.optimize(AbstractLinearOptimizer.java:147)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle(SimplexSolverTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
            "method_body": "boolean isOptimal() {\nfor (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {\nfinal double entry = tableau.getEntry(0, i);\nif (Precision.compareTo(entry, 0d, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\nsuper(rowDimension, columnDimension);\ndata = new double[rowDimension][columnDimension];\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows DimensionMismatchException, NoDataException, NullArgumentException {\ncopyIn(d);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getNumObjectiveFunctions()I",
            "method_body": "protected final int getNumObjectiveFunctions() {\nreturn this.numArtificialVariables > 0 ? 2 : 1;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:getGoalType()Lorg/apache/commons/math3/optimization/GoalType;",
            "method_body": "protected GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn f.getCoefficients().getDimension();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getSlackVariableOffset()I",
            "method_body": "protected final int getSlackVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:restrictToNonNegative()Z",
            "method_body": "protected boolean restrictToNonNegative() {\nreturn nonNegative;\n}",
            "method_id": 19
        }
    ]
}