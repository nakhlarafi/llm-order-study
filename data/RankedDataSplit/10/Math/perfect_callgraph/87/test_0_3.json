{
    "bug_id": 87,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint",
    "test_body": "public void testSingleVariableAndConstraint() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n73: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\nassertEquals(10.0, solution.getPoint()[0], 0.0);\nassertEquals(30.0, solution.getValue(), 0.0);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint(SimplexSolverTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getConstantTerm()D",
            "method_body": "public double getConstantTerm() {\nreturn constantTerm;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>([[D)V",
            "method_body": "public RealMatrixImpl(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\ncopyIn(d);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:getData()[D",
            "method_body": "public double[] getData() {\nreturn data.clone();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getInvertedCoeffiecientSum(Lorg/apache/commons/math/linear/RealVector;)D",
            "method_body": "protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {\ndouble sum = 0;\nfor (double coefficient : coefficients.getData()) {\nsum -= coefficient;\nreturn sum;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:getDimension()I",
            "method_body": "public int getDimension() {\nreturn data.length;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNormalizedConstraints()Ljava/util/List;",
            "method_body": "public List<LinearConstraint> getNormalizedConstraints() {\nList<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\nfor (LinearConstraint constraint : constraints) {\nnormalized.add(normalize(constraint));\nreturn normalized;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
            "method_body": "protected double[][] createTableau(final boolean maximize) {\nList<LinearConstraint> constraints = getNormalizedConstraints();\nint width = numDecisionVariables + numSlackVariables +\nint height = constraints.size() + getNumObjectiveFunctions();\ndouble[][] matrix = new double[height][width];\nif (getNumObjectiveFunctions() == 2) {\nint zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\nmatrix[zIndex][zIndex] = maximize ? 1 : -1;\nRealVector objectiveCoefficients =\ncopyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\nmatrix[zIndex][width - 1] =\nif (!restrictToNonNegative) {\nmatrix[zIndex][getSlackVariableOffset() - 1] =\nint slackVar = 0;\nint artificialVar = 0;\nfor (int i = 0; i < constraints.size(); i++) {\nLinearConstraint constraint = constraints.get(i);\nint row = getNumObjectiveFunctions() + i;\ncopyArray(constraint.getCoefficients().getData(), matrix[row], 1);\nif (!restrictToNonNegative) {\nmatrix[row][getSlackVariableOffset() - 1] =\nmatrix[row][width - 1] = constraint.getValue();\nif (constraint.getRelationship() == Relationship.LEQ) {\nmatrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack\nif ((constraint.getRelationship() == Relationship.EQ) ||\nreturn matrix;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 39
        }
    ]
}