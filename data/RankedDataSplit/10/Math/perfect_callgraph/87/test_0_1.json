{
    "bug_id": 87,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint",
    "test_body": "public void testSingleVariableAndConstraint() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n73: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\nassertEquals(10.0, solution.getPoint()[0], 0.0);\nassertEquals(30.0, solution.getValue(), 0.0);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint(SimplexSolverTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new RealVectorImpl(coefficients), constantTerm);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getCoefficients()Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:dotProduct([D)D",
            "method_body": "public double dotProduct(double[] v)\ncheckVectorDimensions(v.length);\ndouble dot = 0;\nfor (int i = 0; i < data.length; i++) {\ndot += data[i] * v[i];\nreturn dot;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:subtractRow(IID)V",
            "method_body": "protected void subtractRow(final int minuendRow, final int subtrahendRow,\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumVariables()I",
            "method_body": "public int getNumVariables() {\nreturn f.getCoefficients().getDimension();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:<init>(Lorg/apache/commons/math/linear/RealVector;D)V",
            "method_body": "public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\nthis.coefficients = coefficients;\nthis.constantTerm = constantTerm;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorImpl:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n)\nif (data.length != n) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getWidth()I",
            "method_body": "protected final int getWidth() {\nreturn tableau.getColumnDimension();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D",
            "method_body": "public double getValue(final double[] point) {\nreturn coefficients.dotProduct(point) + constantTerm;\n}",
            "method_id": 19
        }
    ]
}