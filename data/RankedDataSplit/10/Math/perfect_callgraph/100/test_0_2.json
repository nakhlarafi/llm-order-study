{
    "bug_id": 100,
    "test_id": 0,
    "test_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",
    "test_body": "public void testBoundParameters() throws EstimationException {\nEstimatedParameter[] p = {\nnew EstimatedParameter(\"unbound0\", 2, false),\nnew EstimatedParameter(\"unbound1\", 2, false),\nnew EstimatedParameter(\"bound\",    2, true)\n};\nLinearProblem problem = new LinearProblem(new LinearMeasurement[] {\nnew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n3.0),\nnew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n1.0),\nnew LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n7.0)\n});\n469: GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\nestimator.estimate(problem);\nassertTrue(estimator.getRMS(problem) < 1.0e-10);\ndouble[][] covariances = estimator.getCovariances(problem);\nint i0 = 0, i1 = 1;",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 6\nat org.apache.commons.math.estimation.AbstractEstimator.getCovariances(AbstractEstimator.java:173)\nat org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters(GaussNewtonEstimatorTest.java:472)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:<init>(DDZ)V",
            "method_body": "public WeightedMeasurement(double weight, double measuredValue,\nboolean ignored) {\nthis.weight        = weight;\nthis.measuredValue = measuredValue;\nthis.ignored       = ignored;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:<init>(Ljava/lang/String;DZ)V",
            "method_body": "public EstimatedParameter(String name,\nboolean bound) {\nthis.name  = name;\nestimate   = firstEstimate;\nthis.bound = bound;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(double[][] subMatrix, int row, int column)\nif ((row < 0) || (column < 0)){\nint nRows = subMatrix.length;\nif (nRows == 0) {\nint nCols = subMatrix[0].length;\nif (nCols == 0) {\nfor (int r = 1; r < nRows; r++) {\nif (subMatrix[r].length != nCols) {\nif (data == null) {\nif ((row > 0)||(column > 0)) throw new MatrixIndexException\ndata = new double[nRows][nCols];\nSystem.arraycopy(subMatrix, 0, data, 0, subMatrix.length);\nif (((nRows + row) > this.getRowDimension()) ||\nfor (int i = 0; i < nRows; i++) {\nSystem.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\nlu = null;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:add(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\nif (this.getColumnDimension() != m.getColumnDimension() ||\nint rowCount = this.getRowDimension();\nint columnCount = this.getColumnDimension();\ndouble[][] outData = new double[rowCount][columnCount];\nfor (int row = 0; row < rowCount; row++) {\nfor (int col = 0; col < columnCount; col++) {\noutData[row][col] = data[row][col] + m.getEntry(row, col);\nreturn new RealMatrixImpl(outData);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getAllParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
            "method_body": "public EstimatedParameter[] getAllParameters() {\nreturn (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn data[0].length;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:isIgnored()Z",
            "method_body": "public boolean isIgnored() {\nreturn ignored;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:isValidCoordinate(II)Z",
            "method_body": "private boolean isValidCoordinate(int row, int col) {\nint nRows = this.getRowDimension();\nint nCols = this.getColumnDimension();\nreturn !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:incrementJacobianEvaluationsCounter()V",
            "method_body": "protected final void incrementJacobianEvaluationsCounter() {\n++jacobianEvaluations;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:getEstimate()D",
            "method_body": "public double getEstimate() {\nreturn estimate;\n}",
            "method_id": 29
        }
    ]
}