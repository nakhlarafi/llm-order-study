{
    "bug_id": 57,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances",
    "test_body": "public void testSmallDistances() {\n// Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n// small distance.\nint[] repeatedArray = { 0 };\nint[] uniqueArray = { 1 };\nCloseIntegerPoint repeatedPoint =\nnew CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\nCloseIntegerPoint uniquePoint =\nnew CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n225: Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\nfinal int NUM_REPEATED_POINTS = 10 * 1000;\nfor (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\npoints.add(repeatedPoint);\n}\npoints.add(uniquePoint);\n232: // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n// cluster centers).\nfinal long RANDOM_SEED = 0;\nfinal int NUM_CLUSTERS = 2;\nfinal int NUM_ITERATIONS = 0;\nKMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\nnew KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\nList<Cluster<CloseIntegerPoint>> clusters =\nclusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n242: // Check that one of the chosen centers is the unique point.\nboolean uniquePointIsCenter = false;\nfor (Cluster<CloseIntegerPoint> cluster : clusters) {\nif (cluster.getCenter().equals(uniquePoint)) {\nuniquePointIsCenter = true;\n}\n}\nassertTrue(uniquePointIsCenter);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances(KMeansPlusPlusClustererTest.java:249)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
            "method_body": "private static <T extends Clusterable<T>> List<Cluster<T>>\nfinal List<T> pointSet = new ArrayList<T>(points);\nfinal List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\nfinal T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\nresultSet.add(new Cluster<T>(firstPoint));\nfinal double[] dx2 = new double[pointSet.size()];\nwhile (resultSet.size() < k) {\nint sum = 0;\nfor (int i = 0; i < pointSet.size(); i++) {\nfinal T p = pointSet.get(i);\nfinal Cluster<T> nearest = getNearestCluster(resultSet, p);\nfinal double d = p.distanceFrom(nearest.getCenter());\nsum += d * d;\ndx2[i] = sum;\nfinal double r = random.nextDouble() * sum;\nfor (int i = 0 ; i < dx2.length; i++) {\nif (dx2[i] >= r) {\nfinal T p = pointSet.remove(i);\nresultSet.add(new Cluster<T>(p));\nbreak;\n}\nreturn resultSet;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:<init>([I)V",
            "method_body": "public EuclideanIntegerPoint(final int[] point) {\nthis.point = point;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object other) {\nif (!(other instanceof EuclideanIntegerPoint)) {\nfinal int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();\nif (point.length != otherPoint.length) {\nfor (int i = 0; i < point.length; i++) {\nif (point[i] != otherPoint[i]) {\nreturn false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:getCenter()Lorg/apache/commons/math/stat/clustering/Clusterable;",
            "method_body": "public T getCenter() {\nreturn center;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random) {\nthis(random, EmptyClusterStrategy.LARGEST_VARIANCE);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:distance([I[I)D",
            "method_body": "public static double distance(int[] p1, int[] p2) {\ndouble sum = 0;\nfor (int i = 0; i < p1.length; i++) {\nfinal double dp = p1[i] - p2[i];\nsum += dp * dp;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
            "method_body": "private static <T extends Clusterable<T>> void\nfor (final T p : points) {\nCluster<T> cluster = getNearestCluster(clusters, p);\ncluster.addPoint(p);\n}\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:getPoint()[I",
            "method_body": "public int[] getPoint() {\nreturn point;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;Lorg/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer$EmptyClusterStrategy;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\nthis.random        = random;\nthis.emptyStrategy = emptyStrategy;\n}",
            "method_id": 9
        }
    ]
}