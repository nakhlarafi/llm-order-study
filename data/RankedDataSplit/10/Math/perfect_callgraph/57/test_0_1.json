{
    "bug_id": 57,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances",
    "test_body": "public void testSmallDistances() {\n// Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n// small distance.\nint[] repeatedArray = { 0 };\nint[] uniqueArray = { 1 };\nCloseIntegerPoint repeatedPoint =\nnew CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\nCloseIntegerPoint uniquePoint =\nnew CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n225: Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\nfinal int NUM_REPEATED_POINTS = 10 * 1000;\nfor (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\npoints.add(repeatedPoint);\n}\npoints.add(uniquePoint);\n232: // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n// cluster centers).\nfinal long RANDOM_SEED = 0;\nfinal int NUM_CLUSTERS = 2;\nfinal int NUM_ITERATIONS = 0;\nKMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\nnew KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\nList<Cluster<CloseIntegerPoint>> clusters =\nclusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n242: // Check that one of the chosen centers is the unique point.\nboolean uniquePointIsCenter = false;\nfor (Cluster<CloseIntegerPoint> cluster : clusters) {\nif (cluster.getCenter().equals(uniquePoint)) {\nuniquePointIsCenter = true;\n}\n}\nassertTrue(uniquePointIsCenter);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances(KMeansPlusPlusClustererTest.java:249)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
            "method_body": "public double distanceFrom(final EuclideanIntegerPoint p) {\nreturn MathUtils.distance(point, p.getPoint());\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
            "method_body": "public List<Cluster<T>> cluster(final Collection<T> points,\nList<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\nassignPointsToClusters(clusters, points);\nfinal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\nfor (int count = 0; count < max; count++) {\nreturn clusters;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:getNearestCluster(Ljava/util/Collection;Lorg/apache/commons/math/stat/clustering/Clusterable;)Lorg/apache/commons/math/stat/clustering/Cluster;",
            "method_body": "private static <T extends Clusterable<T>> Cluster<T>\ndouble minDistance = Double.MAX_VALUE;\nCluster<T> minCluster = null;\nfor (final Cluster<T> c : clusters) {\nfinal double distance = point.distanceFrom(c.getCenter());\nif (distance < minDistance) {\nminDistance = distance;\nminCluster = c;\n}\nreturn minCluster;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:addPoint(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public void addPoint(final T point) {\npoints.add(point);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:<init>(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public Cluster(final T center) {\nthis.center = center;\npoints = new ArrayList<T>();\n}",
            "method_id": 14
        }
    ]
}