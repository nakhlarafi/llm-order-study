{
    "bug_id": 103,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "public void testExtremeValues() throws Exception {\nNormalDistribution distribution = (NormalDistribution) getDistribution();\ndistribution.setMean(0);\ndistribution.setStandardDeviation(1);\nfor (int i = 0; i < 100; i+=5) { // make sure no convergence exception\ndouble lowerTail = distribution.cumulativeProbability((double)-i);\ndouble upperTail = distribution.cumulativeProbability((double) i);",
    "stack_trace": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded\nat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)\nat org.apache.commons.math.special.Erf.erf(Erf.java:56)\nat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)\nat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object[] arguments) {\nsuper(buildMessage(pattern, arguments, Locale.US));\nthis.pattern   = pattern;\nthis.arguments = arguments;\nthis.rootCause = null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:setMean(D)V",
            "method_body": "public void setMean(double mean) {\nthis.mean = mean;\n}",
            "method_id": 13
        }
    ]
}