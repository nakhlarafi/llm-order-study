{
    "bug_id": 102,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nif ((expected.length < 2) || (expected.length != observed.length)) {\nif (!isPositive(expected) || !isNonNegative(observed)) {\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\ndev = ((double) observed[i] - expected[i]);\nsumSq += dev * dev / expected[i];\nreturn sumSq;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\nreturn ret;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(DLorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\nsuper();\nsetGamma(g);\nsetDegreesOfFreedom(df);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\nreturn 1.0 - distribution.cumulativeProbability(\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\ngetGamma().setAlpha(degreesOfFreedom / 2.0);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\ndouble p1 = getA(0, x);\ndouble q0 = 0.0;\ndouble q1 = 1.0;\ndouble c = p1 / q1;\nint n = 0;\ndouble relativeError = Double.MAX_VALUE;\nwhile (n < maxIterations && relativeError > epsilon) {\n++n;\ndouble a = getA(n, x);\ndouble b = getB(n, x);\ndouble p2 = a * p1 + b * p0;\ndouble q2 = a * q1 + b * q0;\nif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\ndouble r = p2 / q2;\nrelativeError = Math.abs(r / c - 1.0);\nc = p2 / q2;\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\n}\nif (n >= maxIterations) {\nreturn c;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setBeta(D)V",
            "method_body": "public void setBeta(double beta) {\nif (beta <= 0.0) {\nthis.beta = beta;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 9
        }
    ]
}