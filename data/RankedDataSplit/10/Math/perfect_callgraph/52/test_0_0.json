{
    "bug_id": 52,
    "test_id": 0,
    "test_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639",
    "test_body": "public void testIssue639(){\nVector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n-5774608829631843.0 /  268435456.0,\n-3822921525525679.0 / 4294967296.0);\nVector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n-2275058564560979.0 /    1048576.0,\n4423475992255071.0 /      65536.0);\nRotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\nAssert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);\nAssert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.6228370359608201> but was:<NaN>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639(RotationTest.java:488)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\ndouble u1u1 = u1.getNormSq();\ndouble u2u2 = u2.getNormSq();\ndouble v1v1 = v1.getNormSq();\ndouble v2v2 = v2.getNormSq();\nif ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\nv1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\ndouble u1u2   = u1.dotProduct(u2);\ndouble v1v2   = v1.dotProduct(v2);\ndouble coeffU = u1u2 / u1u1;\ndouble coeffV = v1v2 / u1u1;\ndouble beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\ndouble alpha  = coeffU - beta * coeffV;\nv2 = new Vector3D(alpha, v1, beta, v2);\nVector3D uRef  = u1;\nVector3D vRef  = v1;\nVector3D v1Su1 = v1.subtract(u1);\nVector3D v2Su2 = v2.subtract(u2);\nVector3D k     = v1Su1.crossProduct(v2Su2);\nVector3D u3    = u1.crossProduct(u2);\ndouble c       = k.dotProduct(u3);\nif (c == 0) {\nc = FastMath.sqrt(c);\ndouble inv = 1.0 / (c + c);\nq1 = inv * k.getX();\nq2 = inv * k.getY();\nq3 = inv * k.getZ();\nk = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\nq0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DDD)V",
            "method_body": "public Vector3D(double x, double y, double z) {\nthis.x = x;\nthis.y = y;\nthis.z = z;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a, Vector3D u) {\nthis.x = a * u.x;\nthis.y = a * u.y;\nthis.z = a * u.z;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Rotation:getQ0()D",
            "method_body": "public double getQ0() {\nreturn q0;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getZ()D",
            "method_body": "public double getZ() {\nreturn z;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\nthis.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);\nthis.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);\nthis.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math/geometry/Vector;)D",
            "method_body": "public double dotProduct(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\nreturn MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 9
        }
    ]
}