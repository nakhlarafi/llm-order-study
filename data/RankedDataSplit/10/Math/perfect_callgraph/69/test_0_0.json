{
    "bug_id": 69,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat junit.framework.TestCase.assertTrue(TestCase.java:201)\nat org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(PearsonsCorrelationTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getCorrelationPValues() throws MathException {\nTDistribution tDistribution = new TDistributionImpl(nObs - 2);\nint nVars = correlationMatrix.getColumnDimension();\ndouble[][] out = new double[nVars][nVars];\nfor (int i = 0; i < nVars; i++) {\nfor (int j = 0; j < nVars; j++) {\nif (i == j) {\nout[i][j] = 0d;\ndouble r = correlationMatrix.getEntry(i, j);\ndouble t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\nout[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\nreturn new BlockRealMatrix(out);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nsum = sum + LANCZOS[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(D)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom) {\nthis(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>([[D)V",
            "method_body": "public PearsonsCorrelation(double[][] data) {\nthis(new BlockRealMatrix(data));\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSlope()D",
            "method_body": "public double getSlope() {\nif (n < 2) {\nif (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {\nreturn sumXY / sumXX;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b, double epsilon,\nif (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 9
        }
    ]
}