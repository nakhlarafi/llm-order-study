{
    "bug_id": 106,
    "test_id": 0,
    "test_name": "org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus",
    "test_body": "public void testParseProperInvalidMinus() {\nString source = \"2 -2 / 3\";\ntry {\nFraction c = properFormat.parse(source);\nfail(\"invalid minus in improper fraction.\");\n} catch (ParseException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError: invalid minus in improper fraction.\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.math.fraction.FractionFormatTest.testParseProperInvalidMinus(FractionFormatTest.java:236)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:getDenominatorFormat()Ljava/text/NumberFormat;",
            "method_body": "public NumberFormat getDenominatorFormat() {\nreturn denominatorFormat;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:getDefaultNumberFormat(Ljava/util/Locale;)Ljava/text/NumberFormat;",
            "method_body": "private static NumberFormat getDefaultNumberFormat(Locale locale) {\nNumberFormat nf = NumberFormat.getNumberInstance(locale);\nnf.setMaximumFractionDigits(0);\nnf.setParseIntegerOnly(true);\nreturn nf;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:getProperInstance(Ljava/util/Locale;)Lorg/apache/commons/math/fraction/FractionFormat;",
            "method_body": "public static FractionFormat getProperInstance(Locale locale) {\nNumberFormat f = getDefaultNumberFormat(locale);\nreturn new ProperFractionFormat(f);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.fraction.ProperFractionFormat:<init>(Ljava/text/NumberFormat;)V",
            "method_body": "public ProperFractionFormat(NumberFormat format) {\nthis(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;",
            "method_body": "public Fraction parse(String source, ParsePosition pos) {\nint initialIndex = pos.getIndex();\nparseAndIgnoreWhitespace(source, pos);\nNumber num = getNumeratorFormat().parse(source, pos);\nif (num == null) {\nint startIndex = pos.getIndex();\nchar c = parseNextCharacter(source, pos);\nswitch (c) {\npos.setIndex(initialIndex);\npos.setErrorIndex(startIndex);\nreturn null;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
            "method_body": "protected static char parseNextCharacter(String source, ParsePosition pos) {\nint index = pos.getIndex();\nint n = source.length();\nchar ret = 0;\nif (index < n) {\nc = source.charAt(index++);\n} while (Character.isWhitespace(c) && index < n);\npos.setIndex(index);\nif (index < n) {\nret = c;\nreturn ret;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.fraction.ProperFractionFormat:<init>(Ljava/text/NumberFormat;Ljava/text/NumberFormat;Ljava/text/NumberFormat;)V",
            "method_body": "public ProperFractionFormat(NumberFormat wholeFormat,\nsuper(numeratorFormat, denominatorFormat);\nsetWholeFormat(wholeFormat);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:getImproperInstance(Ljava/util/Locale;)Lorg/apache/commons/math/fraction/FractionFormat;",
            "method_body": "public static FractionFormat getImproperInstance(Locale locale) {\nNumberFormat f = getDefaultNumberFormat(locale);\nreturn new FractionFormat(f);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:sign(I)I",
            "method_body": "public static int sign(final int x) {\nreturn (x == 0) ? 0 : (x > 0) ? 1 : -1;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.fraction.FractionFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V",
            "method_body": "protected static void parseAndIgnoreWhitespace(\nparseNextCharacter(source, pos);\npos.setIndex(pos.getIndex() - 1);\n}",
            "method_id": 19
        }
    ]
}