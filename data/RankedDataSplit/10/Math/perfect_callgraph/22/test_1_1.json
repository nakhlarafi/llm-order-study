{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.UniformRealDistribution:getSupportUpperBound()D",
            "method_body": "public double getSupportUpperBound() {\nreturn upper;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\nrandom = rng;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
            "method_body": "public UniformRealDistribution(RandomGenerator rng,\nsuper(rng);\nif (lower >= upper) {\nthis.lower = lower;\nthis.upper = upper;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 14
        }
    ]
}