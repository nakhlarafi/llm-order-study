{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:search(Lorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;DD)V",
            "method_body": "public void search(UnivariateFunction func, GoalType goal, double xA, double xB) {\nevaluations.resetCount();\nfinal boolean isMinim = goal == GoalType.MINIMIZE;\ndouble fA = eval(func, xA);\ndouble fB = eval(func, xB);\nif (isMinim ?\ndouble tmp = xA;\nxA = xB;\nxB = tmp;\ntmp = fA;\nfA = fB;\nfB = tmp;\ndouble xC = xB + GOLD * (xB - xA);\ndouble fC = eval(func, xC);\nwhile (isMinim ? fC < fB : fC > fB) {\ndouble tmp1 = (xB - xA) * (fB - fC);\ndouble tmp2 = (xB - xC) * (fB - fA);\ndouble val = tmp2 - tmp1;\ndouble denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;\ndouble w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;\ndouble wLim = xB + growLimit * (xC - xB);\nif ((w - xC) * (xB - w) > 0) {\nfW = eval(func, w);\nif (isMinim ?\nxA = xB;\nxB = w;\nfA = fB;\nfB = fW;\nbreak;\n} else if ((w - wLim) * (wLim - xC) >= 0) {\n} else if ((w - wLim) * (xC - w) > 0) {\nw = xC + GOLD * (xC - xB);\nfW = eval(func, w);\nxA = xB;\nfA = fB;\nxB = xC;\nfB = fC;\nxC = w;\nfC = fW;\n}\nlo = xA;\nfLo = fA;\nmid = xB;\nfMid = fB;\nhi = xC;\nfHi = fC;\nif (lo > hi) {\ndouble tmp = lo;\nlo = hi;\nhi = tmp;\ntmp = fLo;\nfLo = fHi;\nfHi = tmp;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:<init>(DD)V",
            "method_body": "public UnivariatePointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn start;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:<init>(DD)V",
            "method_body": "public AbstractConvergenceChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 69
        }
    ]
}