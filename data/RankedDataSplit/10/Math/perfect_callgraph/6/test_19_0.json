{
    "bug_id": 6,
    "test_id": 19,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial",
    "test_body": "public void testTrivial() {\nLinearProblem problem\n= new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\nNonLinearConjugateGradientOptimizer optimizer\n= new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,\nnew SimpleValueChecker(1e-6, 1e-6));\nPointValuePair optimum\n= optimizer.optimize(new MaxEval(100),\nproblem.getObjectiveFunction(),\nproblem.getObjectiveFunctionGradient(),\nGoalType.MINIMIZE,\nnew InitialGuess(new double[] { 0 }));\nAssert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\nAssert.assertEquals(0.0, optimum.getValue(), 1.0e-10);\n140: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(NonLinearConjugateGradientOptimizerTest.java:141)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nfinal double[] point = getStartPoint();\nfinal GoalType goal = getGoalType();\nfinal int n = point.length;\ndouble[] r = computeObjectiveGradient(point);\nif (goal == GoalType.MINIMIZE) {\nfor (int i = 0; i < n; i++) {\nr[i] = -r[i];\ndouble[] steepestDescent = preconditioner.precondition(point, r);\ndouble[] searchDirection = steepestDescent.clone();\ndouble delta = 0;\nfor (int i = 0; i < n; ++i) {\ndelta += r[i] * searchDirection[i];\nPointValuePair current = null;\nint iter = 0;\nint maxEval = getMaxEvaluations();\n++iter;\nfinal double objective = computeObjectiveValue(point);\nPointValuePair previous = current;\ncurrent = new PointValuePair(point, objective);\nif (previous != null) {\nif (checker.converged(iter, previous, current)) {\nreturn current;\nfinal UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);\nfinal double uB = findUpperBound(lsf, 0, initialStep);\nfinal double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);\nmaxEval -= solver.getEvaluations(); // Subtract used up evaluations.\nfor (int i = 0; i < point.length; ++i) {\npoint[i] += step * searchDirection[i];\nr = computeObjectiveGradient(point);\nif (goal == GoalType.MINIMIZE) {\nfor (int i = 0; i < n; ++i) {\nr[i] = -r[i];\nfinal double deltaOld = delta;\nfinal double[] newSteepestDescent = preconditioner.precondition(point, r);\ndelta = 0;\nfor (int i = 0; i < n; ++i) {\ndelta += r[i] * newSteepestDescent[i];\nswitch (updateFormula) {\ndouble deltaMid = 0;\nfor (int i = 0; i < r.length; ++i) {\ndeltaMid += r[i] * steepestDescent[i];\nbeta = (delta - deltaMid) / deltaOld;\nbreak;\nsteepestDescent = newSteepestDescent;\nif (iter % n == 0 ||\nsearchDirection = steepestDescent.clone();\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>([[D)V",
            "method_body": "public BlockRealMatrix(final double[][] rawData)\nthis(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nfinal int rows = rawData.length;\nfinal int columns = rawData[0].length;\nfinal int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfor (int i = 0; i < rawData.length; ++i) {\nfinal int length = rawData[i].length;\nif (length != columns) {\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nfinal double[] block = new double[iHeight * jWidth];\nblocks[blockIndex] = block;\nint index = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nSystem.arraycopy(rawData[p], qStart, block, index, jWidth);\nindex += jWidth;\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleValueChecker:<init>(DD)V",
            "method_body": "public SimpleValueChecker(final double relativeThreshold,\nsuper(relativeThreshold, absoluteThreshold);\nmaxIterationCount = ITERATION_CHECK_DISABLED;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:<init>(DD)V",
            "method_body": "public AbstractConvergenceChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:<init>()V",
            "method_body": "public BrentSolver() {\nthis(DEFAULT_ABSOLUTE_ACCURACY);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:<init>(D)V",
            "method_body": "public BrentSolver(double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected AbstractUnivariateSolver(final double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 9
        }
    ]
}