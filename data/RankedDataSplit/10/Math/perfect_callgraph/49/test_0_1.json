{
    "bug_id": 49,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification",
    "test_body": "public void testConcurrentModification() {\nfinal RealVector u = new OpenMapRealVector(3, 1e-6);\nu.setEntry(0, 1);\nu.setEntry(1, 0);\nu.setEntry(2, 2);\n1010: final RealVector v1 = new OpenMapRealVector(3, 1e-6);\nfinal double[] v2 = new double[3];\nv1.setEntry(0, 0);\nv2[0] = 0;\nv1.setEntry(1, 3);\nv2[1] = 3;\nv1.setEntry(2, 0);\nv2[2] = 0;\n1019: RealVector w;\n1021: w = u.ebeMultiply(v1);\nw = u.ebeMultiply(v2);",
    "stack_trace": "org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating\nat org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)\nat org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance(OpenIntToDoubleHashMap.java:564)\nat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)\nat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:33)\nat org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(SparseRealVectorTest.java:1021)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\nfinal int length = source.keys.length;\nkeys = new int[length];\nSystem.arraycopy(source.keys, 0, keys, 0, length);\nvalues = new double[length];\nSystem.arraycopy(source.values, 0, values, 0, length);\nstates = new byte[length];\nSystem.arraycopy(source.states, 0, states, 0, length);\nmissingEntries = source.missingEntries;\nsize  = source.size;\nmask  = source.mask;\ncount = source.count;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\ndouble previous = missingEntries;\nboolean newMapping = true;\nif (index < 0) {\nkeys[index]   = key;\nstates[index] = FULL;\nvalues[index] = value;\nif (newMapping) {\n++size;\nif (shouldGrowTable()) {\n++count;\nreturn previous;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:hashOf(I)I",
            "method_body": "private static int hashOf(final int key) {\nfinal int h = key ^ ((key >>> 20) ^ (key >>> 12));\nreturn h ^ (h >>> 7) ^ (h >>> 4);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nif (states[index] == FREE) {\nreturn missingEntries;\n}",
            "method_id": 19
        }
    ]
}