{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789",
    "test_body": "public void testMath789() {\n78: final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n{0.013445532, 0.010394690, 0.009881156, 0.010499559},\n{0.010394690, 0.023006616, 0.008196856, 0.010732709},\n{0.009881156, 0.008196856, 0.019023866, 0.009210099},\n{0.010499559, 0.010732709, 0.009210099, 0.019107243}\n});\nRealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM1 = root1.multiply(root1.transpose());\nAssert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n88: final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n{0.0, 0.0, 0.0, 0.0, 0.0},\n{0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n{0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n{0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n{0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n});\nRealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM2 = root2.multiply(root2.transpose());\nAssert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n99: final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n{0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n{0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n{0.0, 0.0, 0.0, 0.0, 0.0},\n{0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n{0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n});\nRealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM3 = root3.multiply(root3.transpose());\nAssert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n110: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.0180652917341963>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789(RectangularCholeskyDecompositionTest.java:108)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:end()D",
            "method_body": "public double end() {\nreturn 0;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nreturn copyOut();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$5:visit(IID)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal RealMatrix out = createMatrix(nCols, nRows);\nwalkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\nout.setEntry(column, row, value);\n}\nreturn out;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension,\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value) {\nMatrixUtils.checkMatrixIndex(this, row, column);\ndata[row][column] = value;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nfinal int nRows = this.getRowDimension();\nfinal double[][] out = new double[nRows][this.getColumnDimension()];\nfor (int i = 0; i < nRows; i++) {\nSystem.arraycopy(data[i], 0, out[i], 0, data[i].length);\nreturn out;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right)\nif ((left.getRowDimension()    != right.getRowDimension()) ||\n}",
            "method_id": 19
        }
    ]
}