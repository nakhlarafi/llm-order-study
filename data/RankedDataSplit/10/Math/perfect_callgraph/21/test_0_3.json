{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789",
    "test_body": "public void testMath789() {\n78: final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n{0.013445532, 0.010394690, 0.009881156, 0.010499559},\n{0.010394690, 0.023006616, 0.008196856, 0.010732709},\n{0.009881156, 0.008196856, 0.019023866, 0.009210099},\n{0.010499559, 0.010732709, 0.009210099, 0.019107243}\n});\nRealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM1 = root1.multiply(root1.transpose());\nAssert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n88: final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n{0.0, 0.0, 0.0, 0.0, 0.0},\n{0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n{0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n{0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n{0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n});\nRealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM2 = root2.multiply(root2.transpose());\nAssert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n99: final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n{0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n{0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n{0.0, 0.0, 0.0, 0.0, 0.0},\n{0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n{0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n});\nRealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\nRealMatrix rebuiltM3 = root3.multiply(root3.transpose());\nAssert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n110: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.0180652917341963>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789(RectangularCholeskyDecompositionTest.java:108)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\nfinal int rows    = getRowDimension();\nfinal int columns = getColumnDimension();\nvisitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\nfor (int i = 0; i < rows; ++i) {\nfinal double[] rowI = data[i];\nfor (int j = 0; j < columns; ++j) {\nvisitor.visit(i, j, rowI[j]);\nreturn visitor.end();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal RealMatrix out = createMatrix(nCols, nRows);\nwalkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\nout.setEntry(column, row, value);\n}\nreturn out;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix,\nif (data == null) {\nif (row > 0) {\nif (column > 0) {\nMathUtils.checkNotNull(subMatrix);\nfinal int nRows = subMatrix.length;\nif (nRows == 0) {\nfinal int nCols = subMatrix[0].length;\nif (nCols == 0) {\ndata = new double[subMatrix.length][nCols];\nfor (int i = 0; i < data.length; ++i) {\nif (subMatrix[i].length != nCols) {\nSystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n} else {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getRootMatrix() {\nreturn root;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 38
        }
    ]
}