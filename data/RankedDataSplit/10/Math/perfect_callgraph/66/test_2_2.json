{
    "bug_id": 66,
    "test_id": 2,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer();\nunderlying.setRelativeAccuracy(1e-15);\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053L);\nMultiStartUnivariateRealOptimizer minimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\nminimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\nminimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n69: try {\nminimizer.getOptima();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\ntry {\nminimizer.getOptimaValues();\nfail(\"an exception should have been thrown\");\n} catch (IllegalStateException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n86: double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\nassertEquals(-0.2719561270319131, result, 1.0e-13);\nassertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561270319131> but was:<-0.2719561299044896>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:87)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\noptima           = new double[starts];\noptimaValues     = new double[starts];\ntotalIterations  = 0;\ntotalEvaluations = 0;\nfor (int i = 0; i < starts; ++i) {\noptimizer.setMaximalIterationCount(maxIterations - totalIterations);\noptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);\nfinal double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\nfinal double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\noptima[i]       = optimizer.optimize(f, goalType,\noptimaValues[i] = optimizer.getFunctionValue();\n}\ntotalIterations  += optimizer.getIterationCount();\ntotalEvaluations += optimizer.getEvaluations();\nint lastNaN = optima.length;\nfor (int i = 0; i < lastNaN; ++i) {\nif (Double.isNaN(optima[i])) {\ndouble currX = optima[0];\ndouble currY = optimaValues[0];\nfor (int j = 1; j < lastNaN; ++j) {\nfinal double prevY = currY;\ncurrX = optima[j];\ncurrY = optimaValues[j];\nif ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {\nint i = j - 1;\ndouble mIX = optima[i];\ndouble mIY = optimaValues[i];\nwhile ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {\noptima[i + 1]       = mIX;\noptimaValues[i + 1] = mIY;\nif (i-- != 0) {\nmIX = optima[i];\nmIY = optimaValues[i];\noptima[i + 1]       = currX;\noptimaValues[i + 1] = currY;\ncurrX = optima[j];\ncurrY = optimaValues[j];\nif (Double.isNaN(optima[0])) {\nreturn optima[0];\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getFunctionValue()D",
            "method_body": "public double getFunctionValue() {\nif (functionValue == Double.NaN) {\nreturn functionValue;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nthis.maxIterations = count;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 28
        }
    ]
}