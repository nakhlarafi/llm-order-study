{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "public void testQuinticMin() throws MathException {\n// The quintic function has zeros at 0, +-0.5 and +-1.\n// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\nunderlying.setMaxEvaluations(300);\nJDKRandomGenerator g = new JDKRandomGenerator();\ng.setSeed(4312000053L);\nMultiStartUnivariateRealOptimizer optimizer =\nnew MultiStartUnivariateRealOptimizer(underlying, 5, g);\n69: UnivariateRealPointValuePair optimum\n= optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\nassertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\nassertEquals(-0.0443342695, optimum.getValue(), 1e-9);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:<init>(Lorg/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer;ILorg/apache/commons/math/random/RandomGenerator;)V",
            "method_body": "public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,\nfinal RandomGenerator generator) {\nthis.optimizer = optimizer;\nthis.starts = starts;\nthis.generator = generator;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nassert maxUlps > 0 && maxUlps < NAN_GAP;\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:sortPairs(Lorg/apache/commons/math/optimization/GoalType;)V",
            "method_body": "private void sortPairs(final GoalType goal) {\nArrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {\nif (o1 == null) {\n} else if (o2 == null) {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goal == GoalType.MINIMIZE) ?\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nevaluations.setMaximalCount(maxEvaluations);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn evaluations.getMaximalCount();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
            "method_body": "public UnivariateRealPointValuePair optimize(UnivariateRealFunction f,\nif (f == null) {\nif (goalType == null) {\nsearchMin = min;\nsearchMax = max;\nsearchStart = startValue;\ngoal = goalType;\nfunction = f;\nevaluations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:<init>(DD)V",
            "method_body": "public UnivariateRealPointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 29
        }
    ]
}