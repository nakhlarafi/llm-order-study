{
    "bug_id": 29,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #5, left = 0.0, right = Infinity expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyMixedTypes(RealVectorAbstractTest.java:580)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:perturb(I)I",
            "method_body": "private static int perturb(final int hash) {\nreturn hash & 0x7fffffff;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:changeIndexSign(I)I",
            "method_body": "private static int changeIndexSign(final int index) {\nreturn -index - 1;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\nreferenceCount = count;\nnext = -1;\nadvance();\n}\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:growTable()V",
            "method_body": "private void growTable() {\nfinal int oldLength      = states.length;\nfinal int[] oldKeys      = keys;\nfinal double[] oldValues = values;\nfinal byte[] oldStates   = states;\nfinal int newLength = RESIZE_MULTIPLIER * oldLength;\nfinal int[] newKeys = new int[newLength];\nfinal double[] newValues = new double[newLength];\nfinal byte[] newStates = new byte[newLength];\nfinal int newMask = newLength - 1;\nfor (int i = 0; i < oldLength; ++i) {\nif (oldStates[i] == FULL) {\nfinal int key = oldKeys[i];\nfinal int index = findInsertionIndex(newKeys, newStates, key, newMask);\nnewKeys[index]   = key;\nnewValues[index] = oldValues[i];\nnewStates[index] = FULL;\nmask   = newMask;\nkeys   = newKeys;\nvalues = newValues;\nstates = newStates;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\nreturn entries.get(index);\n}",
            "method_id": 19
        }
    ]
}