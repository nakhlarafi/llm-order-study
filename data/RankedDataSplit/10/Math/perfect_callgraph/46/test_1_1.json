{
    "bug_id": 46,
    "test_id": 1,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAtanI",
    "test_body": "public void testAtanI() {\nAssert.assertTrue(Complex.I.atan().isNaN());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex factor)\nMathUtils.checkNotNull(factor);\nif (isNaN || factor.isNaN) {\nif (Double.isInfinite(real) ||\nreturn INF;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex add(Complex addend) throws NullArgumentException {\nMathUtils.checkNotNull(addend);\nif (isNaN || addend.isNaN) {\nreturn createComplex(real + addend.getReal(),\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isInfinite()Z",
            "method_body": "public boolean isInfinite() {\nreturn isInfinite;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn isNaN;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:subtract(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex subtract(Complex subtrahend)\nMathUtils.checkNotNull(subtrahend);\nif (isNaN || subtrahend.isNaN) {\nreturn createComplex(real - subtrahend.getReal(),\n}",
            "method_id": 17
        }
    ]
}