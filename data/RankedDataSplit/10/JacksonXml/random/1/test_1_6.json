{
    "bug_id": 1,
    "test_id": 1,
    "test_name": "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty",
    "test_body": "public void testNestedWithEmpty() throws Exception\n{\nfinal String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n;\n96: ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\nassertNotNull(svc);\nassertNotNull(svc.vehicleMonitoringDelivery);\n// 06-Jan-2015, tatu: Really should have one empty entry, not 0\nassertEquals(1, svc.vehicleMonitoringDelivery.size());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty(NestedUnwrappedListsTest.java:100)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:setDefaultUseWrapper(Z)V",
            "method_body": "public void setDefaultUseWrapper(boolean b) {\n_cfgDefaultUseWrapper = b;\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
            "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
            "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }",
            "method_id": 62
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
            "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:intermediateWrapper()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
            "method_body": "public ElementWrapper intermediateWrapper() {\nreturn new ElementWrapper(this, null, null);\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_next()I",
            "method_body": "private final int _next() throws XMLStreamException\nswitch (_currentState) {\n++_nextAttributeIndex;\nif (_nextAttributeIndex < _attributeCount) {\n_localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n_namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n_textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\nreturn (_currentState = XML_ATTRIBUTE_NAME);\nString text = _collectUntilTag();\nif (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\nreturn _initStartElement();\nif (text != null) {\n_textValue = text;\nreturn (_currentState = XML_TEXT);\nreturn _handleEndElement();\nreturn (_currentState = XML_ATTRIBUTE_VALUE);\nreturn _handleEndElement();\nswitch (_skipUntilTag()) {\nreturn _handleEndElement();\nreturn _initStartElement();\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
            "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }",
            "method_id": 66
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
            "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:addVirtualWrapping(Ljava/util/Set;)V",
            "method_body": "public void addVirtualWrapping(Set<String> namesToWrap)\nString name = _xmlTokens.getLocalName();\nif (name != null && namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_namesToWrap = namesToWrap;\n_parsingContext.setNamesToWrap(namesToWrap);\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperNamespace()Ljava/lang/String;",
            "method_body": "public String getWrapperNamespace() { return _wrapperNamespace; }\npublic String getWrapperNamespace() { return _wrapperNamespace; }",
            "method_id": 69
        }
    ]
}