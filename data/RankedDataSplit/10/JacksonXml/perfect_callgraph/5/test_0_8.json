{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith",
    "test_body": "public void testCopyWith() throws Exception\n{\nXmlMapper xmlMapper = newMapper();\nfinal ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n.disable(MapperFeature.USE_ANNOTATIONS)\n.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n81: String xml1 = xmlMapper.writeValueAsString(new Pojo282());\nString xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n84: if (!xml1.contains(\"AnnotatedName\")) {\nfail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n}\nif (!xml2.contains(\"Pojo282\")\n|| xml2.contains(\"AnnotatedName\")) {\nfail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Should NOT use name 'AnnotatedName' but 'Pojo282', xml = <AnnotatedName><a>3</a></AnnotatedName>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith(MapperCopyTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V",
            "method_body": "public void writeFieldName(SerializableString name) throws IOException\nwriteFieldName(name.getValue());\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeNumber(I)V",
            "method_body": "public void writeNumber(int i) throws IOException\n_verifyValueWrite(\"write number\");\nif (_nextName == null) {\nif (_nextIsAttribute) {\n} else if (checkNextIsUnwrapped()) {\nif (_xmlPrettyPrinter != null) {\n_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n_xmlWriter.writeInt(i);\n_xmlWriter.writeEndElement();\n}\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_verifyValueWrite(Ljava/lang/String;)V",
            "method_body": "protected final void _verifyValueWrite(String typeMsg) throws IOException\nint status = _writeContext.writeValue();\nif (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:close()V",
            "method_body": "public void close() throws IOException\nsuper.close();\nif (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\nJsonStreamContext ctxt = _writeContext;\nif (ctxt.inArray()) {\n} else if (ctxt.inObject()) {\n}\nif (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n_xmlWriter.closeCompletely();\n}\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:checkNextIsUnwrapped()Z",
            "method_body": "protected boolean checkNextIsUnwrapped()\nif (_nextIsUnwrapped) {\nreturn false;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
            "method_body": "public XmlBeanSerializerBase(BeanSerializerBase src)\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<clinit>()V",
            "method_body": "public final static String KEY_XML_INFO = new String(\"xmlInfo\");\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:serializeFields(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
            "method_body": "protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\nif (!(gen0 instanceof ToXmlGenerator)) {\nfinal ToXmlGenerator xgen = (ToXmlGenerator) gen0;\nif (_filteredProps != null && provider.getActiveView() != null) {\nprops = _props;\nfinal int attrCount = _attributeCount;\nfinal boolean isAttribute = xgen._nextIsAttribute;\nif (attrCount > 0) {\nfinal int textIndex = _textPropertyIndex;\nfinal QName[] xmlNames = _xmlNames;\nint i = 0;\nfinal BitSet cdata = _cdata;\nfor (final int len = props.length; i < len; ++i) {\nif (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\nxgen.setNextIsAttribute(false);\nif (i == textIndex) {\nxgen.setNextName(xmlNames[i]);\nBeanPropertyWriter prop = props[i];\nif (prop != null) { // can have nulls in filtered list\nif ((cdata != null) && cdata.get(i)) {\nprop.serializeAsField(bean, xgen, provider);\nif (i == textIndex) {\nif (_anyGetterWriter != null) {\n}\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isAttribute(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
            "method_body": "protected static boolean _isAttribute(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isAttribute();\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isCData(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
            "method_body": "protected static boolean _isCData(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isCData();\n}",
            "method_id": 89
        }
    ]
}