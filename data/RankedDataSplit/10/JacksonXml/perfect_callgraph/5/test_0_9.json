{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith",
    "test_body": "public void testCopyWith() throws Exception\n{\nXmlMapper xmlMapper = newMapper();\nfinal ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n.disable(MapperFeature.USE_ANNOTATIONS)\n.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n81: String xml1 = xmlMapper.writeValueAsString(new Pojo282());\nString xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n84: if (!xml1.contains(\"AnnotatedName\")) {\nfail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n}\nif (!xml2.contains(\"Pojo282\")\n|| xml2.contains(\"AnnotatedName\")) {\nfail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n}",
    "stack_trace": "junit.framework.AssertionFailedError: Should NOT use name 'AnnotatedName' but 'Pojo282', xml = <AnnotatedName><a>3</a></AnnotatedName>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith(MapperCopyTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:<init>(Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V",
            "method_body": "public XmlInfo(Boolean isAttribute, String ns, Boolean isText, Boolean isCData)\n{\n_isAttribute = (isAttribute == null) ? false : isAttribute.booleanValue();\n_namespace = (ns == null) ? \"\" : ns;\n_isText = (isText == null) ? false : isText.booleanValue();\n_isCData = (isCData == null) ? false : isCData.booleanValue();\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:getNamespace()Ljava/lang/String;",
            "method_body": "public String getNamespace() { return _namespace; }\npublic String getNamespace() { return _namespace; }",
            "method_id": 91
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isAttribute()Z",
            "method_body": "public boolean isAttribute() { return _isAttribute; }\npublic boolean isAttribute() { return _isAttribute; }",
            "method_id": 92
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isText()Z",
            "method_body": "public boolean isText() { return _isText; }\npublic boolean isText() { return _isText; }",
            "method_id": 93
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isCData()Z",
            "method_body": "public boolean isCData() { return _isCData; }\npublic boolean isCData() { return _isCData; }",
            "method_id": 94
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
            "method_body": "public XmlBeanSerializer(BeanSerializerBase src) {\nsuper(src);\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:serialize(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
            "method_body": "public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException\nif (_objectIdWriter != null) {\ng.writeStartObject();\nif (_propertyFilterId != null) {\nserializeFields(bean, g, provider);\ng.writeEndObject();\n}",
            "method_id": 96
        }
    ]
}