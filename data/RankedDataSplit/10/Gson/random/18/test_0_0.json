{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "com.google.gson.functional.CollectionTest.testIssue1107",
    "test_body": "public void testIssue1107() {\nString json = \"{\\n\" +\n\"  \\\"inBig\\\": {\\n\" +\n\"    \\\"key\\\": [\\n\" +\n\"      { \\\"inSmall\\\": \\\"hello\\\" }\\n\" +\n\"    ]\\n\" +\n\"  }\\n\" +\n\"}\";\nBigClass bigClass = new Gson().fromJson(json, BigClass.class);\nSmallClass small = bigClass.inBig.get(\"key\").get(0);\nassertNotNull(small);",
    "stack_trace": "java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.google.gson.functional.CollectionTest$SmallClass\nat com.google.gson.functional.CollectionTest.testIssue1107(CollectionTest.java:410)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.internal.$Gson$Preconditions:checkArgument(Z)V",
            "method_body": "public static void checkArgument(boolean condition) {\nif (!condition) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:consumeNonExecutePrefix()V",
            "method_body": "private void consumeNonExecutePrefix() throws IOException {\nnextNonWhitespace(true);\npos--;\nif (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\nfor (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\nreturn; // not a security token!\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.Gson:doubleAdapter(Z)Lcom/google/gson/TypeAdapter;",
            "method_body": "private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\nif (serializeSpecialFloatingPointValues) {\nreturn new TypeAdapter<Number>() {\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter:read(Lcom/google/gson/stream/JsonReader;)Ljava/lang/Object;",
            "method_body": "abstract boolean writeField(Object value) throws IOException, IllegalAccessException;\nAdapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\nthis.constructor = constructor;\nthis.boundFields = boundFields;\n}\nif (in.peek() == JsonToken.NULL) {\nT instance = constructor.construct();\nin.beginObject();\nwhile (in.hasNext()) {\nString name = in.nextName();\nBoundField field = boundFields.get(name);\nif (field == null || !field.deserialized) {\nfield.read(in, instance);\n}\n}\nin.endObject();\nreturn instance;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.internal.bind.DateTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:newFactoryForMultipleTypes(Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapterFactory;",
            "method_body": "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\nreturn new TypeAdapterFactory() {\nClass<? super T> rawType = typeToken.getRawType();\nreturn (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:excludeField(Ljava/lang/reflect/Field;ZLcom/google/gson/internal/Excluder;)Z",
            "method_body": "static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\nreturn !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.TypeAdapter:nullSafe()Lcom/google/gson/TypeAdapter;",
            "method_body": "public final TypeAdapter<T> nullSafe() {\nreturn new TypeAdapter<T>() {\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;)V",
            "method_body": "public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\nthis.constructorConstructor = constructorConstructor;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.Gson:fromJson(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\nObject object = fromJson(json, (Type) classOfT);\nreturn Primitives.wrap(classOfT).cast(object);\n}",
            "method_id": 9
        }
    ]
}