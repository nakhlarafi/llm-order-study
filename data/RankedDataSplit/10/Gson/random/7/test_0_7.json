{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedLongKeys",
    "test_body": "public void testMapDeserializationWithUnquotedLongKeys() {\nlong longKey = 9876543210L;\nString json = String.format(\"{%d:\\\"456\\\"}\", longKey);\nType typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\nMap<Long, String> map = gson.fromJson(json, typeOfMap);\nassertEquals(1, map.size());",
    "stack_trace": "com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a long but was STRING at line 1 column 2 path $.\nat com.google.gson.Gson.fromJson(Gson.java:892)\nat com.google.gson.Gson.fromJson(Gson.java:845)\nat com.google.gson.Gson.fromJson(Gson.java:794)\nat com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedLongKeys(MapTest.java:192)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.reflect.TypeToken:<init>(Ljava/lang/reflect/Type;)V",
            "method_body": "TypeToken(Type type) {\nthis.type = $Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));\nthis.rawType = (Class<? super T>) $Gson$Types.getRawType(this.type);\nthis.hashCode = this.type.hashCode();\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.google.gson.Gson:fromJson(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)Ljava/lang/Object;",
            "method_body": "public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {\nboolean isEmpty = true;\nboolean oldLenient = reader.isLenient();\nreader.setLenient(true);\nreader.peek();\nisEmpty = false;\nTypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);\nTypeAdapter<T> typeAdapter = getAdapter(typeToken);\nT object = typeAdapter.read(reader);\n} catch (IllegalStateException e) {\nthrow new JsonSyntaxException(e);\nreader.setLenient(oldLenient);\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:isLenient()Z",
            "method_body": "public final boolean isLenient() {\nreturn lenient;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getPath()Ljava/lang/String;",
            "method_body": "public String getPath() {\nStringBuilder result = new StringBuilder().append('$');\nfor (int i = 0, size = stackSize; i < size; i++) {\nswitch (stack[i]) {\nresult.append('[').append(pathIndices[i]).append(']');\nbreak;\nresult.append('.');\nif (pathNames[i] != null) {\nreturn result.toString();\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:<init>(Lcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;)V",
            "method_body": "TypeAdapterRuntimeTypeWrapper(Gson context, TypeAdapter<T> delegate, Type type) {\nthis.context = context;\nthis.delegate = delegate;\nthis.type = type;\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;)V",
            "method_body": "public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\nthis.constructorConstructor = constructorConstructor;\n}",
            "method_id": 75
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:<clinit>()V",
            "method_body": "static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};\nstatic final Type[] EMPTY_TYPE_ARRAY = new Type[] {};",
            "method_id": 76
        },
        {
            "method_signature": "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter:<init>(Lcom/google/gson/internal/bind/MapTypeAdapterFactory;Lcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Lcom/google/gson/internal/ObjectConstructor;)V",
            "method_body": "public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\nObjectConstructor<? extends Map<K, V>> constructor) {\nthis.keyTypeAdapter =\nthis.valueTypeAdapter =\nthis.constructor = constructor;\n}",
            "method_id": 77
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Preconditions:checkArgument(Z)V",
            "method_body": "public static void checkArgument(boolean condition) {\nif (!condition) {\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:read(Lcom/google/gson/stream/JsonReader;)Ljava/lang/Object;",
            "method_body": "public T read(JsonReader in) throws IOException {\nreturn delegate.read(in);\n}",
            "method_id": 79
        }
    ]
}