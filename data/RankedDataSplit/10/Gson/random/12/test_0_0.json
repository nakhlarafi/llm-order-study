{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_filledJsonObject",
    "test_body": "public void testSkipValue_filledJsonObject() throws IOException {\nJsonObject jsonObject = new JsonObject();\nJsonArray jsonArray = new JsonArray();\njsonArray.add('c');\njsonArray.add(\"text\");\njsonObject.add(\"a\", jsonArray);\njsonObject.addProperty(\"b\", true);\njsonObject.addProperty(\"i\", 1);\njsonObject.add(\"n\", JsonNull.INSTANCE);\nJsonObject jsonObject2 = new JsonObject();\njsonObject2.addProperty(\"n\", 2L);\njsonObject.add(\"o\", jsonObject2);\njsonObject.addProperty(\"s\", \"text\");\nJsonTreeReader in = new JsonTreeReader(jsonObject);\nin.skipValue();\nassertEquals(JsonToken.END_DOCUMENT, in.peek());",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: -1\nat com.google.gson.internal.bind.JsonTreeReader.skipValue(JsonTreeReader.java:262)\nat com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_filledJsonObject(JsonTreeReaderTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.internal.$Gson$Preconditions:checkArgument(Z)V",
            "method_body": "public static void checkArgument(boolean condition) {\nif (!condition) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.JsonNull:<clinit>()V",
            "method_body": "public static final JsonNull INSTANCE = new JsonNull();\n* Deprecated since Gson version 1.8. Use {@link #INSTANCE} instead",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.JsonPrimitive:<init>(Ljava/lang/Character;)V",
            "method_body": "public JsonPrimitive(Character c) {\nsetValue(c);\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonTreeReader:<init>(Lcom/google/gson/JsonElement;)V",
            "method_body": "private static final Object SENTINEL_CLOSED = new Object();\nprivate Object[] stack = new Object[32];\nprivate int stackSize = 0;\nprivate String[] pathNames = new String[32];\nprivate int[] pathIndices = new int[32];\nsuper(UNREADABLE_READER);\npush(element);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.JsonPrimitive:<init>(Ljava/lang/Object;)V",
            "method_body": "JsonPrimitive(Object primitive) {\nsetValue(primitive);\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.JsonArray:<init>()V",
            "method_body": "public JsonArray() {\nelements = new ArrayList<JsonElement>();\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.JsonObject:createJsonElement(Ljava/lang/Object;)Lcom/google/gson/JsonElement;",
            "method_body": "private JsonElement createJsonElement(Object value) {\nreturn value == null ? JsonNull.INSTANCE : new JsonPrimitive(value);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonTreeReader:push(Ljava/lang/Object;)V",
            "method_body": "private void push(Object newTop) {\nif (stackSize == stack.length) {\nstack[stackSize++] = newTop;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.internal.LinkedTreeMap:replaceInParent(Lcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;)V",
            "method_body": "private void replaceInParent(Node<K, V> node, Node<K, V> replacement) {\nNode<K, V> parent = node.parent;\nnode.parent = null;\nif (replacement != null) {\nreplacement.parent = parent;\nif (parent != null) {\nif (parent.left == node) {\nassert (parent.right == node);\nparent.right = replacement;\nroot = replacement;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.JsonObject:<init>()V",
            "method_body": "private final LinkedTreeMap<String, JsonElement> members =\n}",
            "method_id": 9
        }
    ]
}