{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "com.google.gson.DefaultDateTypeAdapterTest.testDateDeserializationISO8601",
    "test_body": "public void testDateDeserializationISO8601() throws Exception {\nDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();\nassertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\nassertParsed(\"1970-01-01T00:00Z\", adapter);\nassertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\nassertParsed(\"1970-01-01T01:00:00+01:00\", adapter);\nassertParsed(\"1970-01-01T01:00:00+01\", adapter);\n}\n",
    "stack_trace": "com.google.gson.JsonSyntaxException: 1970-01-01T01:00:00+01\nat com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)\nat com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)\nat com.google.gson.DefaultDateTypeAdapterTest.assertParsed(DefaultDateTypeAdapterTest.java:168)\nat com.google.gson.DefaultDateTypeAdapterTest.testDateDeserializationISO8601(DefaultDateTypeAdapterTest.java:133)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.JsonPrimitive:isBoolean()Z",
            "method_body": "public boolean isBoolean() {\nreturn value instanceof Boolean;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.JsonPrimitive:isNumber()Z",
            "method_body": "public boolean isNumber() {\nreturn value instanceof Number;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.JsonPrimitive:getAsString()Ljava/lang/String;",
            "method_body": "public String getAsString() {\nif (isNumber()) {\n} else if (isBoolean()) {\nreturn (String) value;\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.JsonParseException:<init>(Ljava/lang/String;Ljava/lang/Throwable;)V",
            "method_body": "public JsonParseException(String msg, Throwable cause) {\nsuper(msg, cause);\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.JsonSyntaxException:<init>(Ljava/lang/String;Ljava/lang/Throwable;)V",
            "method_body": "public JsonSyntaxException(String msg, Throwable cause) {\nsuper(msg, cause);\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:<init>(Ljava/text/DateFormat;Ljava/text/DateFormat;)V",
            "method_body": "DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\nthis.enUsFormat = enUsFormat;\nthis.localFormat = localFormat;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:deserialize(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;)Ljava/util/Date;",
            "method_body": "public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\nif (!(json instanceof JsonPrimitive)) {\nDate date = deserializeToDate(json);\nif (typeOfT == Date.class) {\nreturn date;\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:deserializeToDate(Lcom/google/gson/JsonElement;)Ljava/util/Date;",
            "method_body": "private Date deserializeToDate(JsonElement json) {\nsynchronized (localFormat) {\nreturn localFormat.parse(json.getAsString());\n} catch (ParseException ignored) {}\nreturn enUsFormat.parse(json.getAsString());\n} catch (ParseException ignored) {}\nreturn ISO8601Utils.parse(json.getAsString(), new ParsePosition(0));\n} catch (ParseException e) {\nthrow new JsonSyntaxException(json.getAsString(), e);\n}\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.google.gson.internal.bind.util.ISO8601Utils:<clinit>()V",
            "method_body": "private static final String UTC_ID = \"UTC\";\nprivate static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);\n}",
            "method_id": 18
        }
    ]
}