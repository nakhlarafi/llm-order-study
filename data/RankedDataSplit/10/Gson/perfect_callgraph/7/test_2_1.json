{
    "bug_id": 7,
    "test_id": 2,
    "test_name": "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers",
    "test_body": "public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\nJsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\nreader.setLenient(true);\nreader.beginArray();\nassertEquals(STRING, reader.peek());\ntry {\nreader.nextInt();\nfail();",
    "stack_trace": "java.lang.IllegalStateException: Expected an int but was STRING at line 1 column 2 path $[0]\nat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1193)\nat com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers(JsonReaderTest.java:502)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:setLenient(Z)V",
            "method_body": "public final void setLenient(boolean lenient) {\nthis.lenient = lenient;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineNumber + 1;\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getColumnNumber()I",
            "method_body": "int getColumnNumber() {\nreturn pos - lineStart + 1;\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\n}",
            "method_id": 14
        }
    ]
}