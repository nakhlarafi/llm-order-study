{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getActualType(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
            "method_body": "private static Type getActualType(\nif (typeToEvaluate instanceof Class<?>) {\n} else if (typeToEvaluate instanceof ParameterizedType) {\n} else if (typeToEvaluate instanceof GenericArrayType) {\n} else if (typeToEvaluate instanceof TypeVariable<?>) {\nif (parentType instanceof ParameterizedType) {\nthrow new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.Gson:<init>()V",
            "method_body": "public Gson() {\nthis(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultSerializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\nreturn getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:<init>()V",
            "method_body": "private static final Logger logger =\nprivate final Map<Type, T> map = new HashMap<Type, T>();\nprivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();\nprivate boolean modifiable = true;\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src) {\nif (src == null) {\nreturn toJson(src, src.getClass());\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:<init>()V",
            "method_body": "private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.Preconditions:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object obj) {\ncheckArgument(obj != null);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.JsonElement:<clinit>()V",
            "method_body": "private static final Escaper BASIC_ESCAPER = new Escaper(false);\n* @return true if this element is of type {@link JsonArray}, false otherwise.",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.Escaper:<init>(Z)V",
            "method_body": "Escaper(boolean escapeHtmlCharacters) {\nthis.escapeHtmlCharacters = escapeHtmlCharacters;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.Escaper:<clinit>()V",
            "method_body": "private static final Set<Character> JS_ESCAPE_CHARS;\nSet<Character> mandatoryEscapeSet = new HashSet<Character>();\nmandatoryEscapeSet.add('\"');\nmandatoryEscapeSet.add('\\\\');\nJS_ESCAPE_CHARS = Collections.unmodifiableSet(mandatoryEscapeSet);\nSet<Character> htmlEscapeSet = new HashSet<Character>();\nhtmlEscapeSet.add('<');\nhtmlEscapeSet.add('>');\nhtmlEscapeSet.add('&');\nhtmlEscapeSet.add('=');\nhtmlEscapeSet.add('\\'');\nHTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n}",
            "method_id": 9
        }
    ]
}