{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "com.google.gson.DefaultDateTypeAdapterTest.testNullValue",
    "test_body": "public void testNullValue() throws Exception {\nDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\nassertNull(adapter.fromJson(\"null\"));\nassertEquals(\"null\", adapter.toJson(null));",
    "stack_trace": "com.google.gson.JsonParseException: The date should be a string value\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:100)\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:40)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:260)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:273)\nat com.google.gson.DefaultDateTypeAdapterTest.testNullValue(DefaultDateTypeAdapterTest.java:166)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:peekKeyword()I",
            "method_body": "private int peekKeyword() throws IOException {\nchar c = buffer[pos];\nif (c == 't' || c == 'T') {\n} else if (c == 'f' || c == 'F') {\n} else if (c == 'n' || c == 'N') {\nkeyword = \"null\";\nkeywordUpper = \"NULL\";\npeeking = PEEKED_NULL;\nint length = keyword.length();\nfor (int i = 1; i < length; i++) {\nif (pos + i >= limit && !fillBuffer(i + 1)) {\nc = buffer[pos + i];\nif (c != keyword.charAt(i) && c != keywordUpper.charAt(i)) {\nif ((pos + length < limit || fillBuffer(length + 1))\npos += length;\nreturn peeked = peeking;\n}",
            "method_id": 10
        }
    ]
}