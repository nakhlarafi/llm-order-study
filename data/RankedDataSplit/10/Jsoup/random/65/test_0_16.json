{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.jsoup.parser.HtmlParserTest.testTemplateInsideTable",
    "test_body": "1038: @Test public void testTemplateInsideTable() throws IOException {\n1039: File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n1040: Document doc = Jsoup.parse(in, \"UTF-8\");\n1041: doc.outputSettings().prettyPrint(true);\n1042: 1043: Elements templates = doc.body().getElementsByTag(\"template\");\n1044: for (Element template : templates) {\n1045: assertTrue(template.childNodes().size() > 1);\n1046: }\n1047: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:clearStackToTableContext()V",
            "method_body": "void clearStackToTableContext() {\nclearStackToContext(\"table\");\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:originalState()Lorg/jsoup/parser/HtmlTreeBuilderState;",
            "method_body": "HtmlTreeBuilderState originalState() {\nreturn originalState;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:detectCharsetFromBom(Ljava/nio/ByteBuffer;Ljava/lang/String;)Lorg/jsoup/helper/DataUtil$BomCharset;",
            "method_body": "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData, final String charsetName) {\nbyteData.mark();\nbyte[] bom = new byte[4];\nif (byteData.remaining() >= bom.length) {\nbyteData.get(bom);\nbyteData.rewind();\nif (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\nreturn null;\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$15:anythingElse(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\nreturn tb.process(t, InBody);\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.jsoup.select.Collector:collect(Lorg/jsoup/select/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements collect (Evaluator eval, Element root) {\nElements elements = new Elements();\nnew NodeTraversor(new Accumulator(root, elements, eval)).traverse(root);\nreturn elements;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$2:anythingElse(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\ntb.insertStartTag(\"html\");\ntb.transition(BeforeHead);\nreturn tb.process(t);\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inTableScope(Ljava/lang/String;)Z",
            "method_body": "boolean inTableScope(String targetName) {\nreturn inSpecificScope(targetName, TagSearchTableScope, null);\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.jsoup.parser.Token:<init>()V",
            "method_body": "private Token() {\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertMarkerToFormattingElements()V",
            "method_body": "void insertMarkerToFormattingElements() {\nformattingElements.add(null);\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:<init>(Ljava/io/Reader;I)V",
            "method_body": "static final char EOF = (char) -1;\nprivate final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\npublic CharacterReader(Reader input, int sz) {\nValidate.notNull(input);\nValidate.isTrue(input.markSupported());\nreader = input;\ncharBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];\nbufferUp();\n}",
            "method_id": 169
        }
    ]
}