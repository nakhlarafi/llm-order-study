{
    "bug_id": 54,
    "test_id": 0,
    "test_name": "org.jsoup.helper.W3CDomTest.handlesInvalidAttributeNames",
    "test_body": "85: public void handlesInvalidAttributeNames() {\n86: String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n87: org.jsoup.nodes.Document jsoupDoc;\n88: jsoupDoc = Jsoup.parse(html);\n89: Element body = jsoupDoc.select(\"body\").first();\n90: assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n91: assertTrue(body.hasAttr(\"name\\\"\"));\n92: 93: Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);\n94: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Document:location()Ljava/lang/String;",
            "method_body": "public String location() {\nreturn location;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>()V",
            "method_body": "public Elements() {\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:updateNamespaces(Lorg/jsoup/nodes/Element;)Ljava/lang/String;",
            "method_body": "private String updateNamespaces(org.jsoup.nodes.Element el) {\nAttributes attributes = el.attributes();\nfor (Attribute attr : attributes) {\nString key = attr.getKey();\nif (key.equals(xmlnsKey)) {\n} else if (key.startsWith(xmlnsPrefix)) {\nint pos = el.tagName().indexOf(\":\");\nreturn pos > 0 ? el.tagName().substring(0, pos) : \"\";\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:process(Lorg/jsoup/parser/Token;)Z",
            "method_body": "protected boolean process(Token token) {\ncurrentToken = token;\nreturn this.state.process(token, this);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$3:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"head\")) {\nElement head = tb.insert(t.asStartTag());\ntb.setHeadElement(head);\ntb.transition(InHead);\n} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\nreturn true;\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.jsoup.nodes.Node:childNodeSize()I",
            "method_body": "public final int childNodeSize() {\nreturn childNodes.size();\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:<init>(Lorg/w3c/dom/Document;)V",
            "method_body": "public W3CBuilder(Document doc) {\nthis.doc = doc;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom$W3CBuilder:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(org.jsoup.nodes.Node source, int depth) {\nif (source instanceof org.jsoup.nodes.Element) {\norg.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\nString prefix = updateNamespaces(sourceEl);\nString namespace = namespaces.get(prefix);\nElement el = doc.createElementNS(namespace, sourceEl.tagName());\ncopyAttributes(sourceEl, el);\nif (dest == null) { // sets up the root\ndoc.appendChild(el);\ndest.appendChild(el);\ndest = el; // descend\n} else if (source instanceof org.jsoup.nodes.TextNode) {\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nextSibling()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node nextSibling() {\nif (parentNode == null)\nreturn null; // root\nfinal List<Node> siblings = parentNode.childNodes;\nfinal int index = siblingIndex+1;\nif (siblings.size() > index)\nreturn siblings.get(index);\nreturn null;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.jsoup.helper.W3CDom:<init>()V",
            "method_body": "protected DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nValidate.notNull(in);\nfactory.setNamespaceAware(true);\nbuilder = factory.newDocumentBuilder();\nDocument out = builder.newDocument();\nconvert(in, out);\n}",
            "method_id": 159
        }
    ]
}