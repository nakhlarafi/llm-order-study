{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.testByAttributeRegexCombined",
    "test_body": "127: @Test public void testByAttributeRegexCombined() {\n128: Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n129: Elements els = doc.select(\"div table[class~=x|y]\");\n130: assertEquals(1, els.size());\n131: assertEquals(\"Hello\", els.text());\n132: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Node:childNode(I)Lorg/jsoup/nodes/Node;",
            "method_body": "public Node childNode(int index) {\nreturn childNodes.get(index);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.nodes.Element:getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements getElementsByAttribute(String key) {\nValidate.notEmpty(key);\nkey = key.trim().toLowerCase();\nreturn Collector.collect(new Evaluator.Attribute(key), this);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.select.Collector:collect(Lorg/jsoup/nodes/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements collect (Evaluator eval, Element root) {\nElements elements = new Elements();\nnew NodeTraversor(new Accumulator(elements, eval)).traverse(root);\nreturn elements;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Lorg/jsoup/nodes/Attribute;)V",
            "method_body": "public void put(Attribute attribute) {\nValidate.notNull(attribute);\nattributes.put(attribute.getKey(), attribute);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.nodes.Node:hasAttr(Ljava/lang/String;)Z",
            "method_body": "public boolean hasAttr(String attributeKey) {\nValidate.notNull(attributeKey);\nreturn attributes.hasKey(attributeKey);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.nodes.Node:childNodes()Ljava/util/List;",
            "method_body": "public List<Node> childNodes() {\nreturn Collections.unmodifiableList(childNodes);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.parser.Tag:canContain(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean canContain(Tag child) {\nValidate.notNull(child);\nif (child.isBlock && !this.canContainBlock)\nif (!child.isBlock && !this.canContainInline) // not block == inline\nif (this.optionalClosing && this.equals(child))\nif (this.empty || this.isData())\nif (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\nif (limitChildren) {\nif (!excludes.isEmpty()) {\nreturn true;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.nodes.Node:addChildren([Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void addChildren(Node... children) {\nfor (Node child: children) {\nreparentChild(child);\nchildNodes.add(child);\nchild.setSiblingIndex(childNodes.size()-1);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.nodes.Element:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn tag.getName();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn remainingLength() == 0;\n}",
            "method_id": 49
        }
    ]
}