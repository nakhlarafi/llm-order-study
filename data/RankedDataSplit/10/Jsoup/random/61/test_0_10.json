{
    "bug_id": 61,
    "test_id": 0,
    "test_name": "org.jsoup.select.ElementsTest.hasClassCaseInsensitive",
    "test_body": "98: @Test public void hasClassCaseInsensitive() {\n99: Elements els = Jsoup.parse(\"<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE\").select(\"p\");\n100: Element one = els.get(0);\n101: Element two = els.get(1);\n102: Element thr = els.get(2);\n103: 104: assertTrue(one.hasClass(\"One\"));\n105: assertTrue(one.hasClass(\"ONE\"));\n106: 107: assertTrue(two.hasClass(\"TWO\"));\n108: assertTrue(two.hasClass(\"Two\"));\n109: 110: assertTrue(thr.hasClass(\"ThreE\"));\n111: assertTrue(thr.hasClass(\"three\"));\n112: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inButtonScope(Ljava/lang/String;)Z",
            "method_body": "boolean inButtonScope(String targetName) {\nreturn inScope(targetName, TagSearchButton);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>()V",
            "method_body": "protected Node() {\nchildNodes = EMPTY_NODES;\nattributes = null;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeToAny([C)Ljava/lang/String;",
            "method_body": "public String consumeToAny(final char... chars) {\nfinal int start = pos;\nfinal int remaining = length;\nfinal char[] val = input;\nOUTER: while (pos < remaining) {\nfor (char c : chars) {\nif (val[pos] == c)\nbreak OUTER;\npos++;\nreturn pos > start ? cacheString(start, pos-start) : \"\";\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:<clinit>()V",
            "method_body": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\nprivate static final char[] mimeBoundaryChars =\nprivate DataUtil() {}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.parser.Token$Character:getData()Ljava/lang/String;",
            "method_body": "String getData() {\nreturn data;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:<clinit>()V",
            "method_body": "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};\nprivate static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.select.Selector:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Element;)V",
            "method_body": "private Selector(String query, Element root) {\nValidate.notNull(query);\nquery = query.trim();\nValidate.notEmpty(query);\nValidate.notNull(root);\nthis.evaluator = QueryParser.parse(query);\nthis.root = root;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isFalse(Z)V",
            "method_body": "public static void isFalse(boolean val) {\nif (val)\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendTagName(Ljava/lang/String;)V",
            "method_body": "final void appendTagName(String append) {\ntagName = tagName == null ? append : tagName.concat(append);\nnormalName = tagName.toLowerCase();\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:newAttribute()V",
            "method_body": "final void newAttribute() {\nif (attributes == null)\nif (pendingAttributeName != null) {\npendingAttributeName = pendingAttributeName.trim();\nif (pendingAttributeName.length() > 0) {\nif (hasPendingAttributeValue)\nattribute = new Attribute(pendingAttributeName,\nattributes.put(attribute);\npendingAttributeName = null;\nhasEmptyAttributeValue = false;\nhasPendingAttributeValue = false;\nreset(pendingAttributeValue);\npendingAttributeValueS = null;\n}",
            "method_id": 109
        }
    ]
}