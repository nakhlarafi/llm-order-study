{
    "bug_id": 28,
    "test_id": 5,
    "test_name": "org.jsoup.parser.AttributeParseTest.strictAttributeUnescapes",
    "test_body": "57: @Test public void strictAttributeUnescapes() {\n58: String html = \"<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>\";\n59: Elements els = Jsoup.parse(html).select(\"a\");\n60: assertEquals(\"?foo=bar&mid&lt=true\", els.first().attr(\"href\"));\n61: assertEquals(\"?foo=bar<qux&lg=1\", els.last().attr(\"href\"));\n62: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$StartTag:<init>(Ljava/lang/String;)V",
            "method_body": "StartTag(String name) {\nthis();\nthis.tagName = name;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consume()C",
            "method_body": "char consume() {\nchar val = isEmpty() ? EOF : input[pos];\npos++;\nreturn val;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.jsoup.parser.Token:asCharacter()Lorg/jsoup/parser/Token$Character;",
            "method_body": "Character asCharacter() {\nreturn (Character) this;\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$10:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nString tagName = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar).toLowerCase();\nt.tagPending.appendTagName(tagName);\nswitch (r.consume()) {\nt.transition(BeforeAttributeName);\nbreak;\nt.emitTagPending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.jsoup.helper.DescendableLinkedList$DescendingIterator:next()Ljava/lang/Object;",
            "method_body": "public E next() {\nreturn iter.previous();\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchConsume(Ljava/lang/String;)Z",
            "method_body": "boolean matchConsume(String seq) {\nif (matches(seq)) {\npos += seq.length();\nreturn true;\nreturn false;\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.jsoup.select.Elements:add(Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean add(Element element) {return contents.add(element);}\npublic boolean add(Element element) {return contents.add(element);}",
            "method_id": 166
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:current()C",
            "method_body": "char current() {\nreturn isEmpty() ? EOF : input[pos];\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn remainingLength() == 0;\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:transition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void transition(TokeniserState state) {\nthis.state = state;\n}",
            "method_id": 169
        }
    ]
}