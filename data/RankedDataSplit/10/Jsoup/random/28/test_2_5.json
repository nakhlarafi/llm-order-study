{
    "bug_id": 28,
    "test_id": 2,
    "test_name": "org.jsoup.parser.HtmlParserTest.relaxedBaseEntityMatchAndStrictExtendedMatch",
    "test_body": "732: @Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {\n733: // extended entities need a ; at the end to match, base does not\n734: String html = \"&amp &quot &reg &icy &hopf &icy; &hopf;\";\n735: Document doc = Jsoup.parse(html);\n736: doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test\n737: assertEquals(StringUtil.normaliseWhitespace(\"&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;\"), doc.body().html());\n738: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.parser.Token:isStartTag()Z",
            "method_body": "boolean isStartTag() {\nreturn type == TokenType.StartTag;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:escape(Ljava/lang/String;Lorg/jsoup/nodes/Document$OutputSettings;)Ljava/lang/String;",
            "method_body": "static String escape(String string, Document.OutputSettings out) {\nreturn escape(string, out.encoder(), out.escapeMode());\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:isSelfClosing()Z",
            "method_body": "boolean isSelfClosing() {\nreturn selfClosing;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:consumeCharacterReference(Ljava/lang/Character;Z)Ljava/lang/Character;",
            "method_body": "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) {\nif (reader.isEmpty())\nif (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())\nif (reader.matchesAny('\\t', '\\n', '\\r', '\\f', ' ', '<', '&'))\nreader.mark();\nif (reader.matchConsume(\"#\")) { // numbered\nString nameRef = reader.consumeLetterThenDigitSequence();\nString origNameRef = new String(nameRef);\nboolean looksLegit = reader.matches(';');\nboolean found = false;\nwhile (nameRef.length() > 0 && !found) {\nif (Entities.isNamedEntity(nameRef))\nfound = true;\nnameRef = nameRef.substring(0, nameRef.length()-1);\nreader.unconsume();\nif (!found) {\nreader.rewindToMark();\nif (looksLegit) // named with semicolon\nreturn null;\nif (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_'))) {\nreader.rewindToMark();\nreturn null;\nif (!reader.matchConsume(\";\"))\ncharacterReferenceError(\"missing semicolon\"); // missing semi\nreturn Entities.getCharacterByName(nameRef);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:transition(Lorg/jsoup/parser/HtmlTreeBuilderState;)V",
            "method_body": "void transition(HtmlTreeBuilderState state) {\nthis.state = state;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn \"#text\";\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.helper.DescendableLinkedList:<init>()V",
            "method_body": "public DescendableLinkedList() {\nsuper();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:getCharacterByName(Ljava/lang/String;)Ljava/lang/Character;",
            "method_body": "public static Character getCharacterByName(String name) {\nreturn full.get(name);\n}",
            "method_id": 59
        }
    ]
}