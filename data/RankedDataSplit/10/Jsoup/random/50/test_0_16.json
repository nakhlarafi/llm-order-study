{
    "bug_id": 50,
    "test_id": 0,
    "test_name": "org.jsoup.helper.DataUtilTest.supportsBOMinFiles",
    "test_body": "105: public void supportsBOMinFiles() throws IOException {\n106: // test files from http://www.i18nl10n.com/korean/utftest/\n107: File in = getFile(\"/bomtests/bom_utf16be.html\");\n108: Document doc = Jsoup.parse(in, null, \"http://example.com\");\n109: assertTrue(doc.title().contains(\"UTF-16BE\"));\n110: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n111: 112: in = getFile(\"/bomtests/bom_utf16le.html\");\n113: doc = Jsoup.parse(in, null, \"http://example.com\");\n114: assertTrue(doc.title().contains(\"UTF-16LE\"));\n115: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n116: 117: in = getFile(\"/bomtests/bom_utf32be.html\");\n118: doc = Jsoup.parse(in, null, \"http://example.com\");\n119: assertTrue(doc.title().contains(\"UTF-32BE\"));\n120: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n121: 122: in = getFile(\"/bomtests/bom_utf32le.html\");\n123: doc = Jsoup.parse(in, null, \"http://example.com\");\n124: assertTrue(doc.title().contains(\"UTF-32LE\"));\n125: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n126: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$And:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element node) {\nfor (int i = 0; i < num; i++) {\nEvaluator s = evaluators.get(i);\nif (!s.matches(root, node))\nreturn false;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:reset()Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Tag reset() {\ntagName = null;\npendingAttributeName = null;\nreset(pendingAttributeValue);\npendingAttributeValueS = null;\nhasEmptyAttributeValue = false;\nhasPendingAttributeValue = false;\nselfClosing = false;\nattributes = null;\nreturn this;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:parse(Ljava/lang/String;)Lorg/jsoup/select/Evaluator;",
            "method_body": "public static Evaluator parse(String query) {\nQueryParser p = new QueryParser(query);\nreturn p.parse();\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:mark()V",
            "method_body": "void mark() {\nmark = pos;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "final boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:process(Lorg/jsoup/parser/Token;)Z",
            "method_body": "protected boolean process(Token token) {\ncurrentToken = token;\nreturn this.state.process(token, this);\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:transition(Lorg/jsoup/parser/HtmlTreeBuilderState;)V",
            "method_body": "void transition(HtmlTreeBuilderState state) {\nthis.state = state;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.jsoup.select.Evaluator:<init>()V",
            "method_body": "protected Evaluator() {\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.jsoup.parser.Token$Comment:<init>()V",
            "method_body": "Comment() {\ntype = TokenType.Comment;\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:processEndTag(Ljava/lang/String;)Z",
            "method_body": "protected boolean processEndTag(String name) {\nif (currentToken == end) { // don't recycle an in-use token\nreturn process(end.reset().name(name));\n}",
            "method_id": 169
        }
    ]
}