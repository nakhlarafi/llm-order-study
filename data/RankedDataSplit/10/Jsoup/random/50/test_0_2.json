{
    "bug_id": 50,
    "test_id": 0,
    "test_name": "org.jsoup.helper.DataUtilTest.supportsBOMinFiles",
    "test_body": "105: public void supportsBOMinFiles() throws IOException {\n106: // test files from http://www.i18nl10n.com/korean/utftest/\n107: File in = getFile(\"/bomtests/bom_utf16be.html\");\n108: Document doc = Jsoup.parse(in, null, \"http://example.com\");\n109: assertTrue(doc.title().contains(\"UTF-16BE\"));\n110: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n111: 112: in = getFile(\"/bomtests/bom_utf16le.html\");\n113: doc = Jsoup.parse(in, null, \"http://example.com\");\n114: assertTrue(doc.title().contains(\"UTF-16LE\"));\n115: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n116: 117: in = getFile(\"/bomtests/bom_utf32be.html\");\n118: doc = Jsoup.parse(in, null, \"http://example.com\");\n119: assertTrue(doc.title().contains(\"UTF-32BE\"));\n120: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n121: 122: in = getFile(\"/bomtests/bom_utf32le.html\");\n123: doc = Jsoup.parse(in, null, \"http://example.com\");\n124: assertTrue(doc.title().contains(\"UTF-32LE\"));\n125: assertTrue(doc.text().contains(\"\u00ea\u00b0\u0080\u00ea\u00b0\u0081\u00ea\u00b0\u0082\u00ea\u00b0\u0083\u00ea\u00b0\u0084\u00ea\u00b0\u0085\"));\n126: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:currentElement()Lorg/jsoup/nodes/Element;",
            "method_body": "protected Element currentElement() {\nint size = stack.size();\nreturn size > 0 ? stack.get(size-1) : null;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nsuper(baseUri, attributes);\nValidate.notNull(tag);\nthis.tag = tag;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchesLetter()Z",
            "method_body": "boolean matchesLetter() {\nif (isEmpty())\nchar c = input[pos];\nreturn (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void insertNode(Node node) {\nif (stack.size() == 0)\ndoc.appendChild(node);\nelse if (isFosterInserts())\ncurrentElement().appendChild(node);\nif (node instanceof Element && ((Element) node).tag().isFormListed()) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$2:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar[] c = t.consumeCharacterReference(null, false);\nif (c == null)\nt.emit('&');\nt.transition(Data);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.parser.Token$StartTag:reset()Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Tag reset() {\nsuper.reset();\nattributes = new Attributes();\nreturn this;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void reparentChild(Node child) {\nif (child.parentNode != null)\nchild.setParentNode(this);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertStartTag(Ljava/lang/String;)Lorg/jsoup/nodes/Element;",
            "method_body": "Element insertStartTag(String startTagName) {\nElement el = new Element(Tag.valueOf(startTagName), baseUri);\ninsert(el);\nreturn el;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$2:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isDoctype()) {\n} else if (t.isComment()) {\n} else if (isWhitespace(t)) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n} else if (t.isEndTag()) {\nreturn anythingElse(t, tb);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:read()Lorg/jsoup/parser/Token;",
            "method_body": "Token read() {\nif (!selfClosingFlagAcknowledged) {\nwhile (!isEmitPending)\nstate.read(this, reader);\nif (charsBuilder.length() > 0) {\nString str = charsBuilder.toString();\ncharsBuilder.delete(0, charsBuilder.length());\ncharsString = null;\nreturn charPending.data(str);\n} else if (charsString != null) {\nisEmitPending = false;\nreturn emitPending;\n}",
            "method_id": 29
        }
    ]
}