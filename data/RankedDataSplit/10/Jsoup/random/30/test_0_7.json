{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.jsoup.safety.CleanerTest.testIsValid",
    "test_body": "91: @Test public void testIsValid() {\n92: String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n93: String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n94: String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n95: String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n96: assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n97: assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n98: assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n99: assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));\n100: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:isSameFormattingElement(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "private boolean isSameFormattingElement(Element a, Element b) {\nreturn a.nodeName().equals(b.nodeName()) &&\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:current()C",
            "method_body": "char current() {\nreturn isEmpty() ? EOF : input[pos];\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$AttributeValue:<init>(Ljava/lang/String;)V",
            "method_body": "AttributeValue(String value) {\nsuper(value);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.jsoup.parser.Token:<init>()V",
            "method_body": "private Token() {\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inScope(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "boolean inScope(String targetName, String[] extras) {\nreturn inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:pop()Lorg/jsoup/nodes/Element;",
            "method_body": "Element pop() {\nif (stack.peekLast().nodeName().equals(\"td\") && !state.name().equals(\"InCell\"))\nif (stack.peekLast().nodeName().equals(\"html\"))\nreturn stack.pollLast();\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseFragment(Ljava/lang/String;Lorg/jsoup/nodes/Element;Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri) {\nHtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();\nreturn treeBuilder.parseFragment(fragmentHtml, context, baseUri, ParseErrorList.noTracking());\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Lorg/jsoup/nodes/Attribute;)V",
            "method_body": "public void put(Attribute attribute) {\nValidate.notNull(attribute);\nif (attributes == null)\nattributes = new LinkedHashMap<String, Attribute>(2);\nattributes.put(attribute.getKey(), attribute);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchesLetter()Z",
            "method_body": "boolean matchesLetter() {\nif (isEmpty())\nchar c = input[pos];\nreturn (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.jsoup.nodes.Document:quirksMode(Lorg/jsoup/nodes/Document$QuirksMode;)Lorg/jsoup/nodes/Document;",
            "method_body": "public Document quirksMode(QuirksMode quirksMode) {\nthis.quirksMode = quirksMode;\nreturn this;\n}",
            "method_id": 79
        }
    ]
}