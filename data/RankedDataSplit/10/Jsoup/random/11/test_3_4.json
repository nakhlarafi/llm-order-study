{
    "bug_id": 11,
    "test_id": 3,
    "test_name": "org.jsoup.select.SelectorTest.notParas",
    "test_body": "542: @Test public void notParas() {\n543: Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n544: 545: Elements el1 = doc.select(\"p:not([id=1])\");\n546: assertEquals(2, el1.size());\n547: assertEquals(\"Two\", el1.first().text());\n548: assertEquals(\"Three\", el1.last().text());\n549: 550: Elements el2 = doc.select(\"p:not(:has(span))\");\n551: assertEquals(2, el2.size());\n552: assertEquals(\"One\", el2.first().text());\n553: assertEquals(\"Two\", el2.last().text());\n554: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Node:childNode(I)Lorg/jsoup/nodes/Node;",
            "method_body": "public Node childNode(int index) {\nreturn childNodes.get(index);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesStartTag()Z",
            "method_body": "public boolean matchesStartTag() {\nreturn (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetterOrDigit(queue.charAt(pos+1)));\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseTextNode()V",
            "method_body": "private void parseTextNode() {\nif (tq.peek().equals('<')) {\nString text = tq.consumeTo(\"<\");\ntextNode = TextNode.createFromEncoded(text, baseUri);\nlast().appendChild(textNode);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setOptionalClosing()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setOptionalClosing() {\noptionalClosing = true;\nreturn this;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.nodes.Document:<init>(Ljava/lang/String;)V",
            "method_body": "public Document(String baseUri) {\nsuper(Tag.valueOf(\"#root\"), baseUri);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseStartTag()V",
            "method_body": "private void parseStartTag() {\ntq.consume(\"<\");\nString tagName = tq.consumeTagName();\nValidate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");\ntq.consumeWhitespace();\nAttributes attributes = new Attributes();\nwhile (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\nAttribute attribute = parseAttribute();\nif (attribute != null)\nattributes.put(attribute);\n}\nTag tag = Tag.valueOf(tagName);\nElement child = new Element(tag, baseUri, attributes);\nboolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>\nif (tq.matchChomp(\"/>\")) { // close empty element or tag\ntq.matchChomp(\">\");\naddChildToParent(child, isEmptyElement);\nif (tag.isData()) {\nif (child.tagName().equals(\"base\")) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:<init>(Ljava/lang/String;)V",
            "method_body": "public TokenQueue(String data) {\nValidate.notNull(data);\nqueue = data;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.parser.Tag:requiresSpecificParent()Z",
            "method_body": "boolean requiresSpecificParent() {\nreturn directDescendant;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.nodes.Document:findFirstElementByTagName(Ljava/lang/String;Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element findFirstElementByTagName(String tag, Node node) {\nif (node.nodeName().equals(tag))\nreturn (Element) node;\nfor (Node child: node.childNodes) {\nElement found = findFirstElementByTagName(tag, child);\nif (found != null)\nreturn found;\n}\nreturn null;\n}",
            "method_id": 49
        }
    ]
}