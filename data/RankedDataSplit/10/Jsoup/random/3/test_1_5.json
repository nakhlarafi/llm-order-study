{
    "bug_id": 3,
    "test_id": 1,
    "test_name": "org.jsoup.parser.ParserTest.handlesNestedImplicitTable",
    "test_body": "172: @Test public void handlesNestedImplicitTable() {\n173: Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n174: assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n175: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Collector:accumulateMatches(Lorg/jsoup/nodes/Evaluator;Ljava/util/List;Lorg/jsoup/nodes/Element;)V",
            "method_body": "private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) {\nif (eval.matches(element))\nelements.add(element);\nfor (Element child: element.children())\naccumulateMatches(eval, elements, child);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn queue.isEmpty();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainInlineOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainInlineOnly() {\ncanContainBlock = false;\ncanContainInline = true;\nreturn this;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\ntq.consumeWhitespace();\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\naddElements(findElements()); // chomp first element matcher off queue\nwhile (!tq.isEmpty()) {\nreturn new Elements(elements);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>()V",
            "method_body": "public Elements() {\ncontents = new ArrayList<Element>();\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:getValue()Ljava/lang/String;",
            "method_body": "public String getValue() {\nreturn value;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.nodes.Node:indexInList(Lorg/jsoup/nodes/Node;Ljava/util/List;)Ljava/lang/Integer;",
            "method_body": "protected static <N extends Node> Integer indexInList(N search, List<N> nodes) {\nValidate.notNull(search);\nValidate.notNull(nodes);\nfor (int i = 0; i < nodes.size(); i++) {\nN node = nodes.get(i);\nif (node.equals(search))\nreturn i;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normalise()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document normalise() {\nif (select(\"html\").isEmpty())\nif (head() == null)\nif (body() == null)\nnormalise(head());\nnormalise(select(\"html\").first());\nnormalise(this);\nreturn this;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWord()Ljava/lang/String;",
            "method_body": "public String consumeWord() {\nStringBuilder wordAccum = new StringBuilder();\nwhile (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) {\nwordAccum.append(queue.removeFirst());\nreturn wordAccum.toString();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.parser.Tag:register(Lorg/jsoup/parser/Tag;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag register(Tag tag) {\ntag.setAncestor(defaultAncestor.tagName);\nsynchronized (tags) {\ntags.put(tag.tagName, tag);\n}\nreturn tag;\n}",
            "method_id": 59
        }
    ]
}