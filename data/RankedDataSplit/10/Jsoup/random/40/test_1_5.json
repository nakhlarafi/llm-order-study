{
    "bug_id": 40,
    "test_id": 1,
    "test_name": "org.jsoup.parser.HtmlParserTest.handlesInvalidDoctypes",
    "test_body": "810: @Test public void handlesInvalidDoctypes() {\n811: // would previously throw invalid name exception on empty doctype\n812: Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n813: assertEquals(\n814: \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n815: StringUtil.normaliseWhitespace(doc.outerHtml()));\n816: 817: doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n818: assertEquals(\n819: \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n820: StringUtil.normaliseWhitespace(doc.outerHtml()));\n821: 822: doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n823: assertEquals(\n824: \"<!DOCTYPE \u00ef\u00bf\u00bd> <html> <head></head> <body></body> </html>\",\n825: StringUtil.normaliseWhitespace(doc.outerHtml()));\n826: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matches(Ljava/lang/String;)Z",
            "method_body": "boolean matches(String seq) {\nint scanLength = seq.length();\nif (scanLength > length - pos)\nfor (int offset = 0; offset < scanLength; offset++)\nif (seq.charAt(offset) != input[pos+offset])\nreturn false;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(Object obj, String msg) {\nif (obj == null)\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.parser.Token:<init>()V",
            "method_body": "private Token() {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consume()C",
            "method_body": "char consume() {\nchar val = pos >= length ? EOF : input[pos];\npos++;\nreturn val;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:current()C",
            "method_body": "char current() {\nreturn pos >= length ? EOF : input[pos];\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$8:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(MarkupDeclarationOpen);\nbreak;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;)V",
            "method_body": "protected Node(String baseUri) {\nthis(baseUri, new Attributes());\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emitDoctypePending()V",
            "method_body": "void emitDoctypePending() {\nemit(doctypePending);\n}",
            "method_id": 59
        }
    ]
}