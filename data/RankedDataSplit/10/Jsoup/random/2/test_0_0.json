{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.jsoup.parser.ParserTest.handlesTextAfterData",
    "test_body": "135: @Test public void handlesTextAfterData() {\n136: String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n137: Document doc = Jsoup.parse(h);\n138: assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n139: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Selector:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Element;)V",
            "method_body": "private Selector(String query, Element root) {\nValidate.notNull(query);\nquery = query.trim();\nValidate.notEmpty(query);\nValidate.notNull(root);\nthis.elements = new LinkedHashSet<Element>();\nthis.query = query;\nthis.root = root;\nthis.tq = new TokenQueue(query);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:<init>()V",
            "method_body": "private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>();\nValidate.notEmpty(key);\nAttribute attr = attributes.get(key.toLowerCase());\nreturn attr != null ? attr.getValue() : \"\";\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\ntq.consumeWhitespace();\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\naddElements(findElements()); // chomp first element matcher off queue\nwhile (!tq.isEmpty()) {\nreturn new Elements(elements);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normalise(Lorg/jsoup/nodes/Element;)V",
            "method_body": "private void normalise(Element element) {\nList<Node> toMove = new ArrayList<Node>();\nfor (Node node: element.childNodes) {\nif (node instanceof TextNode) {\n}\nfor (Node node: toMove) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:getWholeText()Ljava/lang/String;",
            "method_body": "public String getWholeText() {\nreturn attributes.get(TEXT_KEY);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setOptionalClosing()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setOptionalClosing() {\noptionalClosing = true;\nreturn this;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.nodes.Element:preserveWhitespace()Z",
            "method_body": "boolean preserveWhitespace() {\nreturn tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.parser.Parser:popStackToSuitableContainer(Lorg/jsoup/parser/Tag;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element popStackToSuitableContainer(Tag tag) {\nwhile (!stack.isEmpty()) {\nif (last().tag().canContain(tag))\nreturn last();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.select.Collector:collect(Lorg/jsoup/nodes/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements collect (Evaluator eval, Element root) {\nElements elements = new Elements();\naccumulateMatches(eval, elements, root);\nreturn elements;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nsuper(baseUri, attributes);\nValidate.notNull(tag);\nthis.tag = tag;\n}",
            "method_id": 9
        }
    ]
}