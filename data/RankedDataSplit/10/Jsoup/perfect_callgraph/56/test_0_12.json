{
    "bug_id": 56,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.DocumentTypeTest.testRoundTrip",
    "test_body": "44: @Test public void testRoundTrip() {\n45: String base = \"<!DOCTYPE html>\";\n46: assertEquals(\"<!doctype html>\", htmlOutput(base));\n47: assertEquals(base, xmlOutput(base));\n48: 49: String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n50: assertEquals(publicDoc, htmlOutput(publicDoc));\n51: assertEquals(publicDoc, xmlOutput(publicDoc));\n52: 53: String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n54: assertEquals(systemDoc, htmlOutput(systemDoc));\n55: assertEquals(systemDoc, xmlOutput(systemDoc));\n56: 57: String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n58: assertEquals(legacyDoc, htmlOutput(legacyDoc));\n59: assertEquals(legacyDoc, xmlOutput(legacyDoc));\n60: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consume()C",
            "method_body": "char consume() {\nchar val = pos >= length ? EOF : input[pos];\npos++;\nreturn val;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:advance()V",
            "method_body": "public void advance() {\npos++;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:nextIndexOf(C)I",
            "method_body": "int nextIndexOf(char c) {\nfor (int i = pos; i < length; i++) {\nif (c == input[i])\nreturn i - pos;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeTo(C)Ljava/lang/String;",
            "method_body": "public String consumeTo(char c) {\nint offset = nextIndexOf(c);\nif (offset != -1) {\nString consumed = cacheString(pos, offset);\npos += offset;\nreturn consumed;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeToAny([C)Ljava/lang/String;",
            "method_body": "public String consumeToAny(final char... chars) {\nfinal int start = pos;\nfinal int remaining = length;\nfinal char[] val = input;\nOUTER: while (pos < remaining) {\nfor (char c : chars) {\nif (val[pos] == c)\nbreak OUTER;\npos++;\nreturn pos > start ? cacheString(start, pos-start) : \"\";\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeLetterSequence()Ljava/lang/String;",
            "method_body": "String consumeLetterSequence() {\nint start = pos;\nwhile (pos < length) {\nchar c = input[pos];\nif ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))\npos++;\n}\nreturn cacheString(start, pos - start);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matches(C)Z",
            "method_body": "boolean matches(char c) {\nreturn !isEmpty() && input[pos] == c;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matches(Ljava/lang/String;)Z",
            "method_body": "boolean matches(String seq) {\nint scanLength = seq.length();\nif (scanLength > length - pos)\nfor (int offset = 0; offset < scanLength; offset++)\nif (seq.charAt(offset) != input[pos+offset])\nreturn false;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchesIgnoreCase(Ljava/lang/String;)Z",
            "method_body": "boolean matchesIgnoreCase(String seq) {\nint scanLength = seq.length();\nif (scanLength > length - pos)\nfor (int offset = 0; offset < scanLength; offset++) {\nchar upScan = Character.toUpperCase(seq.charAt(offset));\nchar upTarget = Character.toUpperCase(input[pos + offset]);\nif (upScan != upTarget)\nreturn false;\nreturn true;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matchesAny([C)Z",
            "method_body": "boolean matchesAny(char... seq) {\nif (isEmpty())\nchar c = input[pos];\nfor (char seek : seq) {\nif (seek == c)\nreturn false;\n}",
            "method_id": 129
        }
    ]
}