{
    "bug_id": 79,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.TextNodeTest.testLeadNodesHaveNoChildren",
    "test_body": "78: @Test public void testLeadNodesHaveNoChildren() {\n79: Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n80: Element div = doc.select(\"div\").first();\n81: TextNode tn = (TextNode) div.childNode(0);\n82: List<Node> nodes = tn.childNodes();\n83: assertEquals(0, nodes.size());\n84: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(final String needle, final String... haystack) {\nfinal int len = haystack.length;\nfor (int i = 0; i < len; i++) {\nif (haystack[i].equals(needle))\nreturn false;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:inSorted(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean inSorted(String needle, String[] haystack) {\nreturn Arrays.binarySearch(haystack, needle) >= 0;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$Constants:<clinit>()V",
            "method_body": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};\nstatic final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};",
            "method_id": 162
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:childNodeSize()I",
            "method_body": "public int childNodeSize() {\nreturn 0;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;)V",
            "method_body": "public TextNode(String text) {\nvalue = text;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.jsoup.parser.Token$EOF:<init>()V",
            "method_body": "EOF() {\ntype = Token.TokenType.EOF;\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.jsoup.parser.Token$EOF:reset()Lorg/jsoup/parser/Token;",
            "method_body": "Token reset() {\nreturn this;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Ljava/lang/String;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(String query, Element root) {\nValidate.notEmpty(query);\nreturn select(QueryParser.parse(query), root);\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Lorg/jsoup/select/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(Evaluator evaluator, Element root) {\nValidate.notNull(evaluator);\nValidate.notNull(root);\nreturn Collector.collect(evaluator, root);\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:<init>(Ljava/lang/String;)V",
            "method_body": "private QueryParser(String query) {\nthis.query = query;\nthis.tq = new TokenQueue(query);\n}",
            "method_id": 169
        }
    ]
}