{
    "bug_id": 63,
    "test_id": 2,
    "test_name": "org.jsoup.parser.HtmlParserTest.selfClosingVoidIsNotAnError",
    "test_body": "967: @Test public void selfClosingVoidIsNotAnError() {\n968: String html = \"<p>test<br/>test<br/></p>\";\n969: Parser parser = Parser.htmlParser().setTrackErrors(5);\n970: parser.parseInput(html, \"\");\n971: assertEquals(0, parser.getErrors().size());\n972: 973: assertTrue(Jsoup.isValid(html, Whitelist.basic()));\n974: String clean = Jsoup.clean(html, Whitelist.basic());\n975: assertEquals(\"<p>test<br>test<br></p>\", clean);\n976: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tokeniser:error(Ljava/lang/String;)V",
            "method_body": "void error(String errorMsg) {\nif (errors.canAddError())\nerrors.add(new ParseError(reader.pos(), errorMsg));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.nodes.Element:tagName()Ljava/lang/String;",
            "method_body": "public String tagName() {\nreturn tag.getName();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.parser.Parser:<init>(Lorg/jsoup/parser/TreeBuilder;)V",
            "method_body": "public Parser(TreeBuilder treeBuilder) {\nthis.treeBuilder = treeBuilder;\nsettings = treeBuilder.defaultSettings();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.parser.Parser:isTrackErrors()Z",
            "method_body": "public boolean isTrackErrors() {\nreturn maxErrors > 0;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.parser.Parser:setTrackErrors(I)Lorg/jsoup/parser/Parser;",
            "method_body": "public Parser setTrackErrors(int maxErrors) {\nthis.maxErrors = maxErrors;\nreturn this;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.Parser:getErrors()Ljava/util/List;",
            "method_body": "public List<ParseError> getErrors() {\nreturn errors;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:initialiseParse(Ljava/io/Reader;Ljava/lang/String;Lorg/jsoup/parser/ParseErrorList;Lorg/jsoup/parser/ParseSettings;)V",
            "method_body": "abstract ParseSettings defaultSettings();\nValidate.notNull(input, \"String input must not be null\");\nValidate.notNull(baseUri, \"BaseURI must not be null\");\ndoc = new Document(baseUri);\nthis.settings = settings;\nreader = new CharacterReader(input);\nthis.errors = errors;\ncurrentToken = null;\ntokeniser = new Tokeniser(reader, errors);\nstack = new ArrayList<>(32);\nthis.baseUri = baseUri;\n}",
            "method_id": 29
        }
    ]
}