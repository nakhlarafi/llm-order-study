{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.NodeTest.absHandlesRelativeQuery",
    "test_body": "45: @Test public void absHandlesRelativeQuery() {\n46: Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"http://jsoup.org/path/file?bar\");\n47: 48: Element a1 = doc.select(\"a\").first();\n49: assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n50: 51: Element a2 = doc.select(\"a\").get(1);\n52: assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n53: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\ntq.consumeWhitespace();\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\naddElements(findElements()); // chomp first element matcher off queue\nwhile (!tq.isEmpty()) {\nreturn new Elements(elements);\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.jsoup.select.Selector:findElements()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements findElements() {\nif (tq.matchChomp(\"#\")) {\n} else if (tq.matchChomp(\".\")) {\n} else if (tq.matchesWord()) {\nreturn byTag();\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.jsoup.select.Selector:addElements(Ljava/util/Collection;)V",
            "method_body": "private void addElements(Collection<Element> add) {\nelements.addAll(add);\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.jsoup.select.Selector:byTag()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements byTag() {\nString tagName = tq.consumeElementSelector();\nValidate.notEmpty(tagName);\nif (tagName.contains(\"|\"))\nreturn root.getElementsByTag(tagName);\n}",
            "method_id": 133
        }
    ]
}