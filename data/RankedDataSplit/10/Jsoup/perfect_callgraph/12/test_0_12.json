{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.testByAttributeRegexCombined",
    "test_body": "127: @Test public void testByAttributeRegexCombined() {\n128: Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n129: Elements els = doc.select(\"div table[class~=x|y]\");\n130: assertEquals(1, els.size());\n131: assertEquals(\"Hello\", els.text());\n132: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Collector:collect(Lorg/jsoup/nodes/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements collect (Evaluator eval, Element root) {\nElements elements = new Elements();\nnew NodeTraversor(new Accumulator(elements, eval)).traverse(root);\nreturn elements;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>()V",
            "method_body": "public Elements() {\ncontents = new ArrayList<Element>();\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>(Ljava/util/Collection;)V",
            "method_body": "public Elements(Collection<Element> elements) {\ncontents = new ArrayList<Element>(elements);\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.select.Elements:first()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element first() {\nreturn contents.isEmpty() ? null : contents.get(0);\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.jsoup.select.Elements:contains(Ljava/lang/Object;)Z",
            "method_body": "public boolean contains(Object o) {return contents.contains(o);}\npublic boolean contains(Object o) {return contents.contains(o);}",
            "method_id": 124
        },
        {
            "method_signature": "org.jsoup.select.Elements:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Element> iterator() {return contents.iterator();}\npublic Iterator<Element> iterator() {return contents.iterator();}",
            "method_id": 125
        },
        {
            "method_signature": "org.jsoup.select.Elements:add(Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean add(Element element) {return contents.add(element);}\npublic boolean add(Element element) {return contents.add(element);}",
            "method_id": 126
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:<init>(Lorg/jsoup/select/NodeVisitor;)V",
            "method_body": "public NodeTraversor(NodeVisitor visitor) {\nthis.visitor = visitor;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodes().size() > 0) {\nnode = node.childNode(0);\ndepth++;\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nnode = node.parent();\ndepth--;\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\nnode = node.nextSibling();\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:<init>(Lorg/jsoup/select/Elements;Lorg/jsoup/nodes/Evaluator;)V",
            "method_body": "Accumulator(Elements elements, Evaluator eval) {\nthis.elements = elements;\nthis.eval = eval;\n}",
            "method_id": 129
        }
    ]
}