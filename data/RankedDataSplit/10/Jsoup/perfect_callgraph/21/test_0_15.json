{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.handlesCommasInSelector",
    "test_body": "588: @Test public void handlesCommasInSelector() {\n589: Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n590: 591: Elements ps = doc.select(\"[name=1,2]\");\n592: assertEquals(1, ps.size());\n593: 594: Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n595: assertEquals(2, containers.size());\n596: assertEquals(\"div\", containers.get(0).tagName());\n597: assertEquals(\"li\", containers.get(1).tagName());\n598: assertEquals(\"123\", containers.get(1).text());\n599: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.QueryParser:<init>(Ljava/lang/String;)V",
            "method_body": "private QueryParser(String query) {\nthis.query = query;\nthis.tq = new TokenQueue(query);\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:<clinit>()V",
            "method_body": "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\nprivate final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
            "method_id": 151
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:parse(Ljava/lang/String;)Lorg/jsoup/select/Evaluator;",
            "method_body": "public static Evaluator parse(String query) {\nQueryParser p = new QueryParser(query);\nreturn p.parse();\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:findElements()V",
            "method_body": "private void findElements() {\nif (tq.matchChomp(\"#\"))\nelse if (tq.matchChomp(\".\"))\nbyClass();\nelse if (tq.matchesWord())\nbyTag();\nelse if (tq.matches(\"[\"))\nbyAttribute();\nelse if (tq.matchChomp(\"*\"))\nelse if (tq.matchChomp(\":lt(\"))\nelse if (tq.matchChomp(\":gt(\"))\nelse if (tq.matchChomp(\":eq(\"))\nelse if (tq.matches(\":has(\"))\nelse if (tq.matches(\":contains(\"))\nelse if (tq.matches(\":containsOwn(\"))\nelse if (tq.matches(\":matches(\"))\nmatches(false);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byTag()V",
            "method_body": "private void byTag() {\nString tagName = tq.consumeElementSelector();\nValidate.notEmpty(tagName);\nif (tagName.contains(\"|\"))\nevals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byAttribute()V",
            "method_body": "private void byAttribute() {\nTokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue\nString key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"); // eq, not, start, end, contain, match, (no val)\nValidate.notEmpty(key);\ncq.consumeWhitespace();\nif (cq.isEmpty()) {\nif (cq.matchChomp(\"=\"))\nevals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:matches(Z)V",
            "method_body": "private void matches(boolean own) {\ntq.consume(own ? \":matchesOwn\" : \":matches\");\nString regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped\nValidate.notEmpty(regex, \":matches(regex) query must not be empty\");\nif (own)\nevals.add(new Evaluator.Matches(Pattern.compile(regex)));\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:<init>(Ljava/lang/String;)V",
            "method_body": "public TokenQueue(String data) {\nValidate.notNull(data);\nqueue = data;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn remainingLength() == 0;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainingLength()I",
            "method_body": "private int remainingLength() {\nreturn queue.length() - pos;\n}",
            "method_id": 159
        }
    ]
}