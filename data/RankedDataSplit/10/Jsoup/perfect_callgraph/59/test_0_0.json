{
    "bug_id": 59,
    "test_id": 0,
    "test_name": "org.jsoup.safety.CleanerTest.handlesControlCharactersAfterTagName",
    "test_body": "281: @Test public void handlesControlCharactersAfterTagName() {\n282: String html = \"<a/\\06>\";\n283: String clean = Jsoup.clean(html, Whitelist.basic());\n284: assertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);\n285: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Tag:newAttribute()V",
            "method_body": "final void newAttribute() {\nif (attributes == null)\nif (pendingAttributeName != null) {\npendingAttributeName = pendingAttributeName.trim();\nif (hasPendingAttributeValue)\nattribute = new Attribute(pendingAttributeName,\nelse if (hasEmptyAttributeValue)\nattribute = new BooleanAttribute(pendingAttributeName);\npendingAttributeName = null;\nhasEmptyAttributeValue = false;\nhasPendingAttributeValue = false;\nreset(pendingAttributeValue);\npendingAttributeValueS = null;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:basic()Lorg/jsoup/safety/Whitelist;",
            "method_body": "public static Whitelist basic() {\nreturn new Whitelist()\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:<init>()V",
            "method_body": "public Whitelist() {\ntagNames = new HashSet<TagName>();\nattributes = new HashMap<TagName, Set<AttributeKey>>();\nenforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\nprotocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\npreserveRelativeLinks = false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addTags([Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addTags(String... tags) {\nValidate.notNull(tags);\nfor (String tagName : tags) {\nValidate.notEmpty(tagName);\ntagNames.add(TagName.valueOf(tagName));\nreturn this;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string) {\nif (string == null || string.length() == 0)\nthrow new IllegalArgumentException(\"String must not be empty\");\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TagName:valueOf(Ljava/lang/String;)Lorg/jsoup/safety/Whitelist$TagName;",
            "method_body": "static TagName valueOf(String value) {\nreturn new TagName(value);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TagName:<init>(Ljava/lang/String;)V",
            "method_body": "TagName(String value) {\nsuper(value);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TypedValue:<init>(Ljava/lang/String;)V",
            "method_body": "TypedValue(String value) {\nValidate.notNull(value);\nthis.value = value;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addAttributes(Ljava/lang/String;[Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addAttributes(String tag, String... attributes) {\nValidate.notEmpty(tag);\nValidate.notNull(attributes);\nValidate.isTrue(attributes.length > 0, \"No attribute names supplied.\");\nTagName tagName = TagName.valueOf(tag);\nif (!tagNames.contains(tagName))\nSet<AttributeKey> attributeSet = new HashSet<AttributeKey>();\nfor (String key : attributes) {\nValidate.notEmpty(key);\nattributeSet.add(AttributeKey.valueOf(key));\nif (this.attributes.containsKey(tagName)) {\nthis.attributes.put(tagName, attributeSet);\nreturn this;\n}",
            "method_id": 9
        }
    ]
}