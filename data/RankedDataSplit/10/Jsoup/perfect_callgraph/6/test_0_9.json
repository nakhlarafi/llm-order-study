{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ParseTest.testYahooArticle",
    "test_body": "143: public void testYahooArticle() throws IOException {\n144: File in = getFile(\"/htmltests/yahoo-article-1.html\");\n145: Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n146: Element p = doc.select(\"p:contains(Volt will be sold in the United States\").first();\n147: assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n148: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public TextNode(String text, String baseUri) {\nthis.baseUri = baseUri;\nthis.text = text;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:createFromEncoded(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/TextNode;",
            "method_body": "public static TextNode createFromEncoded(String encodedText, String baseUri) {\nString text = Entities.unescape(encodedText);\nreturn new TextNode(text, baseUri);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:<clinit>()V",
            "method_body": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=([^\\\\s;]*)\");\nprivate DataUtil() {}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:load(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Document;",
            "method_body": "public static Document load(File in, String charsetName, String baseUri) throws IOException {\nInputStream inStream = null;\ninStream = new FileInputStream(in);\nreturn load(inStream, charsetName, baseUri);\nif (inStream != null)\ninStream.close();\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:load(Ljava/io/InputStream;Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Document;",
            "method_body": "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {\nByteBuffer byteData = readToByteBuffer(in);\nreturn parseByteData(byteData, charsetName, baseUri);\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:parseByteData(Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Document;",
            "method_body": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {\nDocument doc = null;\nif (charsetName == null) { // determine from meta. safe parse as UTF-8\nValidate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\ndocData = Charset.forName(charsetName).decode(byteData).toString();\nif (doc == null) {\ndoc = Jsoup.parse(docData, baseUri);\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:readToByteBuffer(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;",
            "method_body": "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\nbyte[] buffer = new byte[bufferSize];\nByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\nread  = inStream.read(buffer);\nif (read == -1) break;\noutStream.write(buffer, 0, read);\nByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\nreturn byteData;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {\nsuper(baseUri);\nattributes.put(DECL_KEY, data);\nthis.isProcessingInstruction = isProcessingInstruction;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.nodes.DataNode:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public DataNode(String data, String baseUri) {\nsuper(baseUri);\nattributes.put(DATA_KEY, data);\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.nodes.Comment:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Comment(String data, String baseUri) {\nsuper(baseUri);\nattributes.put(COMMENT_KEY, data);\n}",
            "method_id": 99
        }
    ]
}