{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ParseTest.testYahooArticle",
    "test_body": "143: public void testYahooArticle() throws IOException {\n144: File in = getFile(\"/htmltests/yahoo-article-1.html\");\n145: Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");\n146: Element p = doc.select(\"p:contains(Volt will be sold in the United States\").first();\n147: assertEquals(\"In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.\", p.text());\n148: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tag:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn tagName;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName) {\nValidate.notNull(tagName);\ntagName = tagName.trim().toLowerCase();\nValidate.notEmpty(tagName);\nsynchronized (tags) {\nTag tag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.setAncestor(defaultAncestor.tagName);\ntag.setExcludes();\ntag.isBlock = false;\ntag.canContainBlock = true;\nreturn tag;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.parser.Tag:canContain(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean canContain(Tag child) {\nValidate.notNull(child);\nif (child.isBlock && !this.canContainBlock)\nif (!child.isBlock && !this.canContainInline) // not block == inline\nif (this.optionalClosing && this.equals(child))\nif (this.empty || this.isData())\nif (this.requiresSpecificParent() && this.getImplicitParent().equals(child))\nif (limitChildren) {\nfor (Tag childParent : child.ancestors) {\nif (childParent.equals(this))\nreturn true;\n}\nif (!excludes.isEmpty()) {\nfor (Tag excluded: excludes) {\nif (child.equals(excluded))\n}\nreturn true;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isData()Z",
            "method_body": "public boolean isData() {\nreturn !canContainInline && !isEmpty();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn empty;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isKnownTag()Z",
            "method_body": "public boolean isKnownTag() {\nreturn knownTag;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getImplicitParent()Lorg/jsoup/parser/Tag;",
            "method_body": "Tag getImplicitParent() {\nreturn (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.parser.Tag:requiresSpecificParent()Z",
            "method_body": "boolean requiresSpecificParent() {\nreturn directDescendant;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isValidParent(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean isValidParent(Tag child) {\nreturn isValidAncestor(child);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isValidAncestor(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean isValidAncestor(Tag child) {\nif (child.ancestors.isEmpty())\nfor (int i = 0; i < child.ancestors.size(); i++)\nif (this.equals(child.ancestors.get(i)))\nreturn true;\nreturn false;\n}",
            "method_id": 29
        }
    ]
}