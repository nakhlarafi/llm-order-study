{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.jsoup.parser.ParserTest.createsStructureFromBodySnippet",
    "test_body": "105: @Test public void createsStructureFromBodySnippet() {\n106: // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine\n107: // needs to move into the start of the body\n108: String html = \"foo <b>bar</b> baz\";\n109: Document doc = Jsoup.parse(html);\n110: assertEquals (\"foo bar baz\", doc.text());\n111: 112: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matches(Ljava/lang/String;)Z",
            "method_body": "public boolean matches(String seq) {\nint len = seq.length();\nif (len > queue.size())\nreturn false;\nList<Character> chars = queue.subList(0, len);\nchar[] seqChars = seq.toCharArray();\nfor (int i = 0; i < len; i++) {\nCharacter found = Character.toLowerCase(chars.get(i));\nCharacter check = Character.toLowerCase(seqChars[i]);\nif (!found.equals(check))\nreturn false;\nreturn true;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume(Ljava/lang/String;)V",
            "method_body": "public void consume(String seq) {\nif (!matches(seq))\nint len = seq.length();\nif (len > queue.size())\nfor (int i = 0; i < len; i++) {\nconsume();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String chompTo(String seq) {\nString data = consumeTo(seq);\nmatchChomp(seq);\nreturn data;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.parser.Parser:last()Lorg/jsoup/nodes/Element;",
            "method_body": "private Element last() {\nreturn stack.getLast();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public TextNode(String text, String baseUri) {\nsuper(baseUri);\nattributes.put(TEXT_KEY, text);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume()Ljava/lang/Character;",
            "method_body": "public Character consume() {\nreturn queue.removeFirst();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseEndTag()V",
            "method_body": "private void parseEndTag() {\ntq.consume(\"</\");\nString tagName = tq.consumeWord();\ntq.chompTo(\">\");\nif (tagName.length() != 0) {\nTag tag = Tag.valueOf(tagName);\npopStackToClose(tag);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWord()Ljava/lang/String;",
            "method_body": "public String consumeWord() {\nStringBuilder wordAccum = new StringBuilder();\nwhile (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) {\nwordAccum.append(queue.removeFirst());\nreturn wordAccum.toString();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseStartTag()V",
            "method_body": "private void parseStartTag() {\ntq.consume(\"<\");\nString tagName = tq.consumeWord();\nif (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text\nAttributes attributes = new Attributes();\nwhile (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\nTag tag = Tag.valueOf(tagName);\nElement child = new Element(tag, baseUri, attributes);\nboolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>\nif (tq.matchChomp(\"/>\")) { // close empty element or tag\ntq.matchChomp(\">\");\nif (tag.isData()) {\nif (child.tagName().equals(\"base\")) {\naddChildToParent(child, isEmptyElement);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseTextNode()V",
            "method_body": "private void parseTextNode() {\nString text = tq.consumeTo(\"<\");\nTextNode textNode = TextNode.createFromEncoded(text, baseUri);\nlast().appendChild(textNode);\n}",
            "method_id": 19
        }
    ]
}