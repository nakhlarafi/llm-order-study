{
    "bug_id": 26,
    "test_id": 0,
    "test_name": "org.jsoup.safety.CleanerTest.handlesFramesets",
    "test_body": "170: @Test public void handlesFramesets() {\n171: String dirty = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\";\n172: String clean = Jsoup.clean(dirty, Whitelist.basic());\n173: assertEquals(\"\", clean); // nothing good can come out of that\n174: 175: Document dirtyDoc = Jsoup.parse(dirty);\n176: Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);\n177: assertFalse(cleanDoc == null);\n178: assertEquals(0, cleanDoc.body().childNodes().size());\n179: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$8:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isCharacter()) {\n} else if (t.isEOF()) {\n} else if (t.isEndTag()) {\ntb.pop();\ntb.transition(tb.originalState());\nreturn true;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$19:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag()) {\nToken.StartTag start = t.asStartTag();\nString name = start.name();\nif (name.equals(\"html\")) {\n} else if (name.equals(\"frameset\")) {\n} else if (name.equals(\"frame\")) {\ntb.insertEmpty(start);\n} else if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\")) {\nif (tb.currentElement().nodeName().equals(\"html\")) { // frag\ntb.pop();\nif (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {\ntb.transition(AfterFrameset);\nreturn true;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$20:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n} else if (t.isEndTag() && t.asEndTag().name().equals(\"html\")) {\ntb.transition(AfterAfterFrameset);\nreturn true;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$22:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isComment()) {\n} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\"))) {\n} else if (t.isEOF()) {\nreturn true;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isTrue(Z)V",
            "method_body": "public static void isTrue(boolean val) {\nif (!val)\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isTrue(ZLjava/lang/String;)V",
            "method_body": "public static void isTrue(boolean val, String msg) {\nif (!val)\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isFalse(Z)V",
            "method_body": "public static void isFalse(boolean val) {\nif (val)\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isFalse(ZLjava/lang/String;)V",
            "method_body": "public static void isFalse(boolean val, String msg) {\nif (val)\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "protected Node(String baseUri, Attributes attributes) {\nValidate.notNull(baseUri);\nValidate.notNull(attributes);\nchildNodes = new ArrayList<Node>(4);\nthis.baseUri = baseUri.trim();\nthis.attributes = attributes;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.nodes.Node:baseUri()Ljava/lang/String;",
            "method_body": "public String baseUri() {\nreturn baseUri;\n}",
            "method_id": 99
        }
    ]
}