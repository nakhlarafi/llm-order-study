{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone",
    "test_body": "1215: public void testNextElementSiblingAfterClone() {\n1216: // via https://github.com/jhy/jsoup/issues/951\n1217: String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n1218: String expectedText = \"New element\";\n1219: String cloneExpect = \"New element in clone\";\n1220: 1221: Document original = Jsoup.parse(html);\n1222: Document clone = original.clone();\n1223: 1224: Element originalElement = original.body().child(0);\n1225: originalElement.after(\"<div>\" + expectedText + \"</div>\");\n1226: Element originalNextElementSibling = originalElement.nextElementSibling();\n1227: Element originalNextSibling = (Element) originalElement.nextSibling();\n1228: assertEquals(expectedText, originalNextElementSibling.text());\n1229: assertEquals(expectedText, originalNextSibling.text());\n1230: 1231: Element cloneElement = clone.body().child(0);\n1232: cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n1233: Element cloneNextElementSibling = cloneElement.nextElementSibling();\n1234: Element cloneNextSibling = (Element) cloneElement.nextSibling();\n1235: assertEquals(cloneExpect, cloneNextElementSibling.text());\n1236: assertEquals(cloneExpect, cloneNextSibling.text());\n1237: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:setHeadElement(Lorg/jsoup/nodes/Element;)V",
            "method_body": "void setHeadElement(Element headElement) {\nthis.headElement = headElement;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:isFosterInserts()Z",
            "method_body": "boolean isFosterInserts() {\nreturn fosterInserts;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:generateImpliedEndTags(Ljava/lang/String;)V",
            "method_body": "void generateImpliedEndTags(String excludeTag) {\nwhile ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:generateImpliedEndTags()V",
            "method_body": "void generateImpliedEndTags() {\ngenerateImpliedEndTags(null);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:lastFormattingElement()Lorg/jsoup/nodes/Element;",
            "method_body": "Element lastFormattingElement() {\nreturn formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:reconstructFormattingElements()V",
            "method_body": "void reconstructFormattingElements() {\nElement last = lastFormattingElement();\nif (last == null || onStack(last))\nreturn;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.jsoup.parser.Token:<init>()V",
            "method_body": "private Token() {\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.jsoup.parser.Token:reset(Ljava/lang/StringBuilder;)V",
            "method_body": "abstract Token reset();\nif (sb != null) {\nsb.delete(0, sb.length());\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "final boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.jsoup.parser.Token:asDoctype()Lorg/jsoup/parser/Token$Doctype;",
            "method_body": "final Doctype asDoctype() {\nreturn (Doctype) this;\n}",
            "method_id": 69
        }
    ]
}