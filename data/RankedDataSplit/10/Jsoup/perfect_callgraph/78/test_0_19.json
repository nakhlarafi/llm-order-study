{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead",
    "test_body": "391: public void handlesEmptyStreamDuringParseRead() throws IOException {\n392: // this handles situations where the remote server sets a content length greater than it actually writes\n393: 394: Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n395: .timeout(200)\n396: .execute();\n397: 398: boolean threw = false;\n399: try {\n400: Document document = res.parse();\n401: assertEquals(\"Something\", document.title());\n402: } catch (IOException e) {\n403: threw = true;\n404: }\n405: assertEquals(true, threw);\n406: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:ignoreContentType()Z",
            "method_body": "public boolean ignoreContentType() {\nreturn ignoreContentType;\n}",
            "method_id": 190
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:data()Ljava/util/Collection;",
            "method_body": "public Collection<Connection.KeyVal> data() {\nreturn data;\n}",
            "method_id": 191
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:requestBody()Ljava/lang/String;",
            "method_body": "public String requestBody() {\nreturn body;\n}",
            "method_id": 192
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:parser()Lorg/jsoup/parser/Parser;",
            "method_body": "public Parser parser() {\nreturn parser;\n}",
            "method_id": 193
        },
        {
            "method_signature": "org.jsoup.Connection$Method:<init>(Ljava/lang/String;IZ)V",
            "method_body": "Method(boolean hasBody) {\nthis.hasBody = hasBody;\n}",
            "method_id": 194
        },
        {
            "method_signature": "org.jsoup.Connection$Method:hasBody()Z",
            "method_body": "public final boolean hasBody() {\nreturn hasBody;\n}",
            "method_id": 195
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>(Lorg/jsoup/helper/HttpConnection$Response;)V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate boolean inputStreamRead = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 196
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<clinit>()V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate boolean inputStreamRead = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 197
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req) throws IOException {\nreturn execute(req, null);\n}",
            "method_id": 198
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;Lorg/jsoup/helper/HttpConnection$Response;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req, Response previousResponse) throws IOException {\nValidate.notNull(req, \"Request must not be null\");\nString protocol = req.url().getProtocol();\nif (!protocol.equals(\"http\") && !protocol.equals(\"https\"))\nfinal boolean methodHasBody = req.method().hasBody();\nfinal boolean hasRequestBody = req.requestBody() != null;\nif (!methodHasBody)\nValidate.isFalse(hasRequestBody, \"Cannot set a request body for HTTP method \" + req.method());\nString mimeBoundary = null;\nif (req.data().size() > 0 && (!methodHasBody || hasRequestBody))\nelse if (methodHasBody)\nlong startTime = System.nanoTime();\nHttpURLConnection conn = createConnection(req);\nconn.connect();\nif (conn.getDoOutput())\nint status = conn.getResponseCode();\nres = new Response(previousResponse);\nres.setupFromConnection(conn, previousResponse);\nres.req = req;\nif (res.hasHeader(LOCATION) && req.followRedirects()) {\nif ((status < 200 || status >= 400) && !req.ignoreHttpErrors())\nString contentType = res.contentType();\nif (contentType != null\nif (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\nres.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\nif (conn.getContentLength() != 0 && req.method() != HEAD) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\nres.bodyStream = null;\nres.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\nif (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\")) {\n} else if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\")) {\nres.bodyStream = ConstrainableInputStream\n}\nres.executed = true;\nreturn res;\n}",
            "method_id": 199
        }
    ]
}