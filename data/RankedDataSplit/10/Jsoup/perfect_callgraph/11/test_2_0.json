{
    "bug_id": 11,
    "test_id": 2,
    "test_name": "org.jsoup.select.SelectorTest.testPseudoHas",
    "test_body": "405: @Test public void testPseudoHas() {\n406: Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n407: 408: Elements divs1 = doc.select(\"div:has(span)\");\n409: assertEquals(2, divs1.size());\n410: assertEquals(\"0\", divs1.get(0).id());\n411: assertEquals(\"1\", divs1.get(1).id());\n412: 413: Elements divs2 = doc.select(\"div:has([class]\");\n414: assertEquals(1, divs2.size());\n415: assertEquals(\"1\", divs2.get(0).id());\n416: 417: Elements divs3 = doc.select(\"div:has(span, p)\");\n418: assertEquals(3, divs3.size());\n419: assertEquals(\"0\", divs3.get(0).id());\n420: assertEquals(\"1\", divs3.get(1).id());\n421: assertEquals(\"2\", divs3.get(2).id());\n422: 423: Elements els1 = doc.body().select(\":has(p)\");\n424: assertEquals(3, els1.size()); // body, div, dib\n425: assertEquals(\"body\", els1.first().tagName());\n426: assertEquals(\"0\", els1.get(1).id());\n427: assertEquals(\"2\", els1.get(2).id());\n428: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\ntq.consumeWhitespace();\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\naddElements(findElements()); // chomp first element matcher off queue\nwhile (!tq.isEmpty()) {\nboolean seenWhite = tq.consumeWhitespace();\nif (tq.matchChomp(\",\")) { // group or\nwhile (!tq.isEmpty()) {\nString subQuery = tq.chompTo(\",\");\nelements.addAll(select(subQuery, root));\n}\n} else if (tq.matchesAny(combinators)) {\n} else if (seenWhite) {\nElements candidates = findElements(); // take next el, #. etc off queue\nintersectElements(filterForSelf(elements, candidates));\n}\nreturn new Elements(elements);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.select.Selector:findElements()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements findElements() {\nif (tq.matchChomp(\"#\")) {\n} else if (tq.matchChomp(\".\")) {\n} else if (tq.matchesWord()) {\nreturn byTag();\n} else if (tq.matches(\"[\")) {\nreturn byAttribute();\n} else if (tq.matchChomp(\"*\")) {\n} else if (tq.matchChomp(\":lt(\")) {\n} else if (tq.matchChomp(\":gt(\")) {\n} else if (tq.matchChomp(\":eq(\")) {\n} else if (tq.matches(\":has(\")) {\nreturn has();\n} else if (tq.matches(\":contains(\")) {\n} else if (tq.matches(\":containsOwn(\")) {\n} else if (tq.matches(\":matches(\")) {\n} else if (tq.matches(\":matchesOwn(\")) {\nthrow new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.Jsoup:parse(Ljava/lang/String;)Lorg/jsoup/nodes/Document;",
            "method_body": "public static Document parse(String html) {\nreturn Parser.parse(html, \"\");\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parse(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Document;",
            "method_body": "public static Document parse(String html, String baseUri) {\nParser parser = new Parser(html, baseUri, false);\nreturn parser.parse();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:<init>(Ljava/lang/String;)V",
            "method_body": "public TokenQueue(String data) {\nValidate.notNull(data);\nqueue = data;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.nodes.Document:<init>(Ljava/lang/String;)V",
            "method_body": "public Document(String baseUri) {\nsuper(Tag.valueOf(\"#root\"), baseUri);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Document:body()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element body() {\nreturn findFirstElementByTagName(\"body\", this);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName) {\nValidate.notNull(tagName);\ntagName = tagName.trim().toLowerCase();\nValidate.notEmpty(tagName);\nsynchronized (tags) {\nTag tag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.setAncestor(defaultAncestor.tagName);\ntag.setExcludes();\ntag.isBlock = false;\ntag.canContainBlock = true;\nreturn tag;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parse()Lorg/jsoup/nodes/Document;",
            "method_body": "private Document parse() {\nwhile (!tq.isEmpty()) {\nif (tq.matchesStartTag()) {\nparseStartTag();\n} else if (tq.matchesCS(\"</\")) {\nparseEndTag();\n} else if (tq.matchesCS(\"<!--\")) {\n} else if (tq.matches(\"<![CDATA[\")) {\n} else if (tq.matchesCS(\"<?\") || tq.matchesCS(\"<!\")) {\nparseTextNode();\nreturn doc.normalise();\n}",
            "method_id": 9
        }
    ]
}