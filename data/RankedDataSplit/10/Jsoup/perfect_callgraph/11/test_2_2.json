{
    "bug_id": 11,
    "test_id": 2,
    "test_name": "org.jsoup.select.SelectorTest.testPseudoHas",
    "test_body": "405: @Test public void testPseudoHas() {\n406: Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n407: 408: Elements divs1 = doc.select(\"div:has(span)\");\n409: assertEquals(2, divs1.size());\n410: assertEquals(\"0\", divs1.get(0).id());\n411: assertEquals(\"1\", divs1.get(1).id());\n412: 413: Elements divs2 = doc.select(\"div:has([class]\");\n414: assertEquals(1, divs2.size());\n415: assertEquals(\"1\", divs2.get(0).id());\n416: 417: Elements divs3 = doc.select(\"div:has(span, p)\");\n418: assertEquals(3, divs3.size());\n419: assertEquals(\"0\", divs3.get(0).id());\n420: assertEquals(\"1\", divs3.get(1).id());\n421: assertEquals(\"2\", divs3.get(2).id());\n422: 423: Elements els1 = doc.body().select(\":has(p)\");\n424: assertEquals(3, els1.size()); // body, div, dib\n425: assertEquals(\"body\", els1.first().tagName());\n426: assertEquals(\"0\", els1.get(1).id());\n427: assertEquals(\"2\", els1.get(2).id());\n428: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchChomp(Ljava/lang/String;)Z",
            "method_body": "public boolean matchChomp(String seq) {\nif (matches(seq)) {\npos += seq.length();\nreturn true;\nreturn false;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isData()Z",
            "method_body": "public boolean isData() {\nreturn !canContainInline && !isEmpty();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String chompTo(String seq) {\nString data = consumeTo(seq);\nmatchChomp(seq);\nreturn data;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.parser.Tag:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nTag tag = (Tag) o;\nif (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) return false;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:createFromEncoded(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/TextNode;",
            "method_body": "public static TextNode createFromEncoded(String encodedText, String baseUri) {\nString text = Entities.unescape(encodedText);\nreturn new TextNode(text, baseUri);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.nodes.Element:tagName()Ljava/lang/String;",
            "method_body": "public String tagName() {\nreturn tag.getName();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesCS(Ljava/lang/String;)Z",
            "method_body": "public boolean matchesCS(String seq) {\nreturn queue.startsWith(seq, pos);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseEndTag()V",
            "method_body": "private void parseEndTag() {\ntq.consume(\"</\");\nString tagName = tq.consumeTagName();\ntq.chompTo(\">\");\nif (tagName.length() != 0) {\nTag tag = Tag.valueOf(tagName);\nif (!last().tag().isIgnorableEndTag(tag)) // skips </tr> if in <table>\npopStackToClose(tag);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.Parser:last()Lorg/jsoup/nodes/Element;",
            "method_body": "private Element last() {\nreturn stack.getLast();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matches(Ljava/lang/String;)Z",
            "method_body": "public boolean matches(String seq) {\nint count = seq.length();\nif (count > remainingLength())\nreturn false;\nwhile (--count >= 0) {\nif (Character.toLowerCase(seq.charAt(count)) != Character.toLowerCase(queue.charAt(pos+count)))\nreturn false;\nreturn true;\n}",
            "method_id": 29
        }
    ]
}