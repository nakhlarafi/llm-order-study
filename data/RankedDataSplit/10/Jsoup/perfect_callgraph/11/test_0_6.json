{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.notAll",
    "test_body": "556: @Test public void notAll() {\n557: Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n558: 559: Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n560: assertEquals(2, el1.size());\n561: assertEquals(\"body\", el1.first().tagName());\n562: assertEquals(\"span\", el1.last().tagName());\n563: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tag:setContainInlineOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainInlineOnly() {\ncanContainBlock = false;\ncanContainInline = true;\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setFormatAsInline()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setFormatAsInline() {\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainDataOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainDataOnly() {\ncanContainBlock = false;\ncanContainInline = false;\npreserveWhitespace = true;\nreturn this;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setEmpty()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setEmpty() {\ncanContainBlock = false;\ncanContainInline = false;\nempty = true;\nreturn this;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setOptionalClosing()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setOptionalClosing() {\noptionalClosing = true;\nreturn this;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setPreserveWhitespace()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setPreserveWhitespace() {\npreserveWhitespace = true;\nreturn this;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setAncestor([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setAncestor(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nancestors = Collections.emptyList();\nancestors = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nancestors.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setExcludes([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setExcludes(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nexcludes = Collections.emptyList();\nexcludes = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nexcludes.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setIgnoreEnd([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setIgnoreEnd(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nignoreEndTags = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nignoreEndTags.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setParent([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setParent(String... tagNames) {\ndirectDescendant = true;\nsetAncestor(tagNames);\nreturn this;\n}",
            "method_id": 69
        }
    ]
}