{
    "bug_id": 44,
    "test_id": 0,
    "test_name": "org.jsoup.parser.HtmlParserTest.testInvalidTableContents",
    "test_body": "855: public void testInvalidTableContents() throws IOException {\n856: File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n857: Document doc = Jsoup.parse(in, \"UTF-8\");\n858: doc.outputSettings().prettyPrint(true);\n859: String rendered = doc.toString();\n860: int endOfEmail = rendered.indexOf(\"Comment\");\n861: int guarantee = rendered.indexOf(\"Why am I here?\");\n862: assertTrue(\"Comment not found\", endOfEmail > -1);\n863: assertTrue(\"Search text not found\", guarantee > -1);\n864: assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n865: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$10:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nswitch (t.type) {\nToken.Character c = t.asCharacter();\nif (c.getData().equals(nullString)) {\ntb.getPendingTableCharacters().add(c.getData());\nbreak;\nif (tb.getPendingTableCharacters().size() > 0) {\nfor (String character : tb.getPendingTableCharacters()) {\nif (!isWhitespace(character)) {\ntb.error(this);\nif (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\ntb.process(new Token.Character().data(character), InBody);\ntb.insert(new Token.Character().data(character));\n}\ntb.newPendingTableCharacters();\ntb.transition(tb.originalState());\nreturn tb.process(t);\nreturn true;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$13:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nswitch (t.type) {\nToken.StartTag startTag = t.asStartTag();\nString name = startTag.name();\nif (name.equals(\"tr\")) {\ntb.clearStackToTableBodyContext();\ntb.insert(startTag);\ntb.transition(InRow);\n} else if (StringUtil.in(name, \"th\", \"td\")) {\n} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\nreturn anythingElse(t, tb);\nToken.EndTag endTag = t.asEndTag();\nname = endTag.name();\nif (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\nif (!tb.inTableScope(name)) {\ntb.clearStackToTableBodyContext();\ntb.pop();\ntb.transition(InTable);\n} else if (name.equals(\"table\")) {\nreturn exitTableBody(t, tb);\n} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\ntb.error(this);\nreturn false;\nreturn anythingElse(t, tb);\nreturn anythingElse(t, tb);\nreturn true;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$13:exitTableBody(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {\nif (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {\ntb.clearStackToTableBodyContext();\ntb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead\nreturn tb.process(t);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$13:anythingElse(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\nreturn tb.process(t, InTable);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$14:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isStartTag()) {\nToken.StartTag startTag = t.asStartTag();\nString name = startTag.name();\nif (StringUtil.in(name, \"th\", \"td\")) {\ntb.clearStackToTableRowContext();\ntb.insert(startTag);\ntb.transition(InCell);\ntb.insertMarkerToFormattingElements();\n} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\nreturn anythingElse(t, tb);\n} else if (t.isEndTag()) {\nToken.EndTag endTag = t.asEndTag();\nString name = endTag.name();\nif (name.equals(\"tr\")) {\nif (!tb.inTableScope(name)) {\ntb.clearStackToTableRowContext();\ntb.pop(); // tr\ntb.transition(InTableBody);\n} else if (name.equals(\"table\")) {\nreturn handleMissingTr(t, tb);\n} else {\nreturn anythingElse(t, tb);\nreturn true;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$14:anythingElse(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\nreturn tb.process(t, InTable);\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$14:handleMissingTr(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/TreeBuilder;)Z",
            "method_body": "private boolean handleMissingTr(Token t, TreeBuilder tb) {\nboolean processed = tb.processEndTag(\"tr\");\nif (processed)\nreturn tb.process(t);\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$15:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isEndTag()) {\nToken.EndTag endTag = t.asEndTag();\nString name = endTag.name();\nif (StringUtil.in(name, \"td\", \"th\")) {\nif (!tb.inTableScope(name)) {\ntb.generateImpliedEndTags();\nif (!tb.currentElement().nodeName().equals(name))\ntb.popStackToClose(name);\ntb.clearFormattingElementsToLastMarker();\ntb.transition(InRow);\n} else if (t.isStartTag() &&\nreturn anythingElse(t, tb);\nreturn true;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$15:anythingElse(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\nreturn tb.process(t, InBody);\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$18:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\nreturn tb.process(t, InBody);\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n} else if (t.isEndTag() && t.asEndTag().name().equals(\"html\")) {\nif (tb.isFragmentParsing()) {\ntb.transition(AfterAfterBody);\nreturn true;\n}",
            "method_id": 109
        }
    ]
}