{
    "bug_id": 44,
    "test_id": 0,
    "test_name": "org.jsoup.parser.HtmlParserTest.testInvalidTableContents",
    "test_body": "855: public void testInvalidTableContents() throws IOException {\n856: File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n857: Document doc = Jsoup.parse(in, \"UTF-8\");\n858: doc.outputSettings().prettyPrint(true);\n859: String rendered = doc.toString();\n860: int endOfEmail = rendered.indexOf(\"Comment\");\n861: int guarantee = rendered.indexOf(\"Why am I here?\");\n862: assertTrue(\"Comment not found\", endOfEmail > -1);\n863: assertTrue(\"Search text not found\", guarantee > -1);\n864: assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n865: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insert(Lorg/jsoup/parser/Token$Comment;)V",
            "method_body": "void insert(Token.Comment commentToken) {\nComment comment = new Comment(commentToken.getData(), baseUri);\ninsertNode(comment);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insert(Lorg/jsoup/parser/Token$Character;)V",
            "method_body": "void insert(Token.Character characterToken) {\nString tagName = currentElement().tagName();\nif (tagName.equals(\"script\") || tagName.equals(\"style\"))\nnode = new TextNode(characterToken.getData(), baseUri);\ncurrentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void insertNode(Node node) {\nif (stack.size() == 0)\ndoc.appendChild(node);\nelse if (isFosterInserts())\ninsertInFosterParent(node);\ncurrentElement().appendChild(node);\nif (node instanceof Element && ((Element) node).tag().isFormListed()) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:pop()Lorg/jsoup/nodes/Element;",
            "method_body": "Element pop() {\nint size = stack.size();\nreturn stack.remove(size-1);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:getFromStack(Ljava/lang/String;)Lorg/jsoup/nodes/Element;",
            "method_body": "Element getFromStack(String elName) {\nfor (int pos = stack.size() -1; pos >= 0; pos--) {\nElement next = stack.get(pos);\nif (next.nodeName().equals(elName)) {\nreturn next;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:popStackToClose(Ljava/lang/String;)V",
            "method_body": "void popStackToClose(String elName) {\nfor (int pos = stack.size() -1; pos >= 0; pos--) {\nElement next = stack.get(pos);\nstack.remove(pos);\nif (next.nodeName().equals(elName))\nbreak;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:clearStackToTableContext()V",
            "method_body": "void clearStackToTableContext() {\nclearStackToContext(\"table\");\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:clearStackToTableBodyContext()V",
            "method_body": "void clearStackToTableBodyContext() {\nclearStackToContext(\"tbody\", \"tfoot\", \"thead\");\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:clearStackToTableRowContext()V",
            "method_body": "void clearStackToTableRowContext() {\nclearStackToContext(\"tr\");\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:clearStackToContext([Ljava/lang/String;)V",
            "method_body": "private void clearStackToContext(String... nodeNames) {\nfor (int pos = stack.size() -1; pos >= 0; pos--) {\nElement next = stack.get(pos);\nif (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))\n}",
            "method_id": 39
        }
    ]
}