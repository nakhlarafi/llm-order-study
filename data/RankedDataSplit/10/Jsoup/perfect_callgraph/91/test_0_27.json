{
    "bug_id": 91,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.testBinaryThrowsExceptionWhenTypeIgnored",
    "test_body": "495: public void testBinaryThrowsExceptionWhenTypeIgnored() {\n496: Connection con = Jsoup.connect(FileServlet.Url);\n497: con.data(FileServlet.LocationParam, \"/htmltests/thumb.jpg\");\n498: con.data(FileServlet.ContentTypeParam, \"image/jpeg\");\n499: con.ignoreContentType(true);\n500: 501: boolean threw = false;\n502: try {\n503: con.execute();\n504: Document doc = con.response().parse();\n505: } catch (IOException e) {\n506: threw = true;\n507: assertEquals(\"Input is binary and unsupported\", e.getMessage());\n508: }\n509: assertTrue(threw);\n510: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req) throws IOException {\nreturn execute(req, null);\n}",
            "method_id": 270
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;Lorg/jsoup/helper/HttpConnection$Response;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req, Response previousResponse) throws IOException {\nValidate.notNull(req, \"Request must not be null\");\nValidate.notNull(req.url(), \"URL must be specified to connect\");\nString protocol = req.url().getProtocol();\nif (!protocol.equals(\"http\") && !protocol.equals(\"https\"))\nfinal boolean methodHasBody = req.method().hasBody();\nfinal boolean hasRequestBody = req.requestBody() != null;\nif (!methodHasBody)\nValidate.isFalse(hasRequestBody, \"Cannot set a request body for HTTP method \" + req.method());\nString mimeBoundary = null;\nif (req.data().size() > 0 && (!methodHasBody || hasRequestBody))\nserialiseRequestUrl(req);\nlong startTime = System.nanoTime();\nHttpURLConnection conn = createConnection(req);\nconn.connect();\nif (conn.getDoOutput())\nint status = conn.getResponseCode();\nres = new Response(previousResponse);\nres.setupFromConnection(conn, previousResponse);\nres.req = req;\nif (res.hasHeader(LOCATION) && req.followRedirects()) {\nif ((status < 200 || status >= 400) && !req.ignoreHttpErrors())\nString contentType = res.contentType();\nif (contentType != null\nif (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\nres.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\nif (conn.getContentLength() != 0 && req.method() != HEAD) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\nres.bodyStream = null;\nres.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\nif (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\")) {\n} else if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\")) {\nres.bodyStream = ConstrainableInputStream\n}\nres.executed = true;\nreturn res;\n}",
            "method_id": 271
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:contentType()Ljava/lang/String;",
            "method_body": "public String contentType() {\nreturn contentType;\n}",
            "method_id": 272
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:parse()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document parse() throws IOException {\nValidate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\");\nif (byteData != null) { // bytes have been read in to the buffer, parse that\nValidate.isFalse(inputStreamRead, \"Input stream already read and parsed, cannot re-read.\");\nDocument doc = DataUtil.parseInputStream(bodyStream, charset, url.toExternalForm(), req.parser());\ncharset = doc.outputSettings().charset().name(); // update charset from meta-equiv, possibly\ninputStreamRead = true;\nsafeClose();\nreturn doc;\n}",
            "method_id": 273
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:createConnection(Lorg/jsoup/Connection$Request;)Ljava/net/HttpURLConnection;",
            "method_body": "private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\nfinal HttpURLConnection conn = (HttpURLConnection) (\nconn.setRequestMethod(req.method().name());\nconn.setInstanceFollowRedirects(false); // don't rely on native redirection support\nconn.setConnectTimeout(req.timeout());\nconn.setReadTimeout(req.timeout() / 2); // gets reduced after connection is made and status is read\nif (req.sslSocketFactory() != null && conn instanceof HttpsURLConnection)\nif (req.method().hasBody())\nif (req.cookies().size() > 0)\nfor (Map.Entry<String, List<String>> header : req.multiHeaders().entrySet()) {\nfor (String value : header.getValue()) {\nconn.addRequestProperty(header.getKey(), value);\n}\n}\nreturn conn;\n}",
            "method_id": 274
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:safeClose()V",
            "method_body": "private void safeClose() {\nif (conn != null) {\nconn.disconnect();\nconn = null;\nif (bodyStream != null) {\nbodyStream.close();\nbodyStream = null;\n}\n}",
            "method_id": 275
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:setupFromConnection(Ljava/net/HttpURLConnection;Lorg/jsoup/helper/HttpConnection$Response;)V",
            "method_body": "private void setupFromConnection(HttpURLConnection conn, HttpConnection.Response previousResponse) throws IOException {\nthis.conn = conn;\nmethod = Method.valueOf(conn.getRequestMethod());\nurl = conn.getURL();\nstatusCode = conn.getResponseCode();\nstatusMessage = conn.getResponseMessage();\ncontentType = conn.getContentType();\nMap<String, List<String>> resHeaders = createHeaderMap(conn);\nprocessResponseHeaders(resHeaders);\nif (previousResponse != null) {\n}",
            "method_id": 276
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:createHeaderMap(Ljava/net/HttpURLConnection;)Ljava/util/LinkedHashMap;",
            "method_body": "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn) {\nfinal LinkedHashMap<String, List<String>> headers = new LinkedHashMap<>();\nint i = 0;\nfinal String key = conn.getHeaderFieldKey(i);\nfinal String val = conn.getHeaderField(i);\nif (key == null && val == null)\nbreak;\ni++;\nif (key == null || val == null)\nif (headers.containsKey(key))\nfinal ArrayList<String> vals = new ArrayList<>();\nvals.add(val);\nheaders.put(key, vals);\n}\nreturn headers;\n}",
            "method_id": 277
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:processResponseHeaders(Ljava/util/Map;)V",
            "method_body": "void processResponseHeaders(Map<String, List<String>> resHeaders) {\nfor (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\nString name = entry.getKey();\nif (name == null)\nList<String> values = entry.getValue();\nif (name.equalsIgnoreCase(\"Set-Cookie\")) {\nfor (String value : values) {\naddHeader(name, value);\n}\n}\n}",
            "method_id": 278
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:serialiseRequestUrl(Lorg/jsoup/Connection$Request;)V",
            "method_body": "private static void serialiseRequestUrl(Connection.Request req) throws IOException {\nURL in = req.url();\nStringBuilder url = StringUtil.borrowBuilder();\nboolean first = true;\nurl\nif (in.getQuery() != null) {\nfor (Connection.KeyVal keyVal : req.data()) {\nValidate.isFalse(keyVal.hasInputStream(), \"InputStream data not supported in URL query string.\");\nif (!first)\nurl.append('&');\nfirst = false;\nurl\n}\nreq.url(new URL(StringUtil.releaseBuilder(url)));\nreq.data().clear(); // moved into url as get params\n}",
            "method_id": 279
        }
    ]
}