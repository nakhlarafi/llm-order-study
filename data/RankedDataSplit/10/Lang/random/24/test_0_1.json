{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber",
    "test_body": "public void testIsNumber() {\nString val = \"12345\";\nassertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\nval = \"1234.5\";\nassertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\nval = \".12345\";\nassertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\nval = \"1234E5\";\nassertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\nval = \"1234E+5\";\nassertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\nval = \"1234E-5\";\nassertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\nval = \"123.4E5\";\nassertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\nval = \"-1234\";\nassertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\nval = \"-1234.5\";\nassertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\nval = \"-.12345\";\nassertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\nval = \"-1234E5\";\nassertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\nval = \"0\";\nassertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\nval = \"-0\";\nassertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\nval = \"01234\";\nassertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\nval = \"-01234\";\nassertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\nval = \"0xABC123\";\nassertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\nval = \"0x0\";\nassertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\nval = \"123.4E21D\";\nassertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\nval = \"-221.23F\";\nassertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\nval = \"22338L\";\nassertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\nval = null;\nassertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\nval = \"\";\nassertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\nval = \"--2.3\";\nassertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\nval = \".12.3\";\nassertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\nval = \"-123E\";\nassertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\nval = \"-123E+-212\";\nassertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\nval = \"-123E2.12\";\nassertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\nval = \"0xGF\";\nassertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\nval = \"0xFAE-1\";\nassertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\nval = \".\";\nassertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\nval = \"-0ABC123\";\nassertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\nval = \"123.4E-D\";\nassertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\nval = \"123.4ED\";\nassertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\nval = \"1234E5l\";\nassertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\nval = \"11a\";\nassertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \nval = \"1a\";\nassertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \nval = \"a\";\nassertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \nval = \"11g\";\nassertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \nval = \"11z\";\nassertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \nval = \"11def\";\nassertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \nval = \"11d11\";\nassertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \nval = \"11 11\";\nassertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\nval = \" 1111\";\nassertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\nval = \"1111 \";\nassertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n1139: // LANG-521\nval = \"2.\";\nassertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n1143: // LANG-664\nval = \"1.1L\";\nassertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: isNumber(String) LANG-664 failed\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertFalse(Assert.java:39)\nat junit.framework.TestCase.assertFalse(TestCase.java:210)\nat org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber(NumberUtilsTest.java:1145)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isDigits(Ljava/lang/String;)Z",
            "method_body": "public static boolean isDigits(String str) {\nif (StringUtils.isEmpty(str)) {\nfor (int i = 0; i < str.length(); i++) {\nif (!Character.isDigit(str.charAt(i))) {\nreturn true;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createBigInteger(Ljava/lang/String;)Ljava/math/BigInteger;",
            "method_body": "public static BigInteger createBigInteger(String str) {\nif (str == null) {\nreturn new BigInteger(str);\n}",
            "method_id": 11
        }
    ]
}