{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat",
    "test_body": "public void testFormat() {\nLocale realDefaultLocale = Locale.getDefault();\nTimeZone realDefaultZone = TimeZone.getDefault();\ntry {\nLocale.setDefault(Locale.US);\nTimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n180: GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\nGregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\nDate date1 = cal1.getTime();\nDate date2 = cal2.getTime();\nlong millis1 = date1.getTime();\nlong millis2 = date2.getTime();\n187: FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\nassertEquals(sdf.format(date1), fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n197: fdf = FastDateFormat.getInstance(\"Z\");\nassertEquals(\"-0500\", fdf.format(date1));\nassertEquals(\"-0500\", fdf.format(cal1));\nassertEquals(\"-0500\", fdf.format(millis1));\n202: assertEquals(\"-0400\", fdf.format(date2));\nassertEquals(\"-0400\", fdf.format(cal2));\nassertEquals(\"-0400\", fdf.format(millis2));\n206: fdf = FastDateFormat.getInstance(\"ZZ\");\nassertEquals(\"-05:00\", fdf.format(date1));\nassertEquals(\"-05:00\", fdf.format(cal1));\nassertEquals(\"-05:00\", fdf.format(millis1));\n211: assertEquals(\"-04:00\", fdf.format(date2));\nassertEquals(\"-04:00\", fdf.format(cal2));\nassertEquals(\"-04:00\", fdf.format(millis2));\n215: String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n\" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\nfdf = FastDateFormat.getInstance(pattern);\nsdf = new SimpleDateFormat(pattern);\n// SDF bug fix starting with Java 7\nassertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\nassertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang3.time.FastDateFormatTest.testFormat(FastDateFormatTest.java:220)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:<init>(II)V",
            "method_body": "PaddedNumberField(int field, int size) {\nif (size < 3) {\nmField = field;\nmSize = size;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nmValue = value;\n}\nreturn 1;\nbuffer.append(mValue);\n}\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn Math.max(mStandard.length(), mDaylight.length());\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(J)Ljava/lang/String;",
            "method_body": "public String format(long millis) {\nreturn format(new Date(millis));\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:<init>(Ljava/util/TimeZone;Ljava/util/Locale;I)V",
            "method_body": "TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\nmTimeZone = timeZone;\nmStandard = getTimeZoneDisplay(timeZone, false, style, locale);\nmDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:<init>(I)V",
            "method_body": "TwoDigitNumberField(int field) {\nmField = field;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nint offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\nif (offset < 0) {\nbuffer.append('-');\noffset = -offset;\nint hours = offset / (60 * 60 * 1000);\nbuffer.append((char)(hours / 10 + '0'));\nbuffer.append((char)(hours % 10 + '0'));\nif (mColon) {\nbuffer.append(':');\nint minutes = offset / (60 * 1000) - 60 * hours;\nbuffer.append((char)(minutes / 10 + '0'));\nbuffer.append((char)(minutes % 10 + '0'));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$1:createInstance(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)Lorg/apache/commons/lang3/time/FastDateFormat;",
            "method_body": "protected FastDateFormat createInstance(String pattern,    TimeZone timeZone, Locale locale) {\nreturn new FastDateFormat(pattern, timeZone, locale);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 2;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TextField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nbuffer.append(mValues[calendar.get(mField)]);\n}",
            "method_id": 39
        }
    ]
}