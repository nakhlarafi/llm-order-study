{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat",
    "test_body": "public void testFormat() {\nLocale realDefaultLocale = Locale.getDefault();\nTimeZone realDefaultZone = TimeZone.getDefault();\ntry {\nLocale.setDefault(Locale.US);\nTimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n180: GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\nGregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\nDate date1 = cal1.getTime();\nDate date2 = cal2.getTime();\nlong millis1 = date1.getTime();\nlong millis2 = date2.getTime();\n187: FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\nassertEquals(sdf.format(date1), fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\nassertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\nassertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n197: fdf = FastDateFormat.getInstance(\"Z\");\nassertEquals(\"-0500\", fdf.format(date1));\nassertEquals(\"-0500\", fdf.format(cal1));\nassertEquals(\"-0500\", fdf.format(millis1));\n202: assertEquals(\"-0400\", fdf.format(date2));\nassertEquals(\"-0400\", fdf.format(cal2));\nassertEquals(\"-0400\", fdf.format(millis2));\n206: fdf = FastDateFormat.getInstance(\"ZZ\");\nassertEquals(\"-05:00\", fdf.format(date1));\nassertEquals(\"-05:00\", fdf.format(cal1));\nassertEquals(\"-05:00\", fdf.format(millis1));\n211: assertEquals(\"-04:00\", fdf.format(date2));\nassertEquals(\"-04:00\", fdf.format(cal2));\nassertEquals(\"-04:00\", fdf.format(millis2));\n215: String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n\" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\nfdf = FastDateFormat.getInstance(pattern);\nsdf = new SimpleDateFormat(pattern);\n// SDF bug fix starting with Java 7\nassertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\nassertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang3.time.FastDateFormatTest.testFormat(FastDateFormatTest.java:220)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField:<init>()V",
            "method_body": "TwoDigitYearField() {\nsuper();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:init()V",
            "method_body": "private void init() {\nList<Rule> rulesList = parsePattern();\nmRules = rulesList.toArray(new Rule[rulesList.size()]);\nint len = 0;\nfor (int i=mRules.length; --i >= 0; ) {\nlen += mRules[i].estimateLength();\nmMaxLengthEstimate = len;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey:<init>(Ljava/util/TimeZone;ZILjava/util/Locale;)V",
            "method_body": "TimeZoneDisplayKey(TimeZone timeZone,\nboolean daylight, int style, Locale locale) {\nmTimeZone = timeZone;\nif (daylight) {\nstyle |= 0x80000000;\nmStyle = style;\nmLocale = locale;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:<init>(I)V",
            "method_body": "UnpaddedNumberField(int field) {\nmField = field;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 100) {\nbuffer.append((char)(value / 10 + '0'));\nbuffer.append((char)(value % 10 + '0'));\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(Ljava/util/Calendar;)Ljava/lang/String;",
            "method_body": "public String format(Calendar calendar) {\nreturn format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(mField));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nif (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\nbuffer.append(mStandard);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 2;\n}",
            "method_id": 19
        }
    ]
}