{
    "bug_id": 34,
    "test_id": 5,
    "test_name": "org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy",
    "test_body": "public void testReflectionHierarchy() {\nReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\nString baseStr = this.toBaseString(baseA);\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\nassertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\nassertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n324: ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\nbaseStr = this.toBaseString(baseB);\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\nassertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\nassertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\nassertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\nthis.validateNullToStringStyleRegistry();\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat junit.framework.TestCase.assertNull(TestCase.java:438)\nat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\nat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy(ToStringBuilderTest.java:335)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringStyle:unregister(Ljava/lang/Object;)V",
            "method_body": "static void unregister(Object value) {\nif (value != null) {\nsynchronized (ToStringStyle.class) {\nm = REGISTRY.get();\nif (m != null) {\nm.remove(value);\nif (m.isEmpty()) {\nREGISTRY.remove();\n}\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringBuilder:append(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/commons/lang3/builder/ToStringBuilder;",
            "method_body": "public ToStringBuilder append(String fieldName, Object obj) {\nstyle.append(buffer, fieldName, obj, null);\nreturn this;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringStyle:appendContentStart(Ljava/lang/StringBuffer;)V",
            "method_body": "protected void appendContentStart(StringBuffer buffer) {\nbuffer.append(contentStart);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder:appendFieldsIn(Ljava/lang/Class;)V",
            "method_body": "protected void appendFieldsIn(Class<?> clazz) {\nif (clazz.isArray()) {\nthis.reflectionAppendArray(this.getObject());\nreturn;\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field field : fields) {\nString fieldName = field.getName();\nif (this.accept(field)) {\nObject fieldValue = this.getValue(field);\nthis.append(fieldName, fieldValue);\n}\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringStyle:getRegistry()Ljava/util/Map;",
            "method_body": "static Map<Object, Object> getRegistry() {\nreturn REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder:getUpToClass()Ljava/lang/Class;",
            "method_body": "public Class<?> getUpToClass() {\nreturn this.upToClass;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringStyle:appendContentEnd(Ljava/lang/StringBuffer;)V",
            "method_body": "protected void appendContentEnd(StringBuffer buffer) {\nbuffer.append(contentEnd);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringBuilder:reflectionToString(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public static String reflectionToString(Object object) {\nreturn ReflectionToStringBuilder.toString(object);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder:getValue(Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "protected Object getValue(Field field) throws IllegalArgumentException, IllegalAccessException {\nreturn field.get(this.getObject());\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.ToStringBuilder:reflectionToString(Ljava/lang/Object;Lorg/apache/commons/lang3/builder/ToStringStyle;Z)Ljava/lang/String;",
            "method_body": "public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {\nreturn ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n}",
            "method_id": 39
        }
    ]
}