{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable",
    "test_body": "public void testIsAssignable() throws SecurityException, NoSuchMethodException,\nNoSuchFieldException {\nList list0 = null;\nList<Object> list1 = null;\nList<?> list2 = null;\nList<? super Object> list3 = null;\nList<String> list4 = null;\nList<? extends String> list5 = null;\nList<? super String> list6 = null;\nList[] list7 = null;\nList<Object>[] list8 = null;\nList<?>[] list9 = null;\nList<? super Object>[] list10 = null;\nList<String>[] list11 = null;\nList<? extends String>[] list12 = null;\nList<? super String>[] list13;\nClass<?> clazz = getClass();\nMethod method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\nList.class, List.class, List.class, List.class, List[].class, List[].class,\nList[].class, List[].class, List[].class, List[].class, List[].class);\nType[] types = method.getGenericParameterTypes();\n//        list0 = list0;\ndelegateBooleanAssertion(types, 0, 0, true);\nlist1 = list0;\ndelegateBooleanAssertion(types, 0, 1, true);\nlist0 = list1;\ndelegateBooleanAssertion(types, 1, 0, true);\nlist2 = list0;\ndelegateBooleanAssertion(types, 0, 2, true);\nlist0 = list2;\ndelegateBooleanAssertion(types, 2, 0, true);\nlist3 = list0;\ndelegateBooleanAssertion(types, 0, 3, true);\nlist0 = list3;\ndelegateBooleanAssertion(types, 3, 0, true);\nlist4 = list0;\ndelegateBooleanAssertion(types, 0, 4, true);\nlist0 = list4;\ndelegateBooleanAssertion(types, 4, 0, true);\nlist5 = list0;\ndelegateBooleanAssertion(types, 0, 5, true);\nlist0 = list5;\ndelegateBooleanAssertion(types, 5, 0, true);\nlist6 = list0;\ndelegateBooleanAssertion(types, 0, 6, true);\nlist0 = list6;\ndelegateBooleanAssertion(types, 6, 0, true);\n//        list1 = list1;\ndelegateBooleanAssertion(types, 1, 1, true);\nlist2 = list1;\ndelegateBooleanAssertion(types, 1, 2, true);\nlist1 = (List<Object>) list2;\ndelegateBooleanAssertion(types, 2, 1, false);\nlist3 = list1;\ndelegateBooleanAssertion(types, 1, 3, true);\nlist1 = (List<Object>) list3;\ndelegateBooleanAssertion(types, 3, 1, false);\n// list4 = list1;\ndelegateBooleanAssertion(types, 1, 4, false);\n// list1 = list4;\ndelegateBooleanAssertion(types, 4, 1, false);\n// list5 = list1;\ndelegateBooleanAssertion(types, 1, 5, false);\n// list1 = list5;\ndelegateBooleanAssertion(types, 5, 1, false);\nlist6 = list1;\ndelegateBooleanAssertion(types, 1, 6, true);\nlist1 = (List<Object>) list6;\ndelegateBooleanAssertion(types, 6, 1, false);\n//        list2 = list2;\ndelegateBooleanAssertion(types, 2, 2, true);\nlist2 = list3;\ndelegateBooleanAssertion(types, 2, 3, false);\nlist2 = list4;\ndelegateBooleanAssertion(types, 3, 2, true);\nlist3 = (List<? super Object>) list2;\ndelegateBooleanAssertion(types, 2, 4, false);\nlist2 = list5;\ndelegateBooleanAssertion(types, 4, 2, true);\nlist4 = (List<String>) list2;\ndelegateBooleanAssertion(types, 2, 5, false);\nlist2 = list6;\ndelegateBooleanAssertion(types, 5, 2, true);\nlist5 = (List<? extends String>) list2;\ndelegateBooleanAssertion(types, 2, 6, false);\n//        list3 = list3;\ndelegateBooleanAssertion(types, 6, 2, true);\nlist6 = (List<? super String>) list2;\ndelegateBooleanAssertion(types, 3, 3, true);\n// list4 = list3;\ndelegateBooleanAssertion(types, 3, 4, false);\n// list3 = list4;\ndelegateBooleanAssertion(types, 4, 3, false);\n// list5 = list3;\ndelegateBooleanAssertion(types, 3, 5, false);\n// list3 = list5;\ndelegateBooleanAssertion(types, 5, 3, false);\nlist6 = list3;\ndelegateBooleanAssertion(types, 3, 6, true);\nlist3 = (List<? super Object>) list6;\ndelegateBooleanAssertion(types, 6, 3, false);\n//        list4 = list4;\ndelegateBooleanAssertion(types, 4, 4, true);\nlist5 = list4;\ndelegateBooleanAssertion(types, 4, 5, true);\nlist4 = (List<String>) list5;\ndelegateBooleanAssertion(types, 5, 4, false);\nlist6 = list4;\ndelegateBooleanAssertion(types, 4, 6, true);\nlist4 = (List<String>) list6;\ndelegateBooleanAssertion(types, 6, 4, false);\n//        list5 = list5;\ndelegateBooleanAssertion(types, 5, 5, true);\nlist6 = (List<? super String>) list5;\ndelegateBooleanAssertion(types, 5, 6, false);\nlist5 = (List<? extends String>) list6;\ndelegateBooleanAssertion(types, 6, 5, false);\n//        list6 = list6;\ndelegateBooleanAssertion(types, 6, 6, true);\n228: //        list7 = list7;\ndelegateBooleanAssertion(types, 7, 7, true);\nlist8 = list7;\ndelegateBooleanAssertion(types, 7, 8, true);\nlist7 = list8;\ndelegateBooleanAssertion(types, 8, 7, true);\nlist9 = list7;\ndelegateBooleanAssertion(types, 7, 9, true);\nlist7 = list9;\ndelegateBooleanAssertion(types, 9, 7, true);\nlist10 = list7;\ndelegateBooleanAssertion(types, 7, 10, true);\nlist7 = list10;\ndelegateBooleanAssertion(types, 10, 7, true);\nlist11 = list7;\ndelegateBooleanAssertion(types, 7, 11, true);\nlist7 = list11;\ndelegateBooleanAssertion(types, 11, 7, true);\nlist12 = list7;\ndelegateBooleanAssertion(types, 7, 12, true);\nlist7 = list12;\ndelegateBooleanAssertion(types, 12, 7, true);\nlist13 = list7;\ndelegateBooleanAssertion(types, 7, 13, true);\nlist7 = list13;\ndelegateBooleanAssertion(types, 13, 7, true);\n//        list8 = list8;\ndelegateBooleanAssertion(types, 8, 8, true);\nlist9 = list8;\ndelegateBooleanAssertion(types, 8, 9, true);\nlist8 = (List<Object>[]) list9;\ndelegateBooleanAssertion(types, 9, 8, false);\nlist10 = list8;\ndelegateBooleanAssertion(types, 8, 10, true);\nlist8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\ndelegateBooleanAssertion(types, 10, 8, false);\n// list11 = list8;\ndelegateBooleanAssertion(types, 8, 11, false);\n// list8 = list11;\ndelegateBooleanAssertion(types, 11, 8, false);\n// list12 = list8;\ndelegateBooleanAssertion(types, 8, 12, false);\n// list8 = list12;\ndelegateBooleanAssertion(types, 12, 8, false);\nlist13 = list8;\ndelegateBooleanAssertion(types, 8, 13, true);\nlist8 = (List<Object>[]) list13;\ndelegateBooleanAssertion(types, 13, 8, false);\n//        list9 = list9;\ndelegateBooleanAssertion(types, 9, 9, true);\nlist10 = (List<? super Object>[]) list9;\ndelegateBooleanAssertion(types, 9, 10, false);\nlist9 = list10;\ndelegateBooleanAssertion(types, 10, 9, true);\nlist11 = (List<String>[]) list9;\ndelegateBooleanAssertion(types, 9, 11, false);\nlist9 = list11;\ndelegateBooleanAssertion(types, 11, 9, true);\nlist12 = (List<? extends String>[]) list9;\ndelegateBooleanAssertion(types, 9, 12, false);\nlist9 = list12;\ndelegateBooleanAssertion(types, 12, 9, true);\nlist13 = (List<? super String>[]) list9;\ndelegateBooleanAssertion(types, 9, 13, false);\nlist9 = list13;\ndelegateBooleanAssertion(types, 13, 9, true);\n//        list10 = list10;\ndelegateBooleanAssertion(types, 10, 10, true);\n// list11 = list10;\ndelegateBooleanAssertion(types, 10, 11, false);\n// list10 = list11;\ndelegateBooleanAssertion(types, 11, 10, false);\n// list12 = list10;\ndelegateBooleanAssertion(types, 10, 12, false);\n// list10 = list12;\ndelegateBooleanAssertion(types, 12, 10, false);\nlist13 = list10;\ndelegateBooleanAssertion(types, 10, 13, true);\nlist10 = (List<? super Object>[]) list13;\ndelegateBooleanAssertion(types, 13, 10, false);\n//        list11 = list11;\ndelegateBooleanAssertion(types, 11, 11, true);\nlist12 = list11;\ndelegateBooleanAssertion(types, 11, 12, true);\nlist11 = (List<String>[]) list12;\ndelegateBooleanAssertion(types, 12, 11, false);\nlist13 = list11;\ndelegateBooleanAssertion(types, 11, 13, true);\nlist11 = (List<String>[]) list13;\ndelegateBooleanAssertion(types, 13, 11, false);\n//        list12 = list12;\ndelegateBooleanAssertion(types, 12, 12, true);\nlist13 = (List<? super String>[]) list12;\ndelegateBooleanAssertion(types, 12, 13, false);\nlist12 = (List<? extends String>[]) list13;\ndelegateBooleanAssertion(types, 13, 12, false);\n//        list13 = list13;\ndelegateBooleanAssertion(types, 13, 13, true);\nType disType = getClass().getField(\"dis\").getGenericType();\n// Reporter.log( ( ( ParameterizedType ) disType\n// ).getOwnerType().getClass().toString() );\nType datType = getClass().getField(\"dat\").getGenericType();\nType daType = getClass().getField(\"da\").getGenericType();\nType uhderType = getClass().getField(\"uhder\").getGenericType();\nType dingType = getClass().getField(\"ding\").getGenericType();\nType testerType = getClass().getField(\"tester\").getGenericType();\nType tester2Type = getClass().getField(\"tester2\").getGenericType();\nType dat2Type = getClass().getField(\"dat2\").getGenericType();\nType dat3Type = getClass().getField(\"dat3\").getGenericType();\ndis = dat;\nAssert.assertTrue(TypeUtils.isAssignable(datType, disType));\n// dis = da;\nAssert.assertFalse(TypeUtils.isAssignable(daType, disType));\ndis = uhder;\nAssert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\ndis = ding;\nAssert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\nTypeUtils.isAssignable(dingType, disType));",
    "stack_trace": "junit.framework.AssertionFailedError: type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertFalse(Assert.java:64)\nat org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable(TypeUtilsTest.java:344)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.SystemUtils:isJavaVersionAtLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
            "method_body": "public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\nreturn JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z",
            "method_body": "private static boolean isAssignable(Type type, Class<?> toClass) {\nif (type == null) {\nreturn toClass == null || !toClass.isPrimitive();\nif (toClass == null) {\nreturn false;\nif (toClass.equals(type)) {\nreturn true;\nif (type instanceof Class<?>) {\nreturn ClassUtils.isAssignable((Class<?>) type, toClass);\nif (type instanceof ParameterizedType) {\nreturn isAssignable(getRawType((ParameterizedType) type), toClass);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.lang3.ClassUtils:isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z",
            "method_body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\nif (toClass == null) {\nif (cls == null) {\nif (autoboxing) {\nif (cls.isPrimitive() && !toClass.isPrimitive()) {\ncls = primitiveToWrapper(cls);\nif (cls == null) {\nif (toClass.isPrimitive() && !cls.isPrimitive()) {\nif (cls.equals(toClass)) {\nif (cls.isPrimitive()) {\nreturn toClass.isAssignableFrom(cls);\n}",
            "method_id": 22
        }
    ]
}