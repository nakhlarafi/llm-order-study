{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "org.apache.commons.lang3.time.FastDateParserTest.testLANG_831",
    "test_body": "public void testLANG_831() throws Exception {\ntestSdfAndFdp(\"M E\",\"3  Tue\", true);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected FDF failure, but got Mon Mar 02 21:00:00 PST 1970 for [M E,3  Tue] using (\\p{IsNd}++)\\s*+(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\nat junit.framework.Assert.fail(Assert.java:57)\nat org.apache.commons.lang3.time.FastDateParserTest.testSdfAndFdp(FastDateParserTest.java:377)\nat org.apache.commons.lang3.time.FastDateParserTest.testLANG_831(FastDateParserTest.java:348)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nescapeRegex(regex, formatField, true);\nreturn false;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getParsePattern()Ljava/util/regex/Pattern;",
            "method_body": "Pattern getParsePattern() {\nreturn parsePattern;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$3:modify(I)I",
            "method_body": "public int modify(int iValue) {\nreturn iValue-1;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getDisplayNames(I)[Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;",
            "method_body": "KeyValue[] getDisplayNames(int field) {\nInteger fieldInt = Integer.valueOf(field);\nKeyValue[] fieldKeyValues= nameValues.get(fieldInt);\nif(fieldKeyValues==null) {\nDateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);\nswitch(field) {\nfieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\nbreak;\nKeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);\nif(prior!=null) {\nreturn fieldKeyValues;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$NumberStrategy:setCalendar(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/util/Calendar;Ljava/lang/String;)V",
            "method_body": "public void setCalendar(FastDateParser parser, Calendar cal, String value) {\ncal.set(field, modify(Integer.parseInt(value)));\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:createKeyValues([Ljava/lang/String;[Ljava/lang/String;)[Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;",
            "method_body": "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\nKeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];\ncopy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);\nArrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);\nreturn fieldKeyValues;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$KeyValue:<init>(Ljava/lang/String;I)V",
            "method_body": "public KeyValue(String key, int value) {\nthis.key= key;\nthis.value= value;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:escapeRegex(Ljava/lang/StringBuilder;Ljava/lang/String;Z)Ljava/lang/StringBuilder;",
            "method_body": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\nboolean wasWhite= false;\nfor(int i= 0; i<value.length(); ++i) {\nchar c= value.charAt(i);\nif(Character.isWhitespace(c)) {\nif(!wasWhite) {\nwasWhite= true;\nregex.append(\"\\\\s*+\");\nwasWhite= false;\nswitch(c) {\nregex.append(c);\nreturn regex;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:<init>(Ljava/lang/String;)V",
            "method_body": "CopyQuotedStrategy(String formatField) {\nthis.formatField= formatField;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nregex.append('(');\nfor(KeyValue textKeyValue : parser.getDisplayNames(field)) {\nescapeRegex(regex, textKeyValue.key, false).append('|');\nregex.setCharAt(regex.length()-1, ')');\nreturn true;\n}",
            "method_id": 9
        }
    ]
}