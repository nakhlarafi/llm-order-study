{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber",
    "test_body": "public void testCreateNumber() {\n// a lot of things can go wrong\nassertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\nassertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\nassertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\nassertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\nassertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\nassertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\nassertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n+ (Integer.MAX_VALUE + 1L)));\nassertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\nassertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\nassertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\nassertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\nassertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\nassertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\nassertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\nassertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\nassertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\nassertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\nassertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\nassertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\nassertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\nassertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n.createNumber(\"12345678901234567890L\"));\n211: // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\nif (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\nassertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n.createNumber(\"1.1E-700F\"));\n}\nassertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\nassertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n.createNumber(\"10\" + Integer.MAX_VALUE));\nassertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n.createNumber(\"10\" + Long.MAX_VALUE));\n223: // LANG-521\nassertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n226: // LANG-638\nassertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n229: // LANG-693\nassertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n.createNumber(\"\" + Double.MAX_VALUE));\n233: // LANG-822\n// ensure that the underlying negative number would create a BigDecimal\nfinal Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\nassertEquals(BigDecimal.class,bigNum.getClass());\nassertNotNull(bigNum);\n239: // Check that the code fails to create a valid number when preceeded by -- rather than -\ntry {\nNumberUtils.createNumber(\"--1.1E-700F\");\nfail(\"Expected NumberFormatException\");\n} catch (NumberFormatException nfe) {",
    "stack_trace": "junit.framework.AssertionFailedError: Expected NumberFormatException\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber(NumberUtilsTest.java:242)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createBigInteger(Ljava/lang/String;)Ljava/math/BigInteger;",
            "method_body": "public static BigInteger createBigInteger(String str) {\nif (str == null) {\nreturn new BigInteger(str);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createDouble(Ljava/lang/String;)Ljava/lang/Double;",
            "method_body": "public static Double createDouble(String str) {\nif (str == null) {\nreturn Double.valueOf(str);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
            "method_id": 12
        }
    ]
}