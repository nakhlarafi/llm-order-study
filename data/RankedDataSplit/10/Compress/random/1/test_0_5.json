{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive",
    "test_body": "54: public void testCpioUnarchive() throws Exception {\n55: final File output = new File(dir, \"bla.cpio\");\n56: {\n57: final File file1 = getFile(\"test1.xml\");\n58: final File file2 = getFile(\"test2.xml\");\n59: 60: final OutputStream out = new FileOutputStream(output);\n61: final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out);\n62: os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n63: IOUtils.copy(new FileInputStream(file1), os);\n64: os.closeArchiveEntry();\n65: 66: os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n67: IOUtils.copy(new FileInputStream(file2), os);\n68: os.closeArchiveEntry();\n69: 70: os.close();\n71: out.close();\n72: }\n73: 74: // Unarchive Operation\n75: final File input = output;\n76: final InputStream is = new FileInputStream(input);\n77: final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n78: 79: 80: Map result = new HashMap();\n81: ArchiveEntry entry = null;\n82: while ((entry = in.getNextEntry()) != null) {\n83: File target = new File(dir, entry.getName());\n84: final OutputStream out = new FileOutputStream(target);\n85: IOUtils.copy(in, out);\n86: out.close();\n87: result.put(entry.getName(), target);\n88: }\n89: in.close();\n90: 91: int lineSepLength = System.getProperty(\"line.separator\").length();\n92: 93: File t = (File)result.get(\"test1.xml\");\n94: assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n95: assertEquals(\"length of \" + t.getAbsolutePath(),\n96: 72 + 4 * lineSepLength, t.length());\n97: 98: t = (File)result.get(\"test2.xml\");\n99: assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n100: assertEquals(\"length of \" + t.getAbsolutePath(),\n101: 73 + 5 * lineSepLength, t.length());\n102: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;)V",
            "method_body": "public CpioArchiveInputStream(final InputStream in) {\nthis.in = in;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readCString(I)Ljava/lang/String;",
            "method_body": "private String readCString(final int length) throws IOException {\nbyte tmpBuffer[] = new byte[length];\nreadFully(tmpBuffer, 0, tmpBuffer.length);\nreturn new String(tmpBuffer, 0, tmpBuffer.length - 1);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setRemoteDeviceMaj(J)V",
            "method_body": "public void setRemoteDeviceMaj(final long rmaj) {\ncheckNewFormat();\nthis.rmaj = rmaj;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:writeCString(Ljava/lang/String;)V",
            "method_body": "private void writeCString(final String str) throws IOException {\nout.write(str.getBytes());\nout.write('\\0');\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setUID(J)V",
            "method_body": "public void setUID(final long uid) {\nthis.uid = uid;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:write([BII)V",
            "method_body": "public void write(final byte[] b, final int off, final int len)\nensureOpen();\nif (off < 0 || len < 0 || off > b.length - len) {\n} else if (len == 0) {\nif (this.cpioEntry == null) {\nif (this.written + len > this.cpioEntry.getSize()) {\nout.write(b, off, len);\nthis.written += len;\nif ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC) {\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setDeviceMaj(J)V",
            "method_body": "public void setDeviceMaj(final long maj) {\ncheckNewFormat();\nthis.maj = maj;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
            "method_body": "public ArchiveOutputStream createArchiveOutputStream(\nif (archiverName == null || out == null) {\nif (\"ar\".equalsIgnoreCase(archiverName)) {\n} else if (\"zip\".equalsIgnoreCase(archiverName)) {\n} else if (\"tar\".equalsIgnoreCase(archiverName)) {\n} else if (\"jar\".equalsIgnoreCase(archiverName)) {\n} else if (\"cpio\".equalsIgnoreCase(archiverName)) {\nreturn new CpioArchiveOutputStream(out);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getDeviceMaj()J",
            "method_body": "public long getDeviceMaj() {\ncheckNewFormat();\nreturn this.maj;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:getRemoteDeviceMaj()J",
            "method_body": "public long getRemoteDeviceMaj() {\ncheckNewFormat();\nreturn this.rmaj;\n}",
            "method_id": 59
        }
    ]
}