{
    "bug_id": 4,
    "test_id": 6,
    "test_name": "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripExplicitUnicodeExtra",
    "test_body": "58: public void testASCIIFileRoundtripExplicitUnicodeExtra()\n59: throws IOException {\n60: testFileRoundtrip(US_ASCII, false, true);\n61: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:appendSurrogate(Ljava/nio/ByteBuffer;C)V",
            "method_body": "static void appendSurrogate(ByteBuffer bb, char c) {\nbb.put((byte) '%');\nbb.put((byte) 'U');\nbb.put(HEX_DIGITS[(c >> 12)&0x0f]);\nbb.put(HEX_DIGITS[(c >> 8)&0x0f]);\nbb.put(HEX_DIGITS[(c >> 4)&0x0f]);\nbb.put(HEX_DIGITS[c & 0x0f]);\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:growBuffer(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;",
            "method_body": "static ByteBuffer growBuffer(ByteBuffer b, int newCapacity) {\nb.limit(b.position());\nb.rewind();\nint c2 = b.capacity() * 2;\nByteBuffer on = ByteBuffer.allocate(c2 < newCapacity ? newCapacity : c2);\non.put(b);\nreturn on;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.NioZipEncoding:<init>(Ljava/nio/charset/Charset;)V",
            "method_body": "public NioZipEncoding(Charset charset) {\nthis.charset = charset;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.NioZipEncoding:canEncode(Ljava/lang/String;)Z",
            "method_body": "public boolean canEncode(String name) {\nCharsetEncoder enc = this.charset.newEncoder();\nenc.onMalformedInput(CodingErrorAction.REPORT);\nenc.onUnmappableCharacter(CodingErrorAction.REPORT);\nreturn enc.canEncode(name);\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.NioZipEncoding:encode(Ljava/lang/String;)Ljava/nio/ByteBuffer;",
            "method_body": "public ByteBuffer encode(String name) {\nCharsetEncoder enc = this.charset.newEncoder();\nenc.onMalformedInput(CodingErrorAction.REPORT);\nenc.onUnmappableCharacter(CodingErrorAction.REPORT);\nCharBuffer cb = CharBuffer.wrap(name);\nByteBuffer out = ByteBuffer.allocate(name.length()\nwhile (cb.remaining() > 0) {\nCoderResult res = enc.encode(cb, out,true);\nif (res.isUnmappable() || res.isMalformed()) {\nif (res.length() * 6 > out.remaining()) {\nfor (int i=0; i<res.length(); ++i) {\nZipEncodingHelper.appendSurrogate(out,cb.get());\n} else if (res.isOverflow()) {\nout = ZipEncodingHelper.growBuffer(out, 0);\n} else if (res.isUnderflow()) {\nenc.flush(out);\nbreak;\n}\nout.limit(out.position());\nout.rewind();\nreturn out;\n}",
            "method_id": 84
        }
    ]
}