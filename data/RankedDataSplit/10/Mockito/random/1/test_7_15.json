{
    "bug_id": 1,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers",
    "test_body": "public void shouldVerifyUsingMatchers() {\nstubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\nwhen(three.varargsObject(5, \"first arg\", \"second arg\")).thenReturn(\"stubbed\");\n56: try {\none.oneArg(true);\nfail();\n} catch (RuntimeException e) {}\n61: one.simpleMethod(100);\ntwo.simpleMethod(\"test Mockito\");\nthree.varargsObject(10, \"first arg\", \"second arg\");\n65: assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n67: verify(one).oneArg(eq(true));\nverify(one).simpleMethod(anyInt());\nverify(two).simpleMethod(startsWith(\"test\"));\nverify(three).varargsObject(5, \"first arg\", \"second arg\");\nverify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n73: verifyNoMoreInteractions(one, two, three);\n75: try {\nverify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\nfail();\n} catch (WantedButNotInvoked e) {}\n}\n",
    "stack_trace": "java.lang.UnsupportedOperationException\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:123)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:94)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$403169643.varargsObject(Unknown Source)\nat org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers(VerificationAndStubbingUsingMatchersTest.java:65)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.AnswersValidator:validateException(Lorg/mockito/internal/stubbing/answers/ThrowsException;Lorg/mockito/internal/stubbing/answers/MethodInfo;)V",
            "method_body": "private void validateException(ThrowsException answer, MethodInfo methodInfo) {\nThrowable throwable = answer.getThrowable();\nif (throwable == null) {\nif (throwable instanceof RuntimeException || throwable instanceof Error) {\nreturn;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:validatedSettings(Ljava/lang/Class;Lorg/mockito/internal/creation/settings/CreationSettings;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, CreationSettings<T> source) {\nMockCreationValidator validator = new MockCreationValidator();\nvalidator.validateType(typeToMock);\nvalidator.validateExtraInterfaces(typeToMock, source.getExtraInterfaces());\nvalidator.validateMockedType(typeToMock, source.getSpiedInstance());\nvalidator.validateSerializable(typeToMock, source.isSerializable());\nvalidator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());\nCreationSettings<T> settings = new CreationSettings<T>(source);\nsettings.setMockName(new MockNameImpl(source.getName(), typeToMock));\nsettings.setTypeToMock(typeToMock);\nsettings.setExtraInterfaces(prepareExtraInterfaces(source));\nreturn settings;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection:onFields(Ljava/util/Set;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance) {\nreturn new OngoingMockInjection(fields, ofInstance);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock) {\nreturn mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nassert ! (mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\nhashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n}\nreturn hashSet;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.util.collections.ArrayUtils:isEmpty([Ljava/lang/Object;)Z",
            "method_body": "public <T> boolean isEmpty(T[] array) {\nreturn array == null || array.length == 0;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setMockName(Lorg/mockito/mock/MockName;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setMockName(MockName mockName) {\nthis.mockName = mockName;\nreturn this;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSerializableMode()Lorg/mockito/mock/SerializableMode;",
            "method_body": "public SerializableMode getSerializableMode() {\nreturn serializableMode;\n}",
            "method_id": 159
        }
    ]
}