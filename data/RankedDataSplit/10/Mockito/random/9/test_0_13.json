{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.testCallsRealInterfaceMethod",
    "test_body": "public void testCallsRealInterfaceMethod() {\nList<String> list = mock(List.class, withSettings().defaultAnswer(CALLS_REAL_METHODS));\nassertNull(list.get(1));\n}\n",
    "stack_trace": "org.mockito.exceptions.base.MockitoException:\nCannot call abstract real method on java object!\nCalling real methods is only possible when mocking non abstract method.\n//correct example:\nwhen(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\nat org.mockito.exceptions.Reporter.cannotCallAbstractRealMethod(Reporter.java:583)\nat org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:110)\nat org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:36)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat $java.util.List$$EnhancerByMockitoWithCGLIB$$df23f7d1.get(<generated>)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.testCallsRealInterfaceMethod(CreatingMocksWithConstructorTest.java:126)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nreturn loader;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:<init>(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public MockScanner(Object instance, Class<?> clazz) {\nthis.instance = instance;\nthis.clazz = clazz;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn GLOBAL_CONFIGURATION.get().cleansStackTrace();\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/cglib/ClassImposterizer;)V",
            "method_body": "public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nClass<?>[] allMockedTypes = prepend(mockedType, interfaces);\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(allMockedTypes);\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nenhancer.setSerialVersionUID(42L);\nreturn enhancer.createClass();\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isAbstract()Z",
            "method_body": "public boolean isAbstract() {\nreturn (method.getModifiers() & Modifier.ABSTRACT) != 0;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {\nthis.mockHandler = mockHandler;\nthis.invocationListeners = settings.getInvocationListeners();\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/util/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 139
        }
    ]
}