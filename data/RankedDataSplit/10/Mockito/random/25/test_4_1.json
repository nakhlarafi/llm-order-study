{
    "bug_id": 25,
    "test_id": 4,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class",
    "test_body": "public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {\nGenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n63: Cloneable cloneable_bound_of_typevar_K = mock.returningK();\nComparable<?> comparable_bound_of_typevar_K = mock.returningK();",
    "stack_trace": "java.lang.ClassCastException: $java.lang.Comparable$$EnhancerByMockitoWithCGLIB$$5139a9fd cannot be cast to java.lang.Cloneable\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class(ReturnsGenericDeepStubsTest.java:63)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject result = delegate.handle(invocation);\nClass<?> returnType = invocation.getMethod().getReturnType();\nif(result == null && returnType.isPrimitive()) {\nreturn result;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:inferFrom(Ljava/lang/reflect/Type;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public static GenericMetadataSupport inferFrom(Type type) {\nChecks.checkNotNull(type, \"type\");\nif (type instanceof Class) {\nreturn new FromClassGenericMetadataSupport((Class<?>) type);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:<init>(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVarBoundedType(TypeVariable typeVariable) {\nthis.typeVariable = typeVariable;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new DelegatingMethod(method);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:<init>(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 19
        }
    ]
}