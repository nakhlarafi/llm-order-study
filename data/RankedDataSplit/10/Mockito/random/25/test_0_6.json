{
    "bug_id": 25,
    "test_id": 0,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class",
    "test_body": "public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {\nGenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n71: Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();\nComparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();",
    "stack_trace": "java.lang.ClassCastException: $java.lang.Comparable$$EnhancerByMockitoWithCGLIB$$5139a9fd cannot be cast to java.lang.Cloneable\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class(ReturnsGenericDeepStubsTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (globalConfiguration.get() == null) {\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isStubOnly()Z",
            "method_body": "public boolean isStubOnly() {\nreturn stubOnly;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:argumentsToMatchers([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "public static List<Matcher> argumentsToMatchers(Object[] arguments) {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nif (arg != null && arg.getClass().isArray()) {\nmatchers.add(new Equals(arg));\nreturn matchers;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationImpl:getArguments()[Ljava/lang/Object;",
            "method_body": "public Object[] getArguments() {\nreturn arguments;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> clz) {\nreturn ClassImposterizer.INSTANCE.canImposterise(clz);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nthreadSafely().stubbingCompleted(invocation);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:getInvocationContainer()Lorg/mockito/internal/stubbing/InvocationContainer;",
            "method_body": "public InvocationContainer getInvocationContainer() {\nreturn delegate.getInvocationContainer();\n}",
            "method_id": 69
        }
    ]
}