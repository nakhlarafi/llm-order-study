{
    "bug_id": 11,
    "test_id": 1,
    "test_name": "org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_true_when_self",
    "test_body": "public void equals_should_return_true_when_self() throws Exception {\nassertTrue(delegatingMethod.equals(delegatingMethod));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertTrue(Assert.java:31)\nat org.mockito.internal.creation.DelegatingMethodTest.equals_should_return_true_when_self(DelegatingMethodTest.java:35)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:injectMocks(Ljava/lang/Object;)V",
            "method_body": "public void injectMocks(final Object testClassInstance) {\nClass<?> clazz = testClassInstance.getClass();\nSet<Field> mockDependentFields = new HashSet<Field>();\nSet<Object> mocks = newMockSafeHashSet();\nwhile (clazz != Object.class) {\nnew InjectMocksScanner(clazz).addTo(mockDependentFields);\nnew MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);\nclazz = clazz.getSuperclass();\nnew DefaultInjectionEngine().injectMocksOnFields(mockDependentFields, mocks, testClassInstance);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:isMockOrSpy(Ljava/lang/Object;)Z",
            "method_body": "private boolean isMockOrSpy(Object instance) {\nreturn mockUtil.isMock(instance)\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.util.collections.Sets:newMockSafeHashSet([Ljava/lang/Object;)Ljava/util/Set;",
            "method_body": "public static Set<Object> newMockSafeHashSet(Object... mocks) {\nreturn HashCodeAndEqualsSafeSet.of(mocks);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:enableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void enableAccess(AccessibleObject accessibleObject) {\nwasAccessible = accessibleObject.isAccessible();\naccessibleObject.setAccessible(true);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:registerAnnotationProcessor(Ljava/lang/Class;Lorg/mockito/internal/configuration/FieldAnnotationProcessor;)V",
            "method_body": "private <A extends Annotation> void registerAnnotationProcessor(Class<A> annotationClass, FieldAnnotationProcessor<A> fieldAnnotationProcessor) {\nannotationProcessorMap.put(annotationClass, fieldAnnotationProcessor);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nClass<?> clazz = testClass.getClass();\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nwhile (clazz != Object.class) {\nscanDeprecatedWay(annotationEngine, testClass, clazz);\nclazz = clazz.getSuperclass();\nannotationEngine.process(testClass.getClass(), testClass);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:thenTry(Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;)Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;",
            "method_body": "public MockInjectionStrategy thenTry(MockInjectionStrategy strategy) {\nif(nextStrategy != null) {\nnextStrategy.thenTry(strategy);\nnextStrategy = strategy;\nreturn strategy;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isSpy(Ljava/lang/Object;)Z",
            "method_body": "public boolean isSpy(Object mock) {\nreturn isMockitoMock(mock) && getMockSettings(mock).getSpiedInstance() != null;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (GLOBAL_CONFIGURATION.get() == null) {\n}",
            "method_id": 39
        }
    ]
}