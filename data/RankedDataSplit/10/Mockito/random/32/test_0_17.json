{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName",
    "test_body": "public void shouldPrintNiceName() {\n//when\nveryCoolSpy.add(1);\n27: try {\nverify(veryCoolSpy).add(2);\nfail();",
    "stack_trace": "junit.framework.AssertionFailedError: <'\nArgument(s) are different! Wanted:\nlinkedList.add(2);\n-> at org.mockitousage.bugs.SpyShouldHaveNiceNameTest.shouldPrintNiceName(SpyShouldHaveNiceNameTest.java:28)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.reporting.PrintSettings:setMultiline(Z)V",
            "method_body": "public void setMultiline(boolean multiline) {\nthis.multiline = multiline;\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.mockito.internal.creation.AbstractMockitoMethodProxy:invokeSuper(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public Object invokeSuper(Object target, Object[] arguments) throws Throwable {\nreturn getMethodProxy().invokeSuper(target, arguments);\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:getObject()Ljava/lang/Object;",
            "method_body": "public T getObject() {\nreturn object;\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;Lorg/mockito/MockSettings;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\nif (listener != null && listener instanceof MockingStartedListener) {\nvalidateState();\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.mockito.internal.reporting.SmartPrinter:getWanted()Ljava/lang/String;",
            "method_body": "public String getWanted() {\nreturn wanted;\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getArguments()[Ljava/lang/Object;",
            "method_body": "public Object[] getArguments() {\nreturn arguments;\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:hasSimilarMethod(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean hasSimilarMethod(Invocation candidate) {\nString wantedMethodName = getMethod().getName();\nString currentMethodName = candidate.getMethod().getName();\nfinal boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\nfinal boolean isUnverified = !candidate.isVerified();\nfinal boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\nfinal boolean methodEquals = hasSameMethod(candidate);\nif (!methodNameEquals || !isUnverified || !mockIsTheSame) {\nfinal boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());\nreturn !overloadedButSameArgs;\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:getInvocations()Ljava/util/List;",
            "method_body": "public List<Invocation> getInvocations() {\nreturn registeredInvocations.getAll();\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.mockito.internal.util.ListUtil:filter(Ljava/util/Collection;Lorg/mockito/internal/util/ListUtil$Filter;)Ljava/util/LinkedList;",
            "method_body": "public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\nLinkedList<T> filtered = new LinkedList<T>();\nfor (T t : collection) {\nif (!filter.isOut(t)) {\nfiltered.add(t);\n}\nreturn filtered;\n}",
            "method_id": 179
        }
    ]
}