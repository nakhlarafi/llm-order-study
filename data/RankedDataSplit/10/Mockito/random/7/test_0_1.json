{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics",
    "test_body": "public void discoverDeepMockingOfGenerics() {\nMyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\nwhen(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n}\n",
    "stack_trace": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:407)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:405)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.rawType(GenericMetadataSupport.java:385)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(ReturnsDeepStubs.java:51)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest$MyClass2$$EnhancerByMockitoWithCGLIB$$da894864.getNested(<generated>)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics(DeepStubFailingWhenGenricNestedAsRawTypeTest.java:26)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn mockMaker.getHandler(mock) != null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:withSettingsUsing(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/MockSettings;",
            "method_body": "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\nMockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\nreturn propagateSerializationSettings(mockSettings, parentMockSettings)\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:inferFrom(Ljava/lang/reflect/Type;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public static GenericMetadataSupport inferFrom(Type type) {\nChecks.checkNotNull(type, \"type\");\nif (type instanceof Class) {\nreturn new FromClassGenericMetadataSupport((Class<?>) type);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeVariableIfNotPresent(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "private void registerTypeVariableIfNotPresent(TypeVariable typeVariable) {\nif (!contextualActualTypeParameters.containsKey(typeVariable)) {\ncontextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:argumentsToMatchers([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "public static List<Matcher> argumentsToMatchers(Object[] arguments) {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nreturn matchers;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:notifyMethodCallException(Lorg/mockito/invocation/Invocation;Ljava/lang/Throwable;)V",
            "method_body": "private void notifyMethodCallException(Invocation invocation, Throwable exception) {\nfor (InvocationListener listener : invocationListeners) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/cglib/ClassImposterizer;)V",
            "method_body": "public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nClass<?>[] allMockedTypes = prepend(mockedType, interfaces);\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(allMockedTypes);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nenhancer.setSerialVersionUID(42L);\nreturn enhancer.createClass();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.creation.instance.InstantiatorProvider:getInstantiator(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/creation/instance/Instantiator;",
            "method_body": "public Instantiator getInstantiator(MockCreationSettings settings) {\nif (settings.isUsingConstructor()) {\nreturn INSTANCE;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 19
        }
    ]
}