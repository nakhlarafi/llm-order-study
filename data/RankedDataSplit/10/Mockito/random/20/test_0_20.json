{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class",
    "test_body": "public void should_spy_inner_class() throws Exception {\n126: class WithMockAndSpy {\n@Spy private InnerStrength strength;\n@Mock private List<String> list;\n130: abstract class InnerStrength {\nprivate final String name;\n133: InnerStrength() {\n// Make sure that @Mock fields are always injected before @Spy fields.\nassertNotNull(list);\n// Make sure constructor is indeed called.\nthis.name = \"inner\";\n}\n140: abstract String strength();\n142: String fullStrength() {\nreturn name + \" \" + strength();\n}\n}\n}\nWithMockAndSpy outer = new WithMockAndSpy();\nMockitoAnnotations.initMocks(outer);\nwhen(outer.strength.strength()).thenReturn(\"strength\");\nassertEquals(\"inner strength\", outer.strength.fullStrength());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class(SpyAnnotationTest.java:150)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nthreadSafely().stubbingCompleted(invocation);\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:reset()V",
            "method_body": "public void reset() {\nmatcherStack.clear();\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:matches(Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "public boolean matches(Invocation actual) {\nreturn invocation.getMock().equals(actual.getMock())\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setTypeToMock(Ljava/lang/Class;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setTypeToMock(Class<T> typeToMock) {\nthis.typeToMock = typeToMock;\nreturn this;\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:addTo(Ljava/util/Set;)V",
            "method_body": "public void addTo(Set<Field> mockDependentFields) {\nmockDependentFields.addAll(scan());\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveOrWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveOrWrapper(Class<?> type) {\nreturn PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.containsKey(type);\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:nameFor(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private String nameFor(Class<?> type) {\nString typeName = type.getName();\nif (typeName.startsWith(\"java.\") || (type.getPackage() != null && type.getPackage().isSealed())) {\nreturn String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));\n}",
            "method_id": 207
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}",
            "method_id": 208
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processIndependentAnnotations(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processIndependentAnnotations(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ndelegate.process(classContext, testInstance);\nspyAnnotationEngine.process(classContext, testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 209
        }
    ]
}