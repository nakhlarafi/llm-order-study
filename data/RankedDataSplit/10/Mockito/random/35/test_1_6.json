{
    "bug_id": 35,
    "test_id": 1,
    "test_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed",
    "test_body": "public void shouldNotThrowNPEWhenIntPassed() {\nmock.intArgumentMethod(100);\n38: verify(mock).intArgumentMethod(isA(Integer.class));\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed(NPEWithCertainMatchersTest.java:38)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:primitiveOf(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "private Object primitiveOf(Class<?> type) {\nif (type == Boolean.TYPE) {\n} else if (type == Character.TYPE) {\nreturn 0;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/internal/verification/api/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthis.iOngoingStubbing = iOngoingStubbing;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getMockName()Ljava/lang/String;",
            "method_body": "public String getMockName() {\nreturn name;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = invocation.argumentsToMatchers();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (mockitoStubber.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\nmockingProgress.validateState();\nif (verificationMode != null) {\nregisteredInvocations.add(invocationMatcher.getInvocation());\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, registeredInvocations);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);\nif (!invocation.isVoid() && stubbedInvocation == null) {\nif (stubbedInvocation != null) {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.Matchers:isA(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T isA(Class<T> clazz) {\nreturn reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n}",
            "method_id": 69
        }
    ]
}