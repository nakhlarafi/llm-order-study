{
    "bug_id": 3,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times",
    "test_body": "public void captures_correctly_when_captor_used_multiple_times() throws Exception {\n// given\nArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n299: // when\nmock.mixedVarargs(42, \"a\", \"b\", \"c\");\n302: // then\n// this is only for backwards compatibility. It does not make sense in real to do so.\nverify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());\nAssertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:130)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:22)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:16)\nat org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:48)\nat org.mockito.internal.verification.Times.verify(Times.java:39)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:76)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$263271281.mixedVarargs(Unknown Source)\nat org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times(CapturingArgumentsTest.java:304)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper:hashCode()I",
            "method_body": "public int hashCode() {\nreturn System.identityHashCode(mockInstance);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:<init>(Lorg/hamcrest/Matcher;)V",
            "method_body": "public LocalizedMatcher(Matcher actualMatcher) {\nthis.actualMatcher = actualMatcher;\nthis.location = new LocationImpl();\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:capture()Ljava/lang/Object;",
            "method_body": "public T capture() {\nMockito.argThat(capturingMatcher);\nreturn handyReturnValues.returnFor(clazz);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:captureArgumentsFrom(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void captureArgumentsFrom(Invocation invocation) {\nif (invocation.getMethod().isVarArgs()) {\nint indexOfVararg = invocation.getRawArguments().length - 1;\nfor (int position = 0; position < indexOfVararg; position++) {\nMatcher m = matchers.get(position);\nif (m instanceof CapturesArguments) {\n((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\nfor (int position = indexOfVararg; position < matchers.size(); position++) {\nMatcher m = matchers.get(position);\nif (m instanceof CapturesArguments) {\n((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n} else {\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reset()V",
            "method_body": "public void reset() {\nthreadSafely().reset();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nnew AnswersValidator().validateDefaultAnswerReturnedValue(invocation, ret);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:<init>()V",
            "method_body": "public DefaultAnnotationEngine() {\nregisterAnnotationProcessor(Mock.class, new MockAnnotationProcessor());\nregisterAnnotationProcessor(MockitoAnnotations.Mock.class, new MockitoAnnotationsMockAnnotationProcessor());\nregisterAnnotationProcessor(Captor.class, new CaptorAnnotationProcessor());\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveOrWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveOrWrapper(Class<?> type) {\nreturn PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.containsKey(type);\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 109
        }
    ]
}