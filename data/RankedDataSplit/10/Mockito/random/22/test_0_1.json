{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.mockito.internal.matchers.EqualityTest.shouldKnowIfObjectsAreEqual",
    "test_body": "public void shouldKnowIfObjectsAreEqual() throws Exception {\nint[] arr = new int[] {1, 2};\nassertTrue(areEqual(arr, arr));\nassertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));\nassertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));\nassertTrue(areEqual(new String[0], new String[0]));\nassertTrue(areEqual(new Object[10], new Object[10]));\nassertTrue(areEqual(new int[] {1}, new Integer[] {1}));\nassertTrue(areEqual(new Object[] {\"1\"}, new String[] {\"1\"}));\nObject badequals=new BadEquals();\nassertTrue(areEqual(badequals,badequals));\n26: assertFalse(areEqual(new Object[9], new Object[10]));\nassertFalse(areEqual(new int[] {1, 2}, new int[] {1}));\nassertFalse(areEqual(new int[] {1}, new double[] {1.0}));\n}\n",
    "stack_trace": "java.lang.RuntimeException\nat org.mockito.internal.matchers.EqualityTest$BadEquals.equals(EqualityTest.java:34)\nat org.mockito.internal.matchers.Equality.areEqual(Equality.java:18)\nat org.mockito.internal.matchers.EqualityTest.shouldKnowIfObjectsAreEqual(EqualityTest.java:24)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:tryConstructorInjection()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection tryConstructorInjection() {\ninjectionStrategies.thenTry(new ConstructorInjection());\nreturn this;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nreturn hashSet;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:hasNext()Z",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:<init>(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public MockScanner(Object instance, Class<?> clazz) {\nthis.instance = instance;\nthis.clazz = clazz;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\nGlobalConfiguration.validate();\nif (verificationMode != null) {\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:withMocks(Ljava/util/Set;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection withMocks(Set<Object> mocks) {\nthis.mocks.addAll(checkNotNull(mocks, \"mocks\"));\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\n}",
            "method_id": 19
        }
    ]
}