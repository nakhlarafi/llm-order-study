{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
    "test_body": "public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n//given\nwhen(mock.otherMethod()).thenReturn(\"foo\");\n26: //when\nmockTwo.simpleMethod(\"foo\");\n29: //then\nverify(mockTwo).simpleMethod(mock.otherMethod());\ntry {\nverify(mockTwo, never()).simpleMethod(mock.otherMethod());\nfail();\n} catch (NeverWantedButInvoked e) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine(VerifyingWithAnExtraCallToADifferentMockTest.java:33)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/verification/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress) {\nthis.mockingProgress = mockingProgress;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn new ReturnsEmptyValues();\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.Mockito:never()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public static VerificationMode never() {\nreturn times(0);\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>(Lorg/mockito/internal/exceptions/base/StackTraceFilter;)V",
            "method_body": "public Location(StackTraceFilter filter) {\nStackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\nStackTraceElement[] filtered = filter.filter(stackTrace, false);\nif (filtered.length == 0) {\nwhere = \"-> at \" + filtered[0].toString();\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nGlobalConfiguration.validate();\nif (verificationMode != null) {\nif (stubbingInProgress != null) {\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.Returns:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn value.getClass();\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:set(Ljava/lang/Object;)V",
            "method_body": "public void set(Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nfield.set(target, value);\n}\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nthreadSafely().stubbingStarted();\n}",
            "method_id": 159
        }
    ]
}