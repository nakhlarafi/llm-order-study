{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
    "test_body": "public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n//given\nwhen(mock.otherMethod()).thenReturn(\"foo\");\n26: //when\nmockTwo.simpleMethod(\"foo\");\n29: //then\nverify(mockTwo).simpleMethod(mock.otherMethod());\ntry {\nverify(mockTwo, never()).simpleMethod(mock.otherMethod());\nfail();\n} catch (NeverWantedButInvoked e) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine(VerifyingWithAnExtraCallToADifferentMockTest.java:33)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/InvocationContainerImpl;)V",
            "method_body": "public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {\nthis.invocationContainerImpl = invocationContainerImpl;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>()V",
            "method_body": "public Location() {\nthis(new StackTraceFilter());\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:when(Ljava/lang/Object;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public <T> OngoingStubbing<T> when(T methodCall) {\nmockingProgress.stubbingStarted();\nreturn (OngoingStubbing) stub();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializable;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testClass) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testClass, field).set(mock);\n}\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:getMethodProxy()Lorg/mockito/cglib/proxy/MethodProxy;",
            "method_body": "public MethodProxy getMethodProxy() {\nreturn methodProxy;\n}",
            "method_id": 39
        }
    ]
}