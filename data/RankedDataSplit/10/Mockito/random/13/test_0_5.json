{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
    "test_body": "public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n//given\nwhen(mock.otherMethod()).thenReturn(\"foo\");\n26: //when\nmockTwo.simpleMethod(\"foo\");\n29: //then\nverify(mockTwo).simpleMethod(mock.otherMethod());\ntry {\nverify(mockTwo, never()).simpleMethod(mock.otherMethod());\nfail();\n} catch (NeverWantedButInvoked e) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine(VerifyingWithAnExtraCallToADifferentMockTest.java:33)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:matches(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean matches(Invocation actual) {\nreturn invocation.getMock().equals(actual.getMock())\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (globalConfiguration.get() == null) {\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\nannotationEngine.process(clazz, testClass);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullOngoingStubbing()Lorg/mockito/internal/progress/IOngoingStubbing;",
            "method_body": "public IOngoingStubbing pullOngoingStubbing() {\nIOngoingStubbing temp = iOngoingStubbing;\niOngoingStubbing = null;\nreturn temp;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:markStubbed(Lorg/mockito/internal/invocation/StubInfo;)V",
            "method_body": "public void markStubbed(StubInfo stubInfo) {\nthis.stubInfo = stubInfo;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:<init>(Lorg/mockito/internal/MockitoInvocationHandler;Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsImpl mockSettings) {\nthis.handler = handler;\nthis.mockSettings = mockSettings;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getParameterTypes()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getParameterTypes() {\nreturn method.getParameterTypes();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.Returns:<init>(Ljava/lang/Object;)V",
            "method_body": "public Returns(Object value) {\nthis.value = value;\n}",
            "method_id": 59
        }
    ]
}