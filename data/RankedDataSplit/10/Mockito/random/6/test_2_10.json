{
    "bug_id": 6,
    "test_id": 2,
    "test_name": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap",
    "test_body": "public void shouldAllowAnyMap() {\nwhen(mock.forMap(anyMap())).thenReturn(\"matched\");\n54: assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));\nassertEquals(null, mock.forMap(null));\n57: verify(mock, times(1)).forMap(anyMap());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap(NewMatchersTest.java:55)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.InvocationImpl:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public InvocationImpl(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new LocationImpl();\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer:<init>(Lorg/mockito/internal/creation/instance/Instantiator;)V",
            "method_body": "public ClassImposterizer(Instantiator instantiator) {\nthis.instantiator = instantiator;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:scan()Ljava/util/Set;",
            "method_body": "private Set<Field> scan() {\nSet<Field> mockDependentFields = new HashSet<Field>();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (null != field.getAnnotation(InjectMocks.class)) {\nreturn mockDependentFields;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.Returns:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn value.getClass();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;[Ljava/lang/Object;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Object[] actualArgs) {\nif (actualArgs.length != invocationMatcher.getMatchers().size()) {\nfor (int i = 0; i < actualArgs.length; i++) {\nif (!invocationMatcher.getMatchers().get(i).matches(actualArgs[i])) {\nreturn true;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 109
        }
    ]
}