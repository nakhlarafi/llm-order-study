{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\nMockitoAnnotations.initMocks(this);\nassertNull(otherSuperUnderTesting.candidate1);\nassertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.Answers:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn implementation.answer(invocation);\n}",
            "method_id": 220
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator:instantiate()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "FieldInitializationReport instantiate();\nNoArgConstructorInstantiator(Object testClass, Field field) {\nthis.testClass = testClass;\nthis.field = field;\n}\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = field.getType().getDeclaredConstructor();\nchanger.enableAccess(constructor);\nfinal Object[] noArg = new Object[0];\nObject newFieldInstance = constructor.newInstance(noArg);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), true, false);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 221
        },
        {
            "method_signature": "org.mockito.internal.verification.DefaultRegisteredInvocations:add(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\nsynchronized (invocations) {\ninvocations.add(invocation);\n}\n}",
            "method_id": 222
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}",
            "method_id": 223
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:injectMocks(Ljava/lang/Object;)V",
            "method_body": "public void injectMocks(final Object testClassInstance) {\nClass<?> clazz = testClassInstance.getClass();\nSet<Field> mockDependentFields = new HashSet<Field>();\nSet<Object> mocks = newMockSafeHashSet();\nwhile (clazz != Object.class) {\nnew InjectMocksScanner(clazz).addTo(mockDependentFields);\nnew MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);\nclazz = clazz.getSuperclass();\nnew DefaultInjectionEngine().injectMocksOnFields(mockDependentFields, mocks, testClassInstance);\n}",
            "method_id": 224
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter$2:<init>(Lorg/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter;)V",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 225
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn mockName;\n}",
            "method_id": 226
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:assertNoAnnotations(Ljava/lang/reflect/Field;[Ljava/lang/Class;)V",
            "method_body": "void assertNoAnnotations(final Field field, final Class... annotations) {\nfor (Class annotation : annotations) {\nif (field.isAnnotationPresent(annotation)) {\n}",
            "method_id": 227
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:reportNoSetterFound()V",
            "method_body": "private void reportNoSetterFound() {\nif(reportNoSetterFound) {\n}",
            "method_id": 228
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 229
        }
    ]
}