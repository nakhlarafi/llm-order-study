{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\nMockitoAnnotations.initMocks(this);\nassertNull(otherSuperUnderTesting.candidate1);\nassertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.MockUtil:resetMock(Ljava/lang/Object;)V",
            "method_body": "public <T> void resetMock(T mock) {\nInternalMockHandler oldHandler = (InternalMockHandler) getMockHandler(mock);\nMockCreationSettings settings = oldHandler.getMockSettings();\nMockHandler newHandler = new MockHandlerFactory().create(settings);\nmockMaker.resetMock(mock, newHandler, settings);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler:processInjection(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "protected boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {\nFieldReader fieldReader = new FieldReader(fieldOwner, field);\nif(!fieldReader.isNull() && field.isAnnotationPresent(Spy.class)) {\nObject instance = fieldReader.read();\nif (new MockUtil().isMock(instance)) {\nMockito.reset(instance);\nnew FieldSetter(fieldOwner, field).set(\n}\nreturn false;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\nif (!classToMock.equals(spiedInstance.getClass())) {\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:next()Ljava/lang/Object;",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializationReport:fieldInstance()Ljava/lang/Object;",
            "method_body": "public Object fieldInstance() {\nreturn fieldInstance;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:acquireFieldInstance()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "private FieldInitializationReport acquireFieldInstance() throws IllegalAccessException {\nObject fieldInstance = field.get(fieldOwner);\nif(fieldInstance != null) {\nreturn new FieldInitializationReport(fieldInstance, false, false);\nreturn instantiator.instantiate();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:addPreparedMocks(Ljava/util/Set;)V",
            "method_body": "public void addPreparedMocks(Set<Object> mocks) {\nmocks.addAll(scan());\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator:instantiate()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "public FieldInitializationReport instantiate() {\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = biggestConstructor(field.getType());\nchanger.enableAccess(constructor);\nfinal Object[] args = argResolver.resolveTypeInstances(constructor.getParameterTypes());\nObject newFieldInstance = constructor.newInstance(args);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), false, true);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkItemsNotNull(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/Iterable;",
            "method_body": "public static <T extends Iterable> T checkItemsNotNull(T iterable, String checkedIterable) {\ncheckNotNull(iterable, checkedIterable);\nfor (Object item : iterable) {\ncheckNotNull(item, \"item in \" + checkedIterable);\n}\nreturn iterable;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockHandler.getMockSettings();\n}",
            "method_id": 119
        }
    ]
}