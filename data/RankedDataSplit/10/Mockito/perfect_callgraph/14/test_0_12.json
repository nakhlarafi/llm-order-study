{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
    "test_body": "public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n//given\nwhen(mock.otherMethod()).thenReturn(\"foo\");\n25: //when\nmockTwo.simpleMethod(\"foo\");\n28: //then\nverify(mockTwo).simpleMethod(mock.otherMethod());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError:\nWanted but not invoked:\nmock.otherMethod();\n-> at org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest.shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine(VerifyingWithAnExtraCallToADifferentMockTest.java:29)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder:findSimilarInvocation(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;)Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\nInvocation firstSimilar = null;\nfor (Invocation invocation : invocations) {\nreturn firstSimilar;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nreturn this;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\nthis.realMethod = realMethod;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nvalidateState();\nstubbingInProgress = new Location();\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock) {\nreturn processAnnotationOn((Mock) annotation, field);\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:<init>()V",
            "method_body": "public MissingInvocationChecker() {\nthis(new InvocationsFinder(), new Reporter());\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingCompleted(Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nthreadSafely().stubbingCompleted(invocation);\n}",
            "method_id": 129
        }
    ]
}