{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldStubbingWork",
    "test_body": "public void shouldStubbingWork() {\nMockito.when(iterable.iterator()).thenReturn(myIterator);\nAssert.assertNotNull(((Iterable) iterable).iterator());\nAssert.assertNotNull(iterable.iterator());",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertNotNull(Assert.java:621)\nat org.junit.Assert.assertNotNull(Assert.java:631)\nat org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest.shouldStubbingWork(InheritedGenericsPolimorphicCallTest.java:39)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$2:accept(Ljava/lang/reflect/Method;)I",
            "method_body": "public int accept(Method method) {\nreturn method.isBridge() ? 1 : 0;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:matches(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean matches(Invocation actual) {\nreturn invocation.getMock().equals(actual.getMock())\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:toInstanceName(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private static String toInstanceName(Class<?> clazz) {\nString className = clazz.getSimpleName();\nif (className.length() == 0) {\nreturn className.substring(0, 1).toLowerCase() + className.substring(1);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:thenAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\ninvocationContainerImpl.addAnswer(answer);\nreturn new ConsecutiveStubbing<T>(invocationContainerImpl);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (globalConfiguration.get() == null) {\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\n}\nreturn null;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.AnswersValidator:validate(Lorg/mockito/stubbing/Answer;Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "public void validate(Answer<?> answer, Invocation invocation) {\nif (answer instanceof ThrowsException) {\nif (answer instanceof Returns) {\nvalidateReturnValue((Returns) answer, invocation);\nif (answer instanceof DoesNothing) {\nif (answer instanceof CallsRealMethods) {\n}",
            "method_id": 69
        }
    ]
}