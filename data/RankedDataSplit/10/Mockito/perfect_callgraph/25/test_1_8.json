{
    "bug_id": 25,
    "test_id": 1,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic",
    "test_body": "public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\nGenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\nListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);\n97: assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();\nassertThat(listOfInteger.get(25)).isEqualTo(0);",
    "stack_trace": "java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.String\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic(ReturnsGenericDeepStubsTest.java:97)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher:<init>(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/stubbing/Answer;)V",
            "method_body": "public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\nsuper(invocation.getInvocation(), invocation.getMatchers());\nthis.answers.add(answer);\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MockitoNamingPolicy:getTag()Ljava/lang/String;",
            "method_body": "protected String getTag() {\nreturn \"ByMockitoWithCGLIB\";\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationImpl:getArguments()[Ljava/lang/Object;",
            "method_body": "public Object[] getArguments() {\nreturn arguments;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:resetInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\nthis.invocationForStubbing = invocationMatcher;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializable;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 89
        }
    ]
}