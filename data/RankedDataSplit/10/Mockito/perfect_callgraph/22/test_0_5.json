{
    "bug_id": 22,
    "test_id": 0,
    "test_name": "org.mockito.internal.matchers.EqualityTest.shouldKnowIfObjectsAreEqual",
    "test_body": "public void shouldKnowIfObjectsAreEqual() throws Exception {\nint[] arr = new int[] {1, 2};\nassertTrue(areEqual(arr, arr));\nassertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));\nassertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));\nassertTrue(areEqual(new String[0], new String[0]));\nassertTrue(areEqual(new Object[10], new Object[10]));\nassertTrue(areEqual(new int[] {1}, new Integer[] {1}));\nassertTrue(areEqual(new Object[] {\"1\"}, new String[] {\"1\"}));\nObject badequals=new BadEquals();\nassertTrue(areEqual(badequals,badequals));\n26: assertFalse(areEqual(new Object[9], new Object[10]));\nassertFalse(areEqual(new int[] {1, 2}, new int[] {1}));\nassertFalse(areEqual(new int[] {1}, new double[] {1.0}));\n}\n",
    "stack_trace": "java.lang.RuntimeException\nat org.mockito.internal.matchers.EqualityTest$BadEquals.equals(EqualityTest.java:34)\nat org.mockito.internal.matchers.Equality.areEqual(Equality.java:18)\nat org.mockito.internal.matchers.EqualityTest.shouldKnowIfObjectsAreEqual(EqualityTest.java:24)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nreturn hashSet;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultInjectionEngine:injectMocksOnFields(Ljava/util/Set;Ljava/util/Set;Ljava/lang/Object;)V",
            "method_body": "public void injectMocksOnFields(Set<Field> needingInjection, Set<Object> mocks, Object testClassInstance) {\nMockInjection.onFields(needingInjection, testClassInstance)\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.util.collections.Sets:newMockSafeHashSet([Ljava/lang/Object;)Ljava/util/Set;",
            "method_body": "public static Set<Object> newMockSafeHashSet(Object... mocks) {\nreturn HashCodeAndEqualsSafeSet.of(mocks);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:withMocks(Ljava/util/Set;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection withMocks(Set<Object> mocks) {\nthis.mocks.addAll(checkNotNull(mocks, \"mocks\"));\nreturn this;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 54
        }
    ]
}