{
    "bug_id": 1,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers",
    "test_body": "public void shouldVerifyUsingMatchers() {\nstubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\nwhen(three.varargsObject(5, \"first arg\", \"second arg\")).thenReturn(\"stubbed\");\n56: try {\none.oneArg(true);\nfail();\n} catch (RuntimeException e) {}\n61: one.simpleMethod(100);\ntwo.simpleMethod(\"test Mockito\");\nthree.varargsObject(10, \"first arg\", \"second arg\");\n65: assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n67: verify(one).oneArg(eq(true));\nverify(one).simpleMethod(anyInt());\nverify(two).simpleMethod(startsWith(\"test\"));\nverify(three).varargsObject(5, \"first arg\", \"second arg\");\nverify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n73: verifyNoMoreInteractions(one, two, three);\n75: try {\nverify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\nfail();\n} catch (WantedButNotInvoked e) {}\n}\n",
    "stack_trace": "java.lang.UnsupportedOperationException\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:123)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:94)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$403169643.varargsObject(Unknown Source)\nat org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers(VerificationAndStubbingUsingMatchersTest.java:65)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:varArgsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nif (!actual.getMethod().isVarArgs()) {\nObject[] rawArgs = actual.getRawArguments();\nList<Matcher> matchers = invocationMatcher.getMatchers();\nif (rawArgs.length != matchers.size()) {\nreturn false;\nfor (int i = 0; i < rawArgs.length; i++) {\nMatcher m = matchers.get(i);\nif (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\nif (m instanceof MatcherDecorator) {\nactualMatcher = ((MatcherDecorator)m).getActualMatcher();\nif (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n} else if (!m.matches(rawArgs[i])){\nreturn false;\nreturn true;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.stubbing.VoidMethodStubbableImpl:toThrow(Ljava/lang/Throwable;)Lorg/mockito/stubbing/VoidMethodStubbable;",
            "method_body": "public VoidMethodStubbable<T> toThrow(Throwable throwable) {\ninvocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(throwable));\nreturn this;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject result = delegate.handle(invocation);\nClass<?> returnType = invocation.getMethod().getReturnType();\nif(result == null && returnType.isPrimitive()) {\nreturn new HandyReturnValues().returnFor(returnType);\nreturn result;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:<init>(Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public MockHandlerImpl(MockCreationSettings mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress, mockSettings);\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:thenAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\nif(!invocationContainerImpl.hasInvocationForPotentialStubbing()) {\ninvocationContainerImpl.addAnswer(answer);\nreturn new ConsecutiveStubbing<T>(invocationContainerImpl);\n}",
            "method_id": 159
        }
    ]
}