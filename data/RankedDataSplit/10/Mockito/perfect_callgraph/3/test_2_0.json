{
    "bug_id": 3,
    "test_id": 2,
    "test_name": "org.mockitousage.matchers.CapturingArgumentsTest.should_capture_all_vararg",
    "test_body": "public void should_capture_all_vararg() throws Exception {\n// given\nArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n271: // when\nmock.mixedVarargs(42, \"a\", \"b\", \"c\");\nmock.mixedVarargs(42, \"again ?!\");\n275: // then\nverify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());\n278: Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\nat org.fest.assertions.ConstructorInvoker.newInstance(ConstructorInvoker.java:34)\nat org.fest.assertions.ComparisonFailureFactory.newComparisonFailure(ComparisonFailureFactory.java:60)\nat org.fest.assertions.ComparisonFailureFactory.comparisonFailure(ComparisonFailureFactory.java:46)\nat org.fest.assertions.Fail.comparisonFailed(Fail.java:83)\nat org.fest.assertions.Fail.failIfNotEqual(Fail.java:71)\nat org.fest.assertions.GenericAssert.assertEqualTo(GenericAssert.java:271)\nat org.fest.assertions.ListAssert.isEqualTo(ListAssert.java:360)\nat org.fest.assertions.ListAssert.containsExactly(ListAssert.java:350)\nat org.mockitousage.matchers.CapturingArgumentsTest.should_capture_all_vararg(CapturingArgumentsTest.java:278)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:captureArgumentsFrom(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void captureArgumentsFrom(Invocation invocation) {\nif (invocation.getMethod().isVarArgs()) {\nint indexOfVararg = invocation.getRawArguments().length - 1;\nfor (int position = 0; position < indexOfVararg; position++) {\nMatcher m = matchers.get(position);\nif (m instanceof CapturesArguments) {\n((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\nfor (int position = indexOfVararg; position < matchers.size(); position++) {\nMatcher m = matchers.get(position);\nif (m instanceof CapturesArguments) {\n((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n} else {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/verification/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationModeFactory:times(I)Lorg/mockito/internal/verification/Times;",
            "method_body": "public static Times times(int wantedNumberOfInvocations) {\nreturn new Times(wantedNumberOfInvocations);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\nif (wantedNumberOfInvocations < 0) {\nthis.wantedCount = wantedNumberOfInvocations;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMock(Ljava/lang/Object;)Z",
            "method_body": "public boolean isMock(Object mock) {\nreturn isMockitoMock(mock);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn mockMaker.getHandler(mock) != null;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.Matchers:any()Ljava/lang/Object;",
            "method_body": "public static <T> T any() {\nreturn anyObject();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.Matchers:anyObject()Ljava/lang/Object;",
            "method_body": "public static <T> T anyObject() {\nreturn (T) reportMatcher(Any.ANY).returnNull();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:capture()Ljava/lang/Object;",
            "method_body": "public T capture() {\nMockito.argThat(capturingMatcher);\nreturn handyReturnValues.returnFor(clazz);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:getAllValues()Ljava/util/List;",
            "method_body": "public List<T> getAllValues() {\nreturn this.capturingMatcher.getAllValues();\n}",
            "method_id": 9
        }
    ]
}