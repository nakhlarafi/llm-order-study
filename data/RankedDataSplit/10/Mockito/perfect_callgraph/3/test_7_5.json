{
    "bug_id": 3,
    "test_id": 7,
    "test_name": "org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times",
    "test_body": "public void captures_correctly_when_captor_used_multiple_times() throws Exception {\n// given\nArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n299: // when\nmock.mixedVarargs(42, \"a\", \"b\", \"c\");\n302: // then\n// this is only for backwards compatibility. It does not make sense in real to do so.\nverify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());\nAssertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:130)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:22)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:16)\nat org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:48)\nat org.mockito.internal.verification.Times.verify(Times.java:39)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:76)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.IMethods$MockitoMock$263271281.mixedVarargs(Unknown Source)\nat org.mockitousage.matchers.CapturingArgumentsTest.captures_correctly_when_captor_used_multiple_times(CapturingArgumentsTest.java:304)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn GLOBAL_CONFIGURATION.get().getDefaultAnswer();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:next()Ljava/lang/Object;",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:<init>()V",
            "method_body": "public DefaultAnnotationEngine() {\nregisterAnnotationProcessor(Mock.class, new MockAnnotationProcessor());\nregisterAnnotationProcessor(MockitoAnnotations.Mock.class, new MockitoAnnotationsMockAnnotationProcessor());\nregisterAnnotationProcessor(Captor.class, new CaptorAnnotationProcessor());\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:withMocks(Ljava/util/Set;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection withMocks(Set<Object> mocks) {\nthis.mocks.addAll(checkNotNull(mocks, \"mocks\"));\nreturn this;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkItemsNotNull(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/Iterable;",
            "method_body": "public static <T extends Iterable> T checkItemsNotNull(T iterable, String checkedIterable) {\ncheckNotNull(iterable, checkedIterable);\nfor (Object item : iterable) {\nreturn iterable;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:<init>(Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;)V",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockHandler.getMockSettings();\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getMockHandler(Ljava/lang/Object;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public <T> InternalMockHandler<T> getMockHandler(T mock) {\nif (mock == null) {\nif (isMockitoMock(mock)) {\nMockHandler handler = mockMaker.getHandler(mock);\nreturn (InternalMockHandler) handler;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:confirm(Ljava/lang/Class;)Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings<T> confirm(Class<T> typeToMock) {\nreturn validatedSettings(typeToMock, this);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn delegate.getMockSettings();\n}",
            "method_id": 59
        }
    ]
}