{
    "bug_id": 3,
    "test_id": 6,
    "test_name": "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.shouldMatchAnyVararg",
    "test_body": "public void shouldMatchAnyVararg() {\nmock.run(\"a\", \"b\");\n28: verify(mock).run(anyString(), anyString());\nverify(mock).run((String) anyObject(), (String) anyObject());",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 1\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:130)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:22)\nat org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:16)\nat org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:48)\nat org.mockito.internal.verification.Times.verify(Times.java:39)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:76)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest$VarargMethod$MockitoMock$226143732.run(Unknown Source)\nat org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest.shouldMatchAnyVararg(VarargsNotPlayingWithAnyObjectTest.java:28)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void safelyDisableAccess(AccessibleObject accessibleObject) {\nassert wasAccessible != null : \"accessibility info shall not be null\";\naccessibleObject.setAccessible(wasAccessible);\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveOrWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveOrWrapper(Class<?> type) {\nreturn PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.containsKey(type);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching:<init>(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "private RemoveNotMatching(InvocationMatcher wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\nVerificationMode temp = verificationMode.getObject();\nverificationMode = null;\nreturn temp;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:hasNext()Z",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!mockUtil.isTypeMockable(classToMock)) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockNameImpl(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.defaultName = true;\nthis.mockName = mockName;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:of(Ljava/lang/Iterable;)Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;",
            "method_body": "public static HashCodeAndEqualsSafeSet of(Iterable<Object> objects) {\nHashCodeAndEqualsSafeSet hashCodeAndEqualsSafeSet = new HashCodeAndEqualsSafeSet();\nif (objects != null) {\nfor (Object mock : objects) {\nreturn hashCodeAndEqualsSafeSet;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:thenTry(Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;)Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;",
            "method_body": "public MockInjectionStrategy thenTry(MockInjectionStrategy strategy) {\nif(nextStrategy != null) {\nnextStrategy.thenTry(strategy);\nnextStrategy = strategy;\nreturn strategy;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSerializableMode()Lorg/mockito/mock/SerializableMode;",
            "method_body": "public SerializableMode getSerializableMode() {\nreturn serializableMode;\n}",
            "method_id": 29
        }
    ]
}