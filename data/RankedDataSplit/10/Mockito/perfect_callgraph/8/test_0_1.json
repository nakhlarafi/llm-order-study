{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_of_self_type",
    "test_body": "public void typeVariable_of_self_type() {\nGenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));\n54: assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);\n}\n",
    "stack_trace": "java.lang.StackOverflowError\nat sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode(TypeVariableImpl.java:201)\nat java.util.HashMap.hash(HashMap.java:339)\nat java.util.HashMap.get(HashMap.java:557)\nat org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:182)\nat org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:185)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport:superClassOf(Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class superClassOf(Class currentExploredClass) {\nType genericSuperclass = currentExploredClass.getGenericSuperclass();\nif (genericSuperclass instanceof ParameterizedType) {\nreturn (Class) genericSuperclass;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:<init>(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;[Ljava/lang/reflect/TypeVariable;Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {\nthis.typeParameters = typeParameters;\nthis.typeVariable = typeVariable;\nthis.contextualActualTypeParameters = source.contextualActualTypeParameters;\nreadTypeParameters();\nreadTypeVariables();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport:<init>(Ljava/lang/Class;)V",
            "method_body": "public FromClassGenericMetadataSupport(Class<?> clazz) {\nthis.clazz = clazz;\nfor (Class currentExploredClass = clazz;\ncurrentExploredClass != null && currentExploredClass != Object.class;\ncurrentExploredClass = superClassOf(currentExploredClass)\nreadActualTypeParametersOnDeclaringClass(currentExploredClass);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:inferFrom(Ljava/lang/reflect/Type;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public static GenericMetadataSupport inferFrom(Type type) {\nChecks.checkNotNull(type, \"type\");\nif (type instanceof Class) {\nreturn new FromClassGenericMetadataSupport((Class<?>) type);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:<init>(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVarBoundedType(TypeVariable typeVariable) {\nthis.typeVariable = typeVariable;\n}",
            "method_id": 14
        }
    ]
}