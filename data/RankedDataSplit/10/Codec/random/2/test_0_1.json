{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream",
    "test_body": "public void testBase64EmptyInputStream() throws Exception {\nbyte[] emptyEncoded = new byte[0];\nbyte[] emptyDecoded = new byte[0];\ntestByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);\ntestByChunk(emptyEncoded, emptyDecoded, 76, CRLF);",
    "stack_trace": "junit.framework.AssertionFailedError: EOF expected:<-1> but was:<13>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.TestCase.assertEquals(TestCase.java:401)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte(Base64InputStreamTest.java:142)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream(Base64InputStreamTest.java:53)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;ZI[B)V",
            "method_body": "public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\nsuper(in);\nthis.doEncode = doEncode;\nthis.base64 = new Base64(lineLength, lineSeparator);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:readResults([BII)I",
            "method_body": "int readResults(byte[] b, int bPos, int bAvail) {\nif (buf != null) {\nint len = Math.min(avail(), bAvail);\nif (buf != b) {\nSystem.arraycopy(buf, readPos, b, bPos, len);\nreadPos += len;\nif (readPos >= pos) {\nbuf = null;\nreturn len;\n}",
            "method_id": 12
        }
    ]
}