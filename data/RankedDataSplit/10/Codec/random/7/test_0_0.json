{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations",
    "test_body": "public void testByteToStringVariations() throws DecoderException {\nBase64 base64 = new Base64(0);\nbyte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\nbyte[] b2 = new byte[0];\nbyte[] b3 = null;\nbyte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n1128: assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\nassertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\nassertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));",
    "stack_trace": "junit.framework.ComparisonFailure: byteToString static Hello World expected:<SGVsbG8gV29ybGQ=[]> but was:<SGVsbG8gV29ybGQ=[\n]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(Base64Test.java:1129)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Hex:decodeHex([C)[B",
            "method_body": "public static byte[] decodeHex(char[] data) throws DecoderException {\nint len = data.length;\nif ((len & 0x01) != 0) {\nbyte[] out = new byte[len >> 1];\nfor (int i = 0, j = 0; j < len; i++) {\nint f = toDigit(data[j], j) << 4;\nj++;\nf = f | toDigit(data[j], j);\nj++;\nout[i] = (byte) (f & 0xFF);\nreturn out;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(Z)V",
            "method_body": "public Base64(boolean urlSafe) {\nthis(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\nif (binaryData == null || binaryData.length == 0) {\nreturn binaryData;\nlong len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\nif (len > maxResultSize) {\nBase64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\nreturn b64.encode(binaryData);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:getEncodeLength([BI[B)J",
            "method_body": "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\nchunkSize = (chunkSize / 4) * 4;\nlong len = (pArray.length * 4) / 3;\nlong mod = len % 4;\nif (mod != 0) {\nlen += 4 - mod;\nif (chunkSize > 0) {\nboolean lenChunksPerfectly = len % chunkSize == 0;\nlen += (len / chunkSize) * chunkSeparator.length;\nif (!lenChunksPerfectly) {\nlen += chunkSeparator.length;\nreturn len;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUnchecked(Ljava/lang/String;Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUnchecked(String string, String charsetName) {\nif (string == null) {\nreturn string.getBytes(charsetName);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isUrlSafe()Z",
            "method_body": "public boolean isUrlSafe() {\nreturn this.encodeTable == URL_SAFE_ENCODE_TABLE;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:newString([BLjava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String newString(byte[] bytes, String charsetName) {\nif (bytes == null) {\nreturn new String(bytes, charsetName);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([B)[B",
            "method_body": "public byte[] encode(byte[] pArray) {\nreset();\nif (pArray == null || pArray.length == 0) {\nlong len = getEncodeLength(pArray, lineLength, lineSeparator);\nbyte[] buf = new byte[(int) len];\nsetInitialBuffer(buf, 0, buf.length);\nencode(pArray, 0, pArray.length);\nencode(pArray, 0, -1); // Notify encoder of EOF.\nif (buffer != buf) {\nif (isUrlSafe() && pos < buf.length) {\nreturn buf;\n}",
            "method_id": 9
        }
    ]
}