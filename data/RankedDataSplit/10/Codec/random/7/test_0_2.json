{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations",
    "test_body": "public void testByteToStringVariations() throws DecoderException {\nBase64 base64 = new Base64(0);\nbyte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\nbyte[] b2 = new byte[0];\nbyte[] b3 = null;\nbyte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n1128: assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\nassertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\nassertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));",
    "stack_trace": "junit.framework.ComparisonFailure: byteToString static Hello World expected:<SGVsbG8gV29ybGQ=[]> but was:<SGVsbG8gV29ybGQ=[\n]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(Base64Test.java:1129)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Hex:<clinit>()V",
            "method_body": "public static final String DEFAULT_CHARSET_NAME = CharEncoding.UTF_8;\nprivate static final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeToString([B)Ljava/lang/String;",
            "method_body": "public String encodeToString(byte[] pArray) {\nreturn StringUtils.newStringUtf8(encode(pArray));\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<clinit>()V",
            "method_body": "public static final int PEM_CHUNK_SIZE = 64;\nstatic final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
            "method_id": 23
        }
    ]
}