{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE",
    "test_body": "public void testCodec98NPE() throws Exception {\nbyte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\nByteArrayInputStream data = new ByteArrayInputStream(codec98);\nBase64InputStream stream = new Base64InputStream(data);\n60: // This line causes an NPE in commons-codec-1.4.jar:\nbyte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n63: String decoded = StringUtils.newStringUtf8(decodedBytes);\nassertEquals(\n\"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n);\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.codec.binary.Base64.decode(Base64.java:594)\nat org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:159)\nat org.apache.commons.codec.binary.Base64TestData.fill(Base64TestData.java:177)\nat org.apache.commons.codec.binary.Base64TestData.streamToBytes(Base64TestData.java:148)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(Base64InputStreamTest.java:61)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;)V",
            "method_body": "public Base64InputStream(InputStream in) {\nthis(in, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:hasData()Z",
            "method_body": "boolean hasData() {\nreturn this.buffer != null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:decode([BII)V",
            "method_body": "void decode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\neof = true;\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < decodeSize) {\nresizeBuffer();\nbyte b = in[inPos++];\nif (b == PAD) {\nif (b >= 0 && b < DECODE_TABLE.length) {\nint result = DECODE_TABLE[b];\nif (result >= 0) {\nmodulus = (++modulus) % 4;\nx = (x << 6) + result;\nif (modulus == 0) {\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\nbuffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\nbuffer[pos++] = (byte) (x & MASK_8BITS);\nif (eof && modulus != 0) {\nx = x << 6;\nswitch (modulus) {\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n}",
            "method_id": 15
        }
    ]
}