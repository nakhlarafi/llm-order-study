{
    "bug_id": 5,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE",
    "test_body": "public void testCodec98NPE() throws Exception {\nbyte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\nbyte[] codec98_1024 = new byte[1024];\nSystem.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\nByteArrayOutputStream data = new ByteArrayOutputStream(1024);\nBase64OutputStream stream = new Base64OutputStream(data, false);\nstream.write(codec98_1024, 0, 1024);\nstream.close();\n64: byte[] decodedBytes = data.toByteArray();\nString decoded = StringUtils.newStringUtf8(decodedBytes);\nassertEquals(\n\"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n);\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.codec.binary.Base64.decode(Base64.java:594)\nat org.apache.commons.codec.binary.Base64OutputStream.close(Base64OutputStream.java:192)\nat org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE(Base64OutputStreamTest.java:62)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:resizeBuffer()V",
            "method_body": "private void resizeBuffer() {\nif (buffer == null) {\nbuffer = new byte[DEFAULT_BUFFER_SIZE];\npos = 0;\nreadPos = 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUnchecked(Ljava/lang/String;Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUnchecked(String string, String charsetName) {\nif (string == null) {\nreturn string.getBytes(charsetName);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64OutputStream:flush(Z)V",
            "method_body": "private void flush(boolean propogate) throws IOException {\nint avail = base64.avail();\nif (avail > 0) {\nbyte[] buf = new byte[avail];\nint c = base64.readResults(buf, 0, avail);\nif (c > 0) {\nout.write(buf, 0, c);\nif (propogate) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:decode([BII)V",
            "method_body": "void decode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\neof = true;\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < decodeSize) {\nresizeBuffer();\nbyte b = in[inPos++];\nif (b == PAD) {\nif (b >= 0 && b < DECODE_TABLE.length) {\nint result = DECODE_TABLE[b];\nif (result >= 0) {\nmodulus = (++modulus) % 4;\nx = (x << 6) + result;\nif (modulus == 0) {\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\nbuffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\nbuffer[pos++] = (byte) (x & MASK_8BITS);\nif (eof && modulus != 0) {\nx = x << 6;\nswitch (modulus) {\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 14
        }
    ]
}