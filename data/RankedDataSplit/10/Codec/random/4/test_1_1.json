{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder",
    "test_body": "public void testBinaryEncoder() throws EncoderException {\nBinaryEncoder enc = new Base64();\nfor (int i = 0; i < STRINGS.length; i++) {\nif (STRINGS[i] != null) {\nbyte[] base64 = utf8(STRINGS[i]);\nbyte[] binary = BYTES[i];\nboolean b = Arrays.equals(base64, enc.encode(binary));\nassertTrue(\"BinaryEncoder test-\" + i, b);\n}",
    "stack_trace": "junit.framework.AssertionFailedError: BinaryEncoder test-1\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(Base64Codec13Test.java:414)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([BII)V",
            "method_body": "void encode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\neof = true;\nif (buffer == null || buffer.length - pos < encodeSize) {\nswitch (modulus) {\nbuffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\nbuffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\nif (encodeTable == STANDARD_ENCODE_TABLE) {\nbuffer[pos++] = PAD;\nbuffer[pos++] = PAD;\nif (lineLength > 0 && pos > 0) {\nSystem.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\npos += lineSeparator.length;\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < encodeSize) {\nmodulus = (++modulus) % 3;\nint b = in[inPos++];\nif (b < 0) {\nb += 256;\nx = (x << 8) + b;\nif (0 == modulus) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(Z)V",
            "method_body": "public Base64(boolean urlSafe) {\nthis(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n}",
            "method_id": 11
        }
    ]
}