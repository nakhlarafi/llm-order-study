{
    "bug_id": 4,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder",
    "test_body": "public void testBinaryEncoder() throws EncoderException {\nBinaryEncoder enc = new Base64();\nfor (int i = 0; i < STRINGS.length; i++) {\nif (STRINGS[i] != null) {\nbyte[] base64 = utf8(STRINGS[i]);\nbyte[] binary = BYTES[i];\nboolean b = Arrays.equals(base64, enc.encode(binary));\nassertTrue(\"BinaryEncoder test-\" + i, b);\n}",
    "stack_trace": "junit.framework.AssertionFailedError: BinaryEncoder test-1\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder(Base64Codec13Test.java:414)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:getEncodeLength([BI[B)J",
            "method_body": "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\nchunkSize = (chunkSize / 4) * 4;\nlong len = (pArray.length * 4) / 3;\nlong mod = len % 4;\nif (mod != 0) {\nlen += 4 - mod;\nif (chunkSize > 0) {\nboolean lenChunksPerfectly = len % chunkSize == 0;\nlen += (len / chunkSize) * chunkSeparator.length;\nif (!lenChunksPerfectly) {\nlen += chunkSeparator.length;\nreturn len;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:reset()V",
            "method_body": "private void reset() {\nbuffer = null;\npos = 0;\nreadPos = 0;\ncurrentLinePos = 0;\nmodulus = 0;\neof = false;\n}",
            "method_id": 11
        }
    ]
}