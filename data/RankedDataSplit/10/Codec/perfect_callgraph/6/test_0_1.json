{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101",
    "test_body": "public void testCodec101() throws Exception {\nbyte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\nByteArrayInputStream bais = new ByteArrayInputStream(codec101);\nBase64InputStream in = new Base64InputStream(bais);\nbyte[] result = new byte[8192];\nint c = in.read(result);\nassertTrue(\"Codec101: First read successful [c=\" + c + \"]\", c > 0);\n63: c = in.read(result);\nassertTrue(\"Codec101: Second read should report end-of-stream [c=\" + c + \"]\", c < 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Codec101: First read successful [c=0]\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101(Base64InputStreamTest.java:61)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:hasData()Z",
            "method_body": "boolean hasData() {\nreturn this.buffer != null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:avail()I",
            "method_body": "int avail() {\nreturn buffer != null ? pos - readPos : 0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:readResults([BII)I",
            "method_body": "int readResults(byte[] b, int bPos, int bAvail) {\nif (buffer != null) {\nint len = Math.min(avail(), bAvail);\nif (buffer != b) {\nbuffer = null;\nreturn len;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:decode([BII)V",
            "method_body": "void decode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < decodeSize) {\nbyte b = in[inPos++];\nif (b == PAD) {\nif (b >= 0 && b < DECODE_TABLE.length) {\nint result = DECODE_TABLE[b];\nif (result >= 0) {\nmodulus = (++modulus) % 4;\nx = (x << 6) + result;\nif (modulus == 0) {\nif (eof && modulus != 0) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isBase64(B)Z",
            "method_body": "public static boolean isBase64(byte octet) {\nreturn octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n}",
            "method_id": 15
        }
    ]
}