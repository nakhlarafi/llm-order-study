{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testCodec112",
    "test_body": "public void testCodec112() { // size calculation assumes always chunked\nbyte[] in = new byte[] {0};\nbyte[] out=Base64.encodeBase64(in);\nBase64.encodeBase64(in, false, false, out.length);\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Input array too big, the output array would be bigger (6) than the specified maxium size of 4\nat org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:829)\nat org.apache.commons.codec.binary.Base64Test.testCodec112(Base64Test.java:343)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isBase64(B)Z",
            "method_body": "public static boolean isBase64(byte octet) {\nreturn octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([B)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData) {\nreturn encodeBase64(binaryData, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\nreturn encodeBase64(binaryData, isChunked, false);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:getEncodeLength([BI[B)J",
            "method_body": "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\nchunkSize = (chunkSize / 4) * 4;\nlong len = (pArray.length * 4) / 3;\nlong mod = len % 4;\nif (mod != 0) {\nlen += 4 - mod;\nif (chunkSize > 0) {\nboolean lenChunksPerfectly = len % chunkSize == 0;\nlen += (len / chunkSize) * chunkSeparator.length;\nif (!lenChunksPerfectly) {\nlen += chunkSeparator.length;\nreturn len;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:reset()V",
            "method_body": "private void reset() {\nbuffer = null;\npos = 0;\nreadPos = 0;\ncurrentLinePos = 0;\nmodulus = 0;\neof = false;\n}",
            "method_id": 14
        }
    ]
}