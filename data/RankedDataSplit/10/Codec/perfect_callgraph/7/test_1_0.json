{
    "bug_id": 7,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode",
    "test_body": "public void testRfc4648Section10Encode() {\nassertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\nassertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\nassertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<Zg==[]> but was:<Zg==[\n]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode(Base64Test.java:586)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64String([B)Ljava/lang/String;",
            "method_body": "public static String encodeBase64String(byte[] binaryData) {\nreturn StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUnchecked(Ljava/lang/String;Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUnchecked(String string, String charsetName) {\nif (string == null) {\nreturn string.getBytes(charsetName);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([B)[B",
            "method_body": "public byte[] encode(byte[] pArray) {\nreset();\nif (pArray == null || pArray.length == 0) {\nlong len = getEncodeLength(pArray, lineLength, lineSeparator);\nbyte[] buf = new byte[(int) len];\nsetInitialBuffer(buf, 0, buf.length);\nencode(pArray, 0, pArray.length);\nencode(pArray, 0, -1); // Notify encoder of EOF.\nif (buffer != buf) {\nif (isUrlSafe() && pos < buf.length) {\nreturn buf;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:newStringUtf8([B)Ljava/lang/String;",
            "method_body": "public static String newStringUtf8(byte[] bytes) {\nreturn StringUtils.newString(bytes, CharEncoding.UTF_8);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:newString([BLjava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String newString(byte[] bytes, String charsetName) {\nif (bytes == null) {\nreturn new String(bytes, charsetName);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(Z)V",
            "method_body": "public Base64(boolean urlSafe) {\nthis(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<clinit>()V",
            "method_body": "public static final int PEM_CHUNK_SIZE = 64;\nstatic final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isUrlSafe()Z",
            "method_body": "public boolean isUrlSafe() {\nreturn this.encodeTable == URL_SAFE_ENCODE_TABLE;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}",
            "method_id": 9
        }
    ]
}