{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testByteToStringVariations",
    "test_body": "public void testByteToStringVariations() throws DecoderException {\nBase64 base64 = new Base64(0);\nbyte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\nbyte[] b2 = new byte[0];\nbyte[] b3 = null;\nbyte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());  // for url-safe tests\n1128: assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\nassertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\nassertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));",
    "stack_trace": "junit.framework.ComparisonFailure: byteToString static Hello World expected:<SGVsbG8gV29ybGQ=[]> but was:<SGVsbG8gV29ybGQ=[\n]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.binary.Base64Test.testByteToStringVariations(Base64Test.java:1129)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64String([B)Ljava/lang/String;",
            "method_body": "public static String encodeBase64String(byte[] binaryData) {\nreturn StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I)V",
            "method_body": "public Base64(int lineLength) {\nthis(lineLength, CHUNK_SEPARATOR);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I[BZ)V",
            "method_body": "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\nif (lineSeparator == null) {\nthis.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\nthis.lineSeparator = new byte[lineSeparator.length];\nSystem.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\nif (lineLength > 0) {\nthis.encodeSize = 4 + lineSeparator.length;\nthis.encodeSize = 4;\nthis.decodeSize = this.encodeSize - 1;\nif (containsBase64Byte(lineSeparator)) {\nthis.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:newStringUtf8([B)Ljava/lang/String;",
            "method_body": "public static String newStringUtf8(byte[] bytes) {\nreturn StringUtils.newString(bytes, CharEncoding.UTF_8);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUnchecked(Ljava/lang/String;Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUnchecked(String string, String charsetName) {\nif (string == null) {\nreturn string.getBytes(charsetName);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Hex:decodeHex([C)[B",
            "method_body": "public static byte[] decodeHex(char[] data) throws DecoderException {\nint len = data.length;\nif ((len & 0x01) != 0) {\nbyte[] out = new byte[len >> 1];\nfor (int i = 0, j = 0; j < len; i++) {\nint f = toDigit(data[j], j) << 4;\nj++;\nf = f | toDigit(data[j], j);\nj++;\nout[i] = (byte) (f & 0xFF);\nreturn out;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Hex:toDigit(CI)I",
            "method_body": "protected static int toDigit(char ch, int index) throws DecoderException {\nint digit = Character.digit(ch, 16);\nif (digit == -1) {\nreturn digit;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeToString([B)Ljava/lang/String;",
            "method_body": "public String encodeToString(byte[] pArray) {\nreturn StringUtils.newStringUtf8(encode(pArray));\n}",
            "method_id": 9
        }
    ]
}