{
    "bug_id": 2,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream",
    "test_body": "public void testBase64EmptyOutputStream() throws Exception {\nbyte[] emptyEncoded = new byte[0];\nbyte[] emptyDecoded = new byte[0];\ntestByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);\ntestByChunk(emptyEncoded, emptyDecoded, 76, CRLF);",
    "stack_trace": "junit.framework.AssertionFailedError: Streaming base64 encode\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte(Base64OutputStreamTest.java:142)\nat org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream(Base64OutputStreamTest.java:53)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64OutputStream:flush(Z)V",
            "method_body": "private void flush(boolean propogate) throws IOException {\nint avail = base64.avail();\nif (avail > 0) {\nbyte[] buf = new byte[avail];\nint c = base64.readResults(buf, 0, avail);\nif (c > 0) {\nout.write(buf, 0, c);\nif (propogate) {\nout.flush();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64OutputStream:flush()V",
            "method_body": "public void flush() throws IOException {\nflush(true);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64OutputStream:close()V",
            "method_body": "public void close() throws IOException {\nif (doEncode) {\nbase64.encode(singleByte, 0, -1);\nflush();\nout.close();\n}",
            "method_id": 12
        }
    ]
}