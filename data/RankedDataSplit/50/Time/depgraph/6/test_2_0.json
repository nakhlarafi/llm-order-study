{
    "bug_id": 6,
    "test_id": 2,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover",
    "test_body": "115: public void test_plusWeekyears_positiveToZero_crossCutover() {\n116: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n117: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n118: assertEquals(expected, date.weekyear().addToCopy(-2003));\n119: }\n",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.field.SkipDateTimeField.set(SkipDateTimeField.java:92)\nat org.joda.time.chrono.GJChronology.convertByWeekyear(GJChronology.java:96)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(GJChronology.java:596)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:922)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.LocalDate$Property.addToCopy(LocalDate.java:1965)\nat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover(TestGJDate.java:118)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.GJChronology:convertByWeekyear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
            "method_body": "private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\nnewInstant = to.weekyear().set(0, from.weekyear().get(instant));\nnewInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\nnewInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\nnewInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\nreturn newInstant;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByWeekyear(J)J",
            "method_body": "long gregorianToJulianByWeekyear(long instant) {\nreturn convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate addToCopy(int value) {\nreturn iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.LocalDate$Property:<init>(Lorg/joda/time/LocalDate;Lorg/joda/time/DateTimeField;)V",
            "method_body": "Property(LocalDate instant, DateTimeField field) {\nsuper();\niInstant = instant;\niField = field;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.LocalDate:getWeekOfWeekyear()I",
            "method_body": "public int getWeekOfWeekyear() {\nreturn getChronology().weekOfWeekyear().get(getLocalMillis());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.LocalDate:getDayOfWeek()I",
            "method_body": "public int getDayOfWeek() {\nreturn getChronology().dayOfWeek().get(getLocalMillis());\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.LocalDate:weekyear()Lorg/joda/time/LocalDate$Property;",
            "method_body": "public Property weekyear() {\nreturn new Property(this, getChronology().weekyear());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.LocalDate:withWeekOfWeekyear(I)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {\nreturn withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.LocalDate:withDayOfWeek(I)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate withDayOfWeek(int dayOfWeek) {\nreturn withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
            "method_body": "LocalDate withLocalMillis(long newMillis) {\nnewMillis = iChronology.dayOfMonth().roundFloor(newMillis);\nreturn (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iJulianField.roundFloor(instant);\nreturn instant;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.field.SkipDateTimeField:set(JI)J",
            "method_body": "public long set(long millis, int value) {\nFieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\nif (value <= iSkip) {\nif (value == iSkip) {\nthrow new IllegalFieldValueException\nvalue++;\nreturn super.set(millis, value);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\nif (upperBound == null) {\nbuf.append(\"is not supported\");\nif (explain != null) {\nreturn buf.toString();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
            "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
            "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
            "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
            "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
            "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn 1;\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
            "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
            "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\ninstant += 1;\nreturn instant - instant % iUnitMillis - iUnitMillis;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
            "method_body": "protected long gregorianToJulian(long instant) {\nif (iConvertByWeekyear) {\nreturn gregorianToJulianByWeekyear(instant);\nreturn gregorianToJulianByYear(instant);\n}",
            "method_id": 49
        }
    ]
}