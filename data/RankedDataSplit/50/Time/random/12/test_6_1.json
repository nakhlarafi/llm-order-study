{
    "bug_id": 12,
    "test_id": 6,
    "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3",
    "test_body": "public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\nGregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\ncal.set(Calendar.ERA, GregorianCalendar.BC);\ncal.set(Calendar.MILLISECOND, 7);\nLocalDate expected = new LocalDate(-2, 2, 3);\nassertEquals(expected, LocalDate.fromCalendarFields(cal));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDate_Constructors.java:117)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
            "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.LocalDate:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDate;",
            "method_body": "public static LocalDate fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDate(\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(III)V",
            "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
            "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
            "method_id": 65
        }
    ]
}