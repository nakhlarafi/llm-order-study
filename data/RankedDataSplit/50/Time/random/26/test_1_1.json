{
    "bug_id": 26,
    "test_id": 1,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW",
    "test_body": "public void testBug2182444_ausNSW() {\nChronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\nChronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\nDateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\nDateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\nassertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));\nassertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));\n1180: DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\nDateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\nassertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\nassertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());\nassertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());\nassertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));\nassertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());\nassertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));\nassertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW(TestDateTimeZoneCutover.java:1187)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
            "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
            "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getStandardOffset(J)I",
            "method_body": "public int getStandardOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iStandardOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iStandardOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getStandardOffset(instant);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
            "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
            "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
            "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
            "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn false;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
            "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
            "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
            "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
            "method_body": "public DateTime toDateTime(Chronology chronology) {\nreturn new DateTime(getMillis(), chronology);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
            "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
            "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
            "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nGregorianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchronos = new GregorianChronology[7];\ncCache.put(zone, chronos);\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\nif (zone == DateTimeZone.UTC) {\nchrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\nchrono = new GregorianChronology\nchronos[minDaysInFirstWeek - 1] = chrono;\n}\nreturn chrono;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
            "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
            "method_id": 99
        }
    ]
}