{
    "bug_id": 6,
    "test_id": 4,
    "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
    "test_body": "public void test_cutoverPreZero() {\nDateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\ntry {\nGJChronology.getInstance(DateTimeZone.UTC, cutover);\nfail();\n} catch (IllegalArgumentException ex) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
            "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\nthis(julianField, gregorianField, cutoverMillis, false);\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;)V",
            "method_body": "LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\nsuper(durationField, durationField.getType());\niField = dateTimeField;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
            "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundCeiling(J)J",
            "method_body": "public long roundCeiling(long instant) {\nint year = get(instant);\nlong yearStartMillis = iChronology.getYearMillis(year);\nif (instant != yearStartMillis) {\ninstant = iChronology.getYearMillis(year + 1);\nreturn instant;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
            "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
            "method_body": "protected AbstractDateTime() {\nsuper();\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V",
            "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField,\nlong cutoverMillis, boolean convertByWeekyear) {\nsuper(gregorianField.getType());\niJulianField = julianField;\niGregorianField = gregorianField;\niCutover = cutoverMillis;\niConvertByWeekyear = convertByWeekyear;\niDurationField = gregorianField.getDurationField();\nDurationField rangeField = gregorianField.getRangeDurationField();\nif (rangeField == null) {\nrangeField = julianField.getRangeDurationField();\niRangeDurationField = rangeField;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.joda.time.Instant:<init>(J)V",
            "method_body": "public Instant(long instant) {\nsuper();\niMillis = instant;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn true;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V",
            "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n{\nsuper(julianField, gregorianField, cutoverMillis, convertByWeekyear);\nif (durationField == null) {\ndurationField = new LinkedDurationField(iDurationField, this);\niDurationField = durationField;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
            "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.joda.time.field.DelegatedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:roundCeiling(J)J",
            "method_body": "public abstract long roundFloor(long instant);\nlong newInstant = roundFloor(instant);\nif (newInstant != instant) {\ninstant = add(newInstant, 1);\nreturn instant;\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
            "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nsynchronized (cCache) {\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i = chronos.size(); --i >= 0;) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nif (zone == DateTimeZone.UTC) {\nchrono = new GJChronology\nchronos.add(chrono);\n}\nreturn chrono;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
            "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 149
        }
    ]
}