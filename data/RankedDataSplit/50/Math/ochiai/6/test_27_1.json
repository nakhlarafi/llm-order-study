{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DD)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, null);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:newPointAndDirection([D[DD)[[D",
            "method_body": "private double[][] newPointAndDirection(double[] p,\nfinal int n = p.length;\nfinal double[] nP = new double[n];\nfinal double[] nD = new double[n];\nfor (int i = 0; i < n; i++) {\nnD[i] = d[i] * optimum;\nnP[i] = p[i] + nD[i];\nfinal double[][] result = new double[2][];\nresult[0] = nP;\nresult[1] = nD;\nreturn result;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:value(D)D",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDDDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nsuper(checker);\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\nline = new LineSearch(lineRel,\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal GoalType goal = getGoalType();\nfinal double[] guess = getStartPoint();\nfinal int n = guess.length;\nfinal double[][] direc = new double[n][n];\nfor (int i = 0; i < n; i++) {\ndirec[i][i] = 1;\nfinal ConvergenceChecker<PointValuePair> checker\ndouble[] x = guess;\ndouble fVal = computeObjectiveValue(x);\ndouble[] x1 = x.clone();\nint iter = 0;\n++iter;\ndouble fX = fVal;\ndouble fX2 = 0;\ndouble delta = 0;\nint bigInd = 0;\ndouble alphaMin = 0;\nfor (int i = 0; i < n; i++) {\nfinal double[] d = MathArrays.copyOf(direc[i]);\nfX2 = fVal;\nfinal UnivariatePointValuePair optimum = line.search(x, d);\nfVal = optimum.getValue();\nalphaMin = optimum.getPoint();\nfinal double[][] result = newPointAndDirection(x, d, alphaMin);\nx = result[0];\nif ((fX2 - fVal) > delta) {\ndelta = fX2 - fVal;\nbigInd = i;\nboolean stop = 2 * (fX - fVal) <=\nfinal PointValuePair previous = new PointValuePair(x1, fX);\nfinal PointValuePair current = new PointValuePair(x, fVal);\nif (!stop) { // User-defined stopping criteria.\nif (checker != null) {\nif (stop) {\nif (goal == GoalType.MINIMIZE) {\nreturn (fVal < fX) ? current : previous;\nfinal double[] d = new double[n];\nfinal double[] x2 = new double[n];\nfor (int i = 0; i < n; i++) {\nd[i] = x[i] - x1[i];\nx2[i] = 2 * x[i] - x1[i];\nx1 = x.clone();\nfX2 = computeObjectiveValue(x2);\nif (fX > fX2) {\ndouble t = 2 * (fX + fX2 - 2 * fVal);\ndouble temp = fX - fVal - delta;\nt *= temp * temp;\ntemp = fX - fX2;\nt -= delta * temp * temp;\nif (t < 0.0) {\n}\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer;DD)V",
            "method_body": "LineSearch(double rel,\ndouble abs) {\nsuper(REL_TOL_UNUSED,\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getMid()D",
            "method_body": "public double getMid() {\nreturn mid;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:<init>(DD)V",
            "method_body": "public SimpleUnivariateValueChecker(final double relativeThreshold,\nsuper(relativeThreshold, absoluteThreshold);\nmaxIterationCount = ITERATION_CHECK_DISABLED;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:converged(ILorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:search(Lorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;DD)V",
            "method_body": "public void search(UnivariateFunction func, GoalType goal, double xA, double xB) {\nevaluations.resetCount();\nfinal boolean isMinim = goal == GoalType.MINIMIZE;\ndouble fA = eval(func, xA);\ndouble fB = eval(func, xB);\nif (isMinim ?\ndouble tmp = xA;\nxA = xB;\nxB = tmp;\ntmp = fA;\nfA = fB;\nfB = tmp;\ndouble xC = xB + GOLD * (xB - xA);\ndouble fC = eval(func, xC);\nwhile (isMinim ? fC < fB : fC > fB) {\ndouble tmp1 = (xB - xA) * (fB - fC);\ndouble tmp2 = (xB - xC) * (fB - fA);\ndouble val = tmp2 - tmp1;\ndouble denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;\ndouble w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;\ndouble wLim = xB + growLimit * (xC - xB);\nif ((w - xC) * (xB - w) > 0) {\nfW = eval(func, w);\nif (isMinim ?\nxA = xB;\nxB = w;\nfA = fB;\nfB = fW;\nbreak;\n} else if ((w - wLim) * (wLim - xC) >= 0) {\n} else if ((w - wLim) * (xC - w) > 0) {\nw = xC + GOLD * (xC - xB);\nfW = eval(func, w);\nxA = xB;\nfA = fB;\nxB = xC;\nfB = fC;\nxC = w;\nfC = fW;\n}\nlo = xA;\nfLo = fA;\nmid = xB;\nfMid = fB;\nhi = xC;\nfHi = fC;\nif (lo > hi) {\ndouble tmp = lo;\nlo = hi;\nhi = tmp;\ntmp = fLo;\nfLo = fHi;\nfHi = tmp;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getLo()D",
            "method_body": "public double getLo() {\nreturn lo;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getHi()D",
            "method_body": "public double getHi() {\nreturn hi;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:eval(Lorg/apache/commons/math3/analysis/UnivariateFunction;D)D",
            "method_body": "private double eval(UnivariateFunction f, double x) {\nevaluations.incrementCount();\n}\nreturn f.value(x);\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>()V",
            "method_body": "public BracketFinder() {\nthis(100, 50);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>(DI)V",
            "method_body": "public BracketFinder(double growLimit,\nint maxEvaluations) {\nif (growLimit <= 0) {\nif (maxEvaluations <= 0) {\nthis.growLimit = growLimit;\nevaluations.setMaximalCount(maxEvaluations);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.function.Sinc:value(D)D",
            "method_body": "public double value(final double x) {\nfinal double scaledX = normalized ? FastMath.PI * x : x;\nif (FastMath.abs(scaledX) <= SHORTCUT) {\nfinal double scaledX2 = scaledX * scaledX;\nreturn ((scaledX2 - 20) * scaledX2 + 120) / 120;\nreturn FastMath.sin(scaledX) / scaledX;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:best(Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Z)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "private UnivariatePointValuePair best(UnivariatePointValuePair a,\nif (a == null) {\nif (b == null) {\nif (isMinim) {\nreturn a.getValue() <= b.getValue() ? a : b;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:getPoint()D",
            "method_body": "public double getPoint() {\nreturn point;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn start;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getMin()D",
            "method_body": "public double getMin() {\nreturn min;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getMax()D",
            "method_body": "public double getMax() {\nreturn max;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double x) {\nsuper.incrementEvaluationCount();\nreturn function.value(x);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "protected UnivariatePointValuePair doOptimize() {\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariatePointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariatePointValuePair previous = null;\nUnivariatePointValuePair current\nUnivariatePointValuePair best = current;\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = b - x;\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nprevious = current;\ncurrent = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\nbest = best(best,\nif (checker != null) {\nif (checker.converged(iter, previous, current)) {\nreturn best;\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else { // Default termination (Brent's criterion).\n++iter;\n}\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:<init>(DD)V",
            "method_body": "public UnivariatePointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:<init>(DDD)V",
            "method_body": "public SearchInterval(double lo,\ndouble init) {\nif (lo >= hi) {\nif (init < lo ||\nlower = lo;\nupper = hi;\nstart = init;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:getMin()D",
            "method_body": "public double getMin() {\nreturn lower;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:getMax()D",
            "method_body": "public double getMax() {\nreturn upper;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn start;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof SearchInterval) {\nfinal SearchInterval interval = (SearchInterval) data;\nmin = interval.getMin();\nmax = interval.getMax();\nstart = interval.getStartValue();\ncontinue;\nif (data instanceof UnivariateObjectiveFunction) {\nfunction = ((UnivariateObjectiveFunction) data).getObjectiveFunction();\ncontinue;\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction:<init>(Lorg/apache/commons/math3/analysis/UnivariateFunction;)V",
            "method_body": "public UnivariateObjectiveFunction(UnivariateFunction f) {\nfunction = f;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction:getObjectiveFunction()Lorg/apache/commons/math3/analysis/UnivariateFunction;",
            "method_body": "public UnivariateFunction getObjectiveFunction() {\nreturn function;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected UnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BrentOptimizer:<init>(DDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public BrentOptimizer(double rel,\nsuper(checker);\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([D)[D",
            "method_body": "public static double[] copyOf(double[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([DI)[D",
            "method_body": "public static double[] copyOf(double[] source, int len) {\nfinal double[] output = new double[len];\nSystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\nreturn output;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\nnew MaxCountExceededCallback() {\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer$LineSearch;I[D[D)V",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 97
        }
    ]
}