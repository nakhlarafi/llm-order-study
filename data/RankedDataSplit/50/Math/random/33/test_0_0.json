{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",
    "test_body": "public void testMath781() {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n36: ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\nconstraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\nconstraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n41: double epsilon = 1e-6;\nSimplexSolver solver = new SimplexSolver();\nPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n45: Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\nAssert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781(SimplexSolverTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>(Lorg/apache/commons/math3/linear/RealVector;Lorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final RealVector coefficients, final Relationship relationship,\nfinal double value) {\nthis.coefficients = coefficients;\nthis.relationship = relationship;\nthis.value        = value;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
            "method_body": "boolean isOptimal() {\nfor (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {\nfinal double entry = tableau.getEntry(0, i);\nif (Precision.compareTo(entry, 0d, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.dropPhase1Objective();\nwhile (!tableau.isOptimal()) {\nreturn tableau.getSolution();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column) {\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getArtificialVariableOffset()I",
            "method_body": "protected final int getArtificialVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y, 1) || FastMath.abs(y - x) <= eps;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\nreturn data[index];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getSlackVariableOffset()I",
            "method_body": "protected final int getSlackVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getRow(I)[D",
            "method_body": "public double[] getRow(final int row) {\nMatrixUtils.checkRowIndex(this, row);\nfinal int nCols = getColumnDimension();\nfinal double[] out = new double[nCols];\nfor (int i = 0; i < nCols; ++i) {\nout[i] = getEntry(row, i);\nreturn out;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getConstraintTypeCounts(Lorg/apache/commons/math3/optimization/linear/Relationship;)I",
            "method_body": "private int getConstraintTypeCounts(final Relationship relationship) {\nint count = 0;\nfor (final LinearConstraint constraint : constraints) {\nif (constraint.getRelationship() == relationship) {\n++count;\nreturn count;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
            "method_body": "protected Integer getBasicRow(final int col) {\nInteger row = null;\nfor (int i = 0; i < getHeight(); i++) {\nfinal double entry = getEntry(i, col);\nif (Precision.equals(entry, 1d, maxUlps) && (row == null)) {\nrow = i;\n} else if (!Precision.equals(entry, 0d, maxUlps)) {\nreturn null;\nreturn row;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "protected PointValuePair getSolution() {\nint negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\nInteger negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\ndouble mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\nSet<Integer> basicRows = new HashSet<Integer>();\ndouble[] coefficients = new double[getOriginalNumDecisionVariables()];\nfor (int i = 0; i < coefficients.length; i++) {\nint colIndex = columnLabels.indexOf(\"x\" + i);\nif (colIndex < 0) {\ncoefficients[i] = 0;\ncontinue;\nInteger basicRow = getBasicRow(colIndex);\nif (basicRow != null && basicRow == 0) {\n} else if (basicRows.contains(basicRow)) {\nbasicRows.add(basicRow);\ncoefficients[i] =\nreturn new PointValuePair(coefficients, f.getValue(coefficients));\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:subtractRow(IID)V",
            "method_body": "protected void subtractRow(final int minuendRow, final int subtrahendRow,\ntableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "public double dotProduct(RealVector v) {\nif (v instanceof ArrayRealVector) {\nfinal double[] vData = ((ArrayRealVector) v).data;\ncheckVectorDimensions(vData.length);\ndouble dot = 0;\nfor (int i = 0; i < data.length; i++) {\ndot += data[i] * vData[i];\nreturn dot;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:getFunction()Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;",
            "method_body": "protected LinearObjectiveFunction getFunction() {\nreturn function;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([DZ)V",
            "method_body": "public ArrayRealVector(double[] d, boolean copyArray) {\nif (d == null) {\ndata = copyArray ? d.clone() :  d;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:getConstantTerm()D",
            "method_body": "public double getConstantTerm() {\nreturn constantTerm;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:<init>(Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optimization/GoalType;ZDI)V",
            "method_body": "SimplexTableau(final LinearObjectiveFunction f,\nfinal int maxUlps) {\nthis.f                      = f;\nthis.constraints            = normalizeConstraints(constraints);\nthis.restrictToNonNegative  = restrictToNonNegative;\nthis.epsilon                = epsilon;\nthis.maxUlps                = maxUlps;\nthis.numDecisionVariables   = f.getCoefficients().getDimension() +\nthis.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\nthis.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\nthis.tableau = createTableau(goalType == GoalType.MAXIMIZE);\ninitializeColumnLabels();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:initializeColumnLabels()V",
            "method_body": "protected void initializeColumnLabels() {\nif (getNumObjectiveFunctions() == 2) {\ncolumnLabels.add(\"W\");\ncolumnLabels.add(\"Z\");\nfor (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\ncolumnLabels.add(\"x\" + i);\nif (!restrictToNonNegative) {\ncolumnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);\nfor (int i = 0; i < getNumSlackVariables(); i++) {\ncolumnLabels.add(\"s\" + i);\nfor (int i = 0; i < getNumArtificialVariables(); i++) {\ncolumnLabels.add(\"a\" + i);\ncolumnLabels.add(\"RHS\");\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n) {\nif (data.length != n) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math3/optimization/linear/LinearConstraint;)Lorg/apache/commons/math3/optimization/linear/LinearConstraint;",
            "method_body": "private LinearConstraint normalize(final LinearConstraint constraint) {\nif (constraint.getValue() < 0) {\nreturn new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\nreturn new LinearConstraint(constraint.getCoefficients(),\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.PointValuePair:getPoint()[D",
            "method_body": "public double[] getPoint() {\nfinal double[] p = getKey();\nreturn p == null ? null : p.clone();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:getGoalType()Lorg/apache/commons/math3/optimization/GoalType;",
            "method_body": "protected GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getCoefficients()Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>(I)V",
            "method_body": "public ArrayRealVector(int size) {\ndata = new double[size];\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:setRowVector(ILorg/apache/commons/math3/linear/RealVector;)V",
            "method_body": "public void setRowVector(final int row, final RealVector vector) {\nMatrixUtils.checkRowIndex(this, row);\nfinal int nCols = getColumnDimension();\nif (vector.getDimension() != nCols) {\nfor (int i = 0; i < nCols; ++i) {\nsetEntry(row, i, vector.getEntry(i));\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getInvertedCoefficientSum(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "protected static double getInvertedCoefficientSum(final RealVector coefficients) {\ndouble sum = 0;\nfor (double coefficient : coefficients.toArray()) {\nsum -= coefficient;\nreturn sum;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>(Lorg/apache/commons/math3/linear/RealVector;D)V",
            "method_body": "public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\nthis.coefficients = coefficients;\nthis.constantTerm = constantTerm;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getHeight()I",
            "method_body": "protected final int getHeight() {\nreturn tableau.getRowDimension();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:normalizeConstraints(Ljava/util/Collection;)Ljava/util/List;",
            "method_body": "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) {\nList<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\nfor (LinearConstraint constraint : originalConstraints) {\nnormalized.add(normalize(constraint));\nreturn normalized;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>(Lorg/apache/commons/math3/linear/ArrayRealVector;Z)V",
            "method_body": "public ArrayRealVector(ArrayRealVector v, boolean deep) {\ndata = deep ? v.data.clone() : v.data;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>([DLorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final double[] coefficients, final Relationship relationship,\nthis(new ArrayRealVector(coefficients), relationship, value);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:createTableau(Z)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "protected RealMatrix createTableau(final boolean maximize) {\nint width = numDecisionVariables + numSlackVariables +\nint height = constraints.size() + getNumObjectiveFunctions();\nArray2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);\nif (getNumObjectiveFunctions() == 2) {\nmatrix.setEntry(0, 0, -1);\nint zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\nmatrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\nRealVector objectiveCoefficients =\ncopyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);\nmatrix.setEntry(zIndex, width - 1,\nif (!restrictToNonNegative) {\nmatrix.setEntry(zIndex, getSlackVariableOffset() - 1,\nint slackVar = 0;\nint artificialVar = 0;\nfor (int i = 0; i < constraints.size(); i++) {\nLinearConstraint constraint = constraints.get(i);\nint row = getNumObjectiveFunctions() + i;\ncopyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);\nif (!restrictToNonNegative) {\nmatrix.setEntry(row, getSlackVariableOffset() - 1,\nmatrix.setEntry(row, width - 1, constraint.getValue());\nif (constraint.getRelationship() == Relationship.LEQ) {\nmatrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack\n} else if (constraint.getRelationship() == Relationship.GEQ) {\nmatrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess\nif ((constraint.getRelationship() == Relationship.EQ) ||\nmatrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\nmatrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);\nmatrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\nreturn matrix;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row) {\nif (row < 0 ||\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V",
            "method_body": "protected void dropPhase1Objective() {\nif (getNumObjectiveFunctions() == 1) {\nList<Integer> columnsToDrop = new ArrayList<Integer>();\ncolumnsToDrop.add(0);\nfor (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\nfinal double entry = tableau.getEntry(0, i);\nif (Precision.compareTo(entry, 0d, maxUlps) > 0) {\ncolumnsToDrop.add(i);\nfor (int i = 0; i < getNumArtificialVariables(); i++) {\nint col = i + getArtificialVariableOffset();\nif (getBasicRow(col) == null) {\ncolumnsToDrop.add(col);\ndouble[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\nfor (int i = 1; i < getHeight(); i++) {\nint col = 0;\nfor (int j = 0; j < getWidth(); j++) {\nif (!columnsToDrop.contains(j)) {\nmatrix[i - 1][col++] = tableau.getEntry(i, j);\nfor (int i = columnsToDrop.size() - 1; i >= 0; i--) {\ncolumnLabels.remove((int) columnsToDrop.get(i));\nthis.tableau = new Array2DRowRealMatrix(matrix);\nthis.numArtificialVariables = 0;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new ArrayRealVector(coefficients), constantTerm);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:restrictToNonNegative()Z",
            "method_body": "protected boolean restrictToNonNegative() {\nreturn nonNegative;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\nsuper(rowDimension, columnDimension);\ndata = new double[rowDimension][columnDimension];\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotRow(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\nList<Integer> minRatioPositions = new ArrayList<Integer>();\ndouble minRatio = Double.MAX_VALUE;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\nfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nfinal double entry = tableau.getEntry(i, col);\nif (Precision.compareTo(entry, 0d, maxUlps) > 0) {\nfinal double ratio = rhs / entry;\nfinal int cmp = Precision.compareTo(ratio, minRatio, maxUlps);\nif (cmp == 0) {\n} else if (cmp < 0) {\nminRatio = ratio;\nminRatioPositions = new ArrayList<Integer>();\nminRatioPositions.add(i);\nif (minRatioPositions.size() == 0) {\n} else if (minRatioPositions.size() > 1) {\nreturn minRatioPositions.get(0);\n}",
            "method_id": 49
        }
    ]
}