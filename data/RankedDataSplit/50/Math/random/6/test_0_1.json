{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V",
            "method_body": "public Weight(double[] weight) {\nweightMatrix = new DiagonalMatrix(weight);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:getModelFunction()Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;",
            "method_body": "public MultivariateVectorFunction getModelFunction() {\nreturn model;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof ModelFunction) {\nmodel = ((ModelFunction) data).getModelFunction();\ncontinue;\nif (data instanceof Target) {\ntarget = ((Target) data).getTarget();\ncontinue;\nif (data instanceof Weight) {\nweightMatrix = ((Weight) data).getWeight();\ncontinue;\ncheckParameters();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getAbsoluteThreshold()D",
            "method_body": "public double getAbsoluteThreshold() {\nreturn absoluteThreshold;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private RealMatrix squareRoot(RealMatrix m) {\nif (m instanceof DiagonalMatrix) {\nfinal int dim = m.getRowDimension();\nfinal RealMatrix sqrtM = new DiagonalMatrix(dim);\nfor (int i = 0; i < dim; i++) {\nsqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\nreturn sqrtM;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([DZ)V",
            "method_body": "public ArrayRealVector(double[] d, boolean copyArray)\nthrows NullArgumentException {\nif (d == null) {\ndata = copyArray ? d.clone() :  d;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nMatrixUtils.checkMatrixIndex(this, row, column);\nreturn row == column ? data[row] : 0;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V",
            "method_body": "public ModelFunction(MultivariateVectorFunction m) {\nmodel = m;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nif (row == column) {\nMatrixUtils.checkRowIndex(this, row);\ndata[row] = value;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeWeightedJacobian([D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "protected RealMatrix computeWeightedJacobian(double[] params) {\nreturn weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nreturn Double.NaN;\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>(II[[DZ)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns,\nsuper(rows, columns);\nthis.rows = rows;\nthis.columns = columns;\nblockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nif (copyArray) {\nblocks = blockData;\nint index = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int iHeight = blockHeight(iBlock);\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {\nif (blockData[index].length != iHeight * blockWidth(jBlock)) {\nif (copyArray) {\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (start != null) {\nfinal int dim = start.length;\nif (lowerBound != null) {\nif (lowerBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double lo = lowerBound[i];\nif (v < lo) {\nif (upperBound != null) {\nif (upperBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double hi = upperBound[i];\nif (v > hi) {\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nMatrixUtils.checkMatrixIndex(this, row, column);\nreturn data[row][column];\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:operate([D)[D",
            "method_body": "public double[] operate(final double[] v)\nreturn multiply(new DiagonalMatrix(v, false)).getDataRef();\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:<init>([D[DZ)V",
            "method_body": "public PointVectorValuePair(final double[] point,\nsuper(copyArray ?\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:getValueRef()[D",
            "method_body": "public double[] getValueRef() {\nreturn super.getValue();\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() throws MaxCountExceededException {\nif (++count > maximalCount) {\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn data.length;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof Weight) {\nweightMatrixSqrt = squareRoot(((Weight) data).getWeight());\nbreak;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V",
            "method_body": "public ModelFunctionJacobian(MultivariateMatrixFunction j) {\njacobian = j;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:getMaxEval()I",
            "method_body": "public int getMaxEval() {\nreturn maxEval;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\nevaluations.incrementCount();\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Target:getTarget()[D",
            "method_body": "public double[] getTarget() {\nreturn target.clone();\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:<init>([D[D)V",
            "method_body": "public PointVectorValuePair(final double[] point,\nthis(point, value, true);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in)\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn data.length;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
            "method_body": "public LUDecomposition(RealMatrix matrix, double singularityThreshold) {\nif (!matrix.isSquare()) {\nfinal int m = matrix.getColumnDimension();\nlu = matrix.getData();\npivot = new int[m];\ncachedL = null;\ncachedU = null;\ncachedP = null;\nfor (int row = 0; row < m; row++) {\npivot[row] = row;\neven     = true;\nsingular = false;\nfor (int col = 0; col < m; col++) {\nfor (int row = 0; row < col; row++) {\nint max = col; // permutation row\ndouble largest = Double.NEGATIVE_INFINITY;\nfor (int row = col; row < m; row++) {\nfinal double[] luRow = lu[row];\ndouble sum = luRow[col];\nfor (int i = 0; i < col; i++) {\nluRow[col] = sum;\nif (FastMath.abs(sum) > largest) {\nlargest = FastMath.abs(sum);\nmax = row;\nif (FastMath.abs(lu[max][col]) < singularityThreshold) {\nif (max != col) {\nfinal double luDiag = lu[col][col];\nfor (int row = col + 1; row < m; row++) {\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:<init>([D)V",
            "method_body": "public DiagonalMatrix(final double[] d) {\nthis(d, true);\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:getInitialGuess()[D",
            "method_body": "public double[] getInitialGuess() {\nreturn init.clone();\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:copy()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix copy() {\nreturn new DiagonalMatrix(data);\n}",
            "method_id": 99
        }
    ]
}