{
    "bug_id": 6,
    "test_id": 27,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",
    "test_body": "public void testSumSinc() {\nfinal MultivariateFunction func = new SumSincFunction(-1);\n54: int dim = 2;\nfinal double[] minPoint = new double[dim];\nfor (int i = 0; i < dim; i++) {\nminPoint[i] = 0;\n}\n60: double[] init = new double[dim];\n62: // Initial is minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i];\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n68: // Initial is far from minimum.\nfor (int i = 0; i < dim; i++) {\ninit[i] = minPoint[i] + 3;\n}\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n// More stringent line search tolerance enhances the precision\n// of the result.\ndoTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:getRemA()D",
            "method_body": "double getRemA() {\nreturn finalRemA;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() throws MaxCountExceededException {\nif (++count > maximalCount) {\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction:<init>(Lorg/apache/commons/math3/analysis/UnivariateFunction;)V",
            "method_body": "public UnivariateObjectiveFunction(UnivariateFunction f) {\nfunction = f;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer$LineSearch;I[D[D)V",
            "method_body": "public UnivariatePointValuePair search(final double[] p, final double[] d) {\nfinal int n = p.length;\nfinal UnivariateFunction f = new UnivariateFunction() {\nfinal double[] x = new double[n];\nfor (int i = 0; i < n; i++) {\nx[i] = p[i] + alpha * d[i];\nfinal double obj = PowellOptimizer.this.computeObjectiveValue(x);\nreturn obj;\nfinal GoalType goal = PowellOptimizer.this.getGoalType();\nbracket.search(f, goal, 0, 1);\nreturn optimize(new MaxEval(Integer.MAX_VALUE),\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair:<init>(DD)V",
            "method_body": "public UnivariatePointValuePair(final double point,\nfinal double value) {\nthis.point = point;\nthis.value = value;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn start;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof SearchInterval) {\nfinal SearchInterval interval = (SearchInterval) data;\nmin = interval.getMin();\nmax = interval.getMax();\nstart = interval.getStartValue();\ncontinue;\nif (data instanceof UnivariateObjectiveFunction) {\nfunction = ((UnivariateObjectiveFunction) data).getObjectiveFunction();\ncontinue;\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\nif (data instanceof ObjectiveFunction) {\nfunction = ((ObjectiveFunction) data).getObjectiveFunction();\ncontinue;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:getMin()D",
            "method_body": "public double getMin() {\nreturn lower;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal GoalType goal = getGoalType();\nfinal double[] guess = getStartPoint();\nfinal int n = guess.length;\nfinal double[][] direc = new double[n][n];\nfor (int i = 0; i < n; i++) {\ndirec[i][i] = 1;\nfinal ConvergenceChecker<PointValuePair> checker\ndouble[] x = guess;\ndouble fVal = computeObjectiveValue(x);\ndouble[] x1 = x.clone();\nint iter = 0;\n++iter;\ndouble fX = fVal;\ndouble fX2 = 0;\ndouble delta = 0;\nint bigInd = 0;\ndouble alphaMin = 0;\nfor (int i = 0; i < n; i++) {\nfinal double[] d = MathArrays.copyOf(direc[i]);\nfX2 = fVal;\nfinal UnivariatePointValuePair optimum = line.search(x, d);\nfVal = optimum.getValue();\nalphaMin = optimum.getPoint();\nfinal double[][] result = newPointAndDirection(x, d, alphaMin);\nx = result[0];\nif ((fX2 - fVal) > delta) {\ndelta = fX2 - fVal;\nbigInd = i;\nboolean stop = 2 * (fX - fVal) <=\nfinal PointValuePair previous = new PointValuePair(x1, fX);\nfinal PointValuePair current = new PointValuePair(x, fVal);\nif (!stop) { // User-defined stopping criteria.\nif (checker != null) {\nif (stop) {\nif (goal == GoalType.MINIMIZE) {\nreturn (fVal < fX) ? current : previous;\nfinal double[] d = new double[n];\nfinal double[] x2 = new double[n];\nfor (int i = 0; i < n; i++) {\nd[i] = x[i] - x1[i];\nx2[i] = 2 * x[i] - x1[i];\nx1 = x.clone();\nfX2 = computeObjectiveValue(x2);\nif (fX > fX2) {\ndouble t = 2 * (fX + fX2 - 2 * fVal);\ndouble temp = fX - fVal - delta;\nt *= temp * temp;\ntemp = fX - fX2;\nt -= delta * temp * temp;\nif (t < 0.0) {\n}\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (start != null) {\nfinal int dim = start.length;\nif (lowerBound != null) {\nif (lowerBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double lo = lowerBound[i];\nif (v < lo) {\nif (upperBound != null) {\nif (upperBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double hi = upperBound[i];\nif (v > hi) {\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DD)V",
            "method_body": "public PointValuePair(final double[] point,\nthis(point, value, true);\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:<init>()V",
            "method_body": "public BracketFinder() {\nthis(100, 50);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDDD)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, lineRel, lineAbs, null);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DD)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, null);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\nfinal double pi2b = 6.123233995736766E-17;\nfinal double a = pi2a - xa;\ndouble b = -(a - pi2a + xa);\nb += pi2b - xb;\nreturn sinQ(a, b);\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SearchInterval:getMax()D",
            "method_body": "public double getMax() {\nreturn upper;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nthis(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:<init>(D)V",
            "method_body": "CodyWaite(double xa) {\nint k = (int)(xa * 0.6366197723675814);\ndouble a = -k * 1.570796251296997;\nremA = xa + a;\nremB = -(remA - xa - a);\na = -k * 7.549789948768648E-8;\ndouble b = remA;\nremA = a + b;\nremB += -(remA - b - a);\na = -k * 6.123233995736766E-17;\nb = remA;\nremA = a + b;\nremB += -(remA - b - a);\nif (remA > 0) {\nbreak;\nthis.finalK = k;\nthis.finalRemA = remA;\nthis.finalRemB = remB;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([D)[D",
            "method_body": "public static double[] copyOf(double[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.UnivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
            "method_body": "public UnivariatePointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:getLo()D",
            "method_body": "public double getLo() {\nreturn lo;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:getRemB()D",
            "method_body": "double getRemB() {\nreturn finalRemB;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:<init>(DDDDLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public PowellOptimizer(double rel,\nsuper(checker);\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\nline = new LineSearch(lineRel,\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:getMaxEval()I",
            "method_body": "public int getMaxEval() {\nreturn maxEval;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:<init>(Lorg/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer;DD)V",
            "method_body": "LineSearch(double rel,\ndouble abs) {\nsuper(REL_TOL_UNUSED,\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.BracketFinder:search(Lorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;DD)V",
            "method_body": "public void search(UnivariateFunction func, GoalType goal, double xA, double xB) {\nevaluations.resetCount();\nfinal boolean isMinim = goal == GoalType.MINIMIZE;\ndouble fA = eval(func, xA);\ndouble fB = eval(func, xB);\nif (isMinim ?\ndouble tmp = xA;\nxA = xB;\nxB = tmp;\ntmp = fA;\nfA = fB;\nfB = tmp;\ndouble xC = xB + GOLD * (xB - xA);\ndouble fC = eval(func, xC);\nwhile (isMinim ? fC < fB : fC > fB) {\ndouble tmp1 = (xB - xA) * (fB - fC);\ndouble tmp2 = (xB - xC) * (fB - fA);\ndouble val = tmp2 - tmp1;\ndouble denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;\ndouble w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;\ndouble wLim = xB + growLimit * (xC - xB);\nif ((w - xC) * (xB - w) > 0) {\nfW = eval(func, w);\nif (isMinim ?\nxA = xB;\nxB = w;\nfA = fB;\nfB = fW;\nbreak;\n} else if ((w - wLim) * (wLim - xC) >= 0) {\n} else if ((w - wLim) * (xC - w) > 0) {\nw = xC + GOLD * (xC - xB);\nfW = eval(func, w);\nxA = xB;\nfA = fB;\nxB = xC;\nfB = fC;\nxC = w;\nfC = fW;\n}\nlo = xA;\nfLo = fA;\nmid = xB;\nfMid = fB;\nhi = xC;\nfHi = fC;\nif (lo > hi) {\ndouble tmp = lo;\nlo = hi;\nhi = tmp;\ntmp = fLo;\nfLo = fHi;\nfHi = tmp;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker:converged(ILorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 97
        }
    ]
}