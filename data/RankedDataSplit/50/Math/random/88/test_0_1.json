{
    "bug_id": 88,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272",
    "test_body": "public void testMath272() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\nconstraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n42: SimplexSolver solver = new SimplexSolver();\nRealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n45: assertEquals(0.0, solution.getPoint()[0], .0000001);\nassertEquals(1.0, solution.getPoint()[1], .0000001);\nassertEquals(1.0, solution.getPoint()[2], .0000001);\nassertEquals(3.0, solution.getValue(), .0000001);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath272(SimplexSolverTest.java:47)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:isPhase1Solved(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
            "method_body": "private boolean isPhase1Solved(final SimplexTableau tableau) {\nif (tableau.getNumArtificialVariables() == 0) {\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getOriginalNumDecisionVariables()I",
            "method_body": "protected final int getOriginalNumDecisionVariables() {\nreturn restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(pivotCol, tableau);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:copyArray([D[DI)V",
            "method_body": "private void copyArray(final double[] src, final double[] dest,\nSystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\nif (data == null) {\nif (row > 0) {\nif (column > 0) {\nfinal int nRows = subMatrix.length;\nif (nRows == 0) {\nfinal int nCols = subMatrix[0].length;\nif (nCols == 0) {\ndata = new double[subMatrix.length][nCols];\nfor (int i = 0; i < data.length; ++i) {\nif (subMatrix[i].length != nCols) {\nSystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n} else {\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:<init>(D)V",
            "method_body": "public SimplexSolver(final double epsilon) {\nthis.epsilon = epsilon;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getRelationship()Lorg/apache/commons/math/optimization/linear/Relationship;",
            "method_body": "public Relationship getRelationship() {\nreturn relationship;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getCoefficients()Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector getCoefficients() {\nreturn coefficients;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getEntry(II)D",
            "method_body": "protected final double getEntry(final int row, final int column) {\nreturn tableau.getEntry(row, column);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:<init>()V",
            "method_body": "protected AbstractLinearOptimizer() {\nsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.discardArtificialVariables();\nwhile (!isOptimal(tableau)) {\nreturn tableau.getSolution();\n}",
            "method_id": 62
        }
    ]
}