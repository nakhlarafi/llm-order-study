{
    "bug_id": 58,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519",
    "test_body": "public void testMath519() {\n// The optimizer will try negative sigma values but \"GaussianFitter\"\n// will catch the raised exceptions and return NaN values instead.\n302: final double[] data = { \n1.1143831578403364E-29,\n4.95281403484594E-28,\n1.1171347211930288E-26,\n1.7044813962636277E-25,\n1.9784716574832164E-24,\n1.8630236407866774E-23,\n1.4820532905097742E-22,\n1.0241963854632831E-21,\n6.275077366673128E-21,\n3.461808994532493E-20,\n1.7407124684715706E-19,\n8.056687953553974E-19,\n3.460193945992071E-18,\n1.3883326374011525E-17,\n5.233894983671116E-17,\n1.8630791465263745E-16,\n6.288759227922111E-16,\n2.0204433920597856E-15,\n6.198768938576155E-15,\n1.821419346860626E-14,\n5.139176445538471E-14,\n1.3956427429045787E-13,\n3.655705706448139E-13,\n9.253753324779779E-13,\n2.267636001476696E-12,\n5.3880460095836855E-12,\n1.2431632654852931E-11\n};\n332: GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\nfor (int i = 0; i < data.length; i++) {\nfitter.addObservedPoint(i, data[i]);\n}\nfinal double[] p = fitter.fit();\n338: Assert.assertEquals(53.1572792, p[1], 1e-7);\nAssert.assertEquals(5.75214622, p[2], 1e-8);\n}\n",
    "stack_trace": "org.apache.commons.math.exception.NotStrictlyPositiveException: -1.277 is smaller than, or equal to, the minimum (0)\nat org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(Gaussian.java:183)\nat org.apache.commons.math.analysis.function.Gaussian$Parametric.value(Gaussian.java:128)\nat org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction.value(CurveFitter.java:203)\nat org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(BaseAbstractVectorialOptimizer.java:107)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost(AbstractLeastSquaresOptimizer.java:128)\nat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize(LevenbergMarquardtOptimizer.java:350)\nat org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(BaseAbstractVectorialOptimizer.java:141)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:253)\nat org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:43)\nat org.apache.commons.math.optimization.fitting.CurveFitter.fit(CurveFitter.java:160)\nat org.apache.commons.math.optimization.fitting.CurveFitter.fit(CurveFitter.java:126)\nat org.apache.commons.math.optimization.fitting.GaussianFitter.fit(GaussianFitter.java:121)\nat org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519(GaussianFitterTest.java:336)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 50,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter:<init>(Lorg/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer;)V",
            "method_body": "public GaussianFitter(DifferentiableMultivariateVectorialOptimizer optimizer) {\nsuper(optimizer);\n}",
            "method_id": 51,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:getTargetRef()[D",
            "method_body": "protected double[] getTargetRef() {\nreturn target;\n}",
            "method_id": 52,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint:getWeight()D",
            "method_body": "public double getWeight() {\nreturn weight;\n}",
            "method_id": 53,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.exception.NumberIsTooSmallException:<init>(Ljava/lang/Number;Ljava/lang/Number;Z)V",
            "method_body": "public NumberIsTooSmallException(Number wrong,\nthis(null, wrong, min, boundIsAllowed);\n}",
            "method_id": 54,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter:fit(Lorg/apache/commons/math/analysis/ParametricUnivariateRealFunction;[D)[D",
            "method_body": "public double[] fit(final ParametricUnivariateRealFunction f, final double[] initialGuess) {\nreturn fit(Integer.MAX_VALUE, f, initialGuess);\n}",
            "method_id": 55,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 56,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 57,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 58,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 59,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 60,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:getWeightRef()[D",
            "method_body": "protected double[] getWeightRef() {\nreturn weight;\n}",
            "method_id": 61,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker:getAbsoluteThreshold()D",
            "method_body": "public double getAbsoluteThreshold() {\nreturn absoluteThreshold;\n}",
            "method_id": 62,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:isBetween(DDD)Z",
            "method_body": "private boolean isBetween(double value, double boundary1, double boundary2) {\nreturn (value >= boundary1 && value <= boundary2) ||\n}",
            "method_id": 63,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:getConvergenceChecker()Lorg/apache/commons/math/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 64,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 65,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.exception.NotStrictlyPositiveException:<init>(Ljava/lang/Number;)V",
            "method_body": "public NotStrictlyPositiveException(Number value) {\nsuper(value, 0, false);\n}",
            "method_id": 66,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 67,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.VectorialPointValuePair:getValueRef()[D",
            "method_body": "public double[] getValueRef() {\nreturn value;\n}",
            "method_id": 68,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.CurveFitter:addObservedPoint(DDD)V",
            "method_body": "public void addObservedPoint(double weight, double x, double y) {\nobservations.add(new WeightedObservedPoint(weight, x, y));\n}",
            "method_id": 69,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 70,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 71,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.exception.OutOfRangeException:<init>(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public OutOfRangeException(Number wrong,\nthis(null, wrong, lo, hi);\n}",
            "method_id": 72,
            "loc": 3
        }
    ]
}