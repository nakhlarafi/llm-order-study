{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2:43PM [IC]T> but was:<2:43PM [PS]T>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\nthis.pattern = pattern;\nthis.timeZone = timeZone;\nthis.locale = locale;\ninit();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:init()V",
            "method_body": "private void init() {\nCalendar definingCalendar = Calendar.getInstance(timeZone, locale);\nthisYear= definingCalendar.get(Calendar.YEAR);\nStringBuilder regex= new StringBuilder();\nList<Strategy> collector = new ArrayList<Strategy>();\nMatcher patternMatcher= formatPattern.matcher(pattern);\nif(!patternMatcher.lookingAt()) {\ncurrentFormatField= patternMatcher.group();\nStrategy currentStrategy= getStrategy(currentFormatField, definingCalendar);\npatternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\nif(!patternMatcher.lookingAt()) {\nnextStrategy = null;\nbreak;\nString nextFormatField= patternMatcher.group();\nnextStrategy = getStrategy(nextFormatField, definingCalendar);\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\ncurrentFormatField= nextFormatField;\ncurrentStrategy= nextStrategy;\n}\nif (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\ncurrentFormatField= null;\nstrategies= collector.toArray(new Strategy[collector.size()]);\nparsePattern= Pattern.compile(regex.toString());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:isNextNumber()Z",
            "method_body": "boolean isNextNumber() {\nreturn nextStrategy!=null && nextStrategy.isNumber();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getStrategy(Ljava/lang/String;Ljava/util/Calendar;)Lorg/apache/commons/lang3/time/FastDateParser$Strategy;",
            "method_body": "boolean isNumber();\nswitch(formatField.charAt(0)) {\nreturn new CopyQuotedStrategy(formatField);\nreturn getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);\nreturn MODULO_HOUR_STRATEGY;\nreturn MINUTE_STRATEGY;\nreturn getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$NumberStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nif(parser.isNextNumber()) {\nregex.append(\"(\\\\p{IsNd}++)\");\nreturn true;\n}",
            "method_id": 54
        }
    ]
}