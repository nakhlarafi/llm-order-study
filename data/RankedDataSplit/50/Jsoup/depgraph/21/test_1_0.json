{
    "bug_id": 21,
    "test_id": 1,
    "test_name": "org.jsoup.select.SelectorTest.mixCombinatorGroup",
    "test_body": "324: @Test public void mixCombinatorGroup() {\n325: String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n326: Document doc = Jsoup.parse(h);\n327: Elements els = doc.select(\".foo > ol, ol > li + li\");\n328: 329: assertEquals(2, els.size());\n330: assertEquals(\"li\", els.get(0).tagName());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.jsoup.select.SelectorTest.mixCombinatorGroup(SelectorTest.java:329)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.QueryParser:combinator(C)V",
            "method_body": "private void combinator(char combinator) {\ntq.consumeWhitespace();\nString subQuery = consumeSubQuery(); // support multi > childs\nif (evals.size() == 1)\ne = evals.get(0);\nevals.clear();\nEvaluator f = parse(subQuery);\nif (combinator == '>')\nevals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\nelse if (combinator == ' ')\nelse if (combinator == '+')\nevals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Element:indexInList(Lorg/jsoup/nodes/Element;Ljava/util/List;)Ljava/lang/Integer;",
            "method_body": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\nValidate.notNull(search);\nValidate.notNull(elements);\nfor (int i = 0; i < elements.size(); i++) {\nE element = elements.get(i);\nif (element.equals(search))\nreturn i;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.select.Selector:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Element;)V",
            "method_body": "private Selector(String query, Element root) {\nValidate.notNull(query);\nquery = query.trim();\nValidate.notEmpty(query);\nValidate.notNull(root);\nthis.evaluator = QueryParser.parse(query);\nthis.root = root;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Ljava/lang/String;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(String query, Element root) {\nreturn new Selector(query, root).select();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\nreturn Collector.collect(evaluator, root);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeElementSelector()Ljava/lang/String;",
            "method_body": "public String consumeElementSelector() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inSpecificScope([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\nIterator<Element> it = stack.descendingIterator();\nwhile (it.hasNext()) {\nElement el = it.next();\nString elName = el.nodeName();\nif (StringUtil.in(elName, targetNames))\nreturn true;\nif (StringUtil.in(elName, baseTypes))\nreturn false;\nif (extraTypes != null && StringUtil.in(elName, extraTypes))\n}\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inScope(Ljava/lang/String;)Z",
            "method_body": "boolean inScope(String targetName) {\nreturn inScope(targetName, null);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inScope(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "boolean inScope(String targetName, String[] extras) {\nreturn inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inButtonScope(Ljava/lang/String;)Z",
            "method_body": "boolean inButtonScope(String targetName) {\nreturn inScope(targetName, new String[]{\"button\"});\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inSpecificScope(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {\nreturn inSpecificScope(new String[]{targetName}, baseTypes, extraTypes);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:inListItemScope(Ljava/lang/String;)Z",
            "method_body": "boolean inListItemScope(String targetName) {\nreturn inScope(targetName, new String[]{\"ol\", \"ul\"});\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$7:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nswitch (t.type) {\nToken.Character c = t.asCharacter();\nif (c.getData().equals(nullString)) {\n} else if (isWhitespace(c)) {\ntb.reconstructFormattingElements();\ntb.insert(c);\ntb.framesetOk(false);\nbreak;\nToken.StartTag startTag = t.asStartTag();\nString name = startTag.name();\nif (name.equals(\"html\")) {\n} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n} else if (name.equals(\"body\")) {\n} else if (name.equals(\"frameset\")) {\n} else if (StringUtil.in(name,\nif (tb.inButtonScope(\"p\")) {\ntb.insert(startTag);\n} else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n} else if (StringUtil.in(name, \"pre\", \"listing\")) {\n} else if (name.equals(\"form\")) {\n} else if (name.equals(\"li\")) {\ntb.framesetOk(false);\nLinkedList<Element> stack = tb.getStack();\nfor (int i = stack.size() - 1; i > 0; i--) {\nElement el = stack.get(i);\nif (el.nodeName().equals(\"li\")) {\ntb.process(new Token.EndTag(\"li\"));\nbreak;\nif (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\nbreak;\nif (tb.inButtonScope(\"p\")) {\ntb.insert(startTag);\n} else if (StringUtil.in(name, \"dd\", \"dt\")) {\nToken.EndTag endTag = t.asEndTag();\nname = endTag.name();\nif (name.equals(\"body\")) {\n} else if (name.equals(\"html\")) {\n} else if (StringUtil.in(name,\nif (!tb.inScope(name)) {\ntb.generateImpliedEndTags();\nif (!tb.currentElement().nodeName().equals(name))\ntb.error(this);\ntb.popStackToClose(name);\n} else if (name.equals(\"form\")) {\n} else if (name.equals(\"p\")) {\nif (!tb.inButtonScope(name)) {\ntb.generateImpliedEndTags(name);\nif (!tb.currentElement().nodeName().equals(name))\ntb.popStackToClose(name);\n} else if (name.equals(\"li\")) {\nif (!tb.inListItemScope(name)) {\ntb.generateImpliedEndTags(name);\nif (!tb.currentElement().nodeName().equals(name))\ntb.popStackToClose(name);\nreturn true;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:parse()Lorg/jsoup/select/Evaluator;",
            "method_body": "Evaluator parse() {\ntq.consumeWhitespace();\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\nfindElements();\nwhile (!tq.isEmpty()) {\nboolean seenWhite = tq.consumeWhitespace();\nif (tq.matchChomp(\",\")) {\nCombiningEvaluator.Or or = new CombiningEvaluator.Or(evals);\nevals.clear();\nevals.add(or);\nwhile (!tq.isEmpty()) {\nString subQuery = tq.chompTo(\",\");\nor.add(parse(subQuery));\n}\n} else if (tq.matchesAny(combinators)) {\ncombinator(tq.consume());\n} else if (seenWhite) {\nfindElements(); // take next el, #. etc off queue\n}\nif (evals.size() == 1)\nreturn evals.get(0);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$Or:<init>(Ljava/util/Collection;)V",
            "method_body": "Or(Collection<Evaluator> evaluators) {\nsuper();\nif (evaluators.size() > 1)\nthis.evaluators.addAll(evaluators);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.nodes.Element:previousElementSibling()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element previousElementSibling() {\nList<Element> siblings = parent().children();\nInteger index = indexInList(this, siblings);\nValidate.notNull(index);\nif (index > 0)\nreturn siblings.get(index-1);\nreturn null;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:consumeSubQuery()Ljava/lang/String;",
            "method_body": "private String consumeSubQuery() {\nStringBuilder sq = new StringBuilder();\nwhile (!tq.isEmpty()) {\nif (tq.matches(\"(\"))\nelse if (tq.matches(\"[\"))\nelse if (tq.matchesAny(combinators))\nbreak;\nsq.append(tq.consume());\nreturn sq.toString();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element element) {\nif (root == element)\nElement prev = element.previousElementSibling();\nreturn prev != null && evaluator.matches(root, prev);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String consumeTo(String seq) {\nint offset = queue.indexOf(seq, pos);\nif (offset != -1) {\nString consumed = queue.substring(pos, offset);\npos += consumed.length();\nreturn consumed;\nreturn remainder();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byClass()V",
            "method_body": "private void byClass() {\nString className = tq.consumeCssIdentifier();\nValidate.notEmpty(className);\nevals.add(new Evaluator.Class(className.trim().toLowerCase()));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling:<init>(Lorg/jsoup/select/Evaluator;)V",
            "method_body": "public ImmediatePreviousSibling(Evaluator evaluator) {\nthis.evaluator = evaluator;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.select.StructuralEvaluator$ImmediateParent:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element element) {\nif (root == element)\nElement parent = element.parent();\nreturn parent != null && evaluator.matches(root, parent);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$Or:add(Lorg/jsoup/select/Evaluator;)V",
            "method_body": "public void add(Evaluator e) {\nevaluators.add(e);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.nodes.Element:classNames()Ljava/util/Set;",
            "method_body": "public Set<String> classNames() {\nif (classNames == null) {\nString[] names = className().split(\"\\\\s+\");\nclassNames = new LinkedHashSet<String>(Arrays.asList(names));\nreturn classNames;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.select.StructuralEvaluator$ImmediateParent:<init>(Lorg/jsoup/select/Evaluator;)V",
            "method_body": "public ImmediateParent(Evaluator evaluator) {\nthis.evaluator = evaluator;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.nodes.Element:children()Lorg/jsoup/select/Elements;",
            "method_body": "public Elements children() {\nList<Element> elements = new ArrayList<Element>();\nfor (Node node : childNodes) {\nif (node instanceof Element)\nelements.add((Element) node);\n}\nreturn new Elements(elements);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$Or:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element node) {\nfor (Evaluator s : evaluators) {\nif (s.matches(root, node))\nreturn true;\n}\nreturn false;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$6:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag()) {\nToken.StartTag startTag = t.asStartTag();\nString name = startTag.name();\nif (name.equals(\"html\")) {\n} else if (name.equals(\"body\")) {\ntb.insert(startTag);\ntb.framesetOk(false);\ntb.transition(InBody);\n} else if (name.equals(\"frameset\")) {\n} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n} else if (name.equals(\"head\")) {\nanythingElse(t, tb);\n} else if (t.isEndTag()) {\nreturn true;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$4:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\nswitch (t.type) {\nToken.StartTag start = t.asStartTag();\nString name = start.name();\nif (name.equals(\"html\")) {\n} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n} else if (name.equals(\"meta\")) {\n} else if (name.equals(\"title\")) {\n} else if (StringUtil.in(name, \"noframes\", \"style\")) {\n} else if (name.equals(\"noscript\")) {\n} else if (name.equals(\"script\")) {\n} else if (name.equals(\"head\")) {\nreturn anythingElse(t, tb);\nToken.EndTag end = t.asEndTag();\nname = end.name();\nif (name.equals(\"head\")) {\ntb.pop();\ntb.transition(AfterHead);\nreturn anythingElse(t, tb);\nreturn true;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$40:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nString value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');\nif (value.length() > 0)\nt.tagPending.appendAttributeValue(value);\nchar c = r.consume();\nswitch (c) {\nt.emitTagPending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String chompTo(String seq) {\nString data = consumeTo(seq);\nmatchChomp(seq);\nreturn data;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainder()Ljava/lang/String;",
            "method_body": "public String remainder() {\nStringBuilder accum = new StringBuilder();\nwhile (!isEmpty()) {\naccum.append(consume());\nreturn accum.toString();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.jsoup.nodes.Element:hasClass(Ljava/lang/String;)Z",
            "method_body": "public boolean hasClass(String className) {\nSet<String> classNames = classNames();\nfor (String name : classNames) {\nif (className.equalsIgnoreCase(name))\nreturn true;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeCssIdentifier()Ljava/lang/String;",
            "method_body": "public String consumeCssIdentifier() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('-', '_')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Class:<init>(Ljava/lang/String;)V",
            "method_body": "public Class(String className) {\nthis.className = className;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:popStackToClose(Ljava/lang/String;)V",
            "method_body": "void popStackToClose(String elName) {\nIterator<Element> it = stack.descendingIterator();\nwhile (it.hasNext()) {\nElement next = it.next();\nif (next.nodeName().equals(elName)) {\nit.remove();\nbreak;\nit.remove();\n}\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodes().size() > 0) {\nnode = node.childNode(0);\ndepth++;\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nnode = node.parent();\ndepth--;\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\nnode = node.nextSibling();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$37:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(AttributeValue_singleQuoted);\nbreak;\nr.unconsume();\nt.transition(AttributeValue_unquoted);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$3:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (isWhitespace(t)) {\n} else if (t.isComment()) {\n} else if (t.isDoctype()) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"html\")) {\n} else if (t.isStartTag() && t.asStartTag().name().equals(\"head\")) {\nElement head = tb.insert(t.asStartTag());\ntb.setHeadElement(head);\ntb.transition(InHead);\n} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\"))) {\n} else if (t.isEndTag()) {\ntb.process(new Token.StartTag(\"head\"));\nreturn tb.process(t);\nreturn true;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:newAttribute()V",
            "method_body": "void newAttribute() {\nif (pendingAttributeName != null) {\nif (pendingAttributeValue == null)\nAttribute attribute = new Attribute(pendingAttributeName, pendingAttributeValue);\nattributes.put(attribute);\npendingAttributeName = null;\npendingAttributeValue = null;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$And:<init>([Lorg/jsoup/select/Evaluator;)V",
            "method_body": "And(Evaluator... evaluators) {\nthis(Arrays.asList(evaluators));\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:<init>(Ljava/util/Collection;)V",
            "method_body": "CombiningEvaluator(Collection<Evaluator> evaluators) {\nthis();\nthis.evaluators.addAll(evaluators);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emit(Lorg/jsoup/parser/Token;)V",
            "method_body": "void emit(Token token) {\nValidate.isFalse(isEmitPending, \"There is an unread token pending!\");\nemitPending = token;\nisEmitPending = true;\nif (token.type == Token.TokenType.StartTag) {\nToken.StartTag startTag = (Token.StartTag) token;\nlastStartTag = startTag;\nif (startTag.selfClosing)\n} else if (token.type == Token.TokenType.EndTag) {\nToken.EndTag endTag = (Token.EndTag) token;\nif (endTag.attributes.size() > 0)\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWhitespace()Z",
            "method_body": "public boolean consumeWhitespace() {\nboolean seen = false;\nwhile (matchesWhitespace()) {\npos++;\nseen = true;\nreturn seen;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:<init>()V",
            "method_body": "CombiningEvaluator() {\nsuper();\nevaluators = new ArrayList<Evaluator>();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>(Ljava/util/List;)V",
            "method_body": "public Elements(List<Element> elements) {\ncontents = elements;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:initialiseParse(Ljava/lang/String;Ljava/lang/String;Lorg/jsoup/parser/ParseErrorList;)V",
            "method_body": "protected void initialiseParse(String input, String baseUri, ParseErrorList errors) {\nValidate.notNull(input, \"String input must not be null\");\nValidate.notNull(baseUri, \"BaseURI must not be null\");\ndoc = new Document(baseUri);\nreader = new CharacterReader(input);\nthis.errors = errors;\ntokeniser = new Tokeniser(reader, errors);\nstack = new DescendableLinkedList<Element>();\nthis.baseUri = baseUri;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$35:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nString name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');\nt.tagPending.appendAttributeName(name.toLowerCase());\nchar c = r.consume();\nswitch (c) {\nt.transition(BeforeAttributeValue);\nbreak;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$34:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.tagPending.newAttribute();\nr.unconsume();\nt.transition(AttributeName);\n}",
            "method_id": 49
        }
    ]
}