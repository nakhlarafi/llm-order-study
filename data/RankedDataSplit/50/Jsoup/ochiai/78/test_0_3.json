{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead",
    "test_body": "public void handlesEmptyStreamDuringParseRead() throws IOException {\n// this handles situations where the remote server sets a content length greater than it actually writes\n394: Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n.timeout(200)\n.execute();\n398: boolean threw = false;\ntry {\nDocument document = res.parse();\nassertEquals(\"Something\", document.title());",
    "stack_trace": "org.jsoup.UncheckedIOException: java.io.IOException: Underlying input stream returned zero bytes\nat org.jsoup.parser.CharacterReader.bufferUp(CharacterReader.java:63)\nat org.jsoup.parser.CharacterReader.current(CharacterReader.java:93)\nat org.jsoup.parser.TokeniserState$1.read(TokeniserState.java:12)\nat org.jsoup.parser.Tokeniser.read(Tokeniser.java:45)\nat org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:51)\nat org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)\nat org.jsoup.parser.Parser.parseInput(Parser.java:39)\nat org.jsoup.helper.DataUtil.parseInputStream(DataUtil.java:151)\nat org.jsoup.helper.HttpConnection$Response.parse(HttpConnection.java:837)\nat org.jsoup.integration.ConnectTest.handlesEmptyStreamDuringParseRead(ConnectTest.java:400)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;)V",
            "method_body": "public TextNode(String text) {\nvalue = text;\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:<clinit>()V",
            "method_body": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");\nprivate static final char[] mimeBoundaryChars =\nprivate DataUtil() {}",
            "method_id": 151
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:parseInputStream(Ljava/io/InputStream;Ljava/lang/String;Ljava/lang/String;Lorg/jsoup/parser/Parser;)Lorg/jsoup/nodes/Document;",
            "method_body": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {\nif (input == null) // empty body\ninput = ConstrainableInputStream.wrap(input, bufferSize, 0);\nDocument doc = null;\nboolean fullyRead = false;\ninput.mark(bufferSize);\nByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.\nfullyRead = input.read() == -1;\ninput.reset();\nBomCharset bomCharset = detectCharsetFromBom(firstBytes);\nif (bomCharset != null) {\nif (charsetName == null) { // determine from meta. safe first parse as UTF-8\nValidate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\nif (doc == null) {\nif (charsetName == null)\nBufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\ndoc = parser.parseInput(reader, baseUri);\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:readToByteBuffer(Ljava/io/InputStream;I)Ljava/nio/ByteBuffer;",
            "method_body": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\nValidate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");\nfinal ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);\nreturn input.readToByteBuffer(maxSize);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:getCharsetFromContentType(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String getCharsetFromContentType(String contentType) {\nif (contentType == null) return null;\nMatcher m = charsetPattern.matcher(contentType);\nif (m.find()) {\nString charset = m.group(1).trim();\ncharset = charset.replace(\"charset=\", \"\");\nreturn validateCharset(charset);\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:validateCharset(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String validateCharset(String cs) {\nif (cs == null || cs.length() == 0) return null;\ncs = cs.trim().replaceAll(\"[\\\"']\", \"\");\nif (Charset.isSupported(cs)) return cs;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.jsoup.helper.DataUtil:detectCharsetFromBom(Ljava/nio/ByteBuffer;)Lorg/jsoup/helper/DataUtil$BomCharset;",
            "method_body": "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {\nfinal Buffer buffer = byteData; // .mark and rewind used to return Buffer, now ByteBuffer, so cast for backward compat\nbuffer.mark();\nbyte[] bom = new byte[4];\nif (byteData.remaining() >= bom.length) {\nbyteData.get(bom);\nbuffer.rewind();\nif (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n} else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\nreturn null;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:<init>(Ljava/io/InputStream;II)V",
            "method_body": "private ConstrainableInputStream(InputStream in, int bufferSize, int maxSize) {\nsuper(in, bufferSize);\nValidate.isTrue(maxSize >= 0);\nthis.maxSize = maxSize;\nremaining = maxSize;\ncapped = maxSize != 0;\nstartTime = System.nanoTime();\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:wrap(Ljava/io/InputStream;II)Lorg/jsoup/internal/ConstrainableInputStream;",
            "method_body": "public static ConstrainableInputStream wrap(InputStream in, int bufferSize, int maxSize) {\nreturn in instanceof ConstrainableInputStream\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:read([BII)I",
            "method_body": "public int read(byte[] b, int off, int len) throws IOException {\nif (interrupted || capped && remaining <= 0)\nif (Thread.interrupted()) {\nif (expired())\nif (capped && len > remaining)\nfinal int read = super.read(b, off, len);\nremaining -= read;\nreturn read;\n} catch (SocketTimeoutException e) {\nreturn 0;\n}",
            "method_id": 159
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:readToByteBuffer(I)Ljava/nio/ByteBuffer;",
            "method_body": "public ByteBuffer readToByteBuffer(int max) throws IOException {\nValidate.isTrue(max >= 0, \"maxSize must be 0 (unlimited) or larger\");\nfinal boolean localCapped = max > 0; // still possibly capped in total stream\nfinal int bufferSize = localCapped && max < DefaultSize ? max : DefaultSize;\nfinal byte[] readBuffer = new byte[bufferSize];\nfinal ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\nint remaining = max;\nread = read(readBuffer);\nif (read == -1) break;\nif (localCapped) { // this local byteBuffer cap may be smaller than the overall maxSize (like when reading first bytes)\nif (read >= remaining) {\noutStream.write(readBuffer, 0, remaining);\nbreak;\nreturn ByteBuffer.wrap(outStream.toByteArray());\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:reset()V",
            "method_body": "public void reset() throws IOException {\nsuper.reset();\nremaining = maxSize - markpos;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:timeout(JJ)Lorg/jsoup/internal/ConstrainableInputStream;",
            "method_body": "public ConstrainableInputStream timeout(long startTimeNanos, long timeoutMillis) {\nthis.startTime = startTimeNanos;\nthis.timeout = timeoutMillis * 1000000;\nreturn this;\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.jsoup.internal.ConstrainableInputStream:expired()Z",
            "method_body": "private boolean expired() {\nif (timeout == 0)\nfinal long now = System.nanoTime();\nfinal long dur = now - startTime;\nreturn (dur > timeout);\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:<init>()V",
            "method_body": "private HttpConnection() {\nreq = new Request();\nres = new Response();\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:connect(Ljava/lang/String;)Lorg/jsoup/Connection;",
            "method_body": "public static Connection connect(String url) {\nConnection con = new HttpConnection();\ncon.url(url);\nreturn con;\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:encodeUrl(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String encodeUrl(String url) {\nURL u = new URL(url);\nreturn encodeUrl(u).toExternalForm();\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:encodeUrl(Ljava/net/URL;)Ljava/net/URL;",
            "method_body": "static URL encodeUrl(URL u) {\nString urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)\nurlS = urlS.replaceAll(\" \", \"%20\");\nfinal URI uri = new URI(urlS);\nreturn new URL(uri.toASCIIString());\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:url(Ljava/lang/String;)Lorg/jsoup/Connection;",
            "method_body": "public Connection url(String url) {\nValidate.notEmpty(url, \"Must supply a valid URL\");\nreq.url(new URL(encodeUrl(url)));\n}\nreturn this;\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:timeout(I)Lorg/jsoup/Connection;",
            "method_body": "public Connection timeout(int millis) {\nreq.timeout(millis);\nreturn this;\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:execute()Lorg/jsoup/Connection$Response;",
            "method_body": "public Connection.Response execute() throws IOException {\nres = Response.execute(req);\nreturn res;\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:<init>()V",
            "method_body": "private Base() {\nheaders = new LinkedHashMap<>();\ncookies = new LinkedHashMap<>();\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:url()Ljava/net/URL;",
            "method_body": "public URL url() {\nreturn url;\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:url(Ljava/net/URL;)Lorg/jsoup/Connection$Base;",
            "method_body": "public T url(URL url) {\nValidate.notNull(url, \"URL must not be null\");\nthis.url = url;\nreturn (T) this;\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:method()Lorg/jsoup/Connection$Method;",
            "method_body": "public Method method() {\nreturn method;\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:addHeader(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/Connection$Base;",
            "method_body": "public T addHeader(String name, String value) {\nValidate.notEmpty(name);\nvalue = value == null ? \"\" : value;\nList<String> values = headers(name);\nif (values.isEmpty()) {\nvalues = new ArrayList<>();\nheaders.put(name, values);\nvalues.add(fixHeaderEncoding(value));\nreturn (T) this;\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:headers(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> headers(String name) {\nValidate.notEmpty(name);\nreturn getHeadersCaseInsensitive(name);\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:fixHeaderEncoding(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String fixHeaderEncoding(String val) {\nbyte[] bytes = val.getBytes(\"ISO-8859-1\");\nif (!looksLikeUtf8(bytes))\nreturn new String(bytes, \"UTF-8\");\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:looksLikeUtf8([B)Z",
            "method_body": "private static boolean looksLikeUtf8(byte[] input) {\nint i = 0;\nif (input.length >= 3 && (input[0] & 0xFF) == 0xEF\nfor (int j = input.length; i < j; ++i) {\nint o = input[i];\nif ((o & 0x80) == 0) {\ncontinue; // ASCII\nreturn true;\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:hasHeader(Ljava/lang/String;)Z",
            "method_body": "public boolean hasHeader(String name) {\nValidate.notEmpty(name, \"Header name must not be empty\");\nreturn getHeadersCaseInsensitive(name).size() != 0;\n}",
            "method_id": 179
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:hasHeaderWithValue(Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "public boolean hasHeaderWithValue(String name, String value) {\nValidate.notEmpty(name);\nValidate.notEmpty(value);\nList<String> values = headers(name);\nfor (String candidate : values) {\nreturn false;\n}",
            "method_id": 180
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:multiHeaders()Ljava/util/Map;",
            "method_body": "public Map<String, List<String>> multiHeaders() {\nreturn headers;\n}",
            "method_id": 181
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:getHeadersCaseInsensitive(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "private List<String> getHeadersCaseInsensitive(String name) {\nValidate.notNull(name);\nfor (Map.Entry<String, List<String>> entry : headers.entrySet()) {\nif (name.equalsIgnoreCase(entry.getKey()))\n}\nreturn Collections.emptyList();\n}",
            "method_id": 182
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:cookies()Ljava/util/Map;",
            "method_body": "public Map<String, String> cookies() {\nreturn cookies;\n}",
            "method_id": 183
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:<init>()V",
            "method_body": "Request() {\ntimeoutMilliseconds = 30000; // 30 seconds\nmaxBodySizeBytes = 1024 * 1024; // 1MB\nfollowRedirects = true;\ndata = new ArrayList<>();\nmethod = Method.GET;\naddHeader(\"Accept-Encoding\", \"gzip\");\naddHeader(USER_AGENT, DEFAULT_UA);\nparser = Parser.htmlParser();\n}",
            "method_id": 184
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:proxy()Ljava/net/Proxy;",
            "method_body": "public Proxy proxy() {\nreturn proxy;\n}",
            "method_id": 185
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:timeout()I",
            "method_body": "public int timeout() {\nreturn timeoutMilliseconds;\n}",
            "method_id": 186
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:timeout(I)Lorg/jsoup/helper/HttpConnection$Request;",
            "method_body": "public Request timeout(int millis) {\nValidate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\");\ntimeoutMilliseconds = millis;\nreturn this;\n}",
            "method_id": 187
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:maxBodySize()I",
            "method_body": "public int maxBodySize() {\nreturn maxBodySizeBytes;\n}",
            "method_id": 188
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:ignoreContentType()Z",
            "method_body": "public boolean ignoreContentType() {\nreturn ignoreContentType;\n}",
            "method_id": 189
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:data()Ljava/util/Collection;",
            "method_body": "public Collection<Connection.KeyVal> data() {\nreturn data;\n}",
            "method_id": 190
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:requestBody()Ljava/lang/String;",
            "method_body": "public String requestBody() {\nreturn body;\n}",
            "method_id": 191
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Request:parser()Lorg/jsoup/parser/Parser;",
            "method_body": "public Parser parser() {\nreturn parser;\n}",
            "method_id": 192
        },
        {
            "method_signature": "org.jsoup.Connection$Method:<init>(Ljava/lang/String;IZ)V",
            "method_body": "Method(boolean hasBody) {\nthis.hasBody = hasBody;\n}",
            "method_id": 193
        },
        {
            "method_signature": "org.jsoup.Connection$Method:hasBody()Z",
            "method_body": "public final boolean hasBody() {\nreturn hasBody;\n}",
            "method_id": 194
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>()V",
            "method_body": "Response() {\nsuper();\n}",
            "method_id": 195
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>(Lorg/jsoup/helper/HttpConnection$Response;)V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate boolean inputStreamRead = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 196
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<clinit>()V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate boolean inputStreamRead = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 197
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req) throws IOException {\nreturn execute(req, null);\n}",
            "method_id": 198
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:execute(Lorg/jsoup/Connection$Request;Lorg/jsoup/helper/HttpConnection$Response;)Lorg/jsoup/helper/HttpConnection$Response;",
            "method_body": "static Response execute(Connection.Request req, Response previousResponse) throws IOException {\nValidate.notNull(req, \"Request must not be null\");\nString protocol = req.url().getProtocol();\nif (!protocol.equals(\"http\") && !protocol.equals(\"https\"))\nfinal boolean methodHasBody = req.method().hasBody();\nfinal boolean hasRequestBody = req.requestBody() != null;\nif (!methodHasBody)\nValidate.isFalse(hasRequestBody, \"Cannot set a request body for HTTP method \" + req.method());\nString mimeBoundary = null;\nif (req.data().size() > 0 && (!methodHasBody || hasRequestBody))\nelse if (methodHasBody)\nlong startTime = System.nanoTime();\nHttpURLConnection conn = createConnection(req);\nconn.connect();\nif (conn.getDoOutput())\nint status = conn.getResponseCode();\nres = new Response(previousResponse);\nres.setupFromConnection(conn, previousResponse);\nres.req = req;\nif (res.hasHeader(LOCATION) && req.followRedirects()) {\nif ((status < 200 || status >= 400) && !req.ignoreHttpErrors())\nString contentType = res.contentType();\nif (contentType != null\nif (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\nres.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\nif (conn.getContentLength() != 0 && req.method() != HEAD) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\nres.bodyStream = null;\nres.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\nif (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\")) {\n} else if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\")) {\nres.bodyStream = ConstrainableInputStream\n}\nres.executed = true;\nreturn res;\n}",
            "method_id": 199
        }
    ]
}