{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone",
    "test_body": "1215: public void testNextElementSiblingAfterClone() {\n1216: // via https://github.com/jhy/jsoup/issues/951\n1217: String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n1218: String expectedText = \"New element\";\n1219: String cloneExpect = \"New element in clone\";\n1220: 1221: Document original = Jsoup.parse(html);\n1222: Document clone = original.clone();\n1223: 1224: Element originalElement = original.body().child(0);\n1225: originalElement.after(\"<div>\" + expectedText + \"</div>\");\n1226: Element originalNextElementSibling = originalElement.nextElementSibling();\n1227: Element originalNextSibling = (Element) originalElement.nextSibling();\n1228: assertEquals(expectedText, originalNextElementSibling.text());\n1229: assertEquals(expectedText, originalNextSibling.text());\n1230: 1231: Element cloneElement = clone.body().child(0);\n1232: cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n1233: Element cloneNextElementSibling = cloneElement.nextElementSibling();\n1234: Element cloneNextSibling = (Element) cloneElement.nextSibling();\n1235: assertEquals(cloneExpect, cloneNextElementSibling.text());\n1236: assertEquals(cloneExpect, cloneNextSibling.text());\n1237: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:runParser()V",
            "method_body": "protected void runParser() {\nToken token = tokeniser.read();\nprocess(token);\ntoken.reset();\nif (token.type == Token.TokenType.EOF)\nbreak;\n}\n}",
            "method_id": 50,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nextSibling()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node nextSibling() {\nif (parentNode == null)\nfinal List<Node> siblings = parentNode.ensureChildNodes();\nfinal int index = siblingIndex+1;\nif (siblings.size() > index)\nreturn siblings.get(index);\nreturn null;\n}",
            "method_id": 51,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:clone()Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes clone() {\nclone = (Attributes) super.clone();\n}\nclone.size = size;\nkeys = copyOf(keys, size);\nvals = copyOf(vals, size);\nreturn clone;\n}",
            "method_id": 52,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Node:attr(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String attr(String attributeKey) {\nValidate.notNull(attributeKey);\nif (!hasAttributes())\nString val = attributes().getIgnoreCase(attributeKey);\nif (val.length() > 0)\nelse if (attributeKey.startsWith(\"abs:\"))\nelse return \"\";\n}",
            "method_id": 53,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Node:addChildren(I[Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void addChildren(int index, Node... children) {\nValidate.noNullElements(children);\nfinal List<Node> nodes = ensureChildNodes();\nfor (Node child : children) {\nreparentChild(child);\nnodes.addAll(index, Arrays.asList(children));\nreindexChildren(index);\n}",
            "method_id": 54,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nValidate.notNull(tag);\nValidate.notNull(baseUri);\nchildNodes = EMPTY_NODES;\nthis.baseUri = baseUri;\nthis.attributes = attributes;\nthis.tag = tag;\n}",
            "method_id": 55,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Element:appendChild(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element appendChild(Node child) {\nValidate.notNull(child);\nreparentChild(child);\nensureChildNodes();\nchildNodes.add(child);\nchild.setSiblingIndex(childNodes.size() - 1);\nreturn this;\n}",
            "method_id": 56,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:<init>()V",
            "method_body": "private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\nprivate boolean prettyPrint = true;\nprivate boolean outline = false;\nprivate int indentAmount = 1;\nprivate Syntax syntax = Syntax.html;\npublic OutputSettings() {\ncharset(Charset.forName(\"UTF8\"));\n}",
            "method_id": 57,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:matches(Ljava/lang/String;)Z",
            "method_body": "boolean matches(String seq) {\nbufferUp();\nint scanLength = seq.length();\nif (scanLength > bufLength - bufPos)\nfor (int offset = 0; offset < scanLength; offset++)\nif (seq.charAt(offset) != charBuf[bufPos +offset])\nreturn false;\n}",
            "method_id": 58,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$35:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nString name = r.consumeToAnySorted(attributeNameCharsSorted);\nt.tagPending.appendAttributeName(name);\nchar c = r.consume();\nswitch (c) {\nt.transition(BeforeAttributeValue);\nbreak;\n}",
            "method_id": 59,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.parser.Token$Doctype:reset()Lorg/jsoup/parser/Token;",
            "method_body": "Token reset() {\nreset(name);\npubSysKey = null;\nreset(publicIdentifier);\nreset(systemIdentifier);\nforceQuirks = false;\nreturn this;\n}",
            "method_id": 60,
            "loc": 8
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:clone()Lorg/jsoup/nodes/Document$OutputSettings;",
            "method_body": "public OutputSettings clone() {\nclone = (OutputSettings) super.clone();\n}\nclone.charset(charset.name()); // new charset and charset encoder\nclone.escapeMode = Entities.EscapeMode.valueOf(escapeMode.name());\nreturn clone;\n}",
            "method_id": 61,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.nodes.Node:addSiblingHtml(ILjava/lang/String;)V",
            "method_body": "private void addSiblingHtml(int index, String html) {\nValidate.notNull(html);\nValidate.notNull(parentNode);\nElement context = parent() instanceof Element ? (Element) parent() : null;\nList<Node> nodes = Parser.parseFragment(html, context, baseUri());\nparentNode.addChildren(index, nodes.toArray(new Node[nodes.size()]));\n}",
            "method_id": 62,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void insertNode(Node node) {\nif (stack.size() == 0)\ndoc.appendChild(node);\nelse if (isFosterInserts())\ncurrentElement().appendChild(node);\nif (node instanceof Element && ((Element) node).tag().isFormListed()) {\n}",
            "method_id": 63,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:popStackToClose(Ljava/lang/String;)V",
            "method_body": "void popStackToClose(String elName) {\nfor (int pos = stack.size() -1; pos >= 0; pos--) {\nElement next = stack.get(pos);\nstack.remove(pos);\nif (next.nodeName().equals(elName))\nbreak;\n}",
            "method_id": 64,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase(Ljava/lang/String;)I",
            "method_body": "private int indexOfKeyIgnoreCase(String key) {\nValidate.notNull(key);\nfor (int i = 0; i < size; i++) {\nif (key.equalsIgnoreCase(keys[i]))\nreturn i;\nreturn NotFound;\n}",
            "method_id": 65,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.nodes.Node:removeChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void removeChild(Node out) {\nValidate.isTrue(out.parentNode == this);\nfinal int index = out.siblingIndex;\nensureChildNodes().remove(index);\nreindexChildren(index);\nout.parentNode = null;\n}",
            "method_id": 66,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.nodes.Node:doClone(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Node;",
            "method_body": "protected Node doClone(Node parent) {\nclone = (Node) super.clone();\n}\nclone.parentNode = parent; // can be null, to create an orphan split\nclone.siblingIndex = parent == null ? 0 : siblingIndex;\nreturn clone;\n}",
            "method_id": 67,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:<init>(Ljava/io/Reader;I)V",
            "method_body": "public CharacterReader(Reader input, int sz) {\nValidate.notNull(input);\nValidate.isTrue(input.markSupported());\nreader = input;\ncharBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];\nbufferUp();\n}",
            "method_id": 68,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeTo(C)Ljava/lang/String;",
            "method_body": "public String consumeTo(char c) {\nint offset = nextIndexOf(c);\nif (offset != -1) {\nString consumed = cacheString(charBuf, stringCache, bufPos, offset);\nbufPos += offset;\nreturn consumed;\n}",
            "method_id": 69,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$34:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.tagPending.newAttribute();\nr.unconsume();\nt.transition(AttributeName);\n}",
            "method_id": 70,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$41:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.emitTagPending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 71,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:ensureAttributes()V",
            "method_body": "private void ensureAttributes() {\nif (!hasAttributes()) {\nObject coreValue = value;\nAttributes attributes = new Attributes();\nvalue = attributes;\nif (coreValue != null)\n}",
            "method_id": 72,
            "loc": 7
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insert(Lorg/jsoup/parser/Token$StartTag;)Lorg/jsoup/nodes/Element;",
            "method_body": "Element insert(Token.StartTag startTag) {\nif (startTag.isSelfClosing()) {\nElement el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));\ninsert(el);\nreturn el;\n}",
            "method_id": 73,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insert(Lorg/jsoup/parser/Token$Character;)V",
            "method_body": "void insert(Token.Character characterToken) {\nString tagName = currentElement().tagName();\nif (tagName.equals(\"script\") || tagName.equals(\"style\"))\nnode = new TextNode(characterToken.getData());\ncurrentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.\n}",
            "method_id": 74,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:add(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "private void add(String key, String value) {\ncheckCapacity(size + 1);\nkeys[size] = key;\nvals[size] = value;\nsize++;\n}",
            "method_id": 75,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes put(String key, String value) {\nint i = indexOfKey(key);\nif (i != NotFound)\nadd(key, value);\nreturn this;\n}",
            "method_id": 76,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:normalizeTag(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "String normalizeTag(String name) {\nname = name.trim();\nif (!preserveTagCase)\nname = lowerCase(name);\nreturn name;\n}",
            "method_id": 77,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Node:root()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node root() {\nNode node = this;\nwhile (node.parentNode != null)\nnode = node.parentNode;\nreturn node;\n}",
            "method_id": 78,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Node:setParentNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void setParentNode(Node parentNode) {\nValidate.notNull(parentNode);\nif (this.parentNode != null)\nthis.parentNode.removeChild(this);\nthis.parentNode = parentNode;\n}",
            "method_id": 79,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Element:accumulateParents(Lorg/jsoup/nodes/Element;Lorg/jsoup/select/Elements;)V",
            "method_body": "private static void accumulateParents(Element el, Elements parents) {\nElement parent = el.parent();\nif (parent != null && !parent.tagName().equals(\"#root\")) {\nparents.add(parent);\naccumulateParents(parent, parents);\n}",
            "method_id": 80,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consume()C",
            "method_body": "char consume() {\nbufferUp();\nchar val = isEmpty() ? EOF : charBuf[bufPos];\nbufPos++;\nreturn val;\n}",
            "method_id": 81,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:nextIndexOf(C)I",
            "method_body": "int nextIndexOf(char c) {\nbufferUp();\nfor (int i = bufPos; i < bufLength; i++) {\nif (c == charBuf[i])\nreturn i - bufPos;\n}",
            "method_id": 82,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$9:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.isEmpty()) {\n} else if (r.matchesLetter()) {\nt.createTagPending(false);\nt.transition(TagName);\n}",
            "method_id": 83,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$37:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(AttributeValue_doubleQuoted);\nbreak;\n}",
            "method_id": 84,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$51:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.transition(BeforeDoctypeName);\nbreak;\n}",
            "method_id": 85,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$52:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nif (r.matchesLetter()) {\nt.createDoctypePending();\nt.transition(DoctypeName);\nreturn;\n}",
            "method_id": 86,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState:isWhitespace(Lorg/jsoup/parser/Token;)Z",
            "method_body": "abstract boolean process(Token t, HtmlTreeBuilder tb);\nif (t.isCharacter()) {\nString data = t.asCharacter().getData();\nreturn isWhitespace(data);\nreturn false;\n}",
            "method_id": 87,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState:isWhitespace(Ljava/lang/String;)Z",
            "method_body": "private static boolean isWhitespace(String data) {\nfor (int i = 0; i < data.length(); i++) {\nchar c = data.charAt(i);\nif (!StringUtil.isWhitespace(c))\nreturn false;\n}",
            "method_id": 88,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState$21:process(Lorg/jsoup/parser/Token;Lorg/jsoup/parser/HtmlTreeBuilder;)Z",
            "method_body": "boolean process(Token t, HtmlTreeBuilder tb) {\nif (t.isComment()) {\n} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {\n} else if (t.isEOF()) {\nreturn true;\n}",
            "method_id": 89,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 90,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:attr(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String attr(String key) {\nValidate.notNull(key);\nif (!hasAttributes()) {\nreturn key.equals(nodeName()) ? (String) value : EmptyString;\nreturn super.attr(key);\n}",
            "method_id": 91,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:attr(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Node;",
            "method_body": "public Node attr(String key, String value) {\nif (!hasAttributes() && key.equals(nodeName())) {\nensureAttributes();\nsuper.attr(key, value);\nreturn this;\n}",
            "method_id": 92,
            "loc": 6
        },
        {
            "method_signature": "org.jsoup.nodes.Element:ensureChildNodes()Ljava/util/List;",
            "method_body": "protected List<Node> ensureChildNodes() {\nif (childNodes == EMPTY_NODES) {\nchildNodes = new NodeList(4);\nreturn childNodes;\n}",
            "method_id": 93,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.parser.Token$StartTag:<init>()V",
            "method_body": "StartTag() {\nsuper();\nattributes = new Attributes();\ntype = TokenType.StartTag;\n}",
            "method_id": 94,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.nodes.Document:clone()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document clone() {\nDocument clone = (Document) super.clone();\nclone.outputSettings = this.outputSettings.clone();\nreturn clone;\n}",
            "method_id": 95,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reindexChildren(I)V",
            "method_body": "private void reindexChildren(int start) {\nfinal List<Node> childNodes = ensureChildNodes();\nfor (int i = start; i < childNodes.size(); i++) {\nchildNodes.get(i).setSiblingIndex(i);\n}",
            "method_id": 96,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.parser.TreeBuilder:parse(Ljava/io/Reader;Ljava/lang/String;Lorg/jsoup/parser/ParseErrorList;Lorg/jsoup/parser/ParseSettings;)Lorg/jsoup/nodes/Document;",
            "method_body": "Document parse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\ninitialiseParse(input, baseUri, errors, settings);\nrunParser();\nreturn doc;\n}",
            "method_id": 97,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:reconstructFormattingElements()V",
            "method_body": "void reconstructFormattingElements() {\nElement last = lastFormattingElement();\nif (last == null || onStack(last))\nreturn;\n}",
            "method_id": 98,
            "loc": 5
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeValue(Ljava/lang/String;)V",
            "method_body": "final void appendAttributeValue(String append) {\nensureAttributeValue();\nif (pendingAttributeValue.length() == 0) {\npendingAttributeValueS = append;\n}",
            "method_id": 99,
            "loc": 5
        }
    ]
}