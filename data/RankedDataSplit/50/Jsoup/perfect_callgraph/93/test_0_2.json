{
    "bug_id": 93,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.FormElementTest.createsFormData",
    "test_body": "27: @Test public void createsFormData() {\n28: String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n29: \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n30: \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n31: \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n32: \"<input name='ten' value='text' disabled>\" +\n33: \"<input name='eleven' value='text' type='button'>\" +\n34: \"</form>\";\n35: Document doc = Jsoup.parse(html);\n36: FormElement form = (FormElement) doc.select(\"form\").first();\n37: List<Connection.KeyVal> data = form.formData();\n38: 39: assertEquals(6, data.size());\n40: assertEquals(\"one=two\", data.get(0).toString());\n41: assertEquals(\"three=four\", data.get(1).toString());\n42: assertEquals(\"three=five\", data.get(2).toString());\n43: assertEquals(\"six=seven\", data.get(3).toString());\n44: assertEquals(\"seven=on\", data.get(4).toString()); // set\n45: assertEquals(\"eight=on\", data.get(5).toString()); // default\n46: // nine should not appear, not checked checkbox\n47: // ten should not appear, disabled\n48: // eleven should not appear, button\n49: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Tag:name()Ljava/lang/String;",
            "method_body": "final String name() { // preserves case, for input into Tag.valueOf (which may drop case)\nValidate.isFalse(tagName == null || tagName.length() == 0);\nreturn tagName;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:normalName()Ljava/lang/String;",
            "method_body": "final String normalName() { // lower case, used in tree building for working out where in tree it should go\nreturn normalName;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:name(Ljava/lang/String;)Lorg/jsoup/parser/Token$Tag;",
            "method_body": "final Tag name(String name) {\ntagName = name;\nnormalName = lowerCase(name);\nreturn this;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:isSelfClosing()Z",
            "method_body": "final boolean isSelfClosing() {\nreturn selfClosing;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendTagName(Ljava/lang/String;)V",
            "method_body": "final void appendTagName(String append) {\ntagName = tagName == null ? append : tagName.concat(append);\nnormalName = lowerCase(tagName);\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendTagName(C)V",
            "method_body": "final void appendTagName(char append) {\nappendTagName(String.valueOf(append));\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeName(Ljava/lang/String;)V",
            "method_body": "final void appendAttributeName(String append) {\npendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeValue(Ljava/lang/String;)V",
            "method_body": "final void appendAttributeValue(String append) {\nensureAttributeValue();\nif (pendingAttributeValue.length() == 0) {\npendingAttributeValueS = append;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:ensureAttributeValue()V",
            "method_body": "private void ensureAttributeValue() {\nhasPendingAttributeValue = true;\nif (pendingAttributeValueS != null) {\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.Token$StartTag:reset()Lorg/jsoup/parser/Token$Tag;",
            "method_body": "Tag reset() {\nsuper.reset();\nattributes = new Attributes();\nreturn this;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:<init>()V",
            "method_body": "static final int NotFound = -1;\nprivate int size = 0; // number of slots used (not capacity, which is keys.length\nString[] keys = Empty;\nString[] vals = Empty;\nValidate.isTrue(minNewSize >= size);\nint curSize = keys.length;\nif (curSize >= minNewSize)\nreturn;\nint newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;\nif (minNewSize > newSize)\nkeys = copyOf(keys, newSize);\nvals = copyOf(vals, newSize);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:<clinit>()V",
            "method_body": "protected static final String dataPrefix = \"data-\";\nprivate static final String[] Empty = {};",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:checkCapacity(I)V",
            "method_body": "private void checkCapacity(int minNewSize) {\nValidate.isTrue(minNewSize >= size);\nint curSize = keys.length;\nif (curSize >= minNewSize)\nreturn;\nint newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;\nif (minNewSize > newSize)\nkeys = copyOf(keys, newSize);\nvals = copyOf(vals, newSize);\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:copyOf([Ljava/lang/String;I)[Ljava/lang/String;",
            "method_body": "private static String[] copyOf(String[] orig, int size) {\nfinal String[] copy = new String[size];\nSystem.arraycopy(orig, 0, copy, 0,\nreturn copy;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:indexOfKeyIgnoreCase(Ljava/lang/String;)I",
            "method_body": "private int indexOfKeyIgnoreCase(String key) {\nValidate.notNull(key);\nfor (int i = 0; i < size; i++) {\nif (key.equalsIgnoreCase(keys[i]))\nreturn i;\nreturn NotFound;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:checkNotNull(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String checkNotNull(String val) {\nreturn val == null ? EmptyString : val;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:getIgnoreCase(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getIgnoreCase(String key) {\nint i = indexOfKeyIgnoreCase(key);\nreturn i == NotFound ? EmptyString : checkNotNull(vals[i]);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:add(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes add(String key, String value) {\ncheckCapacity(size + 1);\nkeys[size] = key;\nvals[size] = value;\nsize++;\nreturn this;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:hasKeyIgnoreCase(Ljava/lang/String;)Z",
            "method_body": "public boolean hasKeyIgnoreCase(String key) {\nreturn indexOfKeyIgnoreCase(key) != NotFound;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn size == 0;\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:normalize()V",
            "method_body": "public void normalize() {\nfor (int i = 0; i < size; i++) {\nkeys[i] = lowerCase(keys[i]);\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:deduplicate(Lorg/jsoup/parser/ParseSettings;)I",
            "method_body": "public int deduplicate(ParseSettings settings) {\nif (isEmpty())\nboolean preserve = settings.preserveAttributeCase();\nint dupes = 0;\nOUTER: for (int i = 0; i < keys.length; i++) {\nfor (int j = i + 1; j < keys.length; j++) {\nif (keys[j] == null)\ncontinue OUTER; // keys.length doesn't shrink when removing, so re-test\nif ((preserve && keys[i].equals(keys[j])) || (!preserve && keys[i].equalsIgnoreCase(keys[j]))) {\nreturn dupes;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:<init>(ZZ)V",
            "method_body": "public ParseSettings(boolean tag, boolean attribute) {\npreserveTagCase = tag;\npreserveAttributeCase = attribute;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:<clinit>()V",
            "method_body": "public static final ParseSettings htmlDefault;\nhtmlDefault = new ParseSettings(false, false);\npreserveCase = new ParseSettings(true, true);\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:preserveAttributeCase()Z",
            "method_body": "public boolean preserveAttributeCase() {\nreturn preserveAttributeCase;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:normalizeTag(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String normalizeTag(String name) {\nname = name.trim();\nif (!preserveTagCase)\nname = lowerCase(name);\nreturn name;\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.jsoup.parser.ParseSettings:normalizeAttributes(Lorg/jsoup/nodes/Attributes;)Lorg/jsoup/nodes/Attributes;",
            "method_body": "Attributes normalizeAttributes(Attributes attributes) {\nif (!preserveAttributeCase) {\nattributes.normalize();\nreturn attributes;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:canAddError()Z",
            "method_body": "boolean canAddError() {\nreturn size() < maxSize;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>()V",
            "method_body": "protected Node() {\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.jsoup.nodes.Node:attr(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String attr(String attributeKey) {\nValidate.notNull(attributeKey);\nif (!hasAttributes())\nString val = attributes().getIgnoreCase(attributeKey);\nif (val.length() > 0)\nreturn val;\nelse if (attributeKey.startsWith(\"abs:\"))\nelse return \"\";\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.jsoup.nodes.Node:hasAttr(Ljava/lang/String;)Z",
            "method_body": "public boolean hasAttr(String attributeKey) {\nValidate.notNull(attributeKey);\nif (attributeKey.startsWith(\"abs:\")) {\nreturn attributes().hasKeyIgnoreCase(attributeKey);\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.jsoup.nodes.Node:parentNode()Lorg/jsoup/nodes/Node;",
            "method_body": "public final Node parentNode() {\nreturn parentNode;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nodelistChanged()V",
            "method_body": "void nodelistChanged() {\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.jsoup.nodes.Node:setParentNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void setParentNode(Node parentNode) {\nValidate.notNull(parentNode);\nif (this.parentNode != null)\nthis.parentNode = parentNode;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void reparentChild(Node child) {\nchild.setParentNode(this);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.jsoup.nodes.Node:setSiblingIndex(I)V",
            "method_body": "protected void setSiblingIndex(int siblingIndex) {\nthis.siblingIndex = siblingIndex;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nValidate.notNull(tag);\nValidate.notNull(baseUri);\nchildNodes = EMPTY_NODES;\nthis.baseUri = baseUri;\nthis.attributes = attributes;\nthis.tag = tag;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V",
            "method_body": "public Element(Tag tag, String baseUri) {\nthis(tag, baseUri, null);\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<clinit>()V",
            "method_body": "private static final List<Node> EMPTY_NODES = Collections.emptyList();\nprivate static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.jsoup.nodes.Element:ensureChildNodes()Ljava/util/List;",
            "method_body": "protected List<Node> ensureChildNodes() {\nif (childNodes == EMPTY_NODES) {\nchildNodes = new NodeList(this, 4);\nreturn childNodes;\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.jsoup.nodes.Element:hasAttributes()Z",
            "method_body": "protected boolean hasAttributes() {\nreturn attributes != null;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.jsoup.nodes.Element:attributes()Lorg/jsoup/nodes/Attributes;",
            "method_body": "public Attributes attributes() {\nif (!hasAttributes())\nreturn attributes;\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.jsoup.nodes.Element:childNodeSize()I",
            "method_body": "public int childNodeSize() {\nreturn childNodes.size();\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.jsoup.nodes.Element:tag()Lorg/jsoup/parser/Tag;",
            "method_body": "public Tag tag() {\nreturn tag;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.jsoup.nodes.Element:isBlock()Z",
            "method_body": "public boolean isBlock() {\nreturn tag.isBlock();\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.jsoup.nodes.Element:nodelistChanged()V",
            "method_body": "void nodelistChanged() {\nsuper.nodelistChanged();\nshadowChildrenRef = null;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.jsoup.nodes.Element:appendChild(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element appendChild(Node child) {\nValidate.notNull(child);\nreparentChild(child);\nensureChildNodes();\nchildNodes.add(child);\nchild.setSiblingIndex(childNodes.size() - 1);\nreturn this;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.jsoup.nodes.Element:appendNormalisedText(Ljava/lang/StringBuilder;Lorg/jsoup/nodes/TextNode;)V",
            "method_body": "private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\nString text = textNode.getWholeText();\nif (preserveWhitespace(textNode.parentNode) || textNode instanceof CDataNode)\naccum.append(text);\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.jsoup.nodes.Element:preserveWhitespace(Lorg/jsoup/nodes/Node;)Z",
            "method_body": "static boolean preserveWhitespace(Node node) {\nif (node instanceof Element) {\nElement el = (Element) node;\nint i = 0;\nif (el.tag.preserveWhitespace())\nreturn true;\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.jsoup.nodes.Document:parser(Lorg/jsoup/parser/Parser;)Lorg/jsoup/nodes/Document;",
            "method_body": "public Document parser(Parser parser) {\nthis.parser = parser;\nreturn this;\n}",
            "method_id": 149
        }
    ]
}