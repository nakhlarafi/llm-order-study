{
    "bug_id": 12,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.testByAttributeRegexCombined",
    "test_body": "127: @Test public void testByAttributeRegexCombined() {\n128: Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n129: Elements els = doc.select(\"div table[class~=x|y]\");\n130: assertEquals(1, els.size());\n131: assertEquals(\"Hello\", els.text());\n132: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Tag:setFormatAsInline()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setFormatAsInline() {\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.select.Selector:findElements()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements findElements() {\nif (tq.matchChomp(\"#\")) {\n} else if (tq.matchChomp(\".\")) {\n} else if (tq.matchesWord()) {\nreturn byTag();\n} else if (tq.matches(\"[\")) {\nreturn byAttribute();\n} else if (tq.matchChomp(\"*\")) {\n} else if (tq.matchChomp(\":lt(\")) {\n} else if (tq.matchChomp(\":gt(\")) {\n} else if (tq.matchChomp(\":eq(\")) {\n} else if (tq.matches(\":has(\")) {\n} else if (tq.matches(\":contains(\")) {\n} else if (tq.matches(\":containsOwn(\")) {\n} else if (tq.matches(\":matches(\")) {\n} else if (tq.matches(\":matchesOwn(\")) {\n} else if (tq.matches(\":not(\")) {\nthrow new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseAttribute(Lorg/jsoup/parser/Tag;)Lorg/jsoup/nodes/Attribute;",
            "method_body": "private Attribute parseAttribute(Tag tag) {\ntq.consumeWhitespace();\nString key = tq.consumeAttributeKey();\nString value = \"\";\ntq.consumeWhitespace();\nif (tq.matchChomp(\"=\")) {\ntq.consumeWhitespace();\nif (tq.matchChomp(SQ)) {\n} else if (tq.matchChomp(DQ)) {\nStringBuilder valueAccum = new StringBuilder();\nwhile (!(tq.matchesAny(\"<\", \">\") || (tag.isEmpty() && tq.matches(\"/>\")))  && !tq.matchesWhitespace() && !tq.isEmpty()) {\nvalueAccum.append(tq.consume());\nvalue = valueAccum.toString();\ntq.consumeWhitespace();\nif (key.length() != 0)\nreturn Attribute.createFromEncoded(key, value);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$EscapeMode:<init>(Ljava/lang/String;ILjava/util/Map;)V",
            "method_body": "EscapeMode(Map<Character, String> map) {\nthis.map = map;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.parser.Parser:popStackToSuitableContainer(Lorg/jsoup/parser/Tag;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element popStackToSuitableContainer(Tag tag) {\nwhile (!stack.isEmpty()) {\nif (last().tag().canContain(tag))\nreturn last();\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.select.Selector:combinator(C)V",
            "method_body": "private void combinator(char combinator) {\ntq.consumeWhitespace();\nString subQuery = tq.consumeToAny(combinators);\nif (combinator == '>')\nelse if (combinator == ' ')\noutput = filterForDescendants(elements, select(subQuery, elements));\nelse if (combinator == '+')\nelse if (combinator == '~')\noutput = filterForGeneralSiblings(elements, select(subQuery, root));\nelements.clear(); elements.addAll(output);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainingLength()I",
            "method_body": "private int remainingLength() {\nreturn queue.length() - pos;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.select.Selector:<clinit>()V",
            "method_body": "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\nprivate final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createBlock(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createBlock(String tagName) {\nreturn register(new Tag(tagName));\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWord()Z",
            "method_body": "public boolean matchesWord() {\nreturn !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodes().size() > 0) {\nnode = node.childNode(0);\ndepth++;\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nnode = node.parent();\ndepth--;\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\nnode = node.nextSibling();\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.jsoup.select.Selector:filterForSelf(Ljava/util/Collection;Ljava/util/Collection;)Lorg/jsoup/select/Elements;",
            "method_body": "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) {\nElements children = new Elements();\nCHILD: for (Element c : candidates) {\nfor (Element p : parents) {\nif (c.equals(p)) {\nchildren.add(c);\ncontinue CHILD;\nreturn children;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nif (node instanceof Element) {\nElement el = (Element) node;\nif (eval.matches(el, el))\nelements.add(el);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator$Attribute:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element element) {\nreturn element.hasAttr(key);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "protected Node(String baseUri, Attributes attributes) {\nValidate.notNull(baseUri);\nValidate.notNull(attributes);\nchildNodes = new ArrayList<Node>(4);\nthis.baseUri = baseUri.trim();\nthis.attributes = attributes;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator:<init>()V",
            "method_body": "protected Evaluator() {}\nprotected Evaluator() {}",
            "method_id": 65
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeElementSelector()Ljava/lang/String;",
            "method_body": "public String consumeElementSelector() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>()V",
            "method_body": "public Elements() {\ncontents = new ArrayList<Element>();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.jsoup.parser.Parser:popStackToClose(Lorg/jsoup/parser/Tag;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element popStackToClose(Tag tag) {\nint counter = 0;\nElement elToClose = null;\nfor (int i = stack.size() -1; i > 0; i--) {\ncounter++;\nElement el = stack.get(i);\nTag elTag = el.tag();\nif (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body\n} else if (elTag.equals(tag)) {\nelToClose = el;\nbreak;\nif (elToClose != null) {\nfor (int i = 0; i < counter; i++) {\nstack.removeLast();\nreturn elToClose;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normalise()Lorg/jsoup/nodes/Document;",
            "method_body": "public Document normalise() {\nElement htmlEl = findFirstElementByTagName(\"html\", this);\nif (htmlEl == null)\nif (head() == null)\nif (body() == null)\nnormaliseTextNodes(head());\nnormaliseTextNodes(htmlEl);\nnormaliseTextNodes(this);\nnormaliseStructure(\"head\", htmlEl);\nnormaliseStructure(\"body\", htmlEl);\nreturn this;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.jsoup.nodes.Document:head()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element head() {\nreturn findFirstElementByTagName(\"head\", this);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getImplicitParent()Lorg/jsoup/parser/Tag;",
            "method_body": "Tag getImplicitParent() {\nreturn (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void reparentChild(Node child) {\nif (child.parentNode != null)\nchild.setParentNode(this);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainInlineOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainInlineOnly() {\ncanContainBlock = false;\ncanContainInline = true;\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nextSibling()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node nextSibling() {\nif (parentNode == null)\nreturn null; // root\nList<Node> siblings = parentNode.childNodes;\nInteger index = siblingIndex();\nValidate.notNull(index);\nif (siblings.size() > index+1)\nreturn siblings.get(index+1);\nreturn null;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setEmpty()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setEmpty() {\ncanContainBlock = false;\ncanContainInline = false;\nempty = true;\nreturn this;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeTagName()Ljava/lang/String;",
            "method_body": "public String consumeTagName() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.jsoup.nodes.Node:hashCode()I",
            "method_body": "public int hashCode() {\nint result = parentNode != null ? parentNode.hashCode() : 0;\nresult = 31 * result + (attributes != null ? attributes.hashCode() : 0);\nreturn result;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.jsoup.parser.Tag:hashCode()I",
            "method_body": "public int hashCode() {\nint result = tagName != null ? tagName.hashCode() : 0;\nresult = 31 * result + (isBlock ? 1 : 0);\nresult = 31 * result + (canContainBlock ? 1 : 0);\nresult = 31 * result + (canContainInline ? 1 : 0);\nresult = 31 * result + (optionalClosing ? 1 : 0);\nresult = 31 * result + (empty ? 1 : 0);\nreturn result;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setExcludes([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setExcludes(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nexcludes = Collections.emptyList();\nexcludes = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nexcludes.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(Node node, int depth) {\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.jsoup.select.Selector:addElements(Ljava/util/Collection;)V",
            "method_body": "private void addElements(Collection<Element> add) {\nelements.addAll(add);\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:<init>(Lorg/jsoup/select/Elements;Lorg/jsoup/nodes/Evaluator;)V",
            "method_body": "Accumulator(Elements elements, Evaluator eval) {\nthis.elements = elements;\nthis.eval = eval;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.jsoup.nodes.Element:parent()Lorg/jsoup/nodes/Element;",
            "method_body": "public final Element parent() {\nreturn (Element) parentNode;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.jsoup.select.Elements:add(Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean add(Element element) {return contents.add(element);}\npublic boolean add(Element element) {return contents.add(element);}",
            "method_id": 85
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchChomp(Ljava/lang/String;)Z",
            "method_body": "public boolean matchChomp(String seq) {\nif (matches(seq)) {\npos += seq.length();\nreturn true;\nreturn false;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.jsoup.parser.Parser:<clinit>()V",
            "method_body": "private static final String SQ = \"'\";\nprivate static final Tag htmlTag = Tag.valueOf(\"html\");\nprivate static final Tag headTag = Tag.valueOf(\"head\");\nprivate static final Tag bodyTag = Tag.valueOf(\"body\");\nprivate static final Tag titleTag = Tag.valueOf(\"title\");\nprivate static final Tag textareaTag = Tag.valueOf(\"textarea\");\nprivate boolean relaxed = false;\nprivate Parser(String html, String baseUri, boolean isBodyFragment) {\nValidate.notNull(html);\nValidate.notNull(baseUri);\nstack = new LinkedList<Element>();\ntq = new TokenQueue(html);\nthis.baseUri = baseUri;\nif (isBodyFragment) {\ndoc = new Document(baseUri);\nstack.add(doc);\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainder()Ljava/lang/String;",
            "method_body": "public String remainder() {\nStringBuilder accum = new StringBuilder();\nwhile (!isEmpty()) {\naccum.append(consume());\nreturn accum.toString();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.jsoup.select.Selector:intersectElements(Ljava/util/Collection;)V",
            "method_body": "private void intersectElements(Collection<Element> intersect) {\nelements.retainAll(intersect);\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:hashCode()I",
            "method_body": "public int hashCode() {\nreturn attributes != null ? attributes.hashCode() : 0;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.nodes.Node:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nreturn false;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn tagName;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:peek()C",
            "method_body": "public char peek() {\nreturn isEmpty() ? 0 : queue.charAt(pos);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isValidAncestor(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean isValidAncestor(Tag child) {\nif (child.ancestors.isEmpty())\nfor (int i = 0; i < child.ancestors.size(); i++)\nif (this.equals(child.ancestors.get(i)))\nreturn true;\nreturn false;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator$Tag:<init>(Ljava/lang/String;)V",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag (String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equals(tagName));\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWhitespace()Z",
            "method_body": "public boolean consumeWhitespace() {\nboolean seen = false;\nwhile (matchesWhitespace()) {\npos++;\nseen = true;\nreturn seen;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWhitespace()Z",
            "method_body": "public boolean matchesWhitespace() {\nreturn !isEmpty() && Character.isWhitespace(queue.charAt(pos));\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Ljava/lang/String;Ljava/lang/Iterable;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(String query, Iterable<Element> roots) {\nValidate.notEmpty(query);\nValidate.notNull(roots);\nLinkedHashSet<Element> elements = new LinkedHashSet<Element>();\nfor (Element root : roots) {\nelements.addAll(select(query, root));\n}\nreturn new Elements(elements);\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 99
        }
    ]
}