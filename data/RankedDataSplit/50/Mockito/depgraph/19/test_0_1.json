{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "113: public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\n114: MockitoAnnotations.initMocks(this);\n115: assertNull(otherSuperUnderTesting.candidate1);\n116: assertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:checkNotInner(Ljava/lang/reflect/Field;)V",
            "method_body": "private void checkNotInner(Field field) {\nif(field.getType().isMemberClass() && !Modifier.isStatic(field.getType().getModifiers())) {\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:checkNotLocal(Ljava/lang/reflect/Field;)V",
            "method_body": "private void checkNotLocal(Field field) {\nif(field.getType().isLocalClass()) {\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:assertNoAnnotations(Ljava/lang/reflect/Field;[Ljava/lang/Class;)V",
            "method_body": "void assertNoAnnotations(final Field field, final Class... annotations) {\nfor (Class annotation : annotations) {\nif (field.isAnnotationPresent(annotation)) {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.ConstructorInjection:processInjection(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "public boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {\nSimpleArgumentResolver simpleArgumentResolver = new SimpleArgumentResolver(mockCandidates);\nFieldInitializationReport report = new FieldInitializer(fieldOwner, field, simpleArgumentResolver).initialize();\nreturn report.fieldWasInitializedUsingContructorArgs();\n} catch (MockitoException e) {\nif(e.getCause() instanceof InvocationTargetException) {\nreturn false;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:relayProcessToNextStrategy(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "protected abstract boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates);\nreturn nextStrategy != null && nextStrategy.process(field, fieldOwner, mockCandidates);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:processInjection(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\nreturn false;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver) {\nthis(fieldOwner, field, new ParameterizedConstructorInstantiator(fieldOwner, field, argResolver));\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:process(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z",
            "method_body": "public boolean process(Field onField, Object fieldOwnedBy, Set<Object> mockCandidates) {\nif(processInjection(onField, fieldOwnedBy, mockCandidates)) {\nreturn true;\nreturn relayProcessToNextStrategy(onField, fieldOwnedBy, mockCandidates);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver:<init>(Ljava/util/Set;)V",
            "method_body": "public SimpleArgumentResolver(Set<Object> objects) {\nthis.objects = objects;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldInitializer(Object fieldOwner, Field field) {\nthis(fieldOwner, field, new NoArgConstructorInstantiator(fieldOwner, field));\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "FieldInitializationReport instantiate();\nNoArgConstructorInstantiator(Object testClass, Field field) {\nthis.testClass = testClass;\nthis.field = field;\n}\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = field.getType().getDeclaredConstructor();\nchanger.enableAccess(constructor);\nfinal Object[] noArg = new Object[0];\nObject newFieldInstance = constructor.newInstance(noArg);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), true, false);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:spiedInstance(Ljava/lang/Object;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings spiedInstance(Object spiedInstance) {\nthis.spiedInstance = spiedInstance;\nreturn this;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "ParameterizedConstructorInstantiator(Object testClass, Field field, ConstructorArgumentResolver argumentResolver) {\nthis.testClass = testClass;\nthis.field = field;\nthis.argResolver = argumentResolver;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializationReport:<init>(Ljava/lang/Object;ZZ)V",
            "method_body": "public FieldInitializationReport(Object fieldInstance, boolean wasInitialized, boolean wasInitializedUsingConstructorArgs) {\nthis.fieldInstance = fieldInstance;\nthis.wasInitialized = wasInitialized;\nthis.wasInitializedUsingConstructorArgs = wasInitializedUsingConstructorArgs;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldCopier:copyValue(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public <T> void copyValue(T from, T to, Field field) throws IllegalAccessException {\nObject value = field.get(from);\nfield.set(to, value);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:initialize()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "public FieldInitializationReport initialize() {\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nreturn acquireFieldInstance();\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:acquireFieldInstance()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "private FieldInitializationReport acquireFieldInstance() throws IllegalAccessException {\nObject fieldInstance = field.get(fieldOwner);\nif(fieldInstance != null) {\nreturn new FieldInitializationReport(fieldInstance, false, false);\nreturn instantiator.instantiate();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyToMock(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public <T> void copyToMock(T from, T mock) {\ncopy(from, mock, from.getClass(), mock.getClass().getSuperclass());\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copy(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)V",
            "method_body": "private <T> void copy(T from, T to, Class fromClazz, Class toClass) {\nwhile (fromClazz != Object.class) {\ncopyValues(from, to, fromClazz);\nfromClazz = fromClazz.getSuperclass();\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyValues(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private <T> void copyValues(T from, T mock, Class classFrom) {\nField[] fields = classFrom.getDeclaredFields();\nfor (int i = 0; i < fields.length; i++) {\nField field = fields[i];\nif (Modifier.isStatic(field.getModifiers())) {\ncontinue;\nAccessibilityChanger accessibilityChanger = new AccessibilityChanger();\naccessibilityChanger.enableAccess(field);\nfieldCopier.copyValue(from, mock, field);\naccessibilityChanger.safelyDisableAccess(field);\n}\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorInstantiator;)V",
            "method_body": "private FieldInitializer(Object fieldOwner, Field field, ConstructorInstantiator instantiator) {\nif(new FieldReader(fieldOwner, field).isNull()) {\ncheckNotLocal(field);\ncheckNotInner(field);\ncheckNotInterface(field);\ncheckNotAbstract(field);\nthis.fieldOwner = fieldOwner;\nthis.field = field;\nthis.instantiator = instantiator;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldReader:isNull()Z",
            "method_body": "public boolean isNull() {\nreturn read() == null;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn method.getName();\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:isDefault()Z",
            "method_body": "public boolean isDefault() {\nreturn defaultName;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine$1:process(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private <A extends Annotation> FieldAnnotationProcessor<A> forAnnotation(A annotation) {\nif (annotationProcessorMap.containsKey(annotation.annotationType())) {\nreturn (FieldAnnotationProcessor<A>) annotationProcessorMap.get(annotation.annotationType());\nreturn new FieldAnnotationProcessor<A>() {\nreturn null;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:filterStackTrace()V",
            "method_body": "private void filterStackTrace() {\nunfilteredStackTrace = getStackTrace();\nConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\nfilter.filter(this);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn mockName;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getParameterTypes()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getParameterTypes() {\nreturn method.getParameterTypes();\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getMockName(Ljava/lang/Object;)Lorg/mockito/mock/MockName;",
            "method_body": "public MockName getMockName(Object mock) {\nreturn getMockHandler(mock).getMockSettings().getMockName();\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getMockName()Lorg/mockito/mock/MockName;",
            "method_body": "public MockName getMockName() {\nreturn mockName;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:isValidReturnType(Ljava/lang/Class;)Z",
            "method_body": "public boolean isValidReturnType(Class clazz) {\nif (method.getReturnType().isPrimitive() || clazz.isPrimitive()) {\nreturn method.getReturnType().isAssignableFrom(clazz);\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockSettings;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn delegate.getMockSettings();\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockHandler.getMockSettings();\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.util.collections.ListUtil:filter(Ljava/util/Collection;Lorg/mockito/internal/util/collections/ListUtil$Filter;)Ljava/util/LinkedList;",
            "method_body": "public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\nLinkedList<T> filtered = new LinkedList<T>();\nfor (T t : collection) {\nif (!filter.isOut(t)) {\nfiltered.add(t);\n}\nreturn filtered;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn GLOBAL_CONFIGURATION.get().cleansStackTrace();\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter:filter(Ljava/lang/Throwable;)V",
            "method_body": "public void filter(Throwable throwable) {\nif (!config.cleansStackTrace()) {\nreturn;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getMockHandler(Ljava/lang/Object;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public <T> InternalMockHandler<T> getMockHandler(T mock) {\nif (mock == null) {\nif (isMockitoMock(mock)) {\nMockHandler handler = mockMaker.getHandler(mock);\nreturn (InternalMockHandler) handler;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.configuration.MockAnnotationProcessor:process(Lorg/mockito/Mock;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object process(Mock annotation, Field field) {\nMockSettings mockSettings = Mockito.withSettings();\nif (annotation.extraInterfaces().length > 0) { // never null\nif (\"\".equals(annotation.name())) {\nmockSettings.name(field.getName());\nif(annotation.serializable()){\nmockSettings.defaultAnswer(annotation.answer());\nreturn Mockito.mock(field.getType(), mockSettings);\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:throwIfAlreadyAssigned(Ljava/lang/reflect/Field;Z)V",
            "method_body": "void throwIfAlreadyAssigned(Field field, boolean alreadyAssigned) {\nif (alreadyAssigned) {\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn new ReturnsEmptyValues();\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn GLOBAL_CONFIGURATION.get().getDefaultAnswer();\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn forAnnotation(annotation).process(annotation, field);\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:forAnnotation(Ljava/lang/annotation/Annotation;)Lorg/mockito/internal/configuration/FieldAnnotationProcessor;",
            "method_body": "private <A extends Annotation> FieldAnnotationProcessor<A> forAnnotation(A annotation) {\nif (annotationProcessorMap.containsKey(annotation.annotationType())) {\nreturn (FieldAnnotationProcessor<A>) annotationProcessorMap.get(annotation.annotationType());\nreturn new FieldAnnotationProcessor<A>() {\nreturn null;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:name(Ljava/lang/String;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings name(String name) {\nthis.name = name;\nreturn this;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) {\nif (methodsGuru.isToString(invocation.getMethod())) {\nObject mock = invocation.getMock();\nMockName name = mockUtil.getMockName(mock);\nif (name.isDefault()) {\nreturn name.toString();\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class\n}",
            "method_id": 99
        }
    ]
}