{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.mock_should_be_injected_once_and_in_the_best_matching_type",
    "test_body": "public void mock_should_be_injected_once_and_in_the_best_matching_type() {\nassertSame(REFERENCE, illegalInjectionExample.mockShouldNotGoInHere);\nassertSame(mockedBean, illegalInjectionExample.mockShouldGoInHere);",
    "stack_trace": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@1a6aecec> was not:<mockedBean>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotSame(Assert.java:737)\nat org.junit.Assert.assertSame(Assert.java:680)\nat org.junit.Assert.assertSame(Assert.java:691)\nat org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.mock_should_be_injected_once_and_in_the_best_matching_type(InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java:33)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Ljava/lang/Class;Lorg/mockito/internal/creation/MockSettingsImpl;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) {\ncreationValidator.validateType(classToMock);\ncreationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\ncreationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\nsettings.initiateMockName(classToMock);\nMockHandler<T> mockHandler = new MockHandler<T>(settings);\nMethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\nClass<?>[] interfaces = settings.getExtraInterfaces();\nif (settings.isSerializable()) {\nancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\nObject spiedInstance = settings.getSpiedInstance();\nT mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\nif (spiedInstance != null) {\nreturn mock;\n}",
            "method_id": 0,
            "loc": 15
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 1,
            "loc": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 2,
            "loc": 14
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:scanMocks(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/Set;",
            "method_body": "private static Set<Object> scanMocks(final Object testClass, final Class<?> clazz) {\nSet<Object> mocks = new HashSet<Object>();\nfor (Field field : clazz.getDeclaredFields()) {\nif (null != field.getAnnotation(Spy.class) || null != field.getAnnotation(org.mockito.Mock.class)\nObject fieldInstance = null;\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\nfieldInstance = field.get(testClass);\nfield.setAccessible(wasAccessible);\n}\nif (fieldInstance != null) {\nmocks.add(fieldInstance);\nreturn mocks;\n}",
            "method_id": 3,
            "loc": 14
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 4,
            "loc": 14
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testInstance, field).set(mock);\n}\n}",
            "method_id": 5,
            "loc": 12
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultInjectionEngine:injectMocksOnFields(Ljava/util/Set;Ljava/util/Set;Ljava/lang/Object;)V",
            "method_body": "public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance) {\nfor (Field field : injectMocksFields) {\nSet<Object> mocksToBeInjected = new HashSet<Object>(mocks);\nObject injectMocksFieldInstance = null;\ninjectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize();\n}\nClass<?> fieldClass = injectMocksFieldInstance.getClass();\nwhile (fieldClass != Object.class) {\ninjectMockCandidate(fieldClass, mocksToBeInjected, injectMocksFieldInstance);\nfieldClass = fieldClass.getSuperclass();\n}\n}",
            "method_id": 6,
            "loc": 12
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\nField[] fields = classContext.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(InjectMocks.class)) {\nassertNoAnnotations(field, Mock.class, MockitoAnnotations.Mock.class, Captor.class);\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}\n}",
            "method_id": 7,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MockitoMethodProxy mockitoMethodProxy) {\nMethodProxy methodProxy = mockitoMethodProxy.getMethodProxy();\nField createInfoField = reflectOnCreateInfo(methodProxy);\ncreateInfoField.setAccessible(true);\nObject createInfo = createInfoField.get(methodProxy);\nField namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\nnamingPolicyField.setAccessible(true);\nif (namingPolicyField.get(createInfo) == null) {\nnamingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n}\n}",
            "method_id": 8,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:set(Ljava/lang/Object;)Z",
            "method_body": "public boolean set(final Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\nMethod writeMethod = null;\nBeanInfo targetInfo = Introspector.getBeanInfo(target.getClass());\nPropertyDescriptor[] propertyDescriptors = targetInfo.getPropertyDescriptors();\nfor (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\nif(propertyNameMatchFieldName(propertyDescriptor)\nif(writeMethod != null) {\nreportNoSetterFound();\nreturn false;\n}",
            "method_id": 9,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nif (objectMethodsGuru.isEqualsMethod(method)) {\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\nreturn hashCodeForMock(proxy);\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\ncglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\nMockitoMethod mockitoMethod = createMockitoMethod(method);\nFilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\nInvocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn handler.handle(invocation);\n}",
            "method_id": 10,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:processAnnotationDeprecatedWay(Lorg/mockito/configuration/AnnotationEngine;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "static void processAnnotationDeprecatedWay(AnnotationEngine annotationEngine, Object testClass, Field field) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = annotationEngine.createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testClass, field).set(mock);\n}\n}",
            "method_id": 11,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nClass<?> clazz = testClass.getClass();\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\nwhile (clazz != Object.class) {\nscanDeprecatedWay(annotationEngine, testClass, clazz);\nclazz = clazz.getSuperclass();\nannotationEngine.process(testClass.getClass(), testClass);\n}",
            "method_id": 12,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:injectMocks(Ljava/lang/Object;)V",
            "method_body": "public void injectMocks(final Object testClass) {\nClass<?> clazz = testClass.getClass();\nSet<Field> mockDependents = new HashSet<Field>();\nSet<Object> mocks = new HashSet<Object>();\nwhile (clazz != Object.class) {\nmockDependents.addAll(scanForInjection(testClass, clazz));\nmocks.addAll(scanMocks(testClass, clazz));\nclazz = clazz.getSuperclass();\nnew DefaultInjectionEngine().injectMocksOnFields(mockDependents, mocks, testClass);\n}",
            "method_id": 13,
            "loc": 10
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1:<init>(Lorg/mockito/internal/configuration/injection/FinalMockCandidateFilter;Ljava/lang/Object;Ljava/lang/reflect/Field;Ljava/lang/Object;)V",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\n}",
            "method_id": 14,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\n}",
            "method_id": 15,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 16,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1:thenInject()Ljava/lang/Object;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\n}",
            "method_id": 17,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new Location();\n}",
            "method_id": 18,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.TypeBasedCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\nList<Object> mockTypeMatches = new ArrayList<Object>();\nfor (Object mock : mocks) {\nif (field.getType().isAssignableFrom(mock.getClass())) {\nmockTypeMatches.add(mock);\n}\nreturn next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}",
            "method_id": 19,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:processAnnotationOn(Lorg/mockito/Mock;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object processAnnotationOn(Mock annotation, Field field) {\nMockSettings mockSettings = Mockito.withSettings();\nif (annotation.extraInterfaces().length > 0) { // never null\nif (\"\".equals(annotation.name())) {\nmockSettings.name(field.getName());\nmockSettings.defaultAnswer(annotation.answer().get());\nreturn Mockito.mock(field.getType(), mockSettings);\n}",
            "method_id": 20,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:scanForInjection(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/Set;",
            "method_body": "private static Set<Field> scanForInjection(final Object testClass, final Class<?> clazz) {\nSet<Field> testedFields = new HashSet<Field>();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nif (null != field.getAnnotation(InjectMocks.class)) {\ntestedFields.add(field);\nreturn testedFields;\n}",
            "method_id": 21,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock) {\nreturn processAnnotationOn((Mock) annotation, field);\nif (annotation instanceof MockitoAnnotations.Mock) {\nif (annotation instanceof Captor) {\nreturn null;\n}",
            "method_id": 22,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) {\nif (methodsGuru.isToString(invocation.getMethod())) {\nObject mock = invocation.getMock();\nMockName name = new MockUtil().getMockName(mock);\nif (name.isSurrogate()) {\nreturn name.toString();\n}",
            "method_id": 23,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:set(Ljava/lang/Object;)V",
            "method_body": "public void set(Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nfield.set(target, value);\n}\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 24,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getInterceptor(Ljava/lang/Object;)Lorg/mockito/internal/creation/MethodInterceptorFilter;",
            "method_body": "private <T> MethodInterceptorFilter getInterceptor(T mock) {\nif (!(mock instanceof Factory)) {\nFactory factory = (Factory) mock;\nCallback callback = factory.getCallback(0);\nif (callback instanceof MethodInterceptorFilter) {\nreturn (MethodInterceptorFilter) callback;\n}",
            "method_id": 25,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultInjectionEngine$1:compare(Ljava/lang/reflect/Field;Ljava/lang/reflect/Field;)I",
            "method_body": "public int compare(Field field1, Field field2) {\nClass<?> field1Type = field1.getType();\nClass<?> field2Type = field2.getType();\nif(field1Type.isAssignableFrom(field2Type)) {\nif(field2Type.isAssignableFrom(field1Type)) {\nreturn -1;\n}",
            "method_id": 26,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processIndependentAnnotations(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processIndependentAnnotations(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ndelegate.process(classContext, testInstance);\nspyAnnotationEngine.process(classContext, testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 27,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\nsetConstructorsAccessible(mockedType, false);\n}",
            "method_id": 28,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockSettingsImpl mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n}",
            "method_id": 29,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.runners.util.RunnerProvider:newInstance(Ljava/lang/String;Ljava/lang/Class;)Lorg/mockito/internal/runners/RunnerImpl;",
            "method_body": "public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\nClass<?> runnerClass = Class.forName(runnerClassName);\nconstructor = runnerClass.getConstructor(Class.class.getClass());\n}\nreturn (RunnerImpl) constructor.newInstance(constructorParam);\n}",
            "method_id": 30,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\n}\nreturn null;\n}",
            "method_id": 31,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 32,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:initialize()Ljava/lang/Object;",
            "method_body": "public Object initialize() {\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\nreturn acquireFieldInstance(testClass, field);\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 33,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nT mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\nmockingProgress.mockingStarted(mock, classToMock, mockSettings);\nreturn mock;\n}",
            "method_id": 34,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 35,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void safelyDisableAccess(AccessibleObject accessibleObject) {\nassert wasAccessible != null;\naccessibleObject.setAccessible(wasAccessible);\n}\n}",
            "method_id": 36,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldInitializer(Object testClass, Field field) {\nif(new FieldReader(testClass, field).isNull()) {\nthis.testClass = testClass;\nthis.field = field;\n}",
            "method_id": 37,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testInstance) {\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(Spy.class)) {\n}",
            "method_id": 38,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:acquireFieldInstance(Ljava/lang/Object;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object acquireFieldInstance(Object testClass, Field field) throws IllegalAccessException {\nObject fieldInstance = field.get(testClass);\nif(fieldInstance != null) {\nreturn fieldInstance;\n}",
            "method_id": 39,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.NameBasedCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\nList<Object> mockNameMatches = new ArrayList<Object>();\nif(mocks.size() > 1) {\nreturn next.filterCandidate(mocks, field, fieldInstance);\n}",
            "method_id": 40,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultInjectionEngine:orderedInstanceFieldsFrom(Ljava/lang/Class;)[Ljava/lang/reflect/Field;",
            "method_body": "private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\nField[] declaredFields = awaitingInjectionClazz.getDeclaredFields();\nArrays.sort(declaredFields, supertypesLast);\nreturn declaredFields;\n}",
            "method_id": 41,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\nGlobalConfiguration.validate();\nif (verificationMode != null) {\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 42,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getMockHandler(Ljava/lang/Object;)Lorg/mockito/internal/MockHandlerInterface;",
            "method_body": "public <T> MockHandlerInterface<T> getMockHandler(T mock) {\nif (mock == null) {\nif (isMockitoMock(mock)) {\nreturn (MockHandlerInterface) getInterceptor(mock).getHandler();\n}",
            "method_id": 43,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldReader:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldReader(Object target, Field field) {\nthis.target = target;\nthis.field = field;\nchanger.enableAccess(field);\n}",
            "method_id": 44,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.runners.util.FrameworkUsageValidator:testFinished(Lorg/junit/runner/Description;)V",
            "method_body": "public void testFinished(Description description) throws Exception {\nsuper.testFinished(description);\nMockito.validateMockitoUsage();\n}\n}",
            "method_id": 45,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Z)V",
            "method_body": "public BeanPropertySetter(final Object target, final Field propertyField, boolean reportNoSetterFound) {\nthis.field = propertyField;\nthis.target = target;\nthis.reportNoSetterFound = reportNoSetterFound;\n}",
            "method_id": 46,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:argumentsToMatchers()Ljava/util/List;",
            "method_body": "protected List<Matcher> argumentsToMatchers() {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nreturn matchers;\n}",
            "method_id": 47,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 48,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = invocation.argumentsToMatchers();\n}",
            "method_id": 49,
            "loc": 5
        }
    ]
}