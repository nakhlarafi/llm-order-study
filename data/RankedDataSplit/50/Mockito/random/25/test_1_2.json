{
    "bug_id": 25,
    "test_id": 1,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic",
    "test_body": "public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\nGenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\nListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);\n97: assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();\nassertThat(listOfInteger.get(25)).isEqualTo(0);",
    "stack_trace": "java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$2f702d3d cannot be cast to java.lang.String\nat org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest.will_return_default_value_on_non_mockable_nested_generic(ReturnsGenericDeepStubsTest.java:97)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:prepareExtraInterfaces(Lorg/mockito/internal/creation/settings/CreationSettings;)Ljava/util/Set;",
            "method_body": "private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {\nSet<Class> interfaces = new HashSet<Class>(settings.getExtraInterfaces());\nif(settings.isSerializable()) {\nif (settings.getSpiedInstance() != null) {\nreturn interfaces;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.creation.CglibMockMaker:createMock(Lorg/mockito/mock/MockCreationSettings;Lorg/mockito/invocation/MockHandler;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\nInternalMockHandler mockitoHandler = cast(handler);\nreturn ClassImposterizer.INSTANCE.imposterise(\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isStubOnly()Z",
            "method_body": "public boolean isStubOnly() {\nreturn stubOnly;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());\nthis.matchers = matchers;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:rawType()Ljava/lang/Class;",
            "method_body": "public Class<?> rawType() {\nif (rawType == null) {\nrawType = extractRawTypeOf(typeVariable);\nreturn rawType;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setExtraInterfaces(Ljava/util/Set;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setExtraInterfaces(Set<Class> extraInterfaces) {\nthis.extraInterfaces = extraInterfaces;\nreturn this;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:argumentsToMatchers([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "public static List<Matcher> argumentsToMatchers(Object[] arguments) {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nif (arg != null && arg.getClass().isArray()) {\nmatchers.add(new Equals(arg));\nreturn matchers;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable && !classToMock.isInterface() && !(Serializable.class.isAssignableFrom(classToMock))) {\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toInstanceName(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private static String toInstanceName(Class<?> clazz) {\nString className = clazz.getSimpleName();\nif (className.length() == 0) {\nreturn className.substring(0, 1).toLowerCase() + className.substring(1);\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType:rawType()Ljava/lang/Class;",
            "method_body": "public Class<?> rawType() {\nreturn (Class<?>) parameterizedType.getRawType();\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:firstBound()Ljava/lang/reflect/Type;",
            "method_body": "public Type firstBound() {\nreturn typeVariable.getBounds()[0]; //\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getMatchers()Ljava/util/List;",
            "method_body": "public List<Matcher> getMatchers() {\nreturn this.matchers;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:actualParameterizedType(Ljava/lang/Object;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "protected GenericMetadataSupport actualParameterizedType(Object mock) {\nCreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\nreturn GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!isTypeMockable(classToMock)) {\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/InvocationContainerImpl;)V",
            "method_body": "public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {\nthis.invocationContainerImpl = invocationContainerImpl;\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.mockito.internal.debugging.LocationImpl:<init>(Lorg/mockito/internal/exceptions/stacktrace/StackTraceFilter;)V",
            "method_body": "public LocationImpl(StackTraceFilter stackTraceFilter) {\nthis.stackTraceFilter = stackTraceFilter;\nstackTraceHolder = new Throwable();\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setTypeToMock(Ljava/lang/Class;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setTypeToMock(Class<T> typeToMock) {\nthis.typeToMock = typeToMock;\nreturn this;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:getMock(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "private Object getMock(InvocationOnMock invocation) throws Throwable {\nInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\nInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\nfor (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\nreturn recordDeepStubMock(invocation, container);\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:stubbingCompleted(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void stubbingCompleted(Invocation invocation) {\nstubbingInProgress = null;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationImpl:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public InvocationImpl(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new LocationImpl();\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\nsetConstructorsAccessible(mockedType, false);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$1:<init>(Lorg/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs;Ljava/lang/Object;)V",
            "method_body": "private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\nClass<?> clz = invocation.getMethod().getReturnType();\nfinal Object mock = org.mockito.Mockito.mock(clz, this);\ncontainer.addAnswer(new Answer<Object>() {\nreturn mock;\nreturn mock;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport:<init>(Ljava/lang/Class;)V",
            "method_body": "public FromClassGenericMetadataSupport(Class<?> clazz) {\nthis.clazz = clazz;\nreadActualTypeParametersOnDeclaringClass();\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:notifyMethodCall(Lorg/mockito/invocation/Invocation;Ljava/lang/Object;)V",
            "method_body": "private void notifyMethodCall(Invocation invocation, Object returnValue) {\nfor (InvocationListener listener : invocationListeners) {\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:getHandler()Lorg/mockito/invocation/MockHandler;",
            "method_body": "public MockHandler getHandler() {\nreturn handler;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public CGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:recordDeepStubMock(Lorg/mockito/invocation/InvocationOnMock;Lorg/mockito/internal/stubbing/InvocationContainerImpl;)Ljava/lang/Object;",
            "method_body": "private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\nClass<?> clz = invocation.getMethod().getReturnType();\nfinal Object mock = org.mockito.Mockito.mock(clz, this);\ncontainer.addAnswer(new Answer<Object>() {\nreturn mock;\nreturn mock;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MockitoNamingPolicy:getTag()Ljava/lang/String;",
            "method_body": "protected String getTag() {\nreturn \"ByMockitoWithCGLIB\";\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject returnedValue = mockHandler.handle(invocation);\nnotifyMethodCall(invocation, returnedValue);\nreturn returnedValue;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:boundsOf(Ljava/lang/reflect/TypeVariable;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport$BoundedType;",
            "method_body": "private BoundedType boundsOf(TypeVariable typeParameter) {\nif (typeParameter.getBounds()[0] instanceof TypeVariable) {\nreturn boundsOf((TypeVariable) typeParameter.getBounds()[0]);\nreturn new TypeVarBoundedType(typeParameter);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\nEnhancer enhancer = new Enhancer() {\n}\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {\nif (!lastMatchers.isEmpty()) {\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeParametersOn([Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\nfor (TypeVariable typeParameter : typeParameters) {\ncontextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:getActualTypeArgumentFor(Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;",
            "method_body": "protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {\nType type = this.contextualActualTypeParameters.get(typeParameter);\nif (type instanceof TypeVariable) {\nreturn type;\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:<init>(Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public MockHandlerImpl(MockCreationSettings mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress, mockSettings);\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\nthis.realMethod = realMethod;\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:<init>(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVarBoundedType(TypeVariable typeVariable) {\nthis.typeVariable = typeVariable;\n}",
            "method_id": 148
        }
    ]
}