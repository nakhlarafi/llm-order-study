{
    "bug_id": 20,
    "test_id": 7,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.exception_message_when_constructor_not_found",
    "test_body": "public void exception_message_when_constructor_not_found() {\ntry {\n//when\nspy(HasConstructor.class);\n//then\nfail();\n} catch (MockitoException e) {",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.exception_message_when_constructor_not_found(CreatingMocksWithConstructorTest.java:65)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey:of(Ljava/lang/Class;Ljava/util/Set;)Lorg/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey;",
            "method_body": "public static <T> MockKey of(Class<T> mockedType, Set<Class> interfaces) {\nreturn new MockKey<T>(mockedType, interfaces);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public TypeBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:handleSpyAnnotation()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection handleSpyAnnotation() {\npostInjectionStrategies.thenTry(new SpyOnInjectedFieldsHandler());\nreturn this;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:of(Ljava/lang/Iterable;)Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;",
            "method_body": "public static HashCodeAndEqualsSafeSet of(Iterable<Object> objects) {\nHashCodeAndEqualsSafeSet hashCodeAndEqualsSafeSet = new HashCodeAndEqualsSafeSet();\nif (objects != null) {\nfor (Object mock : objects) {\nreturn hashCodeAndEqualsSafeSet;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey:<init>(Ljava/lang/Class;Ljava/util/Set;)V",
            "method_body": "private MockKey(Class<T> mockedType, Set<Class> interfaces) {\nthis.mockedType = mockedType.getName();\nfor (Class anInterface : interfaces) {\ntypes.add(this.mockedType);\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:nameFor(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private String nameFor(Class<?> type) {\nString typeName = type.getName();\nif (typeName.startsWith(\"java.\") || (type.getPackage() != null && type.getPackage().isSealed())) {\nreturn String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nprocessIndependentAnnotations(testInstance.getClass(), testInstance);\nprocessInjectMocks(testInstance.getClass(), testInstance);\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockNameImpl(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.defaultName = true;\nthis.mockName = mockName;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public NameBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 110
        }
    ]
}