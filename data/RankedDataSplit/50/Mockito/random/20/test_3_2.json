{
    "bug_id": 20,
    "test_id": 3,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_abstract_classes",
    "test_body": "public void can_mock_abstract_classes() {\nAbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\nassertEquals(\"hey!\", mock.getMessage());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<hey!> but was:<null>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.can_mock_abstract_classes(CreatingMocksWithConstructorTest.java:40)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthreadSafely().reportOngoingStubbing(iOngoingStubbing);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nthreadSafely().mockingStarted(mock, classToMock);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;Ljava/util/Collection;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) {\nif (extraInterfaces == null) {\nfor (Class i : extraInterfaces) {\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:<init>(Lorg/mockito/internal/creation/settings/CreationSettings;)V",
            "method_body": "public CreationSettings(CreationSettings copy) {\nthis.typeToMock = copy.typeToMock;\nthis.extraInterfaces = copy.extraInterfaces;\nthis.name = copy.name;\nthis.spiedInstance = copy.spiedInstance;\nthis.defaultAnswer = copy.defaultAnswer;\nthis.mockName = copy.mockName;\nthis.serializableMode = copy.serializableMode;\nthis.invocationListeners = copy.invocationListeners;\nthis.stubOnly = copy.stubOnly;\nthis.useConstructor = copy.isUsingConstructor();\nthis.outerClassInstance = copy.getOuterClassInstance();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:<init>(Lorg/mockito/internal/InternalMockHandler;)V",
            "method_body": "public NullResultGuardian(InternalMockHandler delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey:<init>(Ljava/lang/Class;Ljava/util/Set;)V",
            "method_body": "private MockKey(Class<T> mockedType, Set<Class> interfaces) {\nthis.mockedType = mockedType.getName();\nfor (Class anInterface : interfaces) {\ntypes.add(this.mockedType);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:addAll(Ljava/util/Collection;)Z",
            "method_body": "public boolean addAll(Collection<?> mocks) {\nreturn backingHashSet.addAll(asWrappedMocks(mocks));\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nif (defaultAnswer == null) {\nreturn this;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1:hasNext()Z",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultInjectionEngine:injectMocksOnFields(Ljava/util/Set;Ljava/util/Set;Ljava/lang/Object;)V",
            "method_body": "public void injectMocksOnFields(Set<Field> needingInjection, Set<Object> mocks, Object testClassInstance) {\nMockInjection.onFields(needingInjection, testClassInstance)\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public TypeBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:setInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\nregisteredInvocations.add(invocation.getInvocation());\nthis.invocationForStubbing = invocation;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testInstance, field).set(mock);\n}\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.InterceptedInvocation$SuperMethod$FromCallable:invoke()Ljava/lang/Object;",
            "method_body": "public Object invoke() throws Throwable {\nreturn callable.call();\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:useConstructor()Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings useConstructor() {\nthis.useConstructor = true;\nreturn this;\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:<init>(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public MockScanner(Object instance, Class<?> clazz) {\nthis.instance = instance;\nthis.clazz = clazz;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Lorg/mockito/mock/MockCreationSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings) {\nMockHandler mockHandler = new MockHandlerFactory().create(settings);\nT mock = mockMaker.createMock(settings, mockHandler);\nObject spiedInstance = settings.getSpiedInstance();\nif (spiedInstance != null) {\nnew LenientCopyTool().copyToMock(spiedInstance, mock);\nreturn mock;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.InterceptedInvocation$SuperMethod$FromCallable:<init>(Ljava/util/concurrent/Callable;)V",
            "method_body": "public FromCallable(Callable<?> callable) {\nthis.callable = callable;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:registerAnnotationProcessor(Ljava/lang/Class;Lorg/mockito/internal/configuration/FieldAnnotationProcessor;)V",
            "method_body": "private <A extends Annotation> void registerAnnotationProcessor(Class<A> annotationClass, FieldAnnotationProcessor<A> fieldAnnotationProcessor) {\nannotationProcessorMap.put(annotationClass, fieldAnnotationProcessor);\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:<init>(Ljava/lang/Class;)V",
            "method_body": "public InjectMocksScanner(Class<?> clazz) {\nthis.clazz = clazz;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/InvocationContainerImpl;)V",
            "method_body": "public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {\nthis.invocationContainerImpl = invocationContainerImpl;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, (List<Matcher>)(List) lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!mockUtil.isTypeMockable(classToMock)) {\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:<init>()V",
            "method_body": "public DefaultAnnotationEngine() {\nregisterAnnotationProcessor(Mock.class, new MockAnnotationProcessor());\nregisterAnnotationProcessor(MockitoAnnotations.Mock.class, new MockitoAnnotationsMockAnnotationProcessor());\nregisterAnnotationProcessor(Captor.class, new CaptorAnnotationProcessor());\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.creation.util.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthis.iOngoingStubbing = iOngoingStubbing;\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkItemsNotNull(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/Iterable;",
            "method_body": "public static <T extends Iterable> T checkItemsNotNull(T iterable, String checkedIterable) {\ncheckNotNull(iterable, checkedIterable);\nfor (Object item : iterable) {\nreturn iterable;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:scan()Ljava/util/Set;",
            "method_body": "private Set<Object> scan() {\nSet<Object> mocks = newMockSafeHashSet();\nfor (Field field : clazz.getDeclaredFields()) {\nFieldReader fieldReader = new FieldReader(instance, field);\nObject mockInstance = preparedMock(fieldReader.read(), field);\nif (mockInstance != null) {\nmocks.add(mockInstance);\nreturn mocks;\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSerializableMode()Lorg/mockito/mock/SerializableMode;",
            "method_body": "public SerializableMode getSerializableMode() {\nreturn serializableMode;\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor:doIntercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/internal/creation/bytebuddy/InterceptedInvocation$SuperMethod;)Ljava/lang/Object;",
            "method_body": "private Object doIntercept(Object mock,\nreturn handler.handle(new InterceptedInvocation(\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:handleSpyAnnotation()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection handleSpyAnnotation() {\npostInjectionStrategies.thenTry(new SpyOnInjectedFieldsHandler());\nreturn this;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection:onFields(Ljava/util/Set;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance) {\nreturn new OngoingMockInjection(fields, ofInstance);\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator:nameFor(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private String nameFor(Class<?> type) {\nString typeName = type.getName();\nif (typeName.startsWith(\"java.\") || (type.getPackage() != null && type.getPackage().isSealed())) {\nreturn String.format(\"%s$%s$%d\", typeName, \"MockitoMock\", Math.abs(random.nextInt()));\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator:generate(Ljava/lang/Class;Ljava/util/Set;)Ljava/lang/Class;",
            "method_body": "private <T> Class<? extends T> generate(Class<T> mockedType, Set<Class> interfaces) {\nreturn generator.generateMockClass(mockedType, interfaces);\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\nif (GLOBAL_CONFIGURATION.get() == null) {\n}",
            "method_id": 149
        }
    ]
}