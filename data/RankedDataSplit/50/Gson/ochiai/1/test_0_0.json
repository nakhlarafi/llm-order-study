{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.Gson:<init>()V",
            "method_body": "public Gson() {\nthis(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultSerializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\nreturn getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getMatchingHandler(Lcom/google/gson/ParameterizedTypeHandlerMap;)Lcom/google/gson/Pair;",
            "method_body": "<HANDLER> Pair<HANDLER, ObjectTypePair> getMatchingHandler(\nHANDLER handler = null;\nif (!preserveType && obj != null) {\nhandler = handlers.getHandlerFor(type);\nreturn handler == null ? null : new Pair<HANDLER, ObjectTypePair>(handler, this);\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.AnonymousAndLocalClassExclusionStrategy:shouldSkipClass(Ljava/lang/Class;)Z",
            "method_body": "public boolean shouldSkipClass(Class<?> clazz) {\nreturn isAnonymousOrLocal(clazz);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.AnonymousAndLocalClassExclusionStrategy:isAnonymousOrLocal(Ljava/lang/Class;)Z",
            "method_body": "private boolean isAnonymousOrLocal(Class<?> clazz) {\nreturn !Enum.class.isAssignableFrom(clazz)\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:shouldSkipClass(Ljava/lang/Class;)Z",
            "method_body": "public boolean shouldSkipClass(Class<?> clazz) {\nreturn false;\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:shouldSkipClass(Ljava/lang/Class;)Z",
            "method_body": "public boolean shouldSkipClass(Class<?> clazz) {\nreturn false;\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.ObjectNavigatorFactory:create(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectNavigator;",
            "method_body": "public ObjectNavigator create(ObjectTypePair objTypePair) {\nreturn new ObjectNavigator(objTypePair, strategy);\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:<init>(Lcom/google/gson/ObjectTypePair;Lcom/google/gson/ExclusionStrategy;)V",
            "method_body": "public void start(ObjectTypePair node);\nObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\nPreconditions.checkNotNull(exclusionStrategy);\nthis.objTypePair = objTypePair;\nthis.exclusionStrategy = exclusionStrategy;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:accept(Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "public void accept(Visitor visitor) {\nTypeInfo objTypeInfo = new TypeInfo(objTypePair.type);\nif (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\nboolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\nif (!visitedWithCustomHandler) {\nObject obj = objTypePair.getObject();\nObject objectToVisit = (obj == null) ? visitor.getTarget() : obj;\nif (objectToVisit == null) {\nobjTypePair.setObject(objectToVisit);\nvisitor.start(objTypePair);\nif (objTypeInfo.isArray()) {\n} else if (objTypeInfo.getActualType() == Object.class\nvisitor.startVisitingObject(objectToVisit);\nObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\nClass<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass();\nfor (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =\nif (!curr.isSynthetic()) {\nnavigateClassFields(objectToVisit, curr, visitor);\nvisitor.end(objTypePair);\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:shouldSkipClass(Ljava/lang/Class;)Z",
            "method_body": "public boolean shouldSkipClass(Class<?> clazz) {\nfor (ExclusionStrategy strategy : strategies) {\nif (strategy.shouldSkipClass(clazz)) {\n}\nreturn false;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:<init>(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)V",
            "method_body": "ObjectTypePair(Object obj, Type type, boolean preserveType) {\nthis.obj = obj;\nthis.type = type;\nthis.preserveType = preserveType;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.Gson:createDefaultObjectNavigatorFactory(Lcom/google/gson/ExclusionStrategy;)Lcom/google/gson/ObjectNavigatorFactory;",
            "method_body": "private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy strategy) {\nreturn new ObjectNavigatorFactory(strategy, fieldNamingPolicy);\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getHandlerFor(Ljava/lang/reflect/Type;)Ljava/lang/Object;",
            "method_body": "public synchronized T getHandlerFor(Type type) {\nT handler = map.get(type);\nif (handler == null) {\nClass<?> rawClass = TypeUtils.toRawClass(type);\nif (rawClass != type) {\nif (handler == null) {\nhandler = getHandlerForTypeHierarchy(rawClass);\nreturn handler;\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.ObjectNavigatorFactory:<init>(Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/FieldNamingStrategy2;)V",
            "method_body": "public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy2 fieldNamingPolicy) {\nPreconditions.checkNotNull(fieldNamingPolicy);\nthis.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\nthis.fieldNamingPolicy = fieldNamingPolicy;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter:<init>()V",
            "method_body": "DefaultDateTypeAdapter() {\nthis.format = DateFormat.getDateTimeInstance();\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.google.gson.Gson:<init>(Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/ExclusionStrategy;Lcom/google/gson/FieldNamingStrategy2;Lcom/google/gson/MappedObjectConstructor;ZLcom/google/gson/ParameterizedTypeHandlerMap;Lcom/google/gson/ParameterizedTypeHandlerMap;ZZZ)V",
            "method_body": "Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy,\nboolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) {\nthis.serializationStrategy = serializationStrategy;\nthis.deserializationStrategy = deserializationStrategy;\nthis.fieldNamingPolicy = fieldNamingPolicy;\nthis.objectConstructor = objectConstructor;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.deserializers = deserializers;\nthis.generateNonExecutableJson = generateNonExecutableGson;\nthis.htmlSafe = htmlSafe;\nthis.prettyPrinting = prettyPrinting;\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.google.gson.Gson:<clinit>()V",
            "method_body": "private static final String NULL_STRING = \"null\";\nstatic final AnonymousAndLocalClassExclusionStrategy DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY =\nstatic final SyntheticFieldExclusionStrategy DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY =\nstatic final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =\nnew ModifierBasedExclusionStrategy(new int[] { Modifier.TRANSIENT, Modifier.STATIC });",
            "method_id": 17
        },
        {
            "method_signature": "com.google.gson.Gson:createExclusionStrategy(D)Lcom/google/gson/ExclusionStrategy;",
            "method_body": "private static ExclusionStrategy createExclusionStrategy(double version) {\nList<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\nstrategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\nstrategies.add(DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\nstrategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY);\nif (version != VersionConstants.IGNORE_VERSIONS) {\nreturn new DisjunctionExclusionStrategy(strategies);\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:<init>(Z)V",
            "method_body": "SyntheticFieldExclusionStrategy(boolean skipSyntheticFields) {\nthis.skipSyntheticFields = skipSyntheticFields;\n}",
            "method_id": 19
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:<init>([I)V",
            "method_body": "public ModifierBasedExclusionStrategy(int... modifiers) {\nthis.modifiers = new HashSet<Integer>();\nif (modifiers != null) {\nfor (int modifier : modifiers) {\nthis.modifiers.add(modifier);\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.google.gson.MappedObjectConstructor:<init>(Lcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "public MappedObjectConstructor(\nParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {\ninstanceCreatorMap = instanceCreators;\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.google.gson.MappedObjectConstructor:<clinit>()V",
            "method_body": "private static final Logger log = Logger.getLogger(MappedObjectConstructor.class.getName());\nParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {\ninstanceCreatorMap = instanceCreators;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:<clinit>()V",
            "method_body": "private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\nprivate static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\nprivate static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\nprivate static final UuidTypeAdapter UUUID_TYPE_ADAPTER = new UuidTypeAdapter();\nprivate static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\nprivate static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\nprivate static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\nprivate static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();\nprivate static final BigIntegerTypeAdapter BIG_INTEGER_TYPE_ADAPTER = new BigIntegerTypeAdapter();\nprivate static final BooleanTypeAdapter BOOLEAN_TYPE_ADAPTER = new BooleanTypeAdapter();\nprivate static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\nprivate static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\nprivate static final DoubleDeserializer DOUBLE_TYPE_ADAPTER = new DoubleDeserializer();\nprivate static final FloatDeserializer FLOAT_TYPE_ADAPTER = new FloatDeserializer();\nprivate static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\nprivate static final LongDeserializer LONG_DESERIALIZER = new LongDeserializer();\nprivate static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\nprivate static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\nprivate static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\nprivate static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\nprivate static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\nprivate static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();\nprivate static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\nprivate static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\nprivate static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\nprivate static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\nParameterizedTypeHandlerMap<JsonSerializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\nmap.register(URL.class, URL_TYPE_ADAPTER);\nmap.register(URI.class, URI_TYPE_ADAPTER);\nmap.register(UUID.class, UUUID_TYPE_ADAPTER);\nmap.register(Locale.class, LOCALE_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.register(Date.class, DATE_TYPE_ADAPTER);\nmap.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER);\nmap.register(Timestamp.class, DATE_TYPE_ADAPTER);\nmap.register(Time.class, TIME_TYPE_ADAPTER);\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\nmap.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\nmap.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(Byte.class, BYTE_TYPE_ADAPTER);\nmap.register(byte.class, BYTE_TYPE_ADAPTER);\nmap.register(Character.class, CHARACTER_TYPE_ADAPTER);\nmap.register(char.class, CHARACTER_TYPE_ADAPTER);\nmap.register(Integer.class, INTEGER_TYPE_ADAPTER);\nmap.register(int.class, INTEGER_TYPE_ADAPTER);\nmap.register(Number.class, NUMBER_TYPE_ADAPTER);\nmap.register(Short.class, SHORT_TYPE_ADAPTER);\nmap.register(short.class, SHORT_TYPE_ADAPTER);\nmap.register(String.class, STRING_TYPE_ADAPTER);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultSerializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers() {\nParameterizedTypeHandlerMap<JsonSerializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\nmap.register(URL.class, URL_TYPE_ADAPTER);\nmap.register(URI.class, URI_TYPE_ADAPTER);\nmap.register(UUID.class, UUUID_TYPE_ADAPTER);\nmap.register(Locale.class, LOCALE_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.register(Date.class, DATE_TYPE_ADAPTER);\nmap.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER);\nmap.register(Timestamp.class, DATE_TYPE_ADAPTER);\nmap.register(Time.class, TIME_TYPE_ADAPTER);\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);\nmap.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);\nmap.register(Boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(boolean.class, BOOLEAN_TYPE_ADAPTER);\nmap.register(Byte.class, BYTE_TYPE_ADAPTER);\nmap.register(byte.class, BYTE_TYPE_ADAPTER);\nmap.register(Character.class, CHARACTER_TYPE_ADAPTER);\nmap.register(char.class, CHARACTER_TYPE_ADAPTER);\nmap.register(Integer.class, INTEGER_TYPE_ADAPTER);\nmap.register(int.class, INTEGER_TYPE_ADAPTER);\nmap.register(Number.class, NUMBER_TYPE_ADAPTER);\nmap.register(Short.class, SHORT_TYPE_ADAPTER);\nmap.register(short.class, SHORT_TYPE_ADAPTER);\nmap.register(String.class, STRING_TYPE_ADAPTER);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultDeserializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\nParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\nmap.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\nmap.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\nmap.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\nmap.register(UUID.class, wrapDeserializer(UUUID_TYPE_ADAPTER));\nmap.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER));\nmap.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\nmap.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\nmap.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));\nmap.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER));\nmap.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER));\nmap.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER));\nmap.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER);\nmap.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));\nmap.register(BigInteger.class, wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));\nmap.register(Boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\nmap.register(boolean.class, wrapDeserializer(BOOLEAN_TYPE_ADAPTER));\nmap.register(Byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\nmap.register(byte.class, wrapDeserializer(BYTE_TYPE_ADAPTER));\nmap.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\nmap.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER));\nmap.register(Double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\nmap.register(double.class, wrapDeserializer(DOUBLE_TYPE_ADAPTER));\nmap.register(Float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\nmap.register(float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\nmap.register(Integer.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\nmap.register(int.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\nmap.register(Long.class, wrapDeserializer(LONG_DESERIALIZER));\nmap.register(long.class, wrapDeserializer(LONG_DESERIALIZER));\nmap.register(Number.class, wrapDeserializer(NUMBER_TYPE_ADAPTER));\nmap.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\nmap.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\nmap.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER));\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:createDefaultInstanceCreators()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators() {\nParameterizedTypeHandlerMap<InstanceCreator<?>> map =\nmap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\nmap.registerForTypeHierarchy(Set.class, HASH_SET_CREATOR);\nmap.registerForTypeHierarchy(SortedSet.class, TREE_SET_CREATOR);\nmap.register(Properties.class, PROPERTIES_CREATOR);\nmap.makeUnmodifiable();\nreturn map;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:wrapDeserializer(Lcom/google/gson/JsonDeserializer;)Lcom/google/gson/JsonDeserializer;",
            "method_body": "private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\nreturn new JsonDeserializerExceptionWrapper(deserializer);\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultSerializers(ZLcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\nParameterizedTypeHandlerMap<JsonSerializer<?>> serializers =\nDefaultTypeAdapters.DoubleSerializer doubleSerializer =\nserializers.registerIfAbsent(Double.class, doubleSerializer);\nserializers.registerIfAbsent(double.class, doubleSerializer);\nDefaultTypeAdapters.FloatSerializer floatSerializer =\nserializers.registerIfAbsent(Float.class, floatSerializer);\nserializers.registerIfAbsent(float.class, floatSerializer);\nDefaultTypeAdapters.LongSerializer longSerializer =\nserializers.registerIfAbsent(Long.class, longSerializer);\nserializers.registerIfAbsent(long.class, longSerializer);\nserializers.registerIfAbsent(DEFAULT_SERIALIZERS);\nreturn serializers;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultDeserializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\nreturn DEFAULT_DESERIALIZERS;\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultInstanceCreators()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\nreturn DEFAULT_INSTANCE_CREATORS;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter:<init>()V",
            "method_body": "DefaultJavaSqlDateTypeAdapter() {\nthis.format = new SimpleDateFormat(\"MMM d, yyyy\");\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter:<init>()V",
            "method_body": "DefaultTimeTypeAdapter() {\nthis.format = new SimpleDateFormat(\"hh:mm:ss a\");\n}",
            "method_id": 32
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerIfAbsent(Ljava/lang/reflect/Type;Ljava/lang/Object;)V",
            "method_body": "public synchronized void registerIfAbsent(Type typeOfT, T value) {\nif (!modifiable) {\nif (!map.containsKey(typeOfT)) {\nregister(typeOfT, value);\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DoubleSerializer:<init>(Z)V",
            "method_body": "DoubleSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 34
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$FloatSerializer:<init>(Z)V",
            "method_body": "FloatSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 35
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$LongSerializer:<init>(Lcom/google/gson/LongSerializationPolicy;)V",
            "method_body": "private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\nthis.longSerializationPolicy = longSerializationPolicy;\n}",
            "method_id": 36
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerIfAbsent(Lcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "public synchronized void registerIfAbsent(ParameterizedTypeHandlerMap<T> other) {\nif (!modifiable) {\nfor (Map.Entry<Type, T> entry : other.map.entrySet()) {\nif (!map.containsKey(entry.getKey())) {\nregister(entry.getKey(), entry.getValue());\n}\nfor (int i = other.typeHierarchyList.size()-1; i >= 0; --i) {\nPair<Class<?>, T> entry = other.typeHierarchyList.get(i);\nint index = getIndexOfSpecificHandlerForTypeHierarchy(entry.first);\nif (index < 0) {\nregisterForTypeHierarchy(entry);\n}",
            "method_id": 37
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:makeUnmodifiable()V",
            "method_body": "public synchronized void makeUnmodifiable() {\nmodifiable = false;\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy:<init>(Lcom/google/gson/FieldNamingStrategy2;)V",
            "method_body": "public SerializedNameAnnotationInterceptingNamingPolicy(FieldNamingStrategy2 delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 39
        },
        {
            "method_signature": "com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy:<clinit>()V",
            "method_body": "private static final JsonFieldNameValidator fieldNameValidator = new JsonFieldNameValidator();\npublic SerializedNameAnnotationInterceptingNamingPolicy(FieldNamingStrategy2 delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 40
        },
        {
            "method_signature": "com.google.gson.LongSerializationPolicy:<init>(Ljava/lang/String;ILcom/google/gson/LongSerializationPolicy$Strategy;)V",
            "method_body": "private LongSerializationPolicy(Strategy strategy) {\nthis.strategy = strategy;\n}",
            "method_id": 41
        },
        {
            "method_signature": "com.google.gson.JsonDeserializerExceptionWrapper:<init>(Lcom/google/gson/JsonDeserializer;)V",
            "method_body": "JsonDeserializerExceptionWrapper(JsonDeserializer<T> delegate) {\nPreconditions.checkNotNull(delegate);\nthis.delegate = delegate;\n}",
            "method_id": 42
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:<init>(Ljava/util/Collection;)V",
            "method_body": "public DisjunctionExclusionStrategy(Collection<ExclusionStrategy> strategies) {\nPreconditions.checkNotNull(strategies);\nthis.strategies = strategies;\n}",
            "method_id": 43
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:register(Ljava/lang/reflect/Type;Ljava/lang/Object;)V",
            "method_body": "public synchronized void register(Type typeOfT, T value) {\nif (!modifiable) {\nif (hasSpecificHandlerFor(typeOfT)) {\nmap.put(typeOfT, value);\n}",
            "method_id": 44
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:hasSpecificHandlerFor(Ljava/lang/reflect/Type;)Z",
            "method_body": "public synchronized boolean hasSpecificHandlerFor(Type type) {\nreturn map.containsKey(type);\n}",
            "method_id": 45
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerForTypeHierarchy(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public synchronized void registerForTypeHierarchy(Class<?> typeOfT, T value) {\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 46
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerForTypeHierarchy(Lcom/google/gson/Pair;)V",
            "method_body": "public synchronized void registerForTypeHierarchy(Pair<Class<?>, T> pair) {\nif (!modifiable) {\nint index = getIndexOfSpecificHandlerForTypeHierarchy(pair.first);\nif (index >= 0) {\nindex = getIndexOfAnOverriddenHandler(pair.first);\nif (index >= 0) {\ntypeHierarchyList.add(0, pair);\n}",
            "method_id": 47
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getIndexOfAnOverriddenHandler(Ljava/lang/Class;)I",
            "method_body": "private int getIndexOfAnOverriddenHandler(Class<?> type) {\nfor (int i = typeHierarchyList.size()-1; i >= 0; --i) {\nPair<Class<?>, T> entry = typeHierarchyList.get(i);\nif (type.isAssignableFrom(entry.first)) {\nreturn -1;\n}",
            "method_id": 48
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getIndexOfSpecificHandlerForTypeHierarchy(Ljava/lang/Class;)I",
            "method_body": "private synchronized int getIndexOfSpecificHandlerForTypeHierarchy(Class<?> type) {\nfor (int i = typeHierarchyList.size()-1; i >= 0; --i) {\nif (type.equals(typeHierarchyList.get(i).first)) {\nreturn -1;\n}",
            "method_id": 49
        }
    ]
}