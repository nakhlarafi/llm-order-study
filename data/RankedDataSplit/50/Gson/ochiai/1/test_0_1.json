{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "public void testSingle() throws Exception {\nGson gson = new Gson();\nBar bar1 = new Bar(\"someString\", 1);\nArrayList<Integer> arrayList = new ArrayList<Integer>();\narrayList.add(1);\narrayList.add(2);\nbar1.map.put(\"key1\", arrayList);\nbar1.map.put(\"key2\", new ArrayList<Integer>());\nString json = gson.toJson(bar1);\nSystem.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:<init>()V",
            "method_body": "private static final Logger logger =\nprivate final Map<Type, T> map = new HashMap<Type, T>();\nprivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();\nprivate boolean modifiable = true;\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 50
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:<clinit>()V",
            "method_body": "private static final Logger logger =\nprivate final Map<Type, T> map = new HashMap<Type, T>();\nprivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();\nprivate boolean modifiable = true;\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 51
        },
        {
            "method_signature": "com.google.gson.JsonFieldNameValidator:<clinit>()V",
            "method_body": "private static final String COMMON_PATTERN = \"[a-zA-Z][a-zA-Z0-9\\\\ \\\\$_\\\\-]*$\";\nprivate static final Pattern JSON_FIELD_NAME_PATTERN =\n* @return {@code fieldName} if it is a valid JSON field name",
            "method_id": 52
        },
        {
            "method_signature": "com.google.gson.TypeInfo:getRawClass()Ljava/lang/Class;",
            "method_body": "public final Class<?> getRawClass() {\nreturn rawClass;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.google.gson.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "Pair(FIRST first, SECOND second) {\nthis.first = first;\nthis.second = second;\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.google.gson.TypeInfo:<init>(Ljava/lang/reflect/Type;)V",
            "method_body": "TypeInfo(Type actualType) {\nthis.actualType = actualType;\nrawClass = TypeUtils.toRawClass(actualType);\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.google.gson.JsonElement:<clinit>()V",
            "method_body": "private static final Escaper BASIC_ESCAPER = new Escaper(false);\n* @return true if this element is of type {@link JsonArray}, false otherwise.",
            "method_id": 56
        },
        {
            "method_signature": "com.google.gson.TypeUtils:toRawClass(Ljava/lang/reflect/Type;)Ljava/lang/Class;",
            "method_body": "static Class<?> toRawClass(Type type) {\nif (type instanceof Class<?>) {\nreturn (Class<?>) type;\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.google.gson.Escaper:<init>(Z)V",
            "method_body": "Escaper(boolean escapeHtmlCharacters) {\nthis.escapeHtmlCharacters = escapeHtmlCharacters;\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.google.gson.Escaper:<clinit>()V",
            "method_body": "private static final Set<Character> JS_ESCAPE_CHARS;\nSet<Character> mandatoryEscapeSet = new HashSet<Character>();\nmandatoryEscapeSet.add('\"');\nmandatoryEscapeSet.add('\\\\');\nJS_ESCAPE_CHARS = Collections.unmodifiableSet(mandatoryEscapeSet);\nSet<Character> htmlEscapeSet = new HashSet<Character>();\nhtmlEscapeSet.add('<');\nhtmlEscapeSet.add('>');\nhtmlEscapeSet.add('&');\nhtmlEscapeSet.add('=');\nhtmlEscapeSet.add('\\'');\nHTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n}",
            "method_id": 59
        },
        {
            "method_signature": "com.google.gson.Preconditions:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object obj) {\ncheckArgument(obj != null);\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.google.gson.Preconditions:checkArgument(Z)V",
            "method_body": "public static void checkArgument(boolean condition) {\nif (!condition) {\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src) {\nif (src == null) {\nreturn toJson(src, src.getClass());\n}",
            "method_id": 62
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src, Type typeOfSrc) {\nStringWriter writer = new StringWriter();\ntoJson(toJsonTree(src, typeOfSrc), writer);\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:assignToRoot(Lcom/google/gson/JsonElement;)V",
            "method_body": "private void assignToRoot(JsonElement newRoot) {\nPreconditions.checkNotNull(newRoot);\nroot = newRoot;\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:start(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void start(ObjectTypePair node) {\nif (node == null) {\nif (ancestors.contains(node)) {\nancestors.push(node);\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:end(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void end(ObjectTypePair node) {\nif (node != null) {\nancestors.pop();\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:visitUsingCustomHandler(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\nObject obj = objTypePair.getObject();\nif (obj == null) {\nJsonElement element = findAndInvokeCustomSerializer(objTypePair);\nif (element != null) {\nreturn false;\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:findAndInvokeCustomSerializer(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/JsonElement;",
            "method_body": "private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\nPair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\nif (pair == null) {\nreturn null;\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:contains(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean contains(ObjectTypePair obj) {\nif (obj == null) {\nfor (ObjectTypePair stackObject : stack) {\nreturn false;\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:pop()Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair pop() {\nreturn stack.pop();\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.google.gson.JsonSerializationContextDefault:<init>(Lcom/google/gson/ObjectNavigatorFactory;ZLcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,\nParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\nthis.factory = factory;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.ancestors = new MemoryRefStack();\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.google.gson.JsonSerializationContextDefault:serialize(Ljava/lang/Object;Ljava/lang/reflect/Type;Z)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\nObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));\nJsonSerializationVisitor visitor =\non.accept(visitor);\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:push(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair push(ObjectTypePair obj) {\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:<init>(Lcom/google/gson/ObjectNavigatorFactory;ZLcom/google/gson/ParameterizedTypeHandlerMap;Lcom/google/gson/JsonSerializationContext;Lcom/google/gson/MemoryRefStack;)V",
            "method_body": "JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\nMemoryRefStack ancestors) {\nthis.factory = factory;\nthis.serializeNulls = serializeNulls;\nthis.serializers = serializers;\nthis.context = context;\nthis.ancestors = ancestors;\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.google.gson.Gson:toJsonTree(Ljava/lang/Object;Ljava/lang/reflect/Type;)Lcom/google/gson/JsonElement;",
            "method_body": "public JsonElement toJsonTree(Object src, Type typeOfSrc) {\nif (src == null) {\nJsonSerializationContextDefault context = new JsonSerializationContextDefault(\nreturn context.serialize(src, typeOfSrc, true);\n}",
            "method_id": 75
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:<init>()V",
            "method_body": "private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:getObject()Ljava/lang/Object;",
            "method_body": "Object getObject() {\nreturn obj;\n}",
            "method_id": 77
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:startVisitingObject(Ljava/lang/Object;)V",
            "method_body": "public void startVisitingObject(Object node) {\nassignToRoot(new JsonObject());\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (int modifier : modifiers) {\nif (f.hasModifier(modifier)) {\n}\nreturn false;\n}",
            "method_id": 79
        },
        {
            "method_signature": "com.google.gson.AnonymousAndLocalClassExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn isAnonymousOrLocal(f.getDeclaredClass());\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:hasModifier(I)Z",
            "method_body": "public boolean hasModifier(int modifier) {\nreturn (modifiers & modifier) != 0;\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn skipSyntheticFields && f.isSynthetic();\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:isSynthetic()Z",
            "method_body": "boolean isSynthetic() {\nreturn isSynthetic;\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (ExclusionStrategy strategy : strategies) {\nif (strategy.shouldSkipField(f)) {\n}\nreturn false;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:getDeclaredClass()Ljava/lang/Class;",
            "method_body": "public Class<?> getDeclaredClass() {\nreturn declaredType;\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.google.gson.ObjectNavigator:navigateClassFields(Ljava/lang/Object;Ljava/lang/Class;Lcom/google/gson/ObjectNavigator$Visitor;)V",
            "method_body": "private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field f : fields) {\nFieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\nif (exclusionStrategy.shouldSkipField(fieldAttributes)\nTypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getTypeInfoForField(Ljava/lang/reflect/Field;Ljava/lang/reflect/Type;)Lcom/google/gson/TypeInfo;",
            "method_body": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {\nClass<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);\nType type = f.getGenericType();\nType actualType = getActualType(type, typeDefiningF, classDefiningF);\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.google.gson.TypeInfoFactory:getActualType(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
            "method_body": "private static Type getActualType(\nif (typeToEvaluate instanceof Class<?>) {\n} else if (typeToEvaluate instanceof ParameterizedType) {\n} else if (typeToEvaluate instanceof GenericArrayType) {\n} else if (typeToEvaluate instanceof TypeVariable<?>) {\nif (parentType instanceof ParameterizedType) {\nthrow new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:toMoreSpecificType()Lcom/google/gson/ObjectTypePair;",
            "method_body": "ObjectTypePair toMoreSpecificType() {\nif (preserveType || obj == null) {\nreturn this;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.google.gson.TypeInfo:getActualType()Ljava/lang/reflect/Type;",
            "method_body": "public final Type getActualType() {\nreturn actualType;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<init>(Ljava/lang/Class;Ljava/lang/reflect/Field;)V",
            "method_body": "FieldAttributes(final Class<?> declaringClazz, final Field f) {\nPreconditions.checkNotNull(declaringClazz);\nthis.declaringClazz = declaringClazz;\nname = f.getName();\ndeclaredType = f.getType();\nisSynthetic = f.isSynthetic();\nmodifiers = f.getModifiers();\nfield = f;\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<clinit>()V",
            "method_body": "private static final String MAX_CACHE_PROPERTY_NAME =\nprivate static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE =\n* Constructs a Field Attributes object from the {@code f}.",
            "method_id": 92
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:getMaxCacheSize()I",
            "method_body": "private static int getMaxCacheSize() {\nfinal int defaultMaxCacheSize = 2000;\nString propertyValue = System.getProperty(\nreturn Integer.parseInt(propertyValue);\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.google.gson.LruCache:<init>(I)V",
            "method_body": "LruCache(int maxCapacity) {\nsuper(maxCapacity, 0.7F, true);\nthis.maxCapacity = maxCapacity;\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.google.gson.ObjectTypePair:setObject(Ljava/lang/Object;)V",
            "method_body": "void setObject(Object obj) {\nthis.obj = obj;\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.google.gson.TypeInfo:isArray()Z",
            "method_body": "public final boolean isArray() {\nreturn TypeUtils.isArray(rawClass);\n}",
            "method_id": 96
        },
        {
            "method_signature": "com.google.gson.JsonObject:<init>()V",
            "method_body": "public JsonObject() {\nmembers = new LinkedHashMap<String, JsonElement>();\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.google.gson.TypeUtils:isArray(Ljava/lang/reflect/Type;)Z",
            "method_body": "static boolean isArray(Type type) {\nif (type instanceof Class<?>) {\nreturn ((Class<?>)type).isArray();\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getHandlerForTypeHierarchy(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "private T getHandlerForTypeHierarchy(Class<?> type) {\nfor (Pair<Class<?>, T> entry : typeHierarchyList) {\nif (entry.first.isAssignableFrom(type)) {\n}\nreturn null;\n}",
            "method_id": 99
        }
    ]
}