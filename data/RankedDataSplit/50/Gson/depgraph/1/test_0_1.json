{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "com.google.gson.functional.TypeVariableTest.testSingle",
    "test_body": "33: public void testSingle() throws Exception {\n34: Gson gson = new Gson();\n35: Bar bar1 = new Bar(\"someString\", 1);\n36: ArrayList<Integer> arrayList = new ArrayList<Integer>();\n37: arrayList.add(1);\n38: arrayList.add(2);\n39: bar1.map.put(\"key1\", arrayList);\n40: bar1.map.put(\"key2\", new ArrayList<Integer>());\n41: String json = gson.toJson(bar1);\n42: System.out.println(json);",
    "stack_trace": "java.lang.UnsupportedOperationException: Expecting parameterized type, got class com.google.gson.functional.TypeVariableTest$Bar.\nAre you missing the use of TypeToken idiom?\nSee http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\nat com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\nat com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\nat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\nat com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\nat com.google.gson.Gson.toJsonTree(Gson.java:231)\nat com.google.gson.Gson.toJson(Gson.java:271)\nat com.google.gson.Gson.toJson(Gson.java:251)\nat com.google.gson.functional.TypeVariableTest.testSingle(TypeVariableTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:wrapDeserializer(Lcom/google/gson/JsonDeserializer;)Lcom/google/gson/JsonDeserializer;",
            "method_body": "private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\nreturn new JsonDeserializerExceptionWrapper(deserializer);\n}",
            "method_id": 50
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultSerializers(ZLcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\nParameterizedTypeHandlerMap<JsonSerializer<?>> serializers =\nDefaultTypeAdapters.DoubleSerializer doubleSerializer =\nserializers.registerIfAbsent(Double.class, doubleSerializer);\nserializers.registerIfAbsent(double.class, doubleSerializer);\nDefaultTypeAdapters.FloatSerializer floatSerializer =\nserializers.registerIfAbsent(Float.class, floatSerializer);\nserializers.registerIfAbsent(float.class, floatSerializer);\nDefaultTypeAdapters.LongSerializer longSerializer =\nserializers.registerIfAbsent(Long.class, longSerializer);\nserializers.registerIfAbsent(long.class, longSerializer);\nserializers.registerIfAbsent(DEFAULT_SERIALIZERS);\nreturn serializers;\n}",
            "method_id": 51
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultDeserializers()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\nreturn DEFAULT_DESERIALIZERS;\n}",
            "method_id": 52
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters:getDefaultInstanceCreators()Lcom/google/gson/ParameterizedTypeHandlerMap;",
            "method_body": "static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\nreturn DEFAULT_INSTANCE_CREATORS;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter:<init>()V",
            "method_body": "DefaultJavaSqlDateTypeAdapter() {\nthis.format = new SimpleDateFormat(\"MMM d, yyyy\");\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter:<init>()V",
            "method_body": "DefaultTimeTypeAdapter() {\nthis.format = new SimpleDateFormat(\"hh:mm:ss a\");\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerIfAbsent(Ljava/lang/reflect/Type;Ljava/lang/Object;)V",
            "method_body": "public synchronized void registerIfAbsent(Type typeOfT, T value) {\nif (!modifiable) {\nif (!map.containsKey(typeOfT)) {\nregister(typeOfT, value);\n}",
            "method_id": 56
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$DoubleSerializer:<init>(Z)V",
            "method_body": "DoubleSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$FloatSerializer:<init>(Z)V",
            "method_body": "FloatSerializer(boolean serializeSpecialDoubleValues) {\nthis.serializeSpecialFloatingPointValues = serializeSpecialDoubleValues;\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.google.gson.DefaultTypeAdapters$LongSerializer:<init>(Lcom/google/gson/LongSerializationPolicy;)V",
            "method_body": "private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\nthis.longSerializationPolicy = longSerializationPolicy;\n}",
            "method_id": 59
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerIfAbsent(Lcom/google/gson/ParameterizedTypeHandlerMap;)V",
            "method_body": "public synchronized void registerIfAbsent(ParameterizedTypeHandlerMap<T> other) {\nif (!modifiable) {\nfor (Map.Entry<Type, T> entry : other.map.entrySet()) {\nif (!map.containsKey(entry.getKey())) {\nregister(entry.getKey(), entry.getValue());\n}\nfor (int i = other.typeHierarchyList.size()-1; i >= 0; --i) {\nPair<Class<?>, T> entry = other.typeHierarchyList.get(i);\nint index = getIndexOfSpecificHandlerForTypeHierarchy(entry.first);\nif (index < 0) {\nregisterForTypeHierarchy(entry);\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:makeUnmodifiable()V",
            "method_body": "public synchronized void makeUnmodifiable() {\nmodifiable = false;\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy:<init>(Lcom/google/gson/FieldNamingStrategy2;)V",
            "method_body": "public SerializedNameAnnotationInterceptingNamingPolicy(FieldNamingStrategy2 delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 62
        },
        {
            "method_signature": "com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy:<clinit>()V",
            "method_body": "private static final JsonFieldNameValidator fieldNameValidator = new JsonFieldNameValidator();\npublic SerializedNameAnnotationInterceptingNamingPolicy(FieldNamingStrategy2 delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.google.gson.LongSerializationPolicy:<init>(Ljava/lang/String;ILcom/google/gson/LongSerializationPolicy$Strategy;)V",
            "method_body": "private LongSerializationPolicy(Strategy strategy) {\nthis.strategy = strategy;\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.google.gson.JsonDeserializerExceptionWrapper:<init>(Lcom/google/gson/JsonDeserializer;)V",
            "method_body": "JsonDeserializerExceptionWrapper(JsonDeserializer<T> delegate) {\nPreconditions.checkNotNull(delegate);\nthis.delegate = delegate;\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:<init>(Ljava/util/Collection;)V",
            "method_body": "public DisjunctionExclusionStrategy(Collection<ExclusionStrategy> strategies) {\nPreconditions.checkNotNull(strategies);\nthis.strategies = strategies;\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:register(Ljava/lang/reflect/Type;Ljava/lang/Object;)V",
            "method_body": "public synchronized void register(Type typeOfT, T value) {\nif (!modifiable) {\nif (hasSpecificHandlerFor(typeOfT)) {\nmap.put(typeOfT, value);\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:hasSpecificHandlerFor(Ljava/lang/reflect/Type;)Z",
            "method_body": "public synchronized boolean hasSpecificHandlerFor(Type type) {\nreturn map.containsKey(type);\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerForTypeHierarchy(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public synchronized void registerForTypeHierarchy(Class<?> typeOfT, T value) {\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:registerForTypeHierarchy(Lcom/google/gson/Pair;)V",
            "method_body": "public synchronized void registerForTypeHierarchy(Pair<Class<?>, T> pair) {\nif (!modifiable) {\nint index = getIndexOfSpecificHandlerForTypeHierarchy(pair.first);\nif (index >= 0) {\nindex = getIndexOfAnOverriddenHandler(pair.first);\nif (index >= 0) {\ntypeHierarchyList.add(0, pair);\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getIndexOfAnOverriddenHandler(Ljava/lang/Class;)I",
            "method_body": "private int getIndexOfAnOverriddenHandler(Class<?> type) {\nfor (int i = typeHierarchyList.size()-1; i >= 0; --i) {\nPair<Class<?>, T> entry = typeHierarchyList.get(i);\nif (type.isAssignableFrom(entry.first)) {\nreturn -1;\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getIndexOfSpecificHandlerForTypeHierarchy(Ljava/lang/Class;)I",
            "method_body": "private synchronized int getIndexOfSpecificHandlerForTypeHierarchy(Class<?> type) {\nfor (int i = typeHierarchyList.size()-1; i >= 0; --i) {\nif (type.equals(typeHierarchyList.get(i).first)) {\nreturn -1;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:<init>()V",
            "method_body": "private static final Logger logger =\nprivate final Map<Type, T> map = new HashMap<Type, T>();\nprivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();\nprivate boolean modifiable = true;\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:<clinit>()V",
            "method_body": "private static final Logger logger =\nprivate final Map<Type, T> map = new HashMap<Type, T>();\nprivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();\nprivate boolean modifiable = true;\nPair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);\nregisterForTypeHierarchy(pair);\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.google.gson.JsonFieldNameValidator:<clinit>()V",
            "method_body": "private static final String COMMON_PATTERN = \"[a-zA-Z][a-zA-Z0-9\\\\ \\\\$_\\\\-]*$\";\nprivate static final Pattern JSON_FIELD_NAME_PATTERN =\n* @return {@code fieldName} if it is a valid JSON field name",
            "method_id": 75
        },
        {
            "method_signature": "com.google.gson.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "Pair(FIRST first, SECOND second) {\nthis.first = first;\nthis.second = second;\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.google.gson.JsonElement:<clinit>()V",
            "method_body": "private static final Escaper BASIC_ESCAPER = new Escaper(false);\n* @return true if this element is of type {@link JsonArray}, false otherwise.",
            "method_id": 77
        },
        {
            "method_signature": "com.google.gson.Escaper:<init>(Z)V",
            "method_body": "Escaper(boolean escapeHtmlCharacters) {\nthis.escapeHtmlCharacters = escapeHtmlCharacters;\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.google.gson.Escaper:<clinit>()V",
            "method_body": "private static final Set<Character> JS_ESCAPE_CHARS;\nSet<Character> mandatoryEscapeSet = new HashSet<Character>();\nmandatoryEscapeSet.add('\"');\nmandatoryEscapeSet.add('\\\\');\nJS_ESCAPE_CHARS = Collections.unmodifiableSet(mandatoryEscapeSet);\nSet<Character> htmlEscapeSet = new HashSet<Character>();\nhtmlEscapeSet.add('<');\nhtmlEscapeSet.add('>');\nhtmlEscapeSet.add('&');\nhtmlEscapeSet.add('=');\nhtmlEscapeSet.add('\\'');\nHTML_ESCAPE_CHARS = Collections.unmodifiableSet(htmlEscapeSet);\n}",
            "method_id": 79
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:assignToRoot(Lcom/google/gson/JsonElement;)V",
            "method_body": "private void assignToRoot(JsonElement newRoot) {\nPreconditions.checkNotNull(newRoot);\nroot = newRoot;\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:start(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void start(ObjectTypePair node) {\nif (node == null) {\nif (ancestors.contains(node)) {\nancestors.push(node);\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:end(Lcom/google/gson/ObjectTypePair;)V",
            "method_body": "public void end(ObjectTypePair node) {\nif (node != null) {\nancestors.pop();\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:visitUsingCustomHandler(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\nObject obj = objTypePair.getObject();\nif (obj == null) {\nJsonElement element = findAndInvokeCustomSerializer(objTypePair);\nif (element != null) {\nreturn false;\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:findAndInvokeCustomSerializer(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/JsonElement;",
            "method_body": "private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\nPair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\nif (pair == null) {\nreturn null;\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:contains(Lcom/google/gson/ObjectTypePair;)Z",
            "method_body": "public boolean contains(ObjectTypePair obj) {\nif (obj == null) {\nfor (ObjectTypePair stackObject : stack) {\nreturn false;\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:pop()Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair pop() {\nreturn stack.pop();\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:push(Lcom/google/gson/ObjectTypePair;)Lcom/google/gson/ObjectTypePair;",
            "method_body": "public ObjectTypePair push(ObjectTypePair obj) {\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.google.gson.MemoryRefStack:<init>()V",
            "method_body": "private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();\nPreconditions.checkNotNull(obj);\nreturn stack.push(obj);\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.google.gson.JsonSerializationVisitor:startVisitingObject(Ljava/lang/Object;)V",
            "method_body": "public void startVisitingObject(Object node) {\nassignToRoot(new JsonObject());\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.google.gson.ModifierBasedExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (int modifier : modifiers) {\nif (f.hasModifier(modifier)) {\n}\nreturn false;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.google.gson.AnonymousAndLocalClassExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn isAnonymousOrLocal(f.getDeclaredClass());\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:hasModifier(I)Z",
            "method_body": "public boolean hasModifier(int modifier) {\nreturn (modifiers & modifier) != 0;\n}",
            "method_id": 92
        },
        {
            "method_signature": "com.google.gson.SyntheticFieldExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nreturn skipSyntheticFields && f.isSynthetic();\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:isSynthetic()Z",
            "method_body": "boolean isSynthetic() {\nreturn isSynthetic;\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.google.gson.DisjunctionExclusionStrategy:shouldSkipField(Lcom/google/gson/FieldAttributes;)Z",
            "method_body": "public boolean shouldSkipField(FieldAttributes f) {\nfor (ExclusionStrategy strategy : strategies) {\nif (strategy.shouldSkipField(f)) {\n}\nreturn false;\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:<clinit>()V",
            "method_body": "private static final String MAX_CACHE_PROPERTY_NAME =\nprivate static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE =\n* Constructs a Field Attributes object from the {@code f}.",
            "method_id": 96
        },
        {
            "method_signature": "com.google.gson.FieldAttributes:getMaxCacheSize()I",
            "method_body": "private static int getMaxCacheSize() {\nfinal int defaultMaxCacheSize = 2000;\nString propertyValue = System.getProperty(\nreturn Integer.parseInt(propertyValue);\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.google.gson.LruCache:<init>(I)V",
            "method_body": "LruCache(int maxCapacity) {\nsuper(maxCapacity, 0.7F, true);\nthis.maxCapacity = maxCapacity;\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.google.gson.ParameterizedTypeHandlerMap:getHandlerForTypeHierarchy(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "private T getHandlerForTypeHierarchy(Class<?> type) {\nfor (Pair<Class<?>, T> entry : typeHierarchyList) {\nif (entry.first.isAssignableFrom(type)) {\n}\nreturn null;\n}",
            "method_id": 99
        }
    ]
}