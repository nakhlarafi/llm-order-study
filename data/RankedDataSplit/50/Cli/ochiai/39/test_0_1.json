{
    "bug_id": 39,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist",
    "test_body": "public void testExistingFilePatternFileNotExist() throws Exception {\nfinal Options options = PatternOptionBuilder.parsePattern(\"f<\");\nfinal CommandLineParser parser = new PosixParser();\nfinal CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\n180: assertNull(\"option f parsed\", line.getOptionObject(\"f\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: option f parsed expected null, but was:<non-existing.file>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotNull(Assert.java:664)\nat org.junit.Assert.assertNull(Assert.java:646)\nat org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist(PatternOptionBuilderTest.java:180)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List<Option> helpOptions()\nreturn new ArrayList<Option>(shortOpts.values());\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(final Option opt)\noptions.add(opt);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn shortOpts.get(opt);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(final Option opt)\nreturn optionGroups.get(opt.getKey());\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(final String str)\nif (str == null)\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\nreturn str;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(final Option opt)\nfinal String key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(final char c)\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(final char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(final String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfinal char ch = opt.charAt(0);\nif (!isValidOpt(ch))\n}\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 66
        }
    ]
}