{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.sym.SymbolsViaParserTest.testSymbolTableExpansionBytes",
    "test_body": "public void testSymbolTableExpansionBytes() throws Exception {\n_testSymbolTableExpansion(true);\n}\n",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 512\nat com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:824)\nat com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)\nat com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2185)\nat com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1691)\nat com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:740)\nat com.fasterxml.jackson.core.sym.SymbolsViaParserTest._testSymbolTableExpansion(SymbolsViaParserTest.java:87)\nat com.fasterxml.jackson.core.sym.SymbolsViaParserTest.testSymbolTableExpansionBytes(SymbolsViaParserTest.java:32)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_reportTooManyCollisions()V",
            "method_body": "protected void _reportTooManyCollisions()\nif (_hashSize <= 1024) { // would have spill-over area of 128 entries\nreturn;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_findSecondary(II)Ljava/lang/String;",
            "method_body": "private String _findSecondary(int origOffset, int q1)\nint offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);\nfinal int[] hashArea = _hashArea;\nfinal int bucketSize = (1 << _tertiaryShift);\nfor (int end = offset + bucketSize; offset < end; offset += 4) {\nint len = hashArea[offset+3];\nif ((q1 == hashArea[offset]) && (1 == len)) {\nif (len == 0) {\nreturn null;\nfor (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {\nif ((q1 == hashArea[offset]) && (1 == hashArea[offset+3])) {\nreturn null;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_skipString()V",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nif (i != INT_QUOTE) {\nif ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)\nfinal byte[] input = _inputBuffer;\nfinal int[] codes = _icLatin1;\nint q = input[_inputPtr++] & 0xFF;\nif (codes[q] == 0) {\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nif (i == INT_QUOTE) { // 3 byte/char case or broken\nreturn findName(q, 3);\nif (i == INT_QUOTE) { // 2 byte/char case or broken\nreturn findName(q, 2);\nif (i == INT_QUOTE) { // one byte/char case or broken\nreturn findName(q, 1);\nq1 = pad(q1, lastQuadBytes);\nString name = _symbols.findName(q1);\nif (name != null) {\n_quadBuffer[0] = q1;\nreturn addName(_quadBuffer, 1, lastQuadBytes);\nint byteLen = (qlen << 2) - 4 + lastQuadBytes;\nif (lastQuadBytes < 4) {\nlastQuad = quads[qlen-1];\nquads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\nchar[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\nint cix = 0;\nfor (int ix = 0; ix < byteLen; ) {\nint ch = quads[ix >> 2]; // current quad, need to shift+mask\nint byteIx = (ix & 3);\nch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n++ix;\nif (ch > 127) { // multi-byte\nif (cix >= cbuf.length) {\ncbuf[cix++] = (char) ch;\n}\nString baseName = new String(cbuf, 0, cix);\nif (lastQuadBytes < 4) {\nquads[qlen-1] = lastQuad;\nreturn _symbols.addName(baseName, quads, qlen);\n_tokenIncomplete = false;\nfinal int[] codes = _icUTF8;\nfinal byte[] inputBuffer = _inputBuffer;\nint ptr = _inputPtr;\nint max = _inputEnd;\nif (ptr >= max) {\nwhile (ptr < max) {\nc = (int) inputBuffer[ptr++] & 0xFF;\nif (codes[c] != 0) {\n_inputPtr = ptr;\nbreak ascii_loop;\nif (c == INT_QUOTE) {\nbreak main_loop;\n}\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_spilloverStart()I",
            "method_body": "private final int _spilloverStart() {\nint offset = _hashSize;\nreturn (offset << 3) - offset;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:findName(II)Ljava/lang/String;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nif (i != INT_QUOTE) {\nif ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)\nfinal byte[] input = _inputBuffer;\nfinal int[] codes = _icLatin1;\nint q = input[_inputPtr++] & 0xFF;\nif (codes[q] == 0) {\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nif (i == INT_QUOTE) { // 3 byte/char case or broken\nreturn findName(q, 3);\nif (i == INT_QUOTE) { // 2 byte/char case or broken\nreturn findName(q, 2);\nif (i == INT_QUOTE) { // one byte/char case or broken\nreturn findName(q, 1);\nq1 = pad(q1, lastQuadBytes);\nString name = _symbols.findName(q1);\nif (name != null) {\n_quadBuffer[0] = q1;\nreturn addName(_quadBuffer, 1, lastQuadBytes);\nint byteLen = (qlen << 2) - 4 + lastQuadBytes;\nif (lastQuadBytes < 4) {\nlastQuad = quads[qlen-1];\nquads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\nchar[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\nint cix = 0;\nfor (int ix = 0; ix < byteLen; ) {\nint ch = quads[ix >> 2]; // current quad, need to shift+mask\nint byteIx = (ix & 3);\nch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n++ix;\nif (ch > 127) { // multi-byte\nif (cix >= cbuf.length) {\ncbuf[cix++] = (char) ch;\n}\nString baseName = new String(cbuf, 0, cix);\nif (lastQuadBytes < 4) {\nquads[qlen-1] = lastQuad;\nreturn _symbols.addName(baseName, quads, qlen);\n_tokenIncomplete = false;\nfinal int[] codes = _icUTF8;\nfinal byte[] inputBuffer = _inputBuffer;\nint ptr = _inputPtr;\nint max = _inputEnd;\nif (ptr >= max) {\nwhile (ptr < max) {\nc = (int) inputBuffer[ptr++] & 0xFF;\nif (codes[c] != 0) {\n_inputPtr = ptr;\nbreak ascii_loop;\nif (c == INT_QUOTE) {\nbreak main_loop;\n}\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:createParser([B)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "public JsonParser createParser(byte[] data) throws IOException, JsonParseException {\nIOContext ctxt = _createContext(data, true);\nif (_inputDecorator != null) {\nreturn _createParser(data, 0, data.length, ctxt);\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_createParser([BIILcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException\nreturn new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures,\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:<init>(Lcom/fasterxml/jackson/core/io/IOContext;[BII)V",
            "method_body": "public ByteSourceJsonBootstrapper(IOContext ctxt, byte[] inputBuffer, int inputStart, int inputLen) {\n_context = ctxt;\n_in = null;\n_inputBuffer = inputBuffer;\n_inputPtr = inputStart;\n_inputEnd = (inputStart + inputLen);\n_inputProcessed = -inputStart;\n_bufferRecyclable = false;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:findName(I)Ljava/lang/String;",
            "method_body": "public String findName(int q1)\nint offset = _calcOffset(calcHash(q1));\nfinal int[] hashArea = _hashArea;\nint len = hashArea[offset+3];\nif (len == 1) {\nif (hashArea[offset] == q1) {\n} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so\nreturn null;\nint offset2 = _secondaryStart + ((offset >> 3) << 2);\nlen = hashArea[offset2+3];\nif (len == 1) {\nif (hashArea[offset2] == q1) {\n} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so\nreturn null;\nreturn _findSecondary(offset, q1);\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:calcHash(I)I",
            "method_body": "public int calcHash(int q1)\nint hash = q1 ^ _seed;\nhash += (hash >>> 16); // to xor hi- and low- 16-bits\nhash ^= (hash << 3); // shuffle back a bit\nhash += (hash >>> 12); // and bit more\nreturn hash;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_nextAfterName()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final JsonToken _nextTokenNotInObject(int i) throws IOException\nif (i == INT_QUOTE) {\nswitch (i) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\n_nameCopied = false; // need to invalidate if it was copied\nJsonToken t = _nextToken;\n_nextToken = null;\nif (t == JsonToken.START_ARRAY) {\n} else if (t == JsonToken.START_OBJECT) {\nreturn (_currToken = t);\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:pad(II)I",
            "method_body": "private final static int pad(int q, int bytes) {\nreturn (bytes == 4) ? q : (q | (-1 << (bytes << 3)));\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:addName([III)Ljava/lang/String;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nif (i != INT_QUOTE) {\nif ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)\nfinal byte[] input = _inputBuffer;\nfinal int[] codes = _icLatin1;\nint q = input[_inputPtr++] & 0xFF;\nif (codes[q] == 0) {\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nif (i == INT_QUOTE) { // 3 byte/char case or broken\nreturn findName(q, 3);\nif (i == INT_QUOTE) { // 2 byte/char case or broken\nreturn findName(q, 2);\nif (i == INT_QUOTE) { // one byte/char case or broken\nreturn findName(q, 1);\nq1 = pad(q1, lastQuadBytes);\nString name = _symbols.findName(q1);\nif (name != null) {\n_quadBuffer[0] = q1;\nreturn addName(_quadBuffer, 1, lastQuadBytes);\nint byteLen = (qlen << 2) - 4 + lastQuadBytes;\nif (lastQuadBytes < 4) {\nlastQuad = quads[qlen-1];\nquads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\nchar[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\nint cix = 0;\nfor (int ix = 0; ix < byteLen; ) {\nint ch = quads[ix >> 2]; // current quad, need to shift+mask\nint byteIx = (ix & 3);\nch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n++ix;\nif (ch > 127) { // multi-byte\nif (cix >= cbuf.length) {\ncbuf[cix++] = (char) ch;\n}\nString baseName = new String(cbuf, 0, cix);\nif (lastQuadBytes < 4) {\nquads[qlen-1] = lastQuad;\nreturn _symbols.addName(baseName, quads, qlen);\n_tokenIncomplete = false;\nfinal int[] codes = _icUTF8;\nfinal byte[] inputBuffer = _inputBuffer;\nint ptr = _inputPtr;\nint max = _inputEnd;\nif (ptr >= max) {\nwhile (ptr < max) {\nc = (int) inputBuffer[ptr++] & 0xFF;\nif (codes[c] != 0) {\n_inputPtr = ptr;\nbreak ascii_loop;\nif (c == INT_QUOTE) {\nbreak main_loop;\n}\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:mergeChild(Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo;)V",
            "method_body": "private void mergeChild(TableInfo childState)\nfinal int childCount = childState.count;\nTableInfo currState = _tableInfo.get();\nif (childCount == currState.count) {\nif (childCount > MAX_ENTRIES_FOR_REUSE) {\n_tableInfo.compareAndSet(currState, childState);\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:<init>(Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;)V",
            "method_body": "public TableInfo(ByteQuadsCanonicalizer src)\n{\nsize = src._hashSize;\ncount = src._count;\ntertiaryShift = src._tertiaryShift;\nmainHash = src._hashArea;\nnames = src._names;\nspilloverEnd = src._spilloverEnd;\nlongNameOffset = src._longNameOffset;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_skipColon()I",
            "method_body": "private final int _skipColon() throws IOException\nif ((_inputPtr + 4) >= _inputEnd) {\nint i = _inputBuffer[_inputPtr];\nif (i == INT_COLON) { // common case, no leading space\nif (i == INT_SPACE || i == INT_TAB) {\ni = _inputBuffer[++_inputPtr];\nif (i == INT_COLON) {\ni = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n++_inputPtr;\nreturn i;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:loadMore()Z",
            "method_body": "protected final boolean loadMore() throws IOException\n_currInputProcessed += _inputEnd;\n_currInputRowStart -= _inputEnd;\nif (_inputStream != null) {\nreturn false;\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_parseName(I)Ljava/lang/String;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nif (i != INT_QUOTE) {\nif ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)\nfinal byte[] input = _inputBuffer;\nfinal int[] codes = _icLatin1;\nint q = input[_inputPtr++] & 0xFF;\nif (codes[q] == 0) {\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nq = (q << 8) | i;\ni = input[_inputPtr++] & 0xFF;\nif (codes[i] == 0) {\nif (i == INT_QUOTE) { // 3 byte/char case or broken\nreturn findName(q, 3);\nif (i == INT_QUOTE) { // 2 byte/char case or broken\nreturn findName(q, 2);\nif (i == INT_QUOTE) { // one byte/char case or broken\nreturn findName(q, 1);\nq1 = pad(q1, lastQuadBytes);\nString name = _symbols.findName(q1);\nif (name != null) {\n_quadBuffer[0] = q1;\nreturn addName(_quadBuffer, 1, lastQuadBytes);\nint byteLen = (qlen << 2) - 4 + lastQuadBytes;\nif (lastQuadBytes < 4) {\nlastQuad = quads[qlen-1];\nquads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));\nchar[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\nint cix = 0;\nfor (int ix = 0; ix < byteLen; ) {\nint ch = quads[ix >> 2]; // current quad, need to shift+mask\nint byteIx = (ix & 3);\nch = (ch >> ((3 - byteIx) << 3)) & 0xFF;\n++ix;\nif (ch > 127) { // multi-byte\nif (cix >= cbuf.length) {\ncbuf[cix++] = (char) ch;\n}\nString baseName = new String(cbuf, 0, cix);\nif (lastQuadBytes < 4) {\nquads[qlen-1] = lastQuad;\nreturn _symbols.addName(baseName, quads, qlen);\n_tokenIncomplete = false;\nfinal int[] codes = _icUTF8;\nfinal byte[] inputBuffer = _inputBuffer;\nint ptr = _inputPtr;\nint max = _inputEnd;\nif (ptr >= max) {\nwhile (ptr < max) {\nc = (int) inputBuffer[ptr++] & 0xFF;\nif (codes[c] != 0) {\n_inputPtr = ptr;\nbreak ascii_loop;\nif (c == INT_QUOTE) {\nbreak main_loop;\n}\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_calcOffset(I)I",
            "method_body": "private final int _calcOffset(int hash)\nint ix = hash & (_hashSize-1);\nreturn (ix << 2);\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:addName(Ljava/lang/String;[II)Ljava/lang/String;",
            "method_body": "public String addName(String name, int[] q, int qlen)\n_verifySharing();\nif (_intern) {\nname = InternCache.instance.intern(name);\nswitch (qlen) {\noffset = _findOffsetForAdd(calcHash(q[0]));\n_hashArea[offset] = q[0];\n_hashArea[offset+3] = 1;\nbreak;\n_names[offset >> 2] = name;\n++_count;\n_verifyNeedForRehash();\nreturn name;\n}",
            "method_id": 19
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_verifyNeedForRehash()V",
            "method_body": "private void _verifyNeedForRehash() {\nif (_count > (_hashSize >> 1)) { // over 50%\nint spillCount = (_spilloverEnd - _spilloverStart()) >> 2;\nif ((spillCount > (1 + _count >> 7))\n_needRehash = true;\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_verifySharing()V",
            "method_body": "private void _verifySharing()\nif (_hashShared) {\n_hashArea = Arrays.copyOf(_hashArea, _hashArea.length);\n_names = Arrays.copyOf(_names, _names.length);\n_hashShared = false;\nif (_needRehash) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_findOffsetForAdd(I)I",
            "method_body": "private int _findOffsetForAdd(int hash)\nint offset = _calcOffset(hash);\nfinal int[] hashArea = _hashArea;\nif (hashArea[offset+3] == 0) {\nreturn offset;\nint offset2 = _secondaryStart + ((offset >> 3) << 2);\nif (hashArea[offset2+3] == 0) {\nreturn offset2;\noffset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);\nfinal int bucketSize = (1 << _tertiaryShift);\nfor (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {\nif (hashArea[offset2+3] == 0) {\nreturn offset2;\noffset = _spilloverEnd;\n_spilloverEnd += 4;\nfinal int end = (_hashSize << 3);\nif (_spilloverEnd >= end) {\nif (_failOnDoS) {\n_reportTooManyCollisions();\n_needRehash = true;\nreturn offset;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:getCurrentName()Ljava/lang/String;",
            "method_body": "@Override public String getCurrentName() throws IOException {\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nreturn _parsingContext.getCurrentName();\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:getCurrentName()Ljava/lang/String;",
            "method_body": "@Override public String getCurrentName() { return _currentName; }\n@Override public String getCurrentName() { return _currentName; }",
            "method_id": 24
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_handleEOF()V",
            "method_body": "protected void _handleEOF() throws JsonParseException {\nif (!_parsingContext.inRoot()) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:_eofAsNextChar()I",
            "method_body": "protected final int _eofAsNextChar() throws JsonParseException {\n_handleEOF();\nreturn -1;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:setCurrentName(Ljava/lang/String;)V",
            "method_body": "public void setCurrentName(String name) throws JsonProcessingException {\n_currentName = name;\nif (_dups != null) { _checkDup(_dups, name); }\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:checkUTF32(I)Z",
            "method_body": "public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\nswitch (quad) {\nint msw = quad >>> 16;\nif (msw == 0xFEFF) { // UTF-16, BE\nif (msw == 0xFFFE) { // UTF-16, LE\nif ((quad >>> 8) == 0xEFBBBF) { // UTF-8\nreturn false;\nif ((quad >> 8) == 0) { // 0x000000?? -> UTF32-BE\n} else if ((quad & 0x00FFFFFF) == 0) { // 0x??000000 -> UTF32-LE\n} else if ((quad & ~0x00FF0000) == 0) { // 0x00??0000 -> UTF32-in-order\n} else if ((quad & ~0x0000FF00) == 0) { // 0x0000??00 -> UTF32-in-order\nreturn false;\nif ((i16 & 0xFF00) == 0) { // UTF-16BE\n} else if ((i16 & 0x00FF) == 0) { // UTF-16LE\nreturn false;\nint gotten = (_inputEnd - _inputPtr);\nwhile (gotten < minimum) {\nreturn true;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:handleBOM(I)Z",
            "method_body": "public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\nswitch (quad) {\nint msw = quad >>> 16;\nif (msw == 0xFEFF) { // UTF-16, BE\nif (msw == 0xFFFE) { // UTF-16, LE\nif ((quad >>> 8) == 0xEFBBBF) { // UTF-8\nreturn false;\nif ((quad >> 8) == 0) { // 0x000000?? -> UTF32-BE\n} else if ((quad & 0x00FFFFFF) == 0) { // 0x??000000 -> UTF32-LE\n} else if ((quad & ~0x00FF0000) == 0) { // 0x00??0000 -> UTF32-in-order\n} else if ((quad & ~0x0000FF00) == 0) { // 0x0000??00 -> UTF32-in-order\nreturn false;\nif ((i16 & 0xFF00) == 0) { // UTF-16BE\n} else if ((i16 & 0x00FF) == 0) { // UTF-16LE\nreturn false;\nint gotten = (_inputEnd - _inputPtr);\nwhile (gotten < minimum) {\nreturn true;\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:emptyAndGetCurrentSegment()[C",
            "method_body": "public char[] emptyAndGetCurrentSegment()\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\nif (_hasSegments) {\nchar[] curr = _currentSegment;\nif (curr == null) {\n_currentSegment = curr = buf(0);\nreturn curr;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public JsonReadContext createChildObjectContext(int lineNr, int colNr) {\nJsonReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new JsonReadContext(this,\nreturn ctxt;\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_closeInput()V",
            "method_body": "protected void _closeInput() throws IOException\nif (_inputStream != null) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_releaseBuffers()V",
            "method_body": "protected void _releaseBuffers() throws IOException\nsuper._releaseBuffers();\n_symbols.release();\nif (_bufferRecyclable) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:release()V",
            "method_body": "public void release()\nif (_parent != null && maybeDirty()) {\n_parent.mergeChild(new TableInfo(this));\n_hashShared = true;\n}",
            "method_id": 34
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:maybeDirty()Z",
            "method_body": "public boolean maybeDirty() { return !_hashShared; }\npublic boolean maybeDirty() { return !_hashShared; }",
            "method_id": 35
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:checkUTF16(I)Z",
            "method_body": "public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\nswitch (quad) {\nint msw = quad >>> 16;\nif (msw == 0xFEFF) { // UTF-16, BE\nif (msw == 0xFFFE) { // UTF-16, LE\nif ((quad >>> 8) == 0xEFBBBF) { // UTF-8\nreturn false;\nif ((quad >> 8) == 0) { // 0x000000?? -> UTF32-BE\n} else if ((quad & 0x00FFFFFF) == 0) { // 0x??000000 -> UTF32-LE\n} else if ((quad & ~0x00FF0000) == 0) { // 0x00??0000 -> UTF32-in-order\n} else if ((quad & ~0x0000FF00) == 0) { // 0x0000??00 -> UTF32-in-order\nreturn false;\nif ((i16 & 0xFF00) == 0) { // UTF-16BE\n} else if ((i16 & 0x00FF) == 0) { // UTF-16LE\nreturn false;\nint gotten = (_inputEnd - _inputPtr);\nwhile (gotten < minimum) {\nreturn true;\n}",
            "method_id": 36
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;ILjava/io/InputStream;Lcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;[BIIZ)V",
            "method_body": "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\nsuper(ctxt, features);\n_inputStream = in;\n_objectCodec = codec;\n_symbols = sym;\n_inputBuffer = inputBuffer;\n_inputPtr = start;\n_inputEnd = end;\n_currInputRowStart = start;\n_currInputProcessed = -start;\n_bufferRecyclable = bufferRecyclable;\n}",
            "method_id": 37
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:<clinit>()V",
            "method_body": "final static byte BYTE_LF = (byte) '\\n';\nprivate final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();\nprotected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();\nprotected int[] _quadBuffer = new int[16];\nprotected boolean _tokenIncomplete = false;\nsuper(ctxt, features);\n_inputStream = in;\n_objectCodec = codec;\n_symbols = sym;\n_inputBuffer = inputBuffer;\n_inputPtr = start;\n_inputEnd = end;\n_currInputRowStart = start;\n_currInputProcessed = -start;\n_bufferRecyclable = bufferRecyclable;\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_nextTokenNotInObject(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final JsonToken _nextTokenNotInObject(int i) throws IOException\nif (i == INT_QUOTE) {\nswitch (i) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\n_nameCopied = false; // need to invalidate if it was copied\nJsonToken t = _nextToken;\n_nextToken = null;\nif (t == JsonToken.START_ARRAY) {\n} else if (t == JsonToken.START_OBJECT) {\nreturn (_currToken = t);\n}",
            "method_id": 39
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser:_skipWSOrEnd()I",
            "method_body": "private final int _skipWSOrEnd() throws IOException\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++] & 0xFF;\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nif (i != INT_SPACE) {\nwhile (_inputPtr < _inputEnd) {\ni = _inputBuffer[_inputPtr++] & 0xFF;\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\n}",
            "method_id": 40
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeUtf8()[I",
            "method_body": "public static int[] getInputCodeUtf8() { return sInputCodesUTF8; }\npublic static int[] getInputCodeUtf8() { return sInputCodesUTF8; }",
            "method_id": 41
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:resetWithEmpty()V",
            "method_body": "public void resetWithEmpty()\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\nif (_hasSegments) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<init>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 43
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:<clinit>()V",
            "method_body": "private final static int MAX_ENTRIES = 180;\npublic final static InternCache instance = new InternCache();\nprivate final Object lock = new Object();\nprivate InternCache() { super(MAX_ENTRIES, 0.8f, 4); }",
            "method_id": 44
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:intern(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String intern(String input) {\nString result = get(input);\nif (result != null) { return result; }\nif (size() >= MAX_ENTRIES) {\nresult = input.intern();\nput(result, result);\nreturn result;\n}",
            "method_id": 45
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:detectEncoding()Lcom/fasterxml/jackson/core/JsonEncoding;",
            "method_body": "public JsonEncoding detectEncoding() throws IOException\nboolean foundEncoding = false;\nif (ensureLoaded(4)) {\nint quad =  (_inputBuffer[_inputPtr] << 24)\nif (handleBOM(quad)) {\nif (checkUTF32(quad)) {\n} else if (checkUTF16(quad >>> 16)) {\n} else if (ensureLoaded(2)) {\nif (!foundEncoding) {\nenc = JsonEncoding.UTF8;\n_context.setEncoding(enc);\nreturn enc;\n}",
            "method_id": 46
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:constructParser(ILcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;I)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "public JsonParser constructParser(int parserFeatures, ObjectCodec codec,\nJsonEncoding enc = detectEncoding();\nif (enc == JsonEncoding.UTF8) {\nif (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures)) {\nByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);\nreturn new UTF8StreamJsonParser(_context, parserFeatures, _in, codec, can,\n}",
            "method_id": 47
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper:ensureLoaded(I)Z",
            "method_body": "public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\nswitch (quad) {\nint msw = quad >>> 16;\nif (msw == 0xFEFF) { // UTF-16, BE\nif (msw == 0xFFFE) { // UTF-16, LE\nif ((quad >>> 8) == 0xEFBBBF) { // UTF-8\nreturn false;\nif ((quad >> 8) == 0) { // 0x000000?? -> UTF32-BE\n} else if ((quad & 0x00FFFFFF) == 0) { // 0x??000000 -> UTF32-LE\n} else if ((quad & ~0x00FF0000) == 0) { // 0x00??0000 -> UTF32-in-order\n} else if ((quad & ~0x0000FF00) == 0) { // 0x0000??00 -> UTF32-in-order\nreturn false;\nif ((i16 & 0xFF00) == 0) { // UTF-16BE\n} else if ((i16 & 0x00FF) == 0) { // UTF-16LE\nreturn false;\nint gotten = (_inputEnd - _inputPtr);\nwhile (gotten < minimum) {\nreturn true;\n}",
            "method_id": 48
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:<init>(Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;ZIZLcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo;)V",
            "method_body": "private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, boolean intern,\n{\n_parent = parent;\n_seed = seed;\n_intern = intern;\n_failOnDoS = failOnDoS;\n_tableInfo = null; // not used by child tables\n_count = state.count;\n_hashSize = state.size;\n_secondaryStart = _hashSize << 2; // right after primary area\n_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary\n_tertiaryShift = state.tertiaryShift;\n_hashArea = state.mainHash;\n_names = state.names;\n_spilloverEnd = state.spilloverEnd;\n_longNameOffset = state.longNameOffset;\n_needRehash = false;\n_hashShared = true;\n}",
            "method_id": 49
        }
    ]
}