{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches",
    "test_body": "public void testNotAllowMultipleMatches() throws Exception\n{\nString jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}\");\nJsonParser p0 = JSON_F.createParser(jsonString);\nJsonParser p = new FilteringParserDelegate(p0,\nnew NameMatchFilter(\"value\"),\nfalse, // includePath\nfalse // multipleMatches -false\n);\nString result = readAndWrite(JSON_F, p);\nassertEquals(aposToQuotes(\"3\"), result);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatches(BasicParserFilteringTest.java:118)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:enabledIn(I)Z",
            "method_body": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\npublic boolean enabledIn(int flags) { return (flags & _mask) != 0; }",
            "method_id": 120
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.FilteringParserDelegate:getNumberType()Lcom/fasterxml/jackson/core/JsonParser$NumberType;",
            "method_body": "public JsonToken nextToken() throws IOException\nTokenFilterContext ctxt = _exposedContext;\nif (ctxt != null) {\nJsonToken t = delegate.nextToken();\nif (t == null) {\nswitch (t.id()) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartObject();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildObjectContext(f, false);\nif (_includePath) {\nfinal String name = delegate.getCurrentName();\nf = _headContext.setFieldName(name);\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) {\nf = f.includeProperty(name);\nif (f == null) {\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (_includePath) {\nreturn _nextToken2();\nJsonToken t = delegate.nextToken();\nif (t == null) { // is this even legal?\nreturn (_currToken = t);\nswitch (t.id()) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartArray();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildArrayContext(f, false);\nif (_includePath) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartObject();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildObjectContext(f, false);\nif (_includePath) {\nboolean returnEnd = _headContext.isStartHandled();\nf = _headContext.getFilter();\nif ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\nf.filterFinishArray();\n_headContext = _headContext.getParent();\n_itemFilter = _headContext.getFilter();\nif (returnEnd) {\ncontinue main_loop;\nfinal String name = delegate.getCurrentName();\nf = _headContext.setFieldName(name);\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // filter out the value\nf = f.includeProperty(name);\nif (f == null) { // filter out the value\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (_includePath) {\nif (_includePath) {\ncontinue main_loop;\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nreturn (_currToken = t);\nif (f != null) {\nf = _headContext.checkValue(f);\nif ((f == TokenFilter.INCLUDE_ALL)\n}\npublic int getIntValue() throws IOException { return delegate.getIntValue(); }\npublic NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n}",
            "method_id": 121
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>()V",
            "method_body": "public BufferRecycler() {\nthis(4, 4);\n}",
            "method_id": 122
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:filterStartObject()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter filterStartObject() {\nreturn this;\n}",
            "method_id": 123
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\n}",
            "method_id": 124
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:id()I",
            "method_body": "public final int id() { return _id; }\npublic final int id() { return _id; }",
            "method_id": 125
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 126
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:createRoot(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "protected static CharsToNameCanonicalizer createRoot(int hashSeed) {\nreturn sBootstrapSymbolTable.makeOrphan(hashSeed);\n}",
            "method_id": 127
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilterContext:getParent()Lcom/fasterxml/jackson/core/filter/TokenFilterContext;",
            "method_body": "@Override public final TokenFilterContext getParent() { return _parent; }\n@Override public final TokenFilterContext getParent() { return _parent; }",
            "method_id": 128
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:charBufferLength(I)I",
            "method_body": "protected int charBufferLength(int ix) {\nreturn CHAR_BUFFER_LENGTHS[ix];\n}",
            "method_id": 129
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonWriteContext:writeValue()I",
            "method_body": "public int writeValue() {\nif (_type == TYPE_OBJECT) {\nif (_type == TYPE_ARRAY) {\n++_index;\nreturn (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n}",
            "method_id": 130
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilterContext:reset(ILcom/fasterxml/jackson/core/filter/TokenFilter;Z)Lcom/fasterxml/jackson/core/filter/TokenFilterContext;",
            "method_body": "protected TokenFilterContext reset(int type,\n_type = type;\n_filter = filter;\n_index = -1;\n_currentName = null;\n_startHandled = startWritten;\n_needToHandleName = false;\nreturn this;\n}",
            "method_id": 131
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<clinit>()V",
            "method_body": "private final static int[] CHAR_BUFFER_LENGTHS = new int[] { 4000, 4000, 200, 200 };\nprivate final static int[] CHAR_BUFFER_LENGTHS = new int[] { 4000, 4000, 200, 200 };",
            "method_id": 132
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
            "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}",
            "method_id": 133
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.FilteringParserDelegate:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "public JsonToken nextToken() throws IOException\nTokenFilterContext ctxt = _exposedContext;\nif (ctxt != null) {\nJsonToken t = delegate.nextToken();\nif (t == null) {\nswitch (t.id()) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartObject();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildObjectContext(f, false);\nif (_includePath) {\nfinal String name = delegate.getCurrentName();\nf = _headContext.setFieldName(name);\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) {\nf = f.includeProperty(name);\nif (f == null) {\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (_includePath) {\nreturn _nextToken2();\nJsonToken t = delegate.nextToken();\nif (t == null) { // is this even legal?\nreturn (_currToken = t);\nswitch (t.id()) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartArray();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildArrayContext(f, false);\nif (_includePath) {\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // does this occur?\nf = _headContext.checkValue(f);\nif (f == null) {\nif (f != TokenFilter.INCLUDE_ALL) {\nf = f.filterStartObject();\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\n_headContext = _headContext.createChildObjectContext(f, false);\nif (_includePath) {\nboolean returnEnd = _headContext.isStartHandled();\nf = _headContext.getFilter();\nif ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\nf.filterFinishArray();\n_headContext = _headContext.getParent();\n_itemFilter = _headContext.getFilter();\nif (returnEnd) {\ncontinue main_loop;\nfinal String name = delegate.getCurrentName();\nf = _headContext.setFieldName(name);\nif (f == TokenFilter.INCLUDE_ALL) {\nif (f == null) { // filter out the value\nf = f.includeProperty(name);\nif (f == null) { // filter out the value\n_itemFilter = f;\nif (f == TokenFilter.INCLUDE_ALL) {\nif (_includePath) {\nif (_includePath) {\ncontinue main_loop;\nf = _itemFilter;\nif (f == TokenFilter.INCLUDE_ALL) {\nreturn (_currToken = t);\nif (f != null) {\nf = _headContext.checkValue(f);\nif ((f == TokenFilter.INCLUDE_ALL)\n}\npublic int getIntValue() throws IOException { return delegate.getIntValue(); }\npublic NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n}",
            "method_id": 134
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(I)[C",
            "method_body": "public final char[] allocCharBuffer(int ix) {\nreturn allocCharBuffer(ix, 0);\n}",
            "method_id": 135
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_getBufferRecycler()Lcom/fasterxml/jackson/core/util/BufferRecycler;",
            "method_body": "public BufferRecycler _getBufferRecycler()\nif (isEnabled(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)) {\nSoftReference<BufferRecycler> ref = _recyclerRef.get();\nbr = (ref == null) ? null : ref.get();\nif (br == null) {\nbr = new BufferRecycler();\n_recyclerRef.set(new SoftReference<BufferRecycler>(br));\n} else {\nreturn br;\n}",
            "method_id": 136
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_decorate(Ljava/io/Writer;Lcom/fasterxml/jackson/core/io/IOContext;)Ljava/io/Writer;",
            "method_body": "protected final Writer _decorate(Writer out, IOContext ctxt) throws IOException {\nif (_outputDecorator != null) {\nreturn out;\n}",
            "method_id": 137
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilterContext:checkValue(Lcom/fasterxml/jackson/core/filter/TokenFilter;)Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter checkValue(TokenFilter filter) {\nif (_type == TYPE_OBJECT) {\nreturn filter;\nint ix = ++_index;\nif (_type == TYPE_ARRAY) {\nreturn filter.includeElement(ix);\nreturn filter.includeRootValue(ix);\n}",
            "method_id": 138
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.GeneratorBase:close()V",
            "method_body": "@Override public abstract void flush() throws IOException;\n@Override public void close() throws IOException { _closed = true; }",
            "method_id": 139
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_matchTrue()V",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\nif (ch == INT_0) {\nint intLen = 1; // already got one\nif (ptr >= inputLen) {\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n++intLen;\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n--ptr; // need to push back following separator\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nif ((_inputPtr + 4) >= _inputEnd) {\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\n++_inputPtr;\nreturn i;\nif (i != INT_COMMA) {\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn i;\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}",
            "method_id": 140
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilter:<init>()V",
            "method_body": "protected TokenFilter() { }\nprotected TokenFilter() { }",
            "method_id": 141
        },
        {
            "method_signature": "com.fasterxml.jackson.core.filter.TokenFilterContext:getFilter()Lcom/fasterxml/jackson/core/filter/TokenFilter;",
            "method_body": "public TokenFilter getFilter() { return _filter; }\npublic TokenFilter getFilter() { return _filter; }",
            "method_id": 142
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonGeneratorImpl:<clinit>()V",
            "method_body": "protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();\nprotected int[] _outputEscapes = sOutputEscapes;\nprotected SerializableString _rootValueSeparator\nsuper(features, codec);\n_ioContext = ctxt;\nif (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {\n_cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n}",
            "method_id": 143
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 144
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.InternCache:intern(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String intern(String input) {\nString result = get(input);\nif (result != null) { return result; }\nif (size() >= MAX_ENTRIES) {\nresult = input.intern();\nput(result, result);\nreturn result;\n}",
            "method_id": 145
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:release()V",
            "method_body": "public void release(){\nif (!maybeDirty()) { return; }\nif (_parent != null && _canonicalize) { // canonicalize set to false if max size was reached\n_parent.mergeChild(this);\n_dirty = false;\n}",
            "method_id": 146
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserDelegate:close()V",
            "method_body": "@Override public void close() throws IOException { delegate.close(); }\n@Override public void close() throws IOException { delegate.close(); }",
            "method_id": 147
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:<init>(Ljava/lang/String;IZ)V",
            "method_body": "private Feature(boolean defaultState) {\n_mask = (1 << ordinal());\n_defaultState = defaultState;\n}",
            "method_id": 148
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;Ljava/lang/Object;Z)V",
            "method_body": "public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource)\n{\n_bufferRecycler = br;\n_sourceRef = sourceRef;\n_managedResource = managedResource;\n}",
            "method_id": 149
        }
    ]
}