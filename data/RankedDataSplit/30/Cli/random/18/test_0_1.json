{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PosixParserTest.testStop2",
    "test_body": "public void testStop2() throws Exception\n{\nString[] args = new String[]{\"-z\",\n\"-a\",\n\"-btoast\"};\n139: CommandLine cl = parser.parse(options, args, true);\nassertFalse(\"Confirm -a is not set\", cl.hasOption(\"a\"));\nassertTrue(\"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);",
    "stack_trace": "junit.framework.AssertionFailedError: Confirm -a is not set\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertFalse(Assert.java:39)\nat junit.framework.TestCase.assertFalse(TestCase.java:210)\nat org.apache.commons.cli.PosixParserTest.testStop2(PosixParserTest.java:140)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption( String opt )\nopt = Util.stripLeadingHyphens(opt);\nfor ( Iterator it = options.iterator(); it.hasNext(); )\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\nreturn option;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str == null) {\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\nreturn str;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\nsetOptions(options);\ncmd = new CommandLine();\nboolean eatTheRest = false;\nif (arguments == null)\nList tokenList = Arrays.asList(flatten(getOptions(),\nListIterator iterator = tokenList.listIterator();\nwhile (iterator.hasNext())\nString t = (String) iterator.next();\nif (\"--\".equals(t))\nelse if (\"-\".equals(t))\nelse if (t.startsWith(\"-\"))\nif (stopAtNonOption && !getOptions().hasOption(t))\neatTheRest = true;\ncmd.addArg(t);\nprocessOption(t, iterator);\nif (eatTheRest)\nwhile (iterator.hasNext())\n}\nprocessProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions() {\nreturn options;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn requiredOpts;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\nif (eatTheRest)\nwhile (iter.hasNext())\ntokens.add(iter.next());\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\nreturn this.longOpt;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions() {\nreturn requiredOptions;\n}",
            "method_id": 38
        }
    ]
}