{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testDefaultArgName",
    "test_body": "public void testDefaultArgName()\n{\nOption option = OptionBuilder.hasArg().isRequired().create(\"f\");\n312: Options options = new Options();\noptions.addOption(option);\n315: StringWriter out = new StringWriter();\n317: HelpFormatter formatter = new HelpFormatter();\nformatter.setArgName(\"argument\");\nformatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n321: assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<usage: app -f <arg[ument]>\n> but was:<usage: app -f <arg[]>\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testDefaultArgName(HelpFormatterTest.java:321)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nint pos = -1;\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nelse if (startPos + width >= text.length())\nreturn -1;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\nOptionBuilder.required = true;\nreturn instance;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgName()Z",
            "method_body": "public boolean hasArgName()\nreturn argName != null && argName.length() > 0;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\nOption option = null;\noption = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\n}\nreturn option;\n}",
            "method_id": 37
        }
    ]
}