{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "public void shouldParseShortOptionWithoutValue() throws Exception {\nString[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n49: final CommandLine commandLine = parser.parse(options, twoShortOptions);\n51: assertTrue(commandLine.hasOption(\"t1\"));\nassertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\nassertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:optionalArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder optionalArg(final boolean isOptional)\nthis.optionalArg = isOptional;\nreturn this;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\nreturn hasArg(true);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\nOption option = (Option) super.clone();\noption.values = new ArrayList<String>(values);\nreturn option;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getMatchingOptions(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> getMatchingOptions(String opt)\nopt = Util.stripLeadingHyphens(opt);\nList<String> matchingOpts = new ArrayList<String>();\nif (longOpts.keySet().contains(opt))\nfor (String longOpt : longOpts.keySet())\nreturn matchingOpts;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nfor (Option option : options)\nif (opt.equals(option.getOpt()))\nreturn option;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\nList<String> values = new ArrayList<String>();\nfor (Option option : options)\nif (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\nvalues.addAll(option.getValuesList());\n}\nreturn values.isEmpty() ? null : values.toArray(new String[values.size()]);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\nif (opt == null && longOpt == null)\nreturn new Option(this);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isOption(String token)\nreturn isLongOption(token) || isShortOption(token);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\nString[] values = getOptionValues(opt);\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\nif (this == o)\nreturn true;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\nif (properties == null)\nreturn;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str == null)\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\nreturn str;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\nif (opt == null)\nif (opt.length() == 1)\nfor (char ch : opt.toCharArray())\nif (!isValidChar(ch))\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isArgument(Ljava/lang/String;)Z",
            "method_body": "private boolean isArgument(String token)\nreturn !isOption(token) || isNegativeNumber(token);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isLongOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isLongOption(String token)\nif (!token.startsWith(\"-\") || token.length() == 1)\nint pos = token.indexOf(\"=\");\nString t = pos == -1 ? token : token.substring(0, pos);\nif (!options.getMatchingOptions(t).isEmpty())\nelse if (getLongPrefix(token) != null && !token.startsWith(\"--\"))\nreturn false;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasLongOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasLongOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn longOpts.containsKey(opt);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\nint length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\nreturn str;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\nreturn new Builder(opt);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\nreturn parse(options, arguments, null);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\nreturn valuesep > 0;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\nif (hasValueSeparator())\nadd(value);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:getLongPrefix(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String getLongPrefix(String token)\nString t = Util.stripLeadingHyphens(token);\nString opt = null;\nfor (i = t.length() - 2; i > 1; i--)\nString prefix = t.substring(0, i);\nif (options.hasLongOption(prefix))\nreturn opt;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:acceptsArg()Z",
            "method_body": "boolean acceptsArg()\nreturn (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\nif (!acceptsArg())\nvalues.add(value);\n}",
            "method_id": 29
        }
    ]
}