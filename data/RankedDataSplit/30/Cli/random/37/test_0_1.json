{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "public void shouldParseShortOptionWithoutValue() throws Exception {\nString[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n49: final CommandLine commandLine = parser.parse(options, twoShortOptions);\n51: assertTrue(commandLine.hasOption(\"t1\"));\nassertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\nassertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\ncheckRequiredArgs();\noption = (Option) option.clone();\nupdateRequiredOptions(option);\ncmd.addOption(option);\nif (option.hasArg())\ncurrentOption = option;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nif (shortOpts.containsKey(opt))\nreturn shortOpts.get(opt);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private final String opt;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\n* @throws IllegalArgumentException if there are any non valid Option characters in {@code opt}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\nif (numberOfArgs == UNINITIALIZED)\nprocessValue(value);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\nfor (OptionGroup group : options.getOptionGroups())\ncmd = new CommandLine();\nif (arguments != null)\nfor (String argument : arguments)\nhandleToken(argument);\ncheckRequiredArgs();\nhandleProperties(properties);\ncheckRequiredOptions();\nreturn cmd;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleShortAndLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleShortAndLongOption(String token) throws ParseException\nString t = Util.stripLeadingHyphens(token);\nint pos = t.indexOf('=');\nif (t.length() == 1)\nelse if (pos == -1)\nif (options.hasShortOption(t))\nhandleOption(options.getOption(t));\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:numberOfArgs(I)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder numberOfArgs(final int numberOfArgs)\nthis.numberOfArgs = numberOfArgs;\nreturn this;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions() throws MissingOptionException\nif (!expectedOpts.isEmpty())\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\nif (currentOption != null && currentOption.requiresArg())\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List<String> getValuesList()\nreturn values;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isShortOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isShortOption(String token)\nreturn token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn optionGroups.get(opt.getKey());\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(Option option) throws AlreadySelectedException\nif (option.isRequired())\nif (options.getOptionGroup(option) != null)\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:argName(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder argName(final String argName)\nthis.argName = argName;\nreturn this;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasShortOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasShortOption(String opt)\nopt = Util.stripLeadingHyphens(opt);\nreturn shortOpts.containsKey(opt);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleToken(Ljava/lang/String;)V",
            "method_body": "private void handleToken(String token) throws ParseException\ncurrentToken = token;\nif (skipParsing)\nelse if (\"--\".equals(token))\nelse if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\ncurrentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\nelse if (token.startsWith(\"--\"))\nelse if (token.startsWith(\"-\") && !\"-\".equals(token))\nhandleShortAndLongOption(token);\nif (currentOption != null && !currentOption.acceptsArg())\ncurrentOption = null;\n}",
            "method_id": 55
        }
    ]
}