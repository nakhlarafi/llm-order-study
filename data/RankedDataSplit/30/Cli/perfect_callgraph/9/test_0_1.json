{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions",
    "test_body": "public void testMissingRequiredOptions()\n{\nString[] args = new String[] { \"-a\" };\n122: _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n.hasArg()\n.isRequired()\n.withDescription( \"set the value of [c]\" )\n.create( 'c' ) );\n128: try\n{\nCommandLine cl = parser.parse(_options,args);\nfail( \"exception should have been thrown\" );\n}\ncatch (MissingOptionException e)\n{\nassertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );\n}",
    "stack_trace": "junit.framework.ComparisonFailure: Incorrect exception message expected:<... required options: b[, ]c> but was:<... required options: b[]c>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.ParseRequiredTest.testMissingRequiredOptions(ParseRequiredTest.java:135)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn (this.longOpt != null);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn this.required;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals( Object o )\nif ( this == o )\nreturn true;\nif ( o == null || getClass() != o.getClass() )\nOption option = (Option) o;\nif ( opt != null ? !opt.equals( option.opt ) : option.opt != null )\nreturn false;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\n{\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\nOptionBuilder.longopt = newLongopt;\nreturn instance;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\nOptionBuilder.numberOfArgs = 1;\nreturn instance;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\nOptionBuilder.required = true;\nreturn instance;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\nOptionBuilder.description = newDescription;\nreturn instance;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\noptions.add(opt);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\nif (str == null) {\nif (str.startsWith(\"--\"))\nelse if (str.startsWith(\"-\"))\nreturn str.substring(1, str.length());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\nsuper(message);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.MissingOptionException:<init>(Ljava/lang/String;)V",
            "method_body": "public MissingOptionException(String message)\nsuper(message);\n}",
            "method_id": 53
        }
    ]
}