{
    "bug_id": 36,
    "test_id": 0,
    "test_name": "org.mockitousage.spies.SpyingOnInterfacesTest.shouldFailInRuntimeWhenCallingRealMethodOnInterface",
    "test_body": "public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {\n//given\nList list = mock(List.class);\nwhen(list.get(0)).thenAnswer(\nnew Answer() {\npublic Object answer(InvocationOnMock invocation) throws Throwable {\nreturn invocation.callRealMethod();\n}\n}\n);\ntry {\n//when\nlist.get(0);            \n//then",
    "stack_trace": "java.lang.NoSuchMethodError: java.lang.Object.get(I)Ljava/lang/Object;\nat $java.util.List$$EnhancerByMockitoWithCGLIB$$89a44f61.CGLIB$get$9(<generated>)\nat $java.util.List$$EnhancerByMockitoWithCGLIB$$89a44f61$$FastClassByMockitoWithCGLIB$$e9819b9f.invoke(<generated>)\nat org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)\nat org.mockito.internal.creation.AbstractMockitoMethodProxy.invokeSuper(AbstractMockitoMethodProxy.java:11)\nat org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod.invoke(CGLIBProxyRealMethod.java:20)\nat org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.invoke(FilteredCGLIBProxyRealMethod.java:26)\nat org.mockito.internal.invocation.Invocation.callRealMethod(Invocation.java:202)\nat org.mockitousage.spies.SpyingOnInterfacesTest$1.answer(SpyingOnInterfacesTest.java:38)\nat org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:28)\nat org.mockito.internal.MockHandler.handle(MockHandler.java:95)\nat org.mockito.internal.creation.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:47)\nat $java.util.List$$EnhancerByMockitoWithCGLIB$$89a44f61.get(<generated>)\nat org.mockitousage.spies.SpyingOnInterfacesTest.shouldFailInRuntimeWhenCallingRealMethodOnInterface(SpyingOnInterfacesTest.java:44)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:hasSameMethod(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean hasSameMethod(Invocation candidate) {\nreturn invocation.getMethod().equals(candidate.getMethod());\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.internal.stubbing.MockitoStubber:addAnswer(Lorg/mockito/stubbing/Answer;)V",
            "method_body": "public void addAnswer(Answer answer) {\naddAnswer(answer, false);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn globalConfiguration.get().cleansStackTrace();\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getDebuggingInfo()Lorg/mockito/internal/debugging/DebuggingInfo;",
            "method_body": "public DebuggingInfo getDebuggingInfo() {\nreturn threadSafely().getDebuggingInfo();\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = invocation.argumentsToMatchers();\nthis.matchers = matchers;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\nthreadSafely().resetOngoingStubbing();\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (mockitoStubber.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\nmockingProgress.validateState();\nif (verificationMode != null) {\nregisteredInvocations.add(invocationMatcher.getInvocation());\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, registeredInvocations);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);\nif (!invocation.isVoid() && stubbedInvocation == null) {\nmockingProgress.getDebuggingInfo().addPotentiallyUnstubbed(invocationMatcher);\nif (stubbedInvocation != null) {\nmockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private <T> Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nsynchronized(answers) {\nreturn answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);\n}\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis(new CGLIBProxyRealMethod(methodProxy));\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MockitoMethodProxy methodProxy) {\nmethodProxy.setNamingPolicyField(MockitoNamingPolicy.INSTANCE);\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.invocation.SerializableMockitoMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn returnType;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock) {\nreturn mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:callRealMethod()Ljava/lang/Object;",
            "method_body": "public Object callRealMethod() throws Throwable {\nreturn realMethod.invoke(mock, rawArguments);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveWrapper(Class<?> type) {\nreturn wrapperReturnValues.containsKey(type);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nif (objectMethodsGuru.isEqualsMethod(method)) {\nreturn proxy == args[0];\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\ncglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\nFilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\nMockitoMethod mockitoMethod = new SerializableMockitoMethod(method);\nInvocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn mockHandler.handle(invocation);\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:stubbingStarted()V",
            "method_body": "public void stubbingStarted() {\nthreadSafely().stubbingStarted();\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nreturn loader;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/MockitoStubber;Lorg/mockito/internal/verification/RegisteredInvocations;)V",
            "method_body": "public OngoingStubbingImpl(MockitoStubber mockitoStubber,\nRegisteredInvocations registeredInvocations) {\nthis.mockitoStubber = mockitoStubber;\nthis.registeredInvocations = registeredInvocations;\n}",
            "method_id": 119
        }
    ]
}