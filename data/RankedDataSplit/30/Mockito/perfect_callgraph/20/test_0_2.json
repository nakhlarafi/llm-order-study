{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class",
    "test_body": "public void should_spy_inner_class() throws Exception {\n126: class WithMockAndSpy {\n@Spy private InnerStrength strength;\n@Mock private List<String> list;\n130: abstract class InnerStrength {\nprivate final String name;\n133: InnerStrength() {\n// Make sure that @Mock fields are always injected before @Spy fields.\nassertNotNull(list);\n// Make sure constructor is indeed called.\nthis.name = \"inner\";\n}\n140: abstract String strength();\n142: String fullStrength() {\nreturn name + \" \" + strength();\n}\n}\n}\nWithMockAndSpy outer = new WithMockAndSpy();\nMockitoAnnotations.initMocks(outer);\nwhen(outer.strength.strength()).thenReturn(\"strength\");\nassertEquals(\"inner strength\", outer.strength.fullStrength());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat org.mockitousage.annotation.SpyAnnotationTest.should_spy_inner_class(SpyAnnotationTest.java:150)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testInstance) {\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(Spy.class) && !field.isAnnotationPresent(InjectMocks.class)) {\nassertNoIncompatibleAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\nfield.setAccessible(true);\ninstance = field.get(testInstance);\nassertNotInterface(instance, field.getType());\nif (new MockUtil().isMock(instance)) {\n} else if (instance != null) {\nfield.set(testInstance, Mockito.mock(instance.getClass(), withSettings()\nfield.set(testInstance, newSpyInstance(testInstance, field));\n}\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:enableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void enableAccess(AccessibleObject accessibleObject) {\nwasAccessible = accessibleObject.isAccessible();\naccessibleObject.setAccessible(true);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\nGlobalConfiguration.validate();\nif (verificationMode != null) {\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.ClassInstantiator$UsingObjenesis:instantiate(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "<T> T instantiate(Class<T> type);\nreturn objenesis.newInstance(type);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.stubbing.StubbedInvocationMatcher:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nsynchronized(answers) {\na = answers.size() == 1 ? answers.peek() : answers.poll();\n}\nreturn a.answer(invocation);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey:of(Ljava/lang/Class;Ljava/util/Set;)Lorg/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator$CachedBytecodeGenerator$MockKey;",
            "method_body": "public static <T> MockKey of(Class<T> mockedType, Set<Class> interfaces) {\nreturn new MockKey<T>(mockedType, interfaces);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();\nvalidateMatchers(invocation, lastMatchers);\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, (List<Matcher>)(List) lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockNameImpl(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.defaultName = true;\nthis.mockName = mockName;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy$1:<init>()V",
            "method_body": "public static final MockInjectionStrategy nop() {\nreturn new MockInjectionStrategy() {\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:of(Ljava/lang/Iterable;)Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;",
            "method_body": "public static HashCodeAndEqualsSafeSet of(Iterable<Object> objects) {\nHashCodeAndEqualsSafeSet hashCodeAndEqualsSafeSet = new HashCodeAndEqualsSafeSet();\nif (objects != null) {\nfor (Object mock : objects) {\nreturn hashCodeAndEqualsSafeSet;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullLocalizedMatchers()Ljava/util/List;",
            "method_body": "public List<LocalizedMatcher> pullLocalizedMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:addTo(Ljava/util/Set;)V",
            "method_body": "public void addTo(Set<Field> mockDependentFields) {\nmockDependentFields.addAll(scan());\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjectionStrategy:thenTry(Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;)Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;",
            "method_body": "public MockInjectionStrategy thenTry(MockInjectionStrategy strategy) {\nif(nextStrategy != null) {\nnextStrategy.thenTry(strategy);\nnextStrategy = strategy;\nreturn strategy;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.MockScanner:isMockOrSpy(Ljava/lang/Object;)Z",
            "method_body": "private boolean isMockOrSpy(Object instance) {\nreturn mockUtil.isMock(instance)\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSerializableMode()Lorg/mockito/mock/SerializableMode;",
            "method_body": "public SerializableMode getSerializableMode() {\nreturn serializableMode;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nassert ! (mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\nhashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n}\nreturn hashSet;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setTypeToMock(Ljava/lang/Class;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setTypeToMock(Class<T> typeToMock) {\nthis.typeToMock = typeToMock;\nreturn this;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn method.getReturnType();\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper:<init>(Ljava/lang/Object;)V",
            "method_body": "public HashCodeAndEqualsMockWrapper(Object mockInstance) {\nthis.mockInstance = mockInstance;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:newSpyInstance(Ljava/lang/Object;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private static Object newSpyInstance(Object testInstance, Field field)\nMockSettings settings = withSettings()\nClass<?> type = field.getType();\nif (type.isInterface()) {\nif (!Modifier.isStatic(type.getModifiers())) {\nClass<?> enclosing = type.getEnclosingClass();\nif (enclosing != null) {\nif (!enclosing.isInstance(testInstance)) {\nreturn Mockito.mock(type, settings\nconstructor = type.getDeclaredConstructor();\n}\nif (Modifier.isPrivate(constructor.getModifiers())) {\nreturn Mockito.mock(type, settings.useConstructor());\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.Returns:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn value.getClass();\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\ns.markStubUsed(invocation);\ninvocation.markStubbed(new StubInfoImpl(s));\nreturn s;\n}\n}\nreturn null;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection:tryPropertyOrFieldInjection()Lorg/mockito/internal/configuration/injection/MockInjection$OngoingMockInjection;",
            "method_body": "public OngoingMockInjection tryPropertyOrFieldInjection() {\ninjectionStrategies.thenTry(new PropertyAndSetterInjection());\nreturn this;\n}",
            "method_id": 89
        }
    ]
}