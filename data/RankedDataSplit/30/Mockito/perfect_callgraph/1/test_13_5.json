{
    "bug_id": 1,
    "test_id": 13,
    "test_name": "org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_fail_if_an_argument_instance_type_do_not_match_wanted_type",
    "test_body": "public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {\nObserver observer = mock(Observer.class);\nSet wrongArg = mock(Set.class);\ngiven(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });\n88: try {\nnew ParameterizedConstructorInstantiator(this, field(\"withMultipleConstructor\"), resolver).instantiate();\nfail();",
    "stack_trace": "java.lang.UnsupportedOperationException\nat org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:123)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:94)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\nat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptAbstract(MockMethodInterceptor.java:70)\nat org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver$MockitoMock$1278416959.resolveTypeInstances(Unknown Source)\nat org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator.instantiate(FieldInitializer.java:256)\nat org.mockito.internal.util.reflection.ParameterizedConstructorInstantiatorTest.should_fail_if_an_argument_instance_type_do_not_match_wanted_type(ParameterizedConstructorInstantiatorTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.MockitoCore:validateMockitoUsage()V",
            "method_body": "public void validateMockitoUsage() {\nmockingProgress.validateState();\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.configuration.MockAnnotationProcessor:process(Lorg/mockito/Mock;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object process(Mock annotation, Field field) {\nMockSettings mockSettings = Mockito.withSettings();\nif (annotation.extraInterfaces().length > 0) { // never null\nif (\"\".equals(annotation.name())) {\nmockSettings.name(field.getName());\nif(annotation.serializable()){\nmockSettings.defaultAnswer(annotation.answer());\nreturn Mockito.mock(field.getType(), mockSettings);\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.runners.MockitoJUnitRunner:run(Lorg/junit/runner/notification/RunNotifier;)V",
            "method_body": "public void run(final RunNotifier notifier) {\nrunner.run(notifier);\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullLocalizedMatchers()Ljava/util/List;",
            "method_body": "public List<LocalizedMatcher> pullLocalizedMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\nList<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\nmatcherStack.clear();\nreturn (List) matchers;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:addTo(Ljava/util/Set;)V",
            "method_body": "public void addTo(Set<Field> mockDependentFields) {\nmockDependentFields.addAll(scan());\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:asWrappedMocks(Ljava/util/Collection;)Ljava/util/HashSet;",
            "method_body": "private HashSet<HashCodeAndEqualsMockWrapper> asWrappedMocks(Collection<?> mocks) {\nChecks.checkNotNull(mocks, \"Passed collection should notify() be null\");\nHashSet<HashCodeAndEqualsMockWrapper> hashSet = new HashSet<HashCodeAndEqualsMockWrapper>();\nfor (Object mock : mocks) {\nassert ! (mock instanceof HashCodeAndEqualsMockWrapper) : \"WRONG\";\nhashSet.add(HashCodeAndEqualsMockWrapper.of(mock));\n}\nreturn hashSet;\n}",
            "method_id": 159
        },
        {
            "method_signature": "org.mockito.Mockito:validateMockitoUsage()V",
            "method_body": "public static void validateMockitoUsage() {\nMOCKITO_CORE.validateMockitoUsage();\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.mockito.internal.runners.util.RunnerProvider:newInstance(Ljava/lang/String;Ljava/lang/Class;)Lorg/mockito/internal/runners/RunnerImpl;",
            "method_body": "public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\nClass<?> runnerClass = Class.forName(runnerClassName);\nconstructor = runnerClass.getConstructor(Class.class.getClass());\n}\nreturn (RunnerImpl) constructor.newInstance(constructorParam);\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.mockito.internal.util.Checks:checkNotNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T value, String checkedValue) {\nif(value == null) {\nreturn value;\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isUsingConstructor()Z",
            "method_body": "public boolean isUsingConstructor() {\nreturn useConstructor;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\ninvocationContainerImpl.setMethodForStubbing(invocationMatcher);\nreturn null;\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\nmockingProgress.validateState();\nif (verificationMode != null) {\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\nnew AnswersValidator().validateDefaultAnswerReturnedValue(invocation, ret);\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.mockito.internal.stubbing.BaseStubbing:thenReturn(Ljava/lang/Object;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public OngoingStubbing<T> thenReturn(T value) {\nreturn thenAnswer(new Returns(value));\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter:<init>(Lorg/mockito/internal/configuration/injection/filter/MockCandidateFilter;)V",
            "method_body": "public NameBasedCandidateFilter(MockCandidateFilter next) {\nthis.next = next;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.mockito.BDDMockito$BDDOngoingStubbingImpl:willReturn(Ljava/lang/Object;)Lorg/mockito/BDDMockito$BDDMyOngoingStubbing;",
            "method_body": "public BDDMyOngoingStubbing<T> willReturn(T value) {\nreturn new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value));\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock) {\nreturn mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:varArgsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/invocation/Invocation;)Z",
            "method_body": "private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nif (!actual.getMethod().isVarArgs()) {\nObject[] rawArgs = actual.getRawArguments();\nList<Matcher> matchers = invocationMatcher.getMatchers();\nif (rawArgs.length != matchers.size()) {\nreturn false;\nfor (int i = 0; i < rawArgs.length; i++) {\nMatcher m = matchers.get(i);\nif (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\nif (m instanceof MatcherDecorator) {\nactualMatcher = ((MatcherDecorator)m).getActualMatcher();\nif (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n} else if (!m.matches(rawArgs[i])){\nreturn false;\nreturn true;\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.mockito.runners.MockitoJUnitRunner:<init>(Ljava/lang/Class;)V",
            "method_body": "public MockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {\nrunner = new RunnerFactory().create(klass);\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "ParameterizedConstructorInstantiator(Object testClass, Field field, ConstructorArgumentResolver argumentResolver) {\nthis.testClass = testClass;\nthis.field = field;\nthis.argResolver = argumentResolver;\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Object> iterator() {\nreturn new Iterator<Object>() {\nprivate final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();\nreturn iterator.hasNext();\nreturn iterator.next().get();\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject result = delegate.handle(invocation);\nClass<?> returnType = invocation.getMethod().getReturnType();\nif(result == null && returnType.isPrimitive()) {\nreturn new HandyReturnValues().returnFor(returnType);\nreturn result;\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:<init>(Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public MockHandlerImpl(MockCreationSettings mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress, mockSettings);\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:thenAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/stubbing/OngoingStubbing;",
            "method_body": "public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\nif(!invocationContainerImpl.hasInvocationForPotentialStubbing()) {\ninvocationContainerImpl.addAnswer(answer);\nreturn new ConsecutiveStubbing<T>(invocationContainerImpl);\n}",
            "method_id": 179
        }
    ]
}