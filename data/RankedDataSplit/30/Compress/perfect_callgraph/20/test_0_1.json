{
    "bug_id": 20,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchiveCreatedByRedlineRpm",
    "test_body": "49: public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {\n50: CpioArchiveInputStream in =\n51: new CpioArchiveInputStream(new FileInputStream(getFile(\"redline.cpio\")));\n52: CpioArchiveEntry entry= null;\n53: 54: int count = 0;\n55: while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {\n56: count++;\n57: }\n58: in.close();\n59: 60: assertEquals(count, 1);\n61: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setUID(J)V",
            "method_body": "public void setUID(final long uid) {\nthis.uid = uid;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioUtil:byteArray2long([BZ)J",
            "method_body": "static long byteArray2long(final byte[] number, final boolean swapHalfWord) {\nif (number.length % 2 != 0) {\nlong ret = 0;\nint pos = 0;\nbyte tmp_number[] = new byte[number.length];\nSystem.arraycopy(number, 0, tmp_number, 0, number.length);\nif (!swapHalfWord) {\nbyte tmp = 0;\nfor (pos = 0; pos < tmp_number.length; pos++) {\ntmp = tmp_number[pos];\ntmp_number[pos++] = tmp_number[pos];\ntmp_number[pos] = tmp;\nret = tmp_number[0] & 0xFF;\nfor (pos = 1; pos < tmp_number.length; pos++) {\nret <<= 8;\nret |= tmp_number[pos] & 0xFF;\nreturn ret;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;)V",
            "method_body": "public CpioArchiveInputStream(final InputStream in) {\nthis(in, BLOCK_SIZE);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;I)V",
            "method_body": "private boolean closed = false;\nprivate long entryBytesRead = 0;\nprivate boolean entryEOF = false;\nprivate final byte tmpbuf[] = new byte[4096];\nprivate long crc = 0;\nprivate final byte[] TWO_BYTES_BUF = new byte[2];\nprivate final byte[] FOUR_BYTES_BUF = new byte[4];\nprivate final byte[] SIX_BYTES_BUF = new byte[6];\n* CpioConstants#BLOCK_SIZE BLOCK_SIZE}.",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:read([BII)I",
            "method_body": "public int read(final byte[] b, final int off, final int len)\nensureOpen();\nif (off < 0 || len < 0 || off > b.length - len) {\n} else if (len == 0) {\nif (this.entry == null || this.entryEOF) {\nif (this.entryBytesRead == this.entry.getSize()) {\nskip(entry.getDataPadCount());\nthis.entryEOF = true;\nif (this.entry.getFormat() == FORMAT_NEW_CRC\nreturn -1; // EOF for this entry\nint tmplength = (int) Math.min(len, this.entry.getSize()\nif (tmplength < 0) {\nint tmpread = readFully(b, off, tmplength);\nif (this.entry.getFormat() == FORMAT_NEW_CRC) {\nthis.entryBytesRead += tmpread;\nreturn tmpread;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readFully([BII)I",
            "method_body": "private final int readFully(final byte[] b, final int off, final int len)\nif (len < 0) {\nint n = 0;\nwhile (n < len) {\nint count = this.in.read(b, off + n, len - n);\ncount(count);\nif (count < 0) {\nn += count;\n}\nreturn n;\n}",
            "method_id": 35
        }
    ]
}