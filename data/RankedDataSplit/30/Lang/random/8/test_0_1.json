{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2:43PM [IC]T> but was:<2:43PM [PS]T>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$NumberStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nif(parser.isNextNumber()) {\nregex.append(\"(\\\\p{IsNd}++)\");\nreturn true;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:<init>(Lorg/apache/commons/lang3/time/FastDatePrinter$NumberRule;)V",
            "method_body": "TwelveHourField(NumberRule rule) {\nmRule = rule;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache$MultipartKey:hashCode()I",
            "method_body": "public int hashCode() {\nif(hashCode==0) {\nint rc= 0;\nfor(Object key : keys) {\nif(key!=null) {\nrc= rc*7 + key.hashCode();\nhashCode= rc;\nreturn hashCode;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 100) {\nbuffer.append((char)(value / 10 + '0'));\nbuffer.append((char)(value % 10 + '0'));\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getCache(I)Ljava/util/concurrent/ConcurrentMap;",
            "method_body": "private static ConcurrentMap<Locale, Strategy> getCache(int field) {\nsynchronized(caches) {\nif(caches[field]==null) {\nreturn caches[field];\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache$MultipartKey:<init>([Ljava/lang/Object;)V",
            "method_body": "public MultipartKey(Object... keys) {\nthis.keys = keys;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof TimeZoneDisplayKey) {\nTimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;\nreturn\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
            "method_body": "protected String parseToken(String pattern, int[] indexRef) {\nStringBuilder buf = new StringBuilder();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\nprinter= new FastDatePrinter(pattern, timeZone, locale);\nparser= new FastDateParser(pattern, timeZone, locale);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nregex.append('(');\nfor(String textKeyValue : keyValues.keySet()) {\nescapeRegex(regex, textKeyValue, false).append('|');\n}\nregex.setCharAt(regex.length()-1, ')');\nreturn true;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(Ljava/util/Calendar;)Ljava/lang/String;",
            "method_body": "public String format(Calendar calendar) {\nreturn printer.format(calendar);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nif (zone.useDaylightTime()\nbuffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:getTimeZoneDisplay(Ljava/util/TimeZone;ZILjava/util/Locale;)Ljava/lang/String;",
            "method_body": "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\nTimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\nString value = cTimeZoneDisplayCache.get(key);\nif (value == null) {\nreturn value;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\nthis.pattern = pattern;\nthis.timeZone = timeZone;\nthis.locale = locale;\ninit();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:format(Ljava/util/Calendar;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;",
            "method_body": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\nreturn applyRules(calendar, buf);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:applyRules(Ljava/util/Calendar;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\nfor (Rule rule : mRules) {\nrule.appendTo(buf, calendar);\nreturn buf;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:<init>(C)V",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nmValue = value;\n}\nreturn 1;\nbuffer.append(mValue);\n}\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat$1:createInstance(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)Lorg/apache/commons/lang3/time/FastDateFormat;",
            "method_body": "protected FastDateFormat createInstance(String pattern, TimeZone timeZone, Locale locale) {\nreturn new FastDateFormat(pattern, timeZone, locale);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:estimateLength()I",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nmValue = value;\n}\nreturn 1;\nbuffer.append(mValue);\n}\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:<init>(I)V",
            "method_body": "TwoDigitNumberField(int field) {\nmField = field;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField:<init>(I)V",
            "method_body": "UnpaddedNumberField(int field) {\nmField = field;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:init()V",
            "method_body": "private void init() {\nCalendar definingCalendar = Calendar.getInstance(timeZone, locale);\nthisYear= definingCalendar.get(Calendar.YEAR);\nStringBuilder regex= new StringBuilder();\nList<Strategy> collector = new ArrayList<Strategy>();\nMatcher patternMatcher= formatPattern.matcher(pattern);\nif(!patternMatcher.lookingAt()) {\ncurrentFormatField= patternMatcher.group();\nStrategy currentStrategy= getStrategy(currentFormatField, definingCalendar);\npatternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\nif(!patternMatcher.lookingAt()) {\nnextStrategy = null;\nbreak;\nString nextFormatField= patternMatcher.group();\nnextStrategy = getStrategy(nextFormatField, definingCalendar);\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\ncurrentFormatField= nextFormatField;\ncurrentStrategy= nextStrategy;\n}\nif (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\ncurrentFormatField= null;\nstrategies= collector.toArray(new Strategy[collector.size()]);\nparsePattern= Pattern.compile(regex.toString());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getDisplayNames(ILjava/util/Calendar;Ljava/util/Locale;)Ljava/util/Map;",
            "method_body": "private static Map<String, Integer> getDisplayNames(int field, Calendar definingCalendar, Locale locale) {\nreturn definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:selectNumberRule(II)Lorg/apache/commons/lang3/time/FastDatePrinter$NumberRule;",
            "method_body": "protected NumberRule selectNumberRule(int field, int padding) {\nswitch (padding) {\nreturn new UnpaddedNumberField(field);\nreturn new TwoDigitNumberField(field);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:<init>(Ljava/util/TimeZone;ZILjava/util/Locale;)V",
            "method_body": "TimeZoneDisplayKey(TimeZone timeZone,\nboolean daylight, int style, Locale locale) {\nmTimeZone = timeZone;\nif (daylight) {\nstyle |= 0x80000000;\nmStyle = style;\nmLocale = locale;\n}",
            "method_id": 54
        }
    ]
}