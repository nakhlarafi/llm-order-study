{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testCalendarTimezoneRespected",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2:43PM [IC]T> but was:<2:43PM [PS]T>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected(FastDatePrinterTest.java:286)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:<init>(ILjava/util/Calendar;Ljava/util/Locale;)V",
            "method_body": "TextStrategy(int field, Calendar definingCalendar, Locale locale) {\nthis.field= field;\nthis.keyValues= getDisplayNames(field, definingCalendar, locale);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache:getInstance(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/text/Format;",
            "method_body": "public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\nif (pattern == null) {\nif (timeZone == null) {\ntimeZone = TimeZone.getDefault();\nif (locale == null) {\nlocale = Locale.getDefault();\nMultipartKey key = new MultipartKey(pattern, timeZone, locale);\nF format = cInstanceCache.get(key);\nif (format == null) {\nformat = createInstance(pattern, timeZone, locale);\nF previousValue= cInstanceCache.putIfAbsent(key, format);\nif (previousValue != null) {\nreturn format;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(mField));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TextField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nbuffer.append(mValues[calendar.get(mField)]);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:isNumber()Z",
            "method_body": "public boolean isNumber() {\nchar c= formatField.charAt(0);\nif(c=='\\'') {\nreturn Character.isDigit(c);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TextField:<init>(I[Ljava/lang/String;)V",
            "method_body": "TextField(int field, String[] values) {\nmField = field;\nmValues = values;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:escapeRegex(Ljava/lang/StringBuilder;Ljava/lang/String;Z)Ljava/lang/StringBuilder;",
            "method_body": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\nregex.append(\"\\\\Q\");\nfor(int i= 0; i<value.length(); ++i) {\nchar c= value.charAt(i);\nswitch(c) {\nif(unquote) {\nregex.append(c);\nregex.append(\"\\\\E\");\nreturn regex;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:init()V",
            "method_body": "private void init() {\nList<Rule> rulesList = parsePattern();\nmRules = rulesList.toArray(new Rule[rulesList.size()]);\nint len = 0;\nfor (int i=mRules.length; --i >= 0; ) {\nlen += mRules[i].estimateLength();\nmMaxLengthEstimate = len;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nregex.append(validTimeZoneChars);\nreturn true;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getStrategy(Ljava/lang/String;Ljava/util/Calendar;)Lorg/apache/commons/lang3/time/FastDateParser$Strategy;",
            "method_body": "boolean isNumber();\nswitch(formatField.charAt(0)) {\nreturn new CopyQuotedStrategy(formatField);\nreturn getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);\nreturn MODULO_HOUR_STRATEGY;\nreturn MINUTE_STRATEGY;\nreturn getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn mRule.estimateLength();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:format(Ljava/util/Calendar;)Ljava/lang/String;",
            "method_body": "public String format(Calendar calendar) {\nreturn format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nmValue = value;\n}\nreturn 1;\nbuffer.append(mValue);\n}\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 10) {\nbuffer.append((char)(value + '0'));\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TextField:estimateLength()I",
            "method_body": "public int estimateLength() {\nint max = 0;\nfor (int i=mValues.length; --i >= 0; ) {\nint len = mValues[i].length();\nif (len > max) {\nmax = len;\n}\nreturn max;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:<init>(Ljava/util/TimeZone;Ljava/util/Locale;I)V",
            "method_body": "TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\nmLocale = locale;\nmStyle = style;\nzone = timeZone;\nmStandard = getTimeZoneDisplay(timeZone, false, style, locale);\nmDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy:<init>(Ljava/util/Locale;)V",
            "method_body": "TimeZoneStrategy(Locale locale) {\nfor(String id : TimeZone.getAvailableIDs()) {\nif(id.startsWith(\"GMT\")) {\ncontinue;\nTimeZone tz= TimeZone.getTimeZone(id);\ntzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);\ntzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);\nif(tz.useDaylightTime()) {\ntzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);\ntzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);\nStringBuilder sb= new StringBuilder();\nsb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");\nfor(String id : tzNames.keySet()) {\nescapeRegex(sb, id, false).append('|');\n}\nsb.setCharAt(sb.length()-1, ')');\nvalidTimeZoneChars= sb.toString();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nescapeRegex(regex, formatField, true);\nreturn false;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nint value = calendar.get(Calendar.HOUR);\nif (value == 0) {\nmRule.appendTo(buffer, value);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:parsePattern()Ljava/util/List;",
            "method_body": "protected List<Rule> parsePattern() {\nDateFormatSymbols symbols = new DateFormatSymbols(mLocale);\nList<Rule> rules = new ArrayList<Rule>();\nString[] ERAs = symbols.getEras();\nString[] months = symbols.getMonths();\nString[] shortMonths = symbols.getShortMonths();\nString[] weekdays = symbols.getWeekdays();\nString[] shortWeekdays = symbols.getShortWeekdays();\nString[] AmPmStrings = symbols.getAmPmStrings();\nint length = mPattern.length();\nint[] indexRef = new int[1];\nfor (int i = 0; i < length; i++) {\nindexRef[0] = i;\nString token = parseToken(mPattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nrule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\nbreak;\nrule = selectNumberRule(Calendar.MINUTE, tokenLen);\nbreak;\nrule = new TextField(Calendar.AM_PM, AmPmStrings);\nbreak;\nif (tokenLen >= 4) {\nrule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nrule = new CharacterLiteral(sub.charAt(0));\nrules.add(rule);\nreturn rules;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:getInstance(Ljava/lang/String;)Lorg/apache/commons/lang3/time/FastDateFormat;",
            "method_body": "public static FastDateFormat getInstance(String pattern) {\nreturn cache.getInstance(pattern, null, null);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getLocaleSpecificStrategy(ILjava/util/Calendar;)Lorg/apache/commons/lang3/time/FastDateParser$Strategy;",
            "method_body": "private Strategy getLocaleSpecificStrategy(int field, Calendar definingCalendar) {\nConcurrentMap<Locale,Strategy> cache = getCache(field);\nStrategy strategy= cache.get(Integer.valueOf(field));\nif(strategy==null) {\nstrategy= field==Calendar.ZONE_OFFSET\nStrategy inCache= cache.putIfAbsent(locale, strategy);\nif(inCache!=null) {\nreturn inCache;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:<init>(Ljava/lang/String;)V",
            "method_body": "CopyQuotedStrategy(String formatField) {\nthis.formatField= formatField;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:isNumber()Z",
            "method_body": "public boolean isNumber() {\nreturn false;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 4;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {\nmPattern = pattern;\nmTimeZone = timeZone;\nmLocale = locale;\ninit();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn Math.max(mStandard.length(), mDaylight.length());\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:estimateLength()I",
            "method_body": "public int estimateLength() {\nreturn 2;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:isNextNumber()Z",
            "method_body": "boolean isNextNumber() {\nreturn nextStrategy!=null && nextStrategy.isNumber();\n}",
            "method_id": 29
        }
    ]
}