{
    "bug_id": 91,
    "test_id": 2,
    "test_name": "org.jsoup.integration.ConnectTest.testBinaryResultThrows",
    "test_body": "513: public void testBinaryResultThrows() {\n514: Connection con = Jsoup.connect(FileServlet.Url);\n515: con.data(FileServlet.LocationParam, \"/htmltests/thumb.jpg\");\n516: con.data(FileServlet.ContentTypeParam, \"text/html\");\n517: 518: boolean threw = false;\n519: try {\n520: con.execute();\n521: Document doc = con.response().parse();\n522: } catch (IOException e) {\n523: threw = true;\n524: assertEquals(\"Input is binary and unsupported\", e.getMessage());\n525: }\n526: assertTrue(threw);\n527: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.helper.DataUtil:validateCharset(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String validateCharset(String cs) {\nif (cs == null || cs.length() == 0) return null;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompBalanced(CC)Ljava/lang/String;",
            "method_body": "public String chompBalanced(char open, char close) {\nint start = -1;\nint end = -1;\nint depth = 0;\nchar last = 0;\nboolean inSingleQuote = false;\nboolean inDoubleQuote = false;\nif (isEmpty()) break;\nCharacter c = consume();\nif (last == 0 || last != ESC) {\nif (c.equals('\\'') && c != open && !inDoubleQuote)\nelse if (c.equals('\"') && c != open && !inSingleQuote)\nif (inSingleQuote || inDoubleQuote)\nif (c.equals(open)) {\ndepth++;\nif (start == -1)\nstart = pos;\nelse if (c.equals(close))\ndepth--;\nif (depth > 0 && last != 0)\nend = pos; // don't include the outer match pair in the return\nlast = c;\n} while (depth > 0);\nfinal String out = (end >= 0) ? queue.substring(start, end) : \"\";\nif (depth > 0) {// ran out of queue before seeing enough )\nreturn out;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emit(C)V",
            "method_body": "void emit(char c) {\nemit(String.valueOf(c));\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.jsoup.parser.Token:isCData()Z",
            "method_body": "final boolean isCData() {\nreturn this instanceof CData;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:advanceTransition(Lorg/jsoup/parser/TokeniserState;)V",
            "method_body": "void advanceTransition(TokeniserState state) {\nreader.advance();\nthis.state = state;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:consumeData()Ljava/lang/String;",
            "method_body": "String consumeData() {\nint pos = bufPos;\nfinal int start = pos;\nfinal int remaining = bufLength;\nfinal char[] val = charBuf;\nOUTER: while (pos < remaining) {\nswitch (val[pos]) {\nbreak OUTER;\npos++;\nbufPos = pos;\nreturn pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:normalize()V",
            "method_body": "public void normalize() {\nfor (int i = 0; i < size; i++) {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume()C",
            "method_body": "public char consume() {\nreturn queue.charAt(pos++);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;Lorg/jsoup/parser/ParseSettings;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName, ParseSettings settings) {\nValidate.notNull(tagName);\nTag tag = tags.get(tagName);\nif (tag == null) {\ntagName = settings.normalizeTag(tagName);\nValidate.notEmpty(tagName);\ntag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.isBlock = false;\nreturn tag;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:isNamedEntity(Ljava/lang/String;)Z",
            "method_body": "public static boolean isNamedEntity(final String name) {\nreturn extended.codepointForName(name) != empty;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.jsoup.nodes.Element$NodeList:onContentsChanged()V",
            "method_body": "public void onContentsChanged() {\nowner.nodelistChanged();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.jsoup.parser.Token:isStartTag()Z",
            "method_body": "final boolean isStartTag() {\nreturn type == TokenType.StartTag;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:createHeaderMap(Ljava/net/HttpURLConnection;)Ljava/util/LinkedHashMap;",
            "method_body": "private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn) {\nfinal LinkedHashMap<String, List<String>> headers = new LinkedHashMap<>();\nint i = 0;\nfinal String key = conn.getHeaderFieldKey(i);\nfinal String val = conn.getHeaderField(i);\nif (key == null && val == null)\nbreak;\ni++;\nif (key == null || val == null)\nif (headers.containsKey(key))\nfinal ArrayList<String> vals = new ArrayList<>();\nvals.add(val);\nheaders.put(key, vals);\n}\nreturn headers;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection:url(Ljava/lang/String;)Lorg/jsoup/Connection;",
            "method_body": "public Connection url(String url) {\nValidate.notEmpty(url, \"Must supply a valid URL\");\nreq.url(new URL(encodeUrl(url)));\n}\nreturn this;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:<init>()V",
            "method_body": "private String[] specificScopeTarget = {null};\nprivate String[] specificScopeTarget = {null};",
            "method_id": 44
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$Or:add(Lorg/jsoup/select/Evaluator;)V",
            "method_body": "public void add(Evaluator e) {\nevaluators.add(e);\nupdateNumEvaluators();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.jsoup.helper.Validate:isFalse(Z)V",
            "method_body": "public static void isFalse(boolean val) {\nif (val)\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$AttributeKeyPair:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public AttributeKeyPair(String key, String value) {\nValidate.notEmpty(key);\nValidate.notEmpty(value);\nthis.key = normalize(key);\nif (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")\nthis.value = normalize(value);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.jsoup.internal.StringUtil:borrowBuilder()Ljava/lang/StringBuilder;",
            "method_body": "public static StringBuilder borrowBuilder() {\nsynchronized (builders) {\nreturn builders.empty() ?\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.jsoup.parser.Token$EOF:reset()Lorg/jsoup/parser/Token;",
            "method_body": "Token reset() {\nreturn this;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.jsoup.nodes.Document:<init>(Ljava/lang/String;)V",
            "method_body": "public Document(String baseUri) {\nsuper(Tag.valueOf(\"#root\", ParseSettings.htmlDefault), baseUri);\nthis.location = baseUri;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.jsoup.select.Selector:select(Lorg/jsoup/select/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements select(Evaluator evaluator, Element root) {\nValidate.notNull(evaluator);\nValidate.notNull(root);\nreturn Collector.collect(evaluator, root);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$And:<init>(Ljava/util/Collection;)V",
            "method_body": "And(Collection<Evaluator> evaluators) {\nsuper(evaluators);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$Or:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element root, Element node) {\nfor (int i = 0; i < num; i++) {\nEvaluator s = evaluators.get(i);\nif (s.matches(root, node))\nreturn false;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.jsoup.nodes.LeafNode:childNodeSize()I",
            "method_body": "public int childNodeSize() {\nreturn 0;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWord()Z",
            "method_body": "public boolean matchesWord() {\nreturn !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:insertStartTag(Ljava/lang/String;)Lorg/jsoup/nodes/Element;",
            "method_body": "Element insertStartTag(String startTagName) {\nElement el = new Element(Tag.valueOf(startTagName, settings), baseUri);\ninsert(el);\nreturn el;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:advance()V",
            "method_body": "public void advance() {\nbufPos++;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nValidate.notNull(tag);\nValidate.notNull(baseUri);\nchildNodes = EMPTY_NODES;\nthis.baseUri = baseUri;\nthis.attributes = attributes;\nthis.tag = tag;\n}",
            "method_id": 59
        }
    ]
}