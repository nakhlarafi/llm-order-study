{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.jsoup.select.SelectorTest.handlesCommasInSelector",
    "test_body": "588: @Test public void handlesCommasInSelector() {\n589: Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n590: 591: Elements ps = doc.select(\"[name=1,2]\");\n592: assertEquals(1, ps.size());\n593: 594: Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n595: assertEquals(2, containers.size());\n596: assertEquals(\"div\", containers.get(0).tagName());\n597: assertEquals(\"li\", containers.get(1).tagName());\n598: assertEquals(\"123\", containers.get(1).text());\n599: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Element:parent()Lorg/jsoup/nodes/Element;",
            "method_body": "public final Element parent() {\nreturn (Element) parentNode;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matches(Ljava/lang/String;)Z",
            "method_body": "public boolean matches(String seq) {\nreturn queue.regionMatches(true, pos, seq, 0, seq.length());\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:parse(Ljava/lang/String;Ljava/lang/String;Lorg/jsoup/parser/ParseErrorList;)Lorg/jsoup/nodes/Document;",
            "method_body": "Document parse(String input, String baseUri, ParseErrorList errors) {\nstate = HtmlTreeBuilderState.Initial;\nreturn super.parse(input, baseUri, errors);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.helper.DescendableLinkedList:<init>()V",
            "method_body": "public DescendableLinkedList() {\nsuper();\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:framesetOk(Z)V",
            "method_body": "void framesetOk(boolean framesetOk) {\nthis.framesetOk = framesetOk;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.parser.Token:asEndTag()Lorg/jsoup/parser/Token$EndTag;",
            "method_body": "EndTag asEndTag() {\nreturn (EndTag) this;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.select.Selector:select()Lorg/jsoup/select/Elements;",
            "method_body": "private Elements select() {\nreturn Collector.collect(evaluator, root);\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:newAttribute()V",
            "method_body": "void newAttribute() {\nif (pendingAttributeName != null) {\nif (pendingAttributeValue == null)\nAttribute attribute = new Attribute(pendingAttributeName, pendingAttributeValue);\nattributes.put(attribute);\npendingAttributeName = null;\npendingAttributeValue = null;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.parser.ParseErrorList:<init>(II)V",
            "method_body": "ParseErrorList(int initialCapacity, int maxSize) {\nsuper(initialCapacity);\nthis.maxSize = maxSize;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$1:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nswitch (r.current()) {\nt.advanceTransition(TagOpen);\nbreak;\nt.emit(new Token.EOF());\nbreak;\nString data = r.consumeToAny('&', '<', nullChar);\nt.emit(data);\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.jsoup.parser.Tokeniser:emit(Ljava/lang/String;)V",
            "method_body": "void emit(String str) {\ncharBuffer.append(str);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.parser.CharacterReader:current()C",
            "method_body": "char current() {\nreturn isEmpty() ? EOF : input.charAt(pos);\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeTo(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String consumeTo(String seq) {\nint offset = queue.indexOf(seq, pos);\nif (offset != -1) {\nString consumed = queue.substring(pos, offset);\npos += consumed.length();\nreturn consumed;\nreturn remainder();\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:<clinit>()V",
            "method_body": "private static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\nprivate static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byTag()V",
            "method_body": "private void byTag() {\nString tagName = tq.consumeElementSelector();\nValidate.notEmpty(tagName);\nif (tagName.contains(\"|\"))\nevals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilderState:isWhitespace(Lorg/jsoup/parser/Token;)Z",
            "method_body": "abstract boolean process(Token t, HtmlTreeBuilder tb);\nif (t.isCharacter()) {\nString data = t.asCharacter().getData();\nfor (int i = 0; i < data.length(); i++) {\nchar c = data.charAt(i);\nif (!StringUtil.isWhitespace(c))\nreturn false;\nreturn false;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:get(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String get(String key) {\nValidate.notEmpty(key);\nif (attributes == null)\nAttribute attr = attributes.get(key.toLowerCase());\nreturn attr != null ? attr.getValue() : \"\";\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.select.Collector:collect(Lorg/jsoup/select/Evaluator;Lorg/jsoup/nodes/Element;)Lorg/jsoup/select/Elements;",
            "method_body": "public static Elements collect (Evaluator eval, Element root) {\nElements elements = new Elements();\nnew NodeTraversor(new Accumulator(root, elements, eval)).traverse(root);\nreturn elements;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.Token$EndTag:<init>()V",
            "method_body": "EndTag() {\nsuper();\ntype = TokenType.EndTag;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:generateImpliedEndTags(Ljava/lang/String;)V",
            "method_body": "void generateImpliedEndTags(String excludeTag) {\nwhile ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWhitespace()Z",
            "method_body": "public boolean consumeWhitespace() {\nboolean seen = false;\nwhile (matchesWhitespace()) {\npos++;\nseen = true;\nreturn seen;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:<init>()V",
            "method_body": "protected static final String dataPrefix = \"data-\";\nprivate LinkedHashMap<String, Attribute> attributes = null;\nValidate.notEmpty(key);\nif (attributes == null)\nAttribute attr = attributes.get(key.toLowerCase());\nreturn attr != null ? attr.getValue() : \"\";\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.parser.Token:asStartTag()Lorg/jsoup/parser/Token$StartTag;",
            "method_body": "StartTag asStartTag() {\nreturn (StartTag) this;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:isSelfClosing()Z",
            "method_body": "boolean isSelfClosing() {\nreturn selfClosing;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.parser.TokeniserState$41:read(Lorg/jsoup/parser/Tokeniser;Lorg/jsoup/parser/CharacterReader;)V",
            "method_body": "void read(Tokeniser t, CharacterReader r) {\nchar c = r.consume();\nswitch (c) {\nt.emitTagPending();\nt.transition(Data);\nbreak;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.parser.Token:isDoctype()Z",
            "method_body": "boolean isDoctype() {\nreturn type == TokenType.Doctype;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.parser.Token$Tag:appendAttributeName(Ljava/lang/String;)V",
            "method_body": "void appendAttributeName(String append) {\npendingAttributeName = pendingAttributeName == null ? append : pendingAttributeName.concat(append);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:findElements()V",
            "method_body": "private void findElements() {\nif (tq.matchChomp(\"#\"))\nelse if (tq.matchChomp(\".\"))\nbyClass();\nelse if (tq.matchesWord())\nbyTag();\nelse if (tq.matches(\"[\"))\nbyAttribute();\nelse if (tq.matchChomp(\"*\"))\nelse if (tq.matchChomp(\":lt(\"))\nelse if (tq.matchChomp(\":gt(\"))\nelse if (tq.matchChomp(\":eq(\"))\nelse if (tq.matches(\":has(\"))\nelse if (tq.matches(\":contains(\"))\nelse if (tq.matches(\":containsOwn(\"))\nelse if (tq.matches(\":matches(\"))\nmatches(false);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.parser.HtmlTreeBuilder:reconstructFormattingElements()V",
            "method_body": "void reconstructFormattingElements() {\nint size = formattingElements.size();\nif (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))\nreturn;\n}",
            "method_id": 119
        }
    ]
}