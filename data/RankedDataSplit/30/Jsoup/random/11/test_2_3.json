{
    "bug_id": 11,
    "test_id": 2,
    "test_name": "org.jsoup.select.SelectorTest.testPseudoHas",
    "test_body": "405: @Test public void testPseudoHas() {\n406: Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n407: 408: Elements divs1 = doc.select(\"div:has(span)\");\n409: assertEquals(2, divs1.size());\n410: assertEquals(\"0\", divs1.get(0).id());\n411: assertEquals(\"1\", divs1.get(1).id());\n412: 413: Elements divs2 = doc.select(\"div:has([class]\");\n414: assertEquals(1, divs2.size());\n415: assertEquals(\"1\", divs2.get(0).id());\n416: 417: Elements divs3 = doc.select(\"div:has(span, p)\");\n418: assertEquals(3, divs3.size());\n419: assertEquals(\"0\", divs3.get(0).id());\n420: assertEquals(\"1\", divs3.get(1).id());\n421: assertEquals(\"2\", divs3.get(2).id());\n422: 423: Elements els1 = doc.body().select(\":has(p)\");\n424: assertEquals(3, els1.size()); // body, div, dib\n425: assertEquals(\"body\", els1.first().tagName());\n426: assertEquals(\"0\", els1.get(1).id());\n427: assertEquals(\"2\", els1.get(2).id());\n428: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Parser:<clinit>()V",
            "method_body": "private static final String SQ = \"'\";\nprivate static final Tag htmlTag = Tag.valueOf(\"html\");\nprivate static final Tag headTag = Tag.valueOf(\"head\");\nprivate static final Tag bodyTag = Tag.valueOf(\"body\");\nprivate static final Tag titleTag = Tag.valueOf(\"title\");\nprivate static final Tag textareaTag = Tag.valueOf(\"textarea\");\nprivate boolean relaxed = false;\nprivate Parser(String html, String baseUri, boolean isBodyFragment) {\nValidate.notNull(html);\nValidate.notNull(baseUri);\nstack = new LinkedList<Element>();\ntq = new TokenQueue(html);\nthis.baseUri = baseUri;\nif (isBodyFragment) {\ndoc = new Document(baseUri);\nstack.add(doc);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getImplicitParent()Lorg/jsoup/parser/Tag;",
            "method_body": "Tag getImplicitParent() {\nreturn (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.select.NodeTraversor:traverse(Lorg/jsoup/nodes/Node;)V",
            "method_body": "public void traverse(Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nvisitor.head(node, depth);\nif (node.childNodes().size() > 0) {\nnode = node.childNode(0);\ndepth++;\nwhile (node.nextSibling() == null && depth > 0) {\nvisitor.tail(node, depth);\nnode = node.parent();\ndepth--;\nvisitor.tail(node, depth);\nif (node == root)\nbreak;\nnode = node.nextSibling();\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator$Attribute:matches(Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean matches(Element element) {\nreturn element.hasAttr(key);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.nodes.Element:getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements getElementsByAttribute(String key) {\nValidate.notEmpty(key);\nkey = key.trim().toLowerCase();\nreturn Collector.collect(new Evaluator.Attribute(key), this);\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public TextNode(String text, String baseUri) {\nthis.baseUri = baseUri;\nthis.text = text;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:peek()Ljava/lang/Character;",
            "method_body": "public Character peek() {\nreturn isEmpty() ? null : queue.charAt(pos);\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.select.Selector:intersectElements(Ljava/util/Collection;)V",
            "method_body": "private void intersectElements(Collection<Element> intersect) {\nelements.retainAll(intersect);\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normaliseTextNodes(Lorg/jsoup/nodes/Element;)V",
            "method_body": "private void normaliseTextNodes(Element element) {\nList<Node> toMove = new ArrayList<Node>();\nfor (Node node: element.childNodes) {\nif (node instanceof TextNode) {\n}\nfor (int i = toMove.size()-1; i >= 0; i--) {\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.nodes.Element:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nif (!(o instanceof Element)) return false;\nif (!super.equals(o)) return false;\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isData()Z",
            "method_body": "public boolean isData() {\nreturn !canContainInline && !isEmpty();\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume(Ljava/lang/String;)V",
            "method_body": "public void consume(String seq) {\nif (!matches(seq))\nint len = seq.length();\nif (len > remainingLength())\npos += len;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.Tag:requiresSpecificParent()Z",
            "method_body": "boolean requiresSpecificParent() {\nreturn directDescendant;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.nodes.Node:siblingIndex()Ljava/lang/Integer;",
            "method_body": "public Integer siblingIndex() {\nreturn siblingIndex;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:getValue()Ljava/lang/String;",
            "method_body": "public String getValue() {\nreturn value;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:<init>(Lorg/jsoup/select/Elements;Lorg/jsoup/nodes/Evaluator;)V",
            "method_body": "Accumulator(Elements elements, Evaluator eval) {\nthis.elements = elements;\nthis.eval = eval;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.nodes.Document:findFirstElementByTagName(Ljava/lang/String;Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element findFirstElementByTagName(String tag, Node node) {\nif (node.nodeName().equals(tag))\nreturn (Element) node;\nfor (Node child: node.childNodes) {\nElement found = findFirstElementByTagName(tag, child);\nif (found != null)\nreturn found;\n}\nreturn null;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setEmpty()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setEmpty() {\ncanContainBlock = false;\ncanContainInline = false;\nempty = true;\nreturn this;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setIgnoreEnd([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setIgnoreEnd(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nignoreEndTags = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nignoreEndTags.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.nodes.Document$OutputSettings:<init>(Lorg/jsoup/nodes/Document;)V",
            "method_body": "private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\nprivate Charset charset = Charset.forName(\"UTF-8\");\nprivate CharsetEncoder charsetEncoder = charset.newEncoder();\nprivate boolean prettyPrint = true;\nprivate int indentAmount = 1;\npublic OutputSettings() {}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWhitespace()Z",
            "method_body": "public boolean matchesWhitespace() {\nreturn !isEmpty() && Character.isWhitespace(queue.charAt(pos));\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.nodes.Element:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn tag.getName();\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$EscapeMode:<init>(Ljava/lang/String;ILjava/util/Map;)V",
            "method_body": "EscapeMode(Map<Character, String> map) {\nthis.map = map;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.nodes.Node:childNodes()Ljava/util/List;",
            "method_body": "public List<Node> childNodes() {\nreturn Collections.unmodifiableList(childNodes);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.parser.Tag:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn tagName;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:getKey()Ljava/lang/String;",
            "method_body": "public String getKey() {\nreturn key;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "protected Node(String baseUri, Attributes attributes) {\nValidate.notNull(baseUri);\nValidate.notNull(attributes);\nchildNodes = new ArrayList<Node>(4);\nthis.baseUri = baseUri.trim();\nthis.attributes = attributes;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.nodes.Element:getElementsByTag(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements getElementsByTag(String tagName) {\nValidate.notEmpty(tagName);\ntagName = tagName.toLowerCase().trim();\nreturn Collector.collect(new Evaluator.Tag(tagName), this);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createInline(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createInline(String tagName) {\nTag inline = new Tag(tagName);\ninline.isBlock = false;\ninline.canContainBlock = false;\ninline.formatAsBlock = false;\nreturn register(inline);\n}",
            "method_id": 119
        }
    ]
}