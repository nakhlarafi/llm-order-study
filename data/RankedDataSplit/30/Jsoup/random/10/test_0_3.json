{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.NodeTest.absHandlesRelativeQuery",
    "test_body": "45: @Test public void absHandlesRelativeQuery() {\n46: Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"http://jsoup.org/path/file?bar\");\n47: 48: Element a1 = doc.select(\"a\").first();\n49: assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n50: 51: Element a2 = doc.select(\"a\").get(1);\n52: assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n53: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Parser:<clinit>()V",
            "method_body": "private static final String SQ = \"'\";\nprivate static final Tag htmlTag = Tag.valueOf(\"html\");\nprivate static final Tag headTag = Tag.valueOf(\"head\");\nprivate static final Tag bodyTag = Tag.valueOf(\"body\");\nprivate static final Tag titleTag = Tag.valueOf(\"title\");\nprivate static final Tag textareaTag = Tag.valueOf(\"textarea\");\nprivate boolean relaxed = false;\nprivate Parser(String html, String baseUri, boolean isBodyFragment) {\nValidate.notNull(html);\nValidate.notNull(baseUri);\nstack = new LinkedList<Element>();\ntq = new TokenQueue(html);\nthis.baseUri = baseUri;\nif (isBodyFragment) {\ndoc = new Document(baseUri);\nstack.add(doc);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.jsoup.select.Selector:addElements(Ljava/util/Collection;)V",
            "method_body": "private void addElements(Collection<Element> add) {\nelements.addAll(add);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Attribute(String key, String value) {\nValidate.notEmpty(key);\nValidate.notNull(value);\nthis.key = key.trim().toLowerCase();\nthis.value = value;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nsuper(baseUri, attributes);\nValidate.notNull(tag);\nthis.tag = tag;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeTagName()Ljava/lang/String;",
            "method_body": "public String consumeTagName() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.jsoup.parser.Tag:hashCode()I",
            "method_body": "public int hashCode() {\nint result = tagName != null ? tagName.hashCode() : 0;\nresult = 31 * result + (isBlock ? 1 : 0);\nresult = 31 * result + (canContainBlock ? 1 : 0);\nresult = 31 * result + (canContainInline ? 1 : 0);\nresult = 31 * result + (optionalClosing ? 1 : 0);\nresult = 31 * result + (empty ? 1 : 0);\nreturn result;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.jsoup.nodes.Document:nodeName()Ljava/lang/String;",
            "method_body": "public String nodeName() {\nreturn \"#document\";\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parse()Lorg/jsoup/nodes/Document;",
            "method_body": "private Document parse() {\nwhile (!tq.isEmpty()) {\nif (tq.matchesStartTag()) {\nparseStartTag();\n} else if (tq.matchesCS(\"</\")) {\nparseEndTag();\n} else if (tq.matchesCS(\"<!--\")) {\n} else if (tq.matches(\"<![CDATA[\")) {\n} else if (tq.matchesCS(\"<?\") || tq.matchesCS(\"<!\")) {\nparseTextNode();\nreturn doc.normalise();\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.jsoup.nodes.Evaluator:<init>()V",
            "method_body": "private Evaluator() {}\nprivate Evaluator() {}",
            "method_id": 98
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(Node node, int depth) {\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isValidAncestor(Lorg/jsoup/parser/Tag;)Z",
            "method_body": "boolean isValidAncestor(Tag child) {\nif (child.ancestors.isEmpty())\nfor (int i = 0; i < child.ancestors.size(); i++)\nif (this.equals(child.ancestors.get(i)))\nreturn true;\nreturn false;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.select.Elements:add(Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public boolean add(Element element) {return contents.add(element);}\npublic boolean add(Element element) {return contents.add(element);}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createBlock(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createBlock(String tagName) {\nreturn register(new Tag(tagName));\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.nodes.TextNode:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public TextNode(String text, String baseUri) {\nthis.baseUri = baseUri;\nthis.text = text;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.nodes.Node:reparentChild(Lorg/jsoup/nodes/Node;)V",
            "method_body": "private void reparentChild(Node child) {\nif (child.parentNode != null)\nchild.setParentNode(this);\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.Tag:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn empty;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:<init>(Ljava/lang/String;)V",
            "method_body": "public TokenQueue(String data) {\nValidate.notNull(data);\nqueue = data;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:hashCode()I",
            "method_body": "public int hashCode() {\nreturn attributes != null ? attributes.hashCode() : 0;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeElementSelector()Ljava/lang/String;",
            "method_body": "public String consumeElementSelector() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.Parser:popStackToClose(Lorg/jsoup/parser/Tag;)Lorg/jsoup/nodes/Element;",
            "method_body": "private Element popStackToClose(Tag tag) {\nint counter = 0;\nElement elToClose = null;\nfor (int i = stack.size() -1; i > 0; i--) {\ncounter++;\nElement el = stack.get(i);\nTag elTag = el.tag();\nif (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body\n} else if (elTag.equals(tag)) {\nelToClose = el;\nbreak;\nif (elToClose != null) {\nfor (int i = 0; i < counter; i++) {\nstack.removeLast();\nreturn elToClose;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName) {\nValidate.notNull(tagName);\ntagName = tagName.trim().toLowerCase();\nValidate.notEmpty(tagName);\nsynchronized (tags) {\nTag tag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.setAncestor(defaultAncestor.tagName);\ntag.setExcludes();\ntag.isBlock = false;\ntag.canContainBlock = true;\nreturn tag;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.nodes.Element:tagName()Ljava/lang/String;",
            "method_body": "public String tagName() {\nreturn tag.getName();\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseTextNode()V",
            "method_body": "private void parseTextNode() {\nif (tq.peek().equals('<')) {\nString text = tq.consumeTo(\"<\");\ntextNode = TextNode.createFromEncoded(text, baseUri);\nlast().appendChild(textNode);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.select.Collector$Accumulator:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nif (node instanceof Element) {\nElement el = (Element) node;\nif (eval.matches(el))\nelements.add(el);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>(Ljava/util/Collection;)V",
            "method_body": "public Elements(Collection<Element> elements) {\ncontents = new ArrayList<Element>(elements);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseEndTag()V",
            "method_body": "private void parseEndTag() {\ntq.consume(\"</\");\nString tagName = tq.consumeTagName();\ntq.chompTo(\">\");\nif (tagName.length() != 0) {\nTag tag = Tag.valueOf(tagName);\nif (!last().tag().isIgnorableEndTag(tag)) // skips </tr> if in <table>\npopStackToClose(tag);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:createFromEncoded(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Attribute;",
            "method_body": "public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\nString value = Entities.unescape(encodedValue);\nreturn new Attribute(unencodedKey, value);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseAttribute()Lorg/jsoup/nodes/Attribute;",
            "method_body": "private Attribute parseAttribute() {\ntq.consumeWhitespace();\nString key = tq.consumeAttributeKey();\nString value = \"\";\ntq.consumeWhitespace();\nif (tq.matchChomp(\"=\")) {\ntq.consumeWhitespace();\nif (tq.matchChomp(SQ)) {\nvalue = tq.chompTo(SQ);\ntq.consumeWhitespace();\nif (key.length() != 0)\nreturn Attribute.createFromEncoded(key, value);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.parser.Parser:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "private Parser(String html, String baseUri, boolean isBodyFragment) {\nValidate.notNull(html);\nValidate.notNull(baseUri);\nstack = new LinkedList<Element>();\ntq = new TokenQueue(html);\nthis.baseUri = baseUri;\nif (isBodyFragment) {\ndoc = new Document(baseUri);\nstack.add(doc);\n}",
            "method_id": 119
        }
    ]
}