{
    "bug_id": 3,
    "test_id": 1,
    "test_name": "org.jsoup.parser.ParserTest.handlesNestedImplicitTable",
    "test_body": "172: @Test public void handlesNestedImplicitTable() {\n173: Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n174: assertEquals(\"<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>\", TextUtil.stripNewlines(doc.body().html()));\n175: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Node:<init>(Ljava/lang/String;)V",
            "method_body": "protected Node(String baseUri) {\nthis(baseUri, new Attributes());\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.jsoup.nodes.Node:parent()Lorg/jsoup/nodes/Node;",
            "method_body": "public Node parent() {\nreturn parentNode;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.jsoup.nodes.Node:setParentNode(Lorg/jsoup/nodes/Node;)V",
            "method_body": "protected void setParentNode(Node parentNode) {\nif (this.parentNode != null)\nthis.parentNode = parentNode;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.jsoup.nodes.Node:nodeDepth()I",
            "method_body": "protected int nodeDepth() {\nif (parentNode == null)\nreturn 0;\nreturn parentNode.nodeDepth() + 1;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.jsoup.nodes.Node:siblingIndex()Ljava/lang/Integer;",
            "method_body": "public Integer siblingIndex() {\nreturn indexInList(this, parent().childNodes);\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.jsoup.nodes.Node:indexInList(Lorg/jsoup/nodes/Node;Ljava/util/List;)Ljava/lang/Integer;",
            "method_body": "protected static <N extends Node> Integer indexInList(N search, List<N> nodes) {\nValidate.notNull(search);\nValidate.notNull(nodes);\nfor (int i = 0; i < nodes.size(); i++) {\nN node = nodes.get(i);\nif (node.equals(search))\nreturn i;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.jsoup.nodes.Node:indent(Ljava/lang/StringBuilder;)V",
            "method_body": "protected void indent(StringBuilder accum) {\naccum.append(\"\\n\").append(StringUtils.leftPad(\"\", nodeDepth() -1 * 2));\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.jsoup.nodes.Node:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.jsoup.nodes.Node:hashCode()I",
            "method_body": "public int hashCode() {\nint result = parentNode != null ? parentNode.hashCode() : 0;\nresult = 31 * result + (attributes != null ? attributes.hashCode() : 0);\nreturn result;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;Lorg/jsoup/nodes/Attributes;)V",
            "method_body": "public Element(Tag tag, String baseUri, Attributes attributes) {\nsuper(baseUri, attributes);\nValidate.notNull(tag);\nthis.tag = tag;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.jsoup.nodes.Element:<init>(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V",
            "method_body": "public Element(Tag tag, String baseUri) {\nthis(tag, baseUri, new Attributes());\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.jsoup.nodes.Element:tag()Lorg/jsoup/parser/Tag;",
            "method_body": "public Tag tag() {\nreturn tag;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.jsoup.nodes.Element:isBlock()Z",
            "method_body": "public boolean isBlock() {\nreturn tag.isBlock();\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.jsoup.nodes.Element:parent()Lorg/jsoup/nodes/Element;",
            "method_body": "public Element parent() {\nreturn (Element) super.parent();\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.jsoup.nodes.Element:children()Lorg/jsoup/select/Elements;",
            "method_body": "public Elements children() {\nList<Element> elements = new ArrayList<Element>();\nfor (Node node : childNodes) {\nif (node instanceof Element)\nelements.add((Element) node);\n}\nreturn new Elements(elements);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.jsoup.nodes.Element:select(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements select(String query) {\nreturn Selector.select(query, this);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.jsoup.nodes.Element:appendChild(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;",
            "method_body": "public Element appendChild(Node child) {\nValidate.notNull(child);\nchild.setParentNode(this);\nchildNodes.add(child);\nreturn this;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.jsoup.nodes.Element:getElementsByTag(Ljava/lang/String;)Lorg/jsoup/select/Elements;",
            "method_body": "public Elements getElementsByTag(String tagName) {\nValidate.notEmpty(tagName);\ntagName = tagName.toLowerCase().trim();\nreturn Collector.collect(new Evaluator.Tag(tagName), this);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.jsoup.nodes.Element:preserveWhitespace()Z",
            "method_body": "boolean preserveWhitespace() {\nreturn tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.jsoup.nodes.Element:outerHtml(Ljava/lang/StringBuilder;)V",
            "method_body": "void outerHtml(StringBuilder accum) {\nif (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\nindent(accum);\naccum\nif (childNodes.isEmpty() && tag.isEmpty()) {\naccum.append(\">\");\nhtml(accum);\nif (tag.canContainBlock()) indent(accum);\naccum.append(\"</\").append(tagName()).append(\">\");\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.jsoup.nodes.Element:html(Ljava/lang/StringBuilder;)V",
            "method_body": "private void html(StringBuilder accum) {\nfor (Node node : childNodes)\nnode.outerHtml(accum);\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.jsoup.nodes.Element:hashCode()I",
            "method_body": "public int hashCode() {\nint result = super.hashCode();\nresult = 31 * result + (tag != null ? tag.hashCode() : 0);\nreturn result;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.jsoup.nodes.Document:normalise(Lorg/jsoup/nodes/Element;)V",
            "method_body": "private void normalise(Element element) {\nList<Node> toMove = new ArrayList<Node>();\nfor (Node node: element.childNodes) {\nif (node instanceof TextNode) {\n}\nfor (int i = toMove.size()-1; i >= 0; i--) {\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:get(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String get(String key) {\nValidate.notEmpty(key);\nAttribute attr = attributes.get(key.toLowerCase());\nreturn attr != null ? attr.getValue() : \"\";\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public void put(String key, String value) {\nAttribute attr = new Attribute(key, value);\nput(attr);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Lorg/jsoup/nodes/Attribute;)V",
            "method_body": "public void put(Attribute attribute) {\nValidate.notNull(attribute);\nattributes.put(attribute.getKey(), attribute);\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Attribute> iterator() {\nreturn asList().iterator();\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:asList()Ljava/util/List;",
            "method_body": "public List<Attribute> asList() {\nList<Attribute> list = new ArrayList<Attribute>(attributes.size());\nfor (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\nreturn Collections.unmodifiableList(list);\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:html()Ljava/lang/String;",
            "method_body": "public String html() {\nStringBuilder accum = new StringBuilder();\nfor (Attribute attribute : this) {\nreturn accum.toString();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:hashCode()I",
            "method_body": "public int hashCode() {\nreturn attributes != null ? attributes.hashCode() : 0;\n}",
            "method_id": 89
        }
    ]
}