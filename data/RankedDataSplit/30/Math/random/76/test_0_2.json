{
    "bug_id": 76,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.SingularValueSolverTest.testMath320B",
    "test_body": "public void testMath320B() {\nRealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n{ 1.0, 2.0 }, { 1.0, 2.0 }\n});\nSingularValueDecomposition svd =\nnew SingularValueDecompositionImpl(rm);\nRealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\nAssert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<3.2>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.linear.SingularValueSolverTest.testMath320B(SingularValueSolverTest.java:219)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix$5:<init>(Lorg/apache/commons/math/linear/AbstractRealMatrix;Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nfinal RealMatrix out = createMatrix(nCols, nRows);\nwalkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\nout.setEntry(column, row, value);\n}\nreturn out;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:stationaryQuotientDifferenceWithShift([D[DD)V",
            "method_body": "private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,\nfinal int nM1 = d.length - 1;\ndouble si = -lambda;\nint sixI = 0;\nfor (int i = 0; i < nM1; ++i) {\nfinal double di   = d[i];\nfinal double li   = l[i];\nfinal double ldi  = li * di;\nfinal double diP1 = di + si;\nfinal double liP1 = ldi / diP1;\nwork[sixI]        = si;\nwork[sixI + 1]    = diP1;\nwork[sixI + 2]    = liP1;\nsi = li * liP1 * si - lambda;\nsixI += 6;\nif (Double.isNaN(si)) {\nwork[6 * nM1 + 1] = d[nM1] + si;\nwork[6 * nM1]     = si;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension, final int columnDimension)\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math.linear.SingularValueDecompositionImpl:getVT()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getVT()\nif (cachedVt == null) {\ncachedVt = getV().transpose();\nreturn cachedVt;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:getRealEigenvalues()[D",
            "method_body": "public double[] getRealEigenvalues()\nreturn realEigenvalues.clone();\n}",
            "method_id": 66
        }
    ]
}