{
    "bug_id": 6,
    "test_id": 4,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1",
    "test_body": "public void testMaximize1() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n95: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(200),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MAXIMIZE,\nnew InitialGuess(new double[] { -3.0, 0.0 }),\nnew MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);\nAssert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);\nAssert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);\nAssert.assertTrue(optimizer.getEvaluations() > 120);\nAssert.assertTrue(optimizer.getEvaluations() < 150);\n107: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(SimplexOptimizerMultiDirectionalTest.java:108)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:build([D)V",
            "method_body": "public abstract void iterate(final MultivariateFunction evaluationFunction,\nif (dimension != startPoint.length) {\nsimplex = new PointValuePair[dimension + 1];\nsimplex[0] = new PointValuePair(startPoint, Double.NaN);\nfor (int i = 0; i < dimension; i++) {\nfinal double[] confI = startConfiguration[i];\nfinal double[] vertexI = new double[dimension];\nfor (int k = 0; k < dimension; k++) {\nvertexI[k] = startPoint[k] + confI[k];\nsimplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (start != null) {\nfinal int dim = start.length;\nif (lowerBound != null) {\nif (lowerBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double lo = lowerBound[i];\nif (v < lo) {\nif (upperBound != null) {\nif (upperBound.length != dim) {\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double hi = upperBound[i];\nif (v > hi) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2:compare(Lorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)I",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal MultivariateFunction evalFunc\n= new MultivariateFunction() {\nreturn computeObjectiveValue(point);\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal Comparator<PointValuePair> comparator\n= new Comparator<PointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\nsimplex.build(getStartPoint());\nsimplex.evaluate(evalFunc, comparator);\nPointValuePair[] previous = null;\nint iteration = 0;\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nif (iteration > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.getSize(); i++) {\nPointValuePair prev = previous[i];\nconverged = converged &&\nif (converged) {\nreturn simplex.getPoint(0);\nprevious = simplex.getPoints();\nsimplex.iterate(evalFunc, comparator);\n++iteration;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() throws MaxCountExceededException {\nif (++count > maximalCount) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:<init>(DD)V",
            "method_body": "public AbstractConvergenceChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal MultivariateFunction evalFunc\n= new MultivariateFunction() {\nreturn computeObjectiveValue(point);\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal Comparator<PointValuePair> comparator\n= new Comparator<PointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\nsimplex.build(getStartPoint());\nsimplex.evaluate(evalFunc, comparator);\nPointValuePair[] previous = null;\nint iteration = 0;\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nif (iteration > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.getSize(); i++) {\nPointValuePair prev = previous[i];\nconverged = converged &&\nif (converged) {\nreturn simplex.getPoint(0);\nprevious = simplex.getPoints();\nsimplex.iterate(evalFunc, comparator);\n++iteration;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getPoints()[Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair[] getPoints() {\nfinal PointValuePair[] copy = new PointValuePair[simplex.length];\nSystem.arraycopy(simplex, 0, copy, 0, simplex.length);\nreturn copy;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn getKey();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nreturn Double.NaN;\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:<init>([D)V",
            "method_body": "protected AbstractSimplex(final double[] steps) {\nif (steps == null) {\nif (steps.length == 0) {\ndimension = steps.length;\nstartConfiguration = new double[dimension][dimension];\nfor (int i = 0; i < dimension; i++) {\nfinal double[] vertexI = startConfiguration[i];\nfor (int j = 0; j < i + 1; j++) {\nif (steps[j] == 0) {\nSystem.arraycopy(steps, 0, vertexI, 0, j + 1);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public SimplexOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void evaluate(final MultivariateFunction evaluationFunction,\nfor (int i = 0; i < simplex.length; i++) {\nfinal PointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getSize()I",
            "method_body": "public int getSize() {\nreturn simplex.length;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void iterate(final MultivariateFunction evaluationFunction,\nfinal PointValuePair[] original = getPoints();\nfinal PointValuePair best = original[0];\nfinal PointValuePair reflected = evaluateNewSimplex(evaluationFunction,\nif (comparator.compare(reflected, best) < 0) {\nfinal PointValuePair[] reflectedSimplex = getPoints();\nfinal PointValuePair expanded = evaluateNewSimplex(evaluationFunction,\nif (comparator.compare(reflected, expanded) <= 0) {\nsetPoints(reflectedSimplex);\nreturn;\nevaluateNewSimplex(evaluationFunction, original, gamma, comparator);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getAbsoluteThreshold()D",
            "method_body": "public double getAbsoluteThreshold() {\nreturn absoluteThreshold;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleValueChecker:<init>(DD)V",
            "method_body": "public SimpleValueChecker(final double relativeThreshold,\nsuper(relativeThreshold, absoluteThreshold);\nmaxIterationCount = ITERATION_CHECK_DISABLED;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\nif (data instanceof ObjectiveFunction) {\nfunction = ((ObjectiveFunction) data).getObjectiveFunction();\ncontinue;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\nevaluations.incrementCount();\n}",
            "method_id": 29
        }
    ]
}