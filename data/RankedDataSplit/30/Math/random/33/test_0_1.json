{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",
    "test_body": "public void testMath781() {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);\n36: ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));\nconstraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));\nconstraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));\n41: double epsilon = 1e-6;\nSimplexSolver solver = new SimplexSolver();\nPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n45: Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);\nAssert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781(SimplexSolverTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>(I)V",
            "method_body": "public ArrayRealVector(int size) {\ndata = new double[size];\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:setRowVector(ILorg/apache/commons/math3/linear/RealVector;)V",
            "method_body": "public void setRowVector(final int row, final RealVector vector) {\nMatrixUtils.checkRowIndex(this, row);\nfinal int nCols = getColumnDimension();\nif (vector.getDimension() != nCols) {\nfor (int i = 0; i < nCols; ++i) {\nsetEntry(row, i, vector.getEntry(i));\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getInvertedCoefficientSum(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "protected static double getInvertedCoefficientSum(final RealVector coefficients) {\ndouble sum = 0;\nfor (double coefficient : coefficients.toArray()) {\nsum -= coefficient;\nreturn sum;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>(Lorg/apache/commons/math3/linear/RealVector;D)V",
            "method_body": "public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {\nthis.coefficients = coefficients;\nthis.constantTerm = constantTerm;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getHeight()I",
            "method_body": "protected final int getHeight() {\nreturn tableau.getRowDimension();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:normalizeConstraints(Ljava/util/Collection;)Ljava/util/List;",
            "method_body": "public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) {\nList<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\nfor (LinearConstraint constraint : originalConstraints) {\nnormalized.add(normalize(constraint));\nreturn normalized;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>(Lorg/apache/commons/math3/linear/ArrayRealVector;Z)V",
            "method_body": "public ArrayRealVector(ArrayRealVector v, boolean deep) {\ndata = deep ? v.data.clone() : v.data;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:<init>([DLorg/apache/commons/math3/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final double[] coefficients, final Relationship relationship,\nthis(new ArrayRealVector(coefficients), relationship, value);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:createTableau(Z)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "protected RealMatrix createTableau(final boolean maximize) {\nint width = numDecisionVariables + numSlackVariables +\nint height = constraints.size() + getNumObjectiveFunctions();\nArray2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);\nif (getNumObjectiveFunctions() == 2) {\nmatrix.setEntry(0, 0, -1);\nint zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\nmatrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\nRealVector objectiveCoefficients =\ncopyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);\nmatrix.setEntry(zIndex, width - 1,\nif (!restrictToNonNegative) {\nmatrix.setEntry(zIndex, getSlackVariableOffset() - 1,\nint slackVar = 0;\nint artificialVar = 0;\nfor (int i = 0; i < constraints.size(); i++) {\nLinearConstraint constraint = constraints.get(i);\nint row = getNumObjectiveFunctions() + i;\ncopyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);\nif (!restrictToNonNegative) {\nmatrix.setEntry(row, getSlackVariableOffset() - 1,\nmatrix.setEntry(row, width - 1, constraint.getValue());\nif (constraint.getRelationship() == Relationship.LEQ) {\nmatrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack\n} else if (constraint.getRelationship() == Relationship.GEQ) {\nmatrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess\nif ((constraint.getRelationship() == Relationship.EQ) ||\nmatrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);\nmatrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);\nmatrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));\nreturn matrix;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nxInt = SGN_MASK - xInt;\nif (yInt < 0) {\nyInt = SGN_MASK - yInt;\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row) {\nif (row < 0 ||\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V",
            "method_body": "protected void dropPhase1Objective() {\nif (getNumObjectiveFunctions() == 1) {\nList<Integer> columnsToDrop = new ArrayList<Integer>();\ncolumnsToDrop.add(0);\nfor (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\nfinal double entry = tableau.getEntry(0, i);\nif (Precision.compareTo(entry, 0d, maxUlps) > 0) {\ncolumnsToDrop.add(i);\nfor (int i = 0; i < getNumArtificialVariables(); i++) {\nint col = i + getArtificialVariableOffset();\nif (getBasicRow(col) == null) {\ncolumnsToDrop.add(col);\ndouble[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\nfor (int i = 1; i < getHeight(); i++) {\nint col = 0;\nfor (int j = 0; j < getWidth(); j++) {\nif (!columnsToDrop.contains(j)) {\nmatrix[i - 1][col++] = tableau.getEntry(i, j);\nfor (int i = columnsToDrop.size() - 1; i >= 0; i--) {\ncolumnLabels.remove((int) columnsToDrop.get(i));\nthis.tableau = new Array2DRowRealMatrix(matrix);\nthis.numArtificialVariables = 0;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:<init>([DD)V",
            "method_body": "public LinearObjectiveFunction(double[] coefficients, double constantTerm) {\nthis(new ArrayRealVector(coefficients), constantTerm);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.LinearConstraint:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:restrictToNonNegative()Z",
            "method_body": "protected boolean restrictToNonNegative() {\nreturn nonNegative;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\nsuper(rowDimension, columnDimension);\ndata = new double[rowDimension][columnDimension];\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotRow(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;",
            "method_body": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\nList<Integer> minRatioPositions = new ArrayList<Integer>();\ndouble minRatio = Double.MAX_VALUE;\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\nfinal double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\nfinal double entry = tableau.getEntry(i, col);\nif (Precision.compareTo(entry, 0d, maxUlps) > 0) {\nfinal double ratio = rhs / entry;\nfinal int cmp = Precision.compareTo(ratio, minRatio, maxUlps);\nif (cmp == 0) {\n} else if (cmp < 0) {\nminRatio = ratio;\nminRatioPositions = new ArrayList<Integer>();\nminRatioPositions.add(i);\nif (minRatioPositions.size() == 0) {\n} else if (minRatioPositions.size() > 1) {\nreturn minRatioPositions.get(0);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value) {\nMatrixUtils.checkMatrixIndex(this, row, column);\ndata[row][column] = value;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getRowVector(I)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector getRowVector(final int row) {\nreturn new ArrayRealVector(getRow(row), false);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column) {\nMatrixUtils.checkMatrixIndex(this, row, column);\nreturn data[row][column];\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:<init>()V",
            "method_body": "public SimplexSolver() {\nthis(DEFAULT_EPSILON, DEFAULT_ULPS);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nwhile (!tableau.isOptimal()) {\ndoIteration(tableau);\nif (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:copyArray([D[D)V",
            "method_body": "private void copyArray(final double[] src, final double[] dest) {\nSystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn data.length;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexTableau:getEntry(II)D",
            "method_body": "protected final double getEntry(final int row, final int column) {\nreturn tableau.getEntry(row, column);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(tableau, pivotCol);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 59
        }
    ]
}