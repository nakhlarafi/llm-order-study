{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855",
    "test_body": "public void testMath855() {\nfinal double minSin = 3 * Math.PI / 2;\nfinal double offset = 1e-8;\nfinal double delta = 1e-7;\nfinal UnivariateFunction f1 = new Sin();\nfinal UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },\nnew double[] { 0, -1, 0 });\nfinal UnivariateFunction f = FunctionUtils.add(f1, f2);\nfinal UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);\nfinal UnivariatePointValuePair result\n= optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);\nfinal int numEval = optimizer.getEvaluations();\n206: final double sol = result.getPoint();\nfinal double expected = 4.712389027602411;\n209: // System.out.println(\"min=\" + (minSin + offset) + \" f=\" + f.value(minSin + offset));\n// System.out.println(\"sol=\" + sol + \" f=\" + f.value(sol));\n// System.out.println(\"exp=\" + expected + \" f=\" + f.value(expected));\n213: Assert.assertTrue(\"Best point not reported\", f.value(sol) <= f.value(expected));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Best point not reported\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855(BrentOptimizerTest.java:213)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\nlong yInt = Double.doubleToLongBits(y);\nif (xInt < 0) {\nif (yInt < 0) {\nfinal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;\nreturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)V",
            "method_body": "public static void checkOrder(double[] val, OrderDirection dir,\ncheckOrder(val, dir, strict, true);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\ndouble p = 2.7553817452272217E-6;\np = p * x2 + -1.9841269659586505E-4;\np = p * x2 + 0.008333333333329196;\np = p * x2 + -0.16666666666666666;\np = p * x2 * x;\nreturn p;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optimization/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<UnivariatePointValuePair> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\nfinal double epsilon = xa - EIGHTHS[idx]; //idx*0.125;\nfinal double sintA = SINE_TABLE_A[idx];\nfinal double sintB = SINE_TABLE_B[idx];\nfinal double costA = COSINE_TABLE_A[idx];\nfinal double costB = COSINE_TABLE_B[idx];\ndouble sinEpsA = epsilon;\ndouble sinEpsB = polySine(epsilon);\nfinal double cosEpsA = 1.0;\nfinal double cosEpsB = polyCosine(epsilon);\nfinal double temp = sinEpsA * HEX_40000000;\ndouble temp2 = (sinEpsA + temp) - temp;\nsinEpsB +=  sinEpsA - temp2;\nsinEpsA = temp2;\ndouble a = 0;\ndouble b = 0;\ndouble t = sintA;\ndouble c = a + t;\ndouble d = -(c - a - t);\na = c;\nb = b + d;\nt = costA * sinEpsA;\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nb = b + sintA * cosEpsB + costA * sinEpsB;\nb = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;\nif (xb != 0.0) {\nt = ((costA + costB) * (cosEpsA + cosEpsB) -\nc = a + t;\nd = -(c - a - t);\na = c;\nb = b + d;\nresult = a + b;\nreturn result;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([D)[D",
            "method_body": "public static double[] copyOf(double[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn equals(x, y, 1);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([DI)[D",
            "method_body": "public static double[] copyOf(double[] source, int len) {\nfinal double[] output = new double[len];\nSystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\nreturn output;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:getMin()D",
            "method_body": "public double getMin() {\nreturn searchMin;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:<init>(DD)V",
            "method_body": "CodyWaite(double xa,\ndouble xb) {\nint k = (int)(xa * 0.6366197723675814);\ndouble a = -k * 1.570796251296997;\nremA = xa + a;\nremB = -(remA - xa - a);\na = -k * 7.549789948768648E-8;\ndouble b = remA;\nremA = a + b;\nremB += -(remA - b - a);\na = -k * 6.123233995736766E-17;\nb = remA;\nremA = a + b;\nremB += -(remA - b - a);\nif (remA > 0) {\nbreak;\nthis.finalK = k;\nthis.finalRemA = remA;\nthis.finalRemB = remB;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
            "method_body": "protected UnivariatePointValuePair doOptimize() {\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal double lo = getMin();\nfinal double mid = getStartValue();\nfinal double hi = getMax();\nfinal ConvergenceChecker<UnivariatePointValuePair> checker\nif (lo < hi) {\na = lo;\nb = hi;\ndouble x = mid;\ndouble v = x;\ndouble w = x;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(x);\nif (!isMinim) {\ndouble fv = fx;\ndouble fw = fx;\nUnivariatePointValuePair previous = null;\nUnivariatePointValuePair current\nint iter = 0;\nfinal double m = 0.5 * (a + b);\nfinal double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\nfinal double tol2 = 2 * tol1;\nfinal boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\nif (!stop) {\ndouble p = 0;\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\nif (FastMath.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\nq = (x - v) * (fx - fw);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\nif (q > 0) {\np = -p;\nq = -q;\nr = e;\ne = d;\nif (p > q * (a - x) &&\nd = p / q;\nu = x + d;\nif (u - a < tol2 || b - u < tol2) {\nif (x <= m) {\nd = tol1;\nif (x < m) {\ne = b - x;\nd = GOLDEN_SECTION * e;\nif (x < m) {\ne = a - x;\nd = GOLDEN_SECTION * e;\nif (FastMath.abs(d) < tol1) {\nif (d >= 0) {\nu = x + tol1;\nu = x + d;\ndouble fu = computeObjectiveValue(u);\nif (!isMinim) {\nprevious = current;\ncurrent = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\nif (checker != null) {\nif (fu <= fx) {\nif (u < x) {\nb = x;\na = x;\nv = w;\nfv = fw;\nw = x;\nfw = fx;\nx = u;\nfx = fu;\nif (u < x) {\na = u;\nb = u;\nif (fu <= fw ||\nv = w;\nfv = fw;\nw = u;\nfw = fu;\n} else if (fu <= fv ||\nv = u;\nfv = fu;\n} else { // Default termination (Brent's criterion).\nreturn current;\n++iter;\n}\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:checkOrder([D)V",
            "method_body": "public static void checkOrder(double[] val) {\ncheckOrder(val, OrderDirection.INCREASING, true);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.univariate.BrentOptimizer:<init>(DDLorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "public BrentOptimizer(double rel,\nsuper(checker);\nif (rel < MIN_RELATIVE_TOLERANCE) {\nif (abs <= 0) {\nrelativeThreshold = rel;\nabsoluteThreshold = abs;\n}",
            "method_id": 46
        }
    ]
}