{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel",
    "test_body": "public void testIntersectionParallel() {\nfinal SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\nfinal SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\nAssert.assertNull(sub1.intersection(sub2, true));\nAssert.assertNull(sub1.intersection(sub2, false));",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(Line.java:182)\nat org.apache.commons.math3.geometry.euclidean.twod.SubLine.intersection(SubLine.java:120)\nat org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel(SubLineTest.java:151)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;",
            "method_body": "public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints) {\nLine line1 = (Line) getHyperplane();\nLine line2 = (Line) subLine.getHyperplane();\nVector2D v2D = line1.intersection(line2);\nLocation loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\nLocation loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));\nif (includeEndPoints) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint:<init>(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V",
            "method_body": "public SubOrientedPoint(final Hyperplane<Euclidean1D> hyperplane,\nsuper(hyperplane, remainingRegion);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\nint quadrant = 0;\ndouble xb = 0.0;\nxa = x;\nif (x < 0) {\nif (xa == 0.0) {\nif (xa != xa || xa == Double.POSITIVE_INFINITY) {\nif (xa > 3294198.0) {\n} else if (xa > 1.5707963267948966) {\nif (negative) {\nswitch (quadrant) {\nreturn sinQ(xa, xb);\n}",
            "method_id": 32
        }
    ]
}