{
    "bug_id": 100,
    "test_id": 0,
    "test_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",
    "test_body": "public void testBoundParameters() throws EstimationException {\nEstimatedParameter[] p = {\nnew EstimatedParameter(\"unbound0\", 2, false),\nnew EstimatedParameter(\"unbound1\", 2, false),\nnew EstimatedParameter(\"bound\",    2, true)\n};\nLinearProblem problem = new LinearProblem(new LinearMeasurement[] {\nnew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n3.0),\nnew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n1.0),\nnew LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\nnew EstimatedParameter[] { p[0], p[1], p[2] },\n7.0)\n});\n469: GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\nestimator.estimate(problem);\nassertTrue(estimator.getRMS(problem) < 1.0e-10);\ndouble[][] covariances = estimator.getCovariances(problem);\nint i0 = 0, i1 = 1;",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 6\nat org.apache.commons.math.estimation.AbstractEstimator.getCovariances(AbstractEstimator.java:173)\nat org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters(GaussNewtonEstimatorTest.java:472)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++costEvaluations > maxCostEval) {\ncost = 0;\nfor (int i = 0, index = 0; i < rows; i++, index += cols) {\nWeightedMeasurement wm = measurements[i];\ndouble residual = wm.getResidual();\nresiduals[i] = Math.sqrt(wm.getWeight()) * residual;\ncost += wm.getWeight() * residual * residual;\ncost = Math.sqrt(cost);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:isValidCoordinate(II)Z",
            "method_body": "private boolean isValidCoordinate(int row, int col) {\nint nRows = this.getRowDimension();\nint nCols = this.getColumnDimension();\nreturn !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:add(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\nif (this.getColumnDimension() != m.getColumnDimension() ||\nint rowCount = this.getRowDimension();\nint columnCount = this.getColumnDimension();\ndouble[][] outData = new double[rowCount][columnCount];\nfor (int row = 0; row < rowCount; row++) {\nfor (int col = 0; col < columnCount; col++) {\noutData[row][col] = data[row][col] + m.getEntry(row, col);\nreturn new RealMatrixImpl(outData);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:addParameter(Lorg/apache/commons/math/estimation/EstimatedParameter;)V",
            "method_body": "protected void addParameter(EstimatedParameter p) {\nparameters.add(p);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:setMaxCostEval(I)V",
            "method_body": "public final void setMaxCostEval(int maxCostEval) {\nthis.maxCostEval = maxCostEval;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:luDecompose()V",
            "method_body": "public void luDecompose() throws InvalidMatrixException {\nint nRows = this.getRowDimension();\nint nCols = this.getColumnDimension();\nif (nRows != nCols) {\nlu = this.getData();\npermutation = new int[nRows];\nfor (int row = 0; row < nRows; row++) {\npermutation[row] = row;\nparity = 1;\nfor (int col = 0; col < nCols; col++) {\ndouble sum = 0;\nfor (int row = 0; row < col; row++) {\nsum = lu[row][col];\nfor (int i = 0; i < row; i++) {\nlu[row][col] = sum;\nint max = col; // permutation row\ndouble largest = 0d;\nfor (int row = col; row < nRows; row++) {\nsum = lu[row][col];\nfor (int i = 0; i < col; i++) {\nsum -= lu[row][i] * lu[i][col];\nlu[row][col] = sum;\nif (Math.abs(sum) > largest) {\nlargest = Math.abs(sum);\nmax = row;\nif (Math.abs(lu[max][col]) < TOO_SMALL) {\nif (max != col) {\nfor (int row = col + 1; row < nRows; row++) {\nlu[row][col] /= lu[col][col];\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:solve(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\nif (b.getRowDimension() != this.getRowDimension()) {\nif (!this.isSquare()) {\nif (this.isSingular()) { // side effect: compute LU decomp\nint nCol = this.getColumnDimension();\nint nColB = b.getColumnDimension();\nint nRowB = b.getRowDimension();\ndouble[][] bp = new double[nRowB][nColB];\nfor (int row = 0; row < nRowB; row++) {\nfor (int col = 0; col < nColB; col++) {\nbp[row][col] = b.getEntry(permutation[row], col);\nfor (int col = 0; col < nCol; col++) {\nfor (int i = col + 1; i < nCol; i++) {\nfor (int j = 0; j < nColB; j++) {\nbp[i][j] -= bp[col][j] * lu[i][col];\nfor (int col = nCol - 1; col >= 0; col--) {\nfor (int j = 0; j < nColB; j++) {\nbp[col][j] /= lu[col][col];\nfor (int i = 0; i < col; i++) {\nfor (int j = 0; j < nColB; j++) {\nbp[i][j] -= bp[col][j] * lu[i][col];\nRealMatrixImpl outMat = new RealMatrixImpl(bp);\nreturn outMat;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:getResidual()D",
            "method_body": "public double getResidual() {\nreturn measuredValue - getTheoreticalValue();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:setIgnored(Z)V",
            "method_body": "public abstract double getPartial(EstimatedParameter parameter);\nthis.ignored = ignored;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getUnboundParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
            "method_body": "public EstimatedParameter[] getUnboundParameters() {\nList unbound = new ArrayList(parameters.size());\nfor (Iterator iterator = parameters.iterator(); iterator.hasNext();) {\nEstimatedParameter p = (EstimatedParameter) iterator.next();\nif (! p.isBound()) {\nunbound.add(p);\n}\nreturn (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nint nRows = this.getRowDimension();\ndouble[][] out = new double[nRows][this.getColumnDimension()];\nfor (int i = 0; i < nRows; i++) {\nSystem.arraycopy(data[i], 0, out[i], 0, data[i].length);\nreturn out;\n}",
            "method_id": 40
        }
    ]
}