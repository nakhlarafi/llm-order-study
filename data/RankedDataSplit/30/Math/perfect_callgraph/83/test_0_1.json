{
    "bug_id": 83,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286",
    "test_body": "public void testMath286() throws OptimizationException {\nLinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\nCollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\nconstraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n57: RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\nassertEquals(6.9, solution.getValue(), .0000001);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(SimplexSolverTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumObjectiveFunctions()I",
            "method_body": "protected final int getNumObjectiveFunctions() {\nreturn this.numArtificialVariables > 0 ? 2 : 1;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y) || (Math.abs(y - x) <= eps);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getConstraintTypeCounts(Lorg/apache/commons/math/optimization/linear/Relationship;)I",
            "method_body": "private int getConstraintTypeCounts(final Relationship relationship) {\nint count = 0;\nfor (final LinearConstraint constraint : constraints) {\nif (constraint.getRelationship() == relationship) {\n++count;\nreturn count;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\nreturn 0;\n} else if (x < y) {\nreturn -1;\nreturn 1;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
            "method_body": "protected double[][] createTableau(final boolean maximize) {\nList<LinearConstraint> constraints = getNormalizedConstraints();\nint width = numDecisionVariables + numSlackVariables +\nint height = constraints.size() + getNumObjectiveFunctions();\ndouble[][] matrix = new double[height][width];\nif (getNumObjectiveFunctions() == 2) {\nmatrix[0][0] = -1;\nint zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;\nmatrix[zIndex][zIndex] = maximize ? 1 : -1;\nRealVector objectiveCoefficients =\ncopyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());\nmatrix[zIndex][width - 1] =\nif (!restrictToNonNegative) {\nint slackVar = 0;\nint artificialVar = 0;\nfor (int i = 0; i < constraints.size(); i++) {\nLinearConstraint constraint = constraints.get(i);\nint row = getNumObjectiveFunctions() + i;\ncopyArray(constraint.getCoefficients().getData(), matrix[row], 1);\nif (!restrictToNonNegative) {\nmatrix[row][width - 1] = constraint.getValue();\nif (constraint.getRelationship() == Relationship.LEQ) {\n} else if (constraint.getRelationship() == Relationship.GEQ) {\nif ((constraint.getRelationship() == Relationship.EQ) ||\nmatrix[0][getArtificialVariableOffset() + artificialVar] = 1;\nmatrix[row][getArtificialVariableOffset() + artificialVar++] = 1;\nreturn matrix;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:divideRow(ID)V",
            "method_body": "protected void divideRow(final int dividendRow, final double divisor) {\nfor (int j = 0; j < getWidth(); j++) {\ntableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\ncopyIn(d);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNegativeDecisionVariableOffset()I",
            "method_body": "protected final int getNegativeDecisionVariableOffset() {\nreturn getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getArtificialVariableOffset()I",
            "method_body": "protected final int getArtificialVariableOffset() {\nreturn getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void doIteration(final SimplexTableau tableau)\nincrementIterationsCounter();\nInteger pivotCol = getPivotColumn(tableau);\nInteger pivotRow = getPivotRow(pivotCol, tableau);\nif (pivotRow == null) {\ndouble pivotVal = tableau.getEntry(pivotRow, pivotCol);\ntableau.divideRow(pivotRow, pivotVal);\nfor (int i = 0; i < tableau.getHeight(); i++) {\nif (i != pivotRow) {\ndouble multiplier = tableau.getEntry(i, pivotCol);\ntableau.subtractRow(i, pivotRow, multiplier);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
            "method_body": "protected void solvePhase1(final SimplexTableau tableau)\nif (tableau.getNumArtificialVariables() == 0) {\nwhile (!isPhase1Solved(tableau)) {\ndoIteration(tableau);\nif (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
            "method_body": "private void initialize() {\nfor (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {\nint row = getBasicRow(getArtificialVariableOffset() + artificialVar);\nsubtractRow(0, row, 1.0);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math/optimization/linear/LinearConstraint;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;",
            "method_body": "private LinearConstraint normalize(final LinearConstraint constraint) {\nif (constraint.getValue() < 0) {\nreturn new LinearConstraint(constraint.getCoefficients(),\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNumArtificialVariables()I",
            "method_body": "protected final int getNumArtificialVariables() {\nreturn numArtificialVariables;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:getRelationship()Lorg/apache/commons/math/optimization/linear/Relationship;",
            "method_body": "public Relationship getRelationship() {\nreturn relationship;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getHeight()I",
            "method_body": "protected final int getHeight() {\nreturn tableau.getRowDimension();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getNormalizedConstraints()Ljava/util/List;",
            "method_body": "public List<LinearConstraint> getNormalizedConstraints() {\nList<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\nfor (LinearConstraint constraint : constraints) {\nnormalized.add(normalize(constraint));\nreturn normalized;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final LinearObjectiveFunction f,\nthis.f                     = f;\nthis.constraints           = constraints;\nthis.goalType              = goalType;\nthis.restrictToNonNegative = restrictToNonNegative;\niterations  = 0;\nreturn doOptimize();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair doOptimize()\nfinal SimplexTableau tableau =\nsolvePhase1(tableau);\ntableau.discardArtificialVariables();\nwhile (!isOptimal(tableau)) {\ndoIteration(tableau);\nreturn tableau.getSolution();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexSolver:isPhase1Solved(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
            "method_body": "private boolean isPhase1Solved(final SimplexTableau tableau) {\nif (tableau.getNumArtificialVariables() == 0) {\nfor (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\nif (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\nreturn false;\nreturn true;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getEntry(II)D",
            "method_body": "protected final double getEntry(final int row, final int column) {\nreturn tableau.getEntry(row, column);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:copyArray([D[DI)V",
            "method_body": "private void copyArray(final double[] src, final double[] dest,\nSystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
            "method_body": "private Integer getBasicRow(final int col) {\nreturn getBasicRow(col, true);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.LinearConstraint:<init>(Lorg/apache/commons/math/linear/RealVector;Lorg/apache/commons/math/optimization/linear/Relationship;D)V",
            "method_body": "public LinearConstraint(final RealVector coefficients, final Relationship relationship,\nfinal double value) {\nthis.coefficients = coefficients;\nthis.relationship = relationship;\nthis.value        = value;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 59
        }
    ]
}