{
    "bug_id": 6,
    "test_id": 10,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2",
    "test_body": "public void testMaximize2() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n121: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(100),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MAXIMIZE,\nnew InitialGuess(new double[] { 1, 0 }),\nnew NelderMeadSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);\nAssert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);\nAssert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);\nAssert.assertTrue(optimizer.getEvaluations() > 60);\nAssert.assertTrue(optimizer.getEvaluations() < 90);\n133: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(SimplexOptimizerNelderMeadTest.java:134)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
            "method_body": "public void evaluate(final MultivariateFunction evaluationFunction,\nfor (int i = 0; i < simplex.length; i++) {\nfinal PointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 63
        }
    ]
}