{
    "bug_id": 6,
    "test_id": 18,
    "test_name": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1",
    "test_body": "public void testMinimize1() {\nSimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\nfinal FourExtrema fourExtrema = new FourExtrema();\n53: final PointValuePair optimum\n= optimizer.optimize(new MaxEval(200),\nnew ObjectiveFunction(fourExtrema),\nGoalType.MINIMIZE,\nnew InitialGuess(new double[] { -3, 0 }),\nnew MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\nAssert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);\nAssert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);\nAssert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);\nAssert.assertTrue(optimizer.getEvaluations() > 120);\nAssert.assertTrue(optimizer.getEvaluations() < 150);\n65: // Check that the number of iterations is updated (MATH-949).\nAssert.assertTrue(optimizer.getIterations() > 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(SimplexOptimizerMultiDirectionalTest.java:66)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
            "method_body": "protected double computeObjectiveValue(double[] params) {\nsuper.incrementEvaluationCount();\nreturn function.value(params);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\nsuper.parseOptimizationData(optData);\nfor (OptimizationData data : optData) {\nif (data instanceof GoalType) {\ngoal = (GoalType) data;\ncontinue;\nif (data instanceof ObjectiveFunction) {\nfunction = ((ObjectiveFunction) data).getObjectiveFunction();\ncontinue;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:build([D)V",
            "method_body": "public abstract void iterate(final MultivariateFunction evaluationFunction,\nif (dimension != startPoint.length) {\nsimplex = new PointValuePair[dimension + 1];\nsimplex[0] = new PointValuePair(startPoint, Double.NaN);\nfor (int i = 0; i < dimension; i++) {\nfinal double[] confI = startConfiguration[i];\nfinal double[] vertexI = new double[dimension];\nfor (int k = 0; k < dimension; k++) {\nvertexI[k] = startPoint[k] + confI[k];\nsimplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\nif (a < b) {\nreturn b;\nif (a != b) {\nreturn Double.NaN;\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn a;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan(DDZ)D",
            "method_body": "private static double atan(double xa, double xb, boolean leftPlane) {\nboolean negate = false;\nif (xa == 0.0) { // Matches +/- 0.0; return correct sign\nif (xa < 0) {\nxa = -xa;\nxb = -xb;\nnegate = true;\nif (xa > 1.633123935319537E16) { // Very large input\nif (xa < 1) {\nidx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\nfinal double oneOverXa = 1 / xa;\nidx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\ndouble epsA = xa - TANGENT_TABLE_A[idx];\ndouble epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);\nepsB += xb - TANGENT_TABLE_B[idx];\ndouble temp = epsA + epsB;\nepsB = -(temp - epsA - epsB);\nepsA = temp;\ntemp = xa * HEX_40000000;\ndouble ya = xa + temp - temp;\ndouble yb = xb + xa - ya;\nxa = ya;\nxb += yb;\nif (idx == 0) {\nfinal double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));\nya = epsA * denom;\nyb = epsB * denom;\n} else {\ndouble temp2 = xa * TANGENT_TABLE_A[idx];\ndouble za = 1d + temp2;\ndouble zb = -(za - 1d - temp2);\ntemp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];\ntemp = za + temp2;\nzb += -(temp - za - temp2);\nza = temp;\nzb += xb * TANGENT_TABLE_B[idx];\nya = epsA / za;\ntemp = ya * HEX_40000000;\nfinal double yaa = (ya + temp) - temp;\nfinal double yab = ya - yaa;\ntemp = za * HEX_40000000;\nfinal double zaa = (za + temp) - temp;\nfinal double zab = za - zaa;\nyb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\nyb += -epsA * zb / za / za;\nyb += epsB / za;\nepsA = ya;\nepsB = yb;\nfinal double epsA2 = epsA * epsA;\nyb = 0.07490822288864472;\nyb = yb * epsA2 + -0.09088450866185192;\nyb = yb * epsA2 + 0.11111095942313305;\nyb = yb * epsA2 + -0.1428571423679182;\nyb = yb * epsA2 + 0.19999999999923582;\nyb = yb * epsA2 + -0.33333333333333287;\nyb = yb * epsA2 * epsA;\nya = epsA;\ntemp = ya + yb;\nyb = -(temp - ya - yb);\nya = temp;\nyb += epsB / (1d + epsA * epsA);\ndouble za = EIGHTHS[idx] + ya;\ndouble zb = -(za - EIGHTHS[idx] - ya);\ntemp = za + yb;\nzb += -(temp - za - yb);\nza = temp;\ndouble result = za + zb;\ndouble resultb = -(result - za - zb);\nif (leftPlane) {\nif (negate ^ leftPlane) {\nresult = -result;\nreturn result;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan(D)D",
            "method_body": "public static double atan(double x) {\nreturn atan(x, 0.0, false);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\nevaluations.incrementCount();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max, MaxCountExceededCallback cb)\nthrows NullArgumentException {\nif (cb == null){\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getPoint(I)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair getPoint(int index) {\nif (index < 0 ||\nreturn simplex[index];\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:setPoints([Lorg/apache/commons/math3/optim/PointValuePair;)V",
            "method_body": "protected void setPoints(PointValuePair[] points) {\nif (points.length != simplex.length) {\nsimplex = points;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:evaluateNewSimplex(Lorg/apache/commons/math3/analysis/MultivariateFunction;[Lorg/apache/commons/math3/optim/PointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "private PointValuePair evaluateNewSimplex(final MultivariateFunction evaluationFunction,\nfinal double[] xSmallest = original[0].getPointRef();\nsetPoint(0, original[0]);\nfinal int dim = getDimension();\nfor (int i = 1; i < getSize(); i++) {\nfinal double[] xOriginal = original[i].getPointRef();\nfinal double[] xTransformed = new double[dim];\nfor (int j = 0; j < dim; j++) {\nxTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);\nsetPoint(i, new PointValuePair(xTransformed, Double.NaN, false));\nevaluate(evaluationFunction, comparator);\nreturn getPoint(0);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData)\nreturn super.optimize(optData);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2:compare(Lorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)I",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\nfinal MultivariateFunction evalFunc\n= new MultivariateFunction() {\nreturn computeObjectiveValue(point);\nfinal boolean isMinim = getGoalType() == GoalType.MINIMIZE;\nfinal Comparator<PointValuePair> comparator\n= new Comparator<PointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\nsimplex.build(getStartPoint());\nsimplex.evaluate(evalFunc, comparator);\nPointValuePair[] previous = null;\nint iteration = 0;\nfinal ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\nif (iteration > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.getSize(); i++) {\nPointValuePair prev = previous[i];\nconverged = converged &&\nif (converged) {\nreturn simplex.getPoint(0);\nprevious = simplex.getPoints();\nsimplex.iterate(evalFunc, comparator);\n++iteration;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getDimension()I",
            "method_body": "public int getDimension() {\nreturn dimension;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optim/nonlinear/scalar/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getSize()I",
            "method_body": "public int getSize() {\nreturn simplex.length;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleValueChecker:converged(ILorg/apache/commons/math3/optim/PointValuePair;Lorg/apache/commons/math3/optim/PointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nfinal double p = previous.getValue();\nfinal double c = current.getValue();\nfinal double difference = FastMath.abs(p - c);\nfinal double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));\nreturn difference <= size * getRelativeThreshold() ||\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nevaluations.resetCount();\niterations.resetCount();\nreturn doOptimize();\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn getKey();\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (simplex == null) {\nif (getLowerBound() != null ||\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getPoints()[Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair[] getPoints() {\nfinal PointValuePair[] copy = new PointValuePair[simplex.length];\nSystem.arraycopy(simplex, 0, copy, 0, simplex.length);\nreturn copy;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
            "method_body": "public PointValuePair optimize(OptimizationData... optData) {\nreturn super.optimize(optData);\n}",
            "method_id": 59
        }
    ]
}