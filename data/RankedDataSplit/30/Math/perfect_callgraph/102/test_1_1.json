{
    "bug_id": 102,
    "test_id": 1,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",
    "test_body": "public void testChiSquareLargeTestStatistic() throws Exception {\ndouble[] exp = new double[] {\n3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n232921.0, 437665.75\n};\n174: long[] obs = new long[] {\n2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n};\norg.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\nnew org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \ndouble cst = csti.chiSquareTest(exp, obs); \nassertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\nassertEquals( \"chi-square test statistic\", \n114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);",
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(TestUtilsTest.java:181)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:<init>()V",
            "method_body": "public Mean() {\nincMoment = true;\nmoment = new FirstMoment();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl:<init>()V",
            "method_body": "public SummaryStatisticsImpl() {\nsuper();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics:newInstance()Lorg/apache/commons/math/stat/descriptive/SummaryStatistics;",
            "method_body": "public static SummaryStatistics newInstance() {\nSummaryStatistics instance = null;\nDiscoverClass dc = new DiscoverClass();\ninstance = (SummaryStatistics) dc.newInstance(\n}\nreturn instance;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\nsum = sum + lanczos[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares:<init>()V",
            "method_body": "public SumOfSquares() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 41
        }
    ]
}