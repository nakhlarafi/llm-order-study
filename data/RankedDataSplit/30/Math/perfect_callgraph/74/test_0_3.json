{
    "bug_id": 74,
    "test_id": 0,
    "test_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial",
    "test_body": "public void polynomial() throws DerivativeException, IntegratorException {\nTestProblem6 pb = new TestProblem6();\ndouble range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n140: for (int nSteps = 1; nSteps < 7; ++nSteps) {\nAdamsMoultonIntegrator integ =\nnew AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\nTestProblemHandler handler = new TestProblemHandler(pb, integ);\ninteg.addStepHandler(handler);\ninteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\npb.getFinalTime(), new double[pb.getDimension()]);\nif (nSteps < 4) {\nassertTrue(integ.getEvaluations() > 140);\n} else {\nassertTrue(integ.getEvaluations() < 90);\n}",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial(AdamsMoultonIntegratorTest.java:150)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ode.MultistepIntegrator:setMinReduction(D)V",
            "method_body": "public void setMinReduction(final double minReduction) {\nthis.minReduction = minReduction;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.CombinedEventsManager:<init>()V",
            "method_body": "public CombinedEventsManager() {\nstates      = new ArrayList<EventState>();\nfirst       = null;\ninitialized = false;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getInterpolatedTime()D",
            "method_body": "public double getInterpolatedTime() {\nreturn interpolatedTime;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
            "method_body": "public double solve(final UnivariateRealFunction f,\nclearResult();\nverifyInterval(min, max);\ndouble ret = Double.NaN;\ndouble yMin = f.value(min);\ndouble yMax = f.value(max);\ndouble sign = yMin * yMax;\nif (sign > 0) {\n} else if (sign < 0){\nret = solve(f, min, yMin, max, yMax, min, yMin);\nreturn ret;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math.ode.MultistepIntegrator:setMaxGrowth(D)V",
            "method_body": "public void setMaxGrowth(final double maxGrowth) {\nthis.maxGrowth = maxGrowth;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math.ode.AbstractIntegrator:setEquations(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;)V",
            "method_body": "protected void setEquations(final FirstOrderDifferentialEquations equations) {\nthis.equations = equations;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.CombinedEventsManager:addEventHandler(Lorg/apache/commons/math/ode/events/EventHandler;DDI)V",
            "method_body": "public void addEventHandler(final EventHandler handler, final double maxCheckInterval,\nstates.add(new EventState(handler, maxCheckInterval,\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:reinitialize([DZ)V",
            "method_body": "protected void reinitialize(final double[] y, final boolean isForward) {\npreviousTime      = Double.NaN;\ncurrentTime       = Double.NaN;\nh                 = Double.NaN;\ninterpolatedTime  = Double.NaN;\ncurrentState            = y;\ninterpolatedState       = new double[y.length];\ninterpolatedDerivatives = new double[y.length];\nfinalized         = false;\nthis.forward      = isForward;\nthis.dirtyState   = true;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:initializeStep(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;ZI[DD[D[D[D[D)D",
            "method_body": "public double initializeStep(final FirstOrderDifferentialEquations equations,\nif (initialStep > 0) {\ndouble yOnScale2 = 0;\ndouble yDotOnScale2 = 0;\nfor (int j = 0; j < y0.length; ++j) {\nratio         = y0[j] / scale[j];\nyOnScale2    += ratio * ratio;\nratio         = yDot0[j] / scale[j];\nyDotOnScale2 += ratio * ratio;\ndouble h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?\nif (! forward) {\nfor (int j = 0; j < y0.length; ++j) {\ny1[j] = y0[j] + h * yDot0[j];\ncomputeDerivatives(t0 + h, y1, yDot1);\ndouble yDDotOnScale = 0;\nfor (int j = 0; j < y0.length; ++j) {\nratio         = (yDot1[j] - yDot0[j]) / scale[j];\nyDDotOnScale += ratio * ratio;\nyDDotOnScale = Math.sqrt(yDDotOnScale) / h;\nfinal double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);\nfinal double h1 = (maxInv2 < 1.0e-15) ?\nh = Math.min(100.0 * Math.abs(h), h1);\nh = Math.max(h, 1.0e-12 * Math.abs(t0));  // avoids cancellation when computing t1 - t0\nif (h < getMinStep()) {\nif (h > getMaxStep()) {\nif (! forward) {\nreturn h;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:setSafety(D)V",
            "method_body": "public void setSafety(final double safety) {\nthis.safety = safety;\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
            "method_body": "private double solve(final UnivariateRealFunction f,\ndouble delta = x1 - x0;\ndouble oldDelta = delta;\nint i = 0;\nwhile (i < maximalIterationCount) {\nif (Math.abs(y2) < Math.abs(y1)) {\nx0 = x1;\nx1 = x2;\nx2 = x0;\ny0 = y1;\ny1 = y2;\ny2 = y0;\nif (Math.abs(y1) <= functionValueAccuracy) {\nsetResult(x1, i);\nreturn result;\ndouble dx = x2 - x1;\ndouble tolerance =\nif (Math.abs(dx) <= tolerance) {\nif ((Math.abs(oldDelta) < tolerance) ||\ndouble r3 = y1 / y0;\nif (x0 == x2) {\np = dx * r3;\np1 = 1.0 - r3;\nif (p > 0.0) {\np1 = -p1;\np = -p;\nif (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\noldDelta = delta;\ndelta = p / p1;\nx0 = x1;\ny0 = y1;\nif (Math.abs(delta) > tolerance) {\nx1 = x1 + delta;\ny1 = f.value(x1);\nif ((y1 > 0) == (y2 > 0)) {\nx2 = x0;\ny2 = y0;\ndelta = x1 - x0;\noldDelta = delta;\ni++;\n}\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer:updateHighOrderDerivativesPhase2([D[DLorg/apache/commons/math/linear/Array2DRowRealMatrix;)V",
            "method_body": "public void updateHighOrderDerivativesPhase2(final double[] start,\nfinal double[][] data = highOrder.getDataRef();\nfor (int i = 0; i < data.length; ++i) {\nfinal double[] dataI = data[i];\nfinal double c1I = c1[i];\nfor (int j = 0; j < dataI.length; ++j) {\ndataI[j] += c1I * (start[j] - end[j]);\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.apache.commons.math.ode.AbstractIntegrator:clearEventHandlers()V",
            "method_body": "public void clearEventHandlers() {\neventsHandlersManager.clearEventsHandlers();\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.apache.commons.math.ode.AbstractIntegrator:requiresDenseOutput()Z",
            "method_body": "protected boolean requiresDenseOutput() {\nfor (StepHandler handler : stepHandlers) {\nif (handler.requiresDenseOutput()) {\nreturn true;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:stop()Z",
            "method_body": "public boolean stop() {\nreturn nextAction == EventHandler.STOP;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\nfinal int rows    = getRowDimension();\nfinal int columns = getColumnDimension();\nvisitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\nfor (int i = 0; i < rows; ++i) {\nfinal double[] rowI = data[i];\nfor (int j = 0; j < columns; ++j) {\nvisitor.visit(i, j, rowI[j]);\nreturn visitor.end();\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.CombinedEventsManager:clearEventsHandlers()V",
            "method_body": "public void clearEventsHandlers() {\nstates.clear();\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.CombinedEventsManager:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nfirst = null;\nif (states.isEmpty()) {\nif (! initialized) {\nfinal double t0 = interpolator.getPreviousTime();\ninterpolator.setInterpolatedTime(t0);\nfinal double [] y = interpolator.getInterpolatedState();\nfor (EventState state : states) {\nstate.reinitializeBegin(t0, y);\ninitialized = true;\nfor (EventState state : states) {\nif (state.evaluateStep(interpolator)) {\nif (first == null) {\nfirst = state;\nreturn first != null;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.apache.commons.math.ode.AbstractIntegrator:resetEvaluations()V",
            "method_body": "protected void resetEvaluations() {\nevaluations = 0;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:storeTime(D)V",
            "method_body": "public void storeTime(final double t) {\nsuper.storeTime(t);\nvectorsInitialized = false;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator:reinitialize([DZ)V",
            "method_body": "public void reinitialize(final double[] y, final boolean forward) {\nsuper.reinitialize(y, forward);\nstateVariation = new double[y.length];\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer:requiresDenseOutput()Z",
            "method_body": "RealMatrix initializeHighOrderDerivatives(double[] first, double[][] multistep);\npublic NordsieckInitializer(final int n) {\nthis.n = n;\n}\nfinal double prev = interpolator.getPreviousTime();\nfinal double curr = interpolator.getCurrentTime();\nstepStart = prev;\nstepSize  = (curr - prev) / (nSteps + 1);\ninterpolator.setInterpolatedTime(prev);\nscaled = interpolator.getInterpolatedDerivatives().clone();\nfor (int j = 0; j < n; ++j) {\nscaled[j] *= stepSize;\nfinal double[][] multistep = new double[nSteps][];\nfor (int i = 1; i <= nSteps; ++i) {\ninterpolator.setInterpolatedTime(prev + stepSize * i);\nfinal double[] msI = interpolator.getInterpolatedDerivatives().clone();\nfor (int j = 0; j < n; ++j) {\nmsI[j] *= stepSize;\nmultistep[i - 1] = msI;\nnordsieck = initializeHighOrderDerivatives(scaled, multistep);\nthrow new InitializationCompletedMarkerException();\nreturn true;\n}\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.apache.commons.math.ode.AbstractIntegrator:clearStepHandlers()V",
            "method_body": "public void clearStepHandlers() {\nstepHandlers.clear();\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations:<init>(Lorg/apache/commons/math/ode/MultistepIntegrator;I)V",
            "method_body": "public CountingDifferentialEquations(final int dimension) {\nthis.dimension = dimension;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer:initializeHighOrderDerivatives([D[[D)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
            "method_body": "public Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,\nfor (int i = 0; i < multistep.length; ++i) {\nfinal double[] msI = multistep[i];\nfor (int j = 0; j < first.length; ++j) {\nmsI[j] -= first[j];\nreturn initialization.multiply(new Array2DRowRealMatrix(multistep, false));\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:finalizeStep()V",
            "method_body": "public final void finalizeStep()\nif (! finalized) {\ndoFinalize();\nfinalized = true;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getInterpolatedState()[D",
            "method_body": "public double[] getInterpolatedState() throws DerivativeException {\nif (dirtyState) {\nfinal double oneMinusThetaH = currentTime - interpolatedTime;\nfinal double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;\ncomputeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);\ndirtyState = false;\nreturn interpolatedState;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.apache.commons.math.ode.nonstiff.AdamsIntegrator:updateHighOrderDerivativesPhase2([D[DLorg/apache/commons/math/linear/Array2DRowRealMatrix;)V",
            "method_body": "public void updateHighOrderDerivativesPhase2(final double[] start,\ntransformer.updateHighOrderDerivativesPhase2(start, end, highOrder);\n}",
            "method_id": 119
        }
    ]
}