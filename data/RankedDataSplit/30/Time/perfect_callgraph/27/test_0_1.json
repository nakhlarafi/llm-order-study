{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "public void testBug2495455() {\nPeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n.appendLiteral(\"P\")\n.appendYears()\n.appendSuffix(\"Y\")\n.appendMonths()\n.appendSuffix(\"M\")\n.appendWeeks()\n.appendSuffix(\"W\")\n.appendDays()\n.appendSuffix(\"D\")\n.appendSeparatorIfFieldsAfter(\"T\")\n.appendHours()\n.appendSuffix(\"H\")\n.appendMinutes()\n.appendSuffix(\"M\")\n.appendSecondsWithOptionalMillis()\n.appendSuffix(\"S\")\n.toFormatter();\nPeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n.append(ISOPeriodFormat.standard())\n.toFormatter();\npfmt1.parsePeriod(\"PT1003199059S\");\npfmt2.parsePeriod(\"PT1003199059S\");\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:createComposite(Ljava/util/List;)[Ljava/lang/Object;",
            "method_body": "private static Object[] createComposite(List<Object> elementPairs) {\nswitch (elementPairs.size()) {\nreturn new Object[] {Literal.EMPTY, Literal.EMPTY};\nComposite comp = new Composite(elementPairs);\nreturn new Object[] {comp, comp};\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
            "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iType.getFieldType(index);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
            "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nif (periodStr.regionMatches(true, position, iText, 0, iText.length())) {\nreturn position + iText.length();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:size()I",
            "method_body": "public int size() {\nreturn iType.size();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:finish(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder$Separator;",
            "method_body": "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\niAfterPrinter = afterPrinter;\niAfterParser = afterParser;\nreturn this;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldType()I",
            "method_body": "int getFieldType() {\nreturn iFieldType;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "public void setPeriod(ReadablePeriod period) {\nsuper.setPeriod(period);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\nif (iElementPairs.size() > 0) {\noriginalPrinter = iElementPairs.get(iElementPairs.size() - 2);\noriginalParser = iElementPairs.get(iElementPairs.size() - 1);\nif (originalPrinter == null || originalParser == null ||\nclearPrefix();\nFieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\niElementPairs.set(iElementPairs.size() - 2, newField);\niElementPairs.set(iElementPairs.size() - 1, newField);\niFieldFormatters[newField.getFieldType()] = newField;\nreturn this;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:toPeriod()Lorg/joda/time/Period;",
            "method_body": "public Period toPeriod() {\nreturn new Period(this);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
            "method_body": "protected void setPeriod(ReadablePeriod period) {\nif (period == null) {\nsetPeriodInternal(period);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nPeriodParser[] parsers = iParsers;\nif (parsers == null) {\nint len = parsers.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = parsers[i].parseInto(period, periodStr, position, locale);\nreturn position;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:<init>(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;ZZ)V",
            "method_body": "Separator(String text, String finalText, String[] variants,\nboolean useBefore, boolean useAfter) {\niText = text;\niFinalText = finalText;\nif ((finalText == null || text.equals(finalText)) &&\niParsedForms = new String[] {text};\niBeforePrinter = beforePrinter;\niBeforeParser = beforeParser;\niUseBefore = useBefore;\niUseAfter = useAfter;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
            "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nreturn values;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:setField(Lorg/joda/time/DurationFieldType;I)V",
            "method_body": "protected void setField(DurationFieldType field, int value) {\nsetFieldInto(iValues, field, value);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn PeriodType.standard();\nreturn type;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "public MutablePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper(period, type, chrono);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:parse(Ljava/lang/String;I)I",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInt(Ljava/lang/String;II)I",
            "method_body": "private int parseInt(String text, int position, int length) {\nif (length >= 10) {\nreturn Integer.parseInt(text.substring(position, position + length));\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper();\nPeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);\ntype = (type == null ? converter.getPeriodType(period) : type);\ntype = checkPeriodType(type);\niType = type;\nif (this instanceof ReadWritablePeriod) {\niValues = new int[size()];\nchrono = DateTimeUtils.getChronology(chrono);\nconverter.setInto((ReadWritablePeriod) this, period, chrono);\niValues = new MutablePeriod(period, type, chrono).getValues();\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:getParser()Lorg/joda/time/format/PeriodParser;",
            "method_body": "public PeriodParser getParser() {\nreturn iParser;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:setSeconds(I)V",
            "method_body": "public void setSeconds(int seconds) {\nsuper.setField(DurationFieldType.seconds(), seconds);\n}",
            "method_id": 59
        }
    ]
}