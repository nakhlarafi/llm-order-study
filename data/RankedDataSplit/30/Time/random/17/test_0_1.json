{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset",
    "test_body": "public void testBug3476684_adjustOffset() {\nfinal DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\nDateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\nDateTime baseBefore = base.plusHours(1);  // 23:15 (first)\nDateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n1255: assertSame(base, base.withEarlierOffsetAtOverlap());\nassertSame(base, base.withLaterOffsetAtOverlap());\n1258: assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\nassertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n1261: assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\nassertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-02-25T23:15:00.000-03:00> but was:<2012-02-25T23:15:00.000-02:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset(TestDateTimeZoneCutover.java:1259)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
            "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
            "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iWallOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iWallOffsets[i - 1];\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
            "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
            "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
            "method_body": "protected AbstractInstant() {\nsuper();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
            "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
            "method_id": 59
        }
    ]
}