{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith3",
    "test_body": "public void testWith3() {\nPartial test = createHourMinPartial();\ntry {\ntest.with(DateTimeFieldType.clockhourOfDay(), 6);\nfail();\n} catch (IllegalArgumentException ex) {}",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Basics.testWith3(TestPartial_Basics.java:364)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V",
            "method_body": "Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\nsuper();\niChronology = chronology;\niTypes = types;\niValues = values;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
            "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\nint index = indexOf(fieldType);\nif (index == -1) {\nDateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\nint[] newValues = new int[newTypes.length];\nint i = 0;\nDurationField unitField = fieldType.getDurationType().getField(iChronology);\nif (unitField.isSupported()) {\nfor (; i < iTypes.length; i++) {\nDateTimeFieldType loopType = iTypes[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (loopUnitField.isSupported()) {\nint compare = unitField.compareTo(loopUnitField);\nif (compare > 0) {\nbreak;\n} else if (compare == 0) {\nDurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\nDurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\nif (rangeField.compareTo(loopRangeField) > 0) {\nSystem.arraycopy(iTypes, 0, newTypes, 0, i);\nSystem.arraycopy(iValues, 0, newValues, 0, i);\nnewTypes[i] = fieldType;\nnewValues[i] = value;\nSystem.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\nSystem.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\nPartial newPartial = new Partial(iChronology, newTypes, newValues);\niChronology.validate(newPartial, newValues);\nreturn newPartial;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.Partial:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
            "method_id": 45
        }
    ]
}