{
    "projects": [
        {
            "name": "Csv",
            "bugs": [
                {
                    "bug_id": 1,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
                            "test_body": "505: public void testGetLineNumberWithCR() throws Exception {\n506: CSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n507: 508: assertEquals(0, parser.getLineNumber());\n509: assertNotNull(parser.getRecord());\n510: assertEquals(1, parser.getLineNumber());\n511: assertNotNull(parser.getRecord());\n512: assertEquals(2, parser.getLineNumber());\n513: assertNotNull(parser.getRecord());\n514: assertEquals(2, parser.getLineNumber());\n515: assertNull(parser.getRecord());\n516: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CCCCZZLjava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormat(\nchar delimiter,\nchar encapsulator,\nchar commentStart,\nchar escape,\nboolean surroundingSpacesIgnored,\nboolean emptyLinesIgnored,\nString lineSeparator,\nString[] header) {\nthis.delimiter = delimiter;\nthis.encapsulator = encapsulator;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.surroundingSpacesIgnored = surroundingSpacesIgnored;\nthis.emptyLinesIgnored = emptyLinesIgnored;\nthis.lineSeparator = lineSeparator;\nthis.header = header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "private static final String CRLF = \"\\r\\n\";\n\nprivate final char delimiter;\nprivate final char encapsulator;\nprivate final char commentStart;\nprivate final char escape;\nprivate final boolean surroundingSpacesIgnored; // Should leading/trailing spaces be ignored around values?\nprivate final boolean emptyLinesIgnored;\nprivate final String lineSeparator; // for outputs\nprivate final String[] header;\n\n\n/**\n* Constant char to be used for disabling comments, escapes and encapsulation.\n* The value -2 is used because it won't be confused with an EOF signal (-1),\n* and because the unicode value FFFE would be encoded as two chars (using surrogates)\n* and thus there should never be a collision with a real text char.\n*/\nstatic final char DISABLED = '\\ufffe';\n\n/**\n* Starting format with no settings defined; used for creating other formats from scratch.\n*/\nprivate static CSVFormat PRISTINE = new CSVFormat(DISABLED, DISABLED, DISABLED, DISABLED, false, false, null, null);\n\n/**\n* Standard comma separated format, as for {@link #RFC4180} but allowing blank lines."
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(char c) {\nreturn c == '\\n' || c == '\\r';\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalArgumentException {\nif (delimiter == encapsulator) {\nthrow new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" + encapsulator + \"\\\")\");\n}\n\nif (delimiter == escape) {\nthrow new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" + escape + \"\\\")\");\n}\n\nif (delimiter == commentStart) {\nthrow new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" + commentStart + \"\\\")\");\n}\n\nif (encapsulator != DISABLED && encapsulator == commentStart) {\nthrow new IllegalArgumentException(\"The comment start character and the encapsulator cannot be the same (\\\"\" + commentStart + \"\\\")\");\n}\n\nif (escape != DISABLED && escape == commentStart) {\nthrow new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" + commentStart + \"\\\")\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEncapsulator()C",
                                    "method_body": "public char getEncapsulator() {\nreturn encapsulator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEncapsulator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEncapsulator(char encapsulator) {\nif (isLineBreak(encapsulator)) {\nthrow new IllegalArgumentException(\"The encapsulator cannot be a line break\");\n}\n\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isEncapsulating()Z",
                                    "method_body": "boolean isEncapsulating() {\nreturn this.encapsulator != DISABLED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()C",
                                    "method_body": "public char getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isCommentingEnabled()Z",
                                    "method_body": "public boolean isCommentingEnabled() {\nreturn this.commentStart != DISABLED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()C",
                                    "method_body": "public char getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(char escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\n\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
                                    "method_body": "boolean isEscaping() {\nreturn this.escape != DISABLED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isSurroundingSpacesIgnored()Z",
                                    "method_body": "public boolean isSurroundingSpacesIgnored() {\nreturn surroundingSpacesIgnored;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withSurroundingSpacesIgnored(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withSurroundingSpacesIgnored(boolean surroundingSpacesIgnored) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isEmptyLinesIgnored()Z",
                                    "method_body": "public boolean isEmptyLinesIgnored() {\nreturn emptyLinesIgnored;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEmptyLinesIgnored(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEmptyLinesIgnored(boolean emptyLinesIgnored) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withLineSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withLineSeparator(String lineSeparator) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "String[] getHeader() {\nreturn header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(Reader input, CSVFormat format) throws IOException {\nformat.validate();\n\nthis.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\n\nthis.headerMapping = initializeHeader(format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(String input, CSVFormat format) throws IOException{\nthis(new StringReader(input), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:getRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\ndo {\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\ncase TOKEN:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EORECORD:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EOF:\nif (reusableToken.isReady) {\nrecord.add(reusableToken.content.toString());\n} else {\nresult = null;\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n}\n} while (reusableToken.type == TOKEN);\n\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader(Lorg/apache/commons/csv/CSVFormat;)Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader(CSVFormat format) throws IOException {\nMap<String, Integer> hdrMap = null;\nif (format.getHeader() != null) {\nhdrMap = new HashMap<String, Integer>();\n\nString[] header = null;\nif (format.getHeader().length == 0) {\n// read the header from the first line of the file\nCSVRecord rec = getRecord();\nif (rec != null) {\nheader = rec.values();\n}\n} else {\nheader = format.getHeader();\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:getLineNumber()I",
                                    "method_body": "public int getLineNumber() {\nreturn lexer.getLineNumber();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when end of file is reached. */\nEOF,\n\n/** Token with content when end of a line is reached. */\nEORECORD\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(CSVFormat format, ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.isEncapsulating = format.isEncapsulating();\nthis.isEscaping = format.isEscaping();\nthis.isCommentEnabled = format.isCommentingEnabled();\nthis.delimiter = format.getDelimiter();\nthis.escape = format.getEscape();\nthis.encapsulator = format.getEncapsulator();\nthis.commmentStart = format.getCommentStart();\nthis.surroundingSpacesIgnored = format.isSurroundingSpacesIgnored();\nthis.emptyLinesIgnored = format.isEmptyLinesIgnored();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:getLineNumber()I",
                                    "method_body": "int getLineNumber() {\nreturn in.getLineNumber();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfLine(I)Z",
                                    "method_body": "boolean isEndOfLine(int c) throws IOException {\n// check if we have \\r\\n...\nif (c == '\\r' && in.lookAhead() == '\\n') {\n// note: does not change c outside of this method !!\nc = in.read();\n}\nreturn (c == '\\n' || c == '\\r');\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(int c) {\nreturn c == ExtendedBufferedReader.END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "abstract Token nextToken(Token reusableToken) throws IOException;\n\nboolean isDelimiter(int c) {\nreturn c == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(int c) {\nreturn isEscaping && c == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEncapsulator(I)Z",
                                    "method_body": "boolean isEncapsulator(int c) {\nreturn isEncapsulating && c == encapsulator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(int c) {\nreturn isCommentEnabled && c == commmentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "public CSVLexer(CSVFormat format, ExtendedBufferedReader in) {\nsuper(format, in);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(Token tkn) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = in.readAgain();\n\n//  read the next char and set eol\n/* note: unfortunately isEndOfLine may consumes a character silently.\n*       this has no effect outside of the method. so a simple workaround\n*       is to call 'readAgain' on the stream...\n*/\nint c = in.read();\nboolean eol = isEndOfLine(c);\nc = in.readAgain();\n\n//  empty line detection: eol AND (last char was EOL or beginning)\nif (emptyLinesIgnored) {\nwhile (eol\n&& (lastChar == '\\n' || lastChar == '\\r' || lastChar == ExtendedBufferedReader.UNDEFINED)\n&& !isEndOfFile(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = in.read();\neol = isEndOfLine(c);\nc = in.readAgain();\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntkn.type = EOF;\n// don't set tkn.isReady here because no content\nreturn tkn;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntkn.type = EOF;\n// don't set tkn.isReady here because no content\nreturn tkn;\n}\n\n//  important: make sure a new char gets consumed in each iteration\nwhile (tkn.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (surroundingSpacesIgnored) {\nwhile (isWhitespace(c) && !eol) {\nc = in.read();\neol = isEndOfLine(c);\n}\n}\n\n// ok, start of token reached: comment, encapsulated, or token\nif (isCommentStart(c)) {\n// ignore everything till end of line and continue (incr linecount)\nin.readLine();\ntkn = nextToken(tkn.reset());\n} else if (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntkn.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n//noop: tkn.content.append(\"\");\ntkn.type = EORECORD;\n} else if (isEncapsulator(c)) {\n// consume encapsulated token\nencapsulatedTokenLexer(tkn, c);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n//noop: tkn.content.append(\"\");\ntkn.type = EOF;\ntkn.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nsimpleTokenLexer(tkn, c);\n}\n}\nreturn tkn;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:simpleTokenLexer(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\nwhile (true) {\nif (isEndOfLine(c)) {\n// end of record\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\n// end of file\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\n// end of token\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\ntkn.content.append((char) readEscape(c));\n} else {\ntkn.content.append((char) c);\n}\n\nc = in.read();\n}\n\nif (surroundingSpacesIgnored) {\ntrimTrailingSpaces(tkn.content);\n}\n\nreturn tkn;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(Reader r) {\nsuper(r);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nint current = super.read();\nif (current == '\\n') {\nlineCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:readAgain()I",
                                    "method_body": "int readAgain() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
                                    "method_body": "int lookAhead() throws IOException {\nsuper.mark(1);\nint c = super.read();\nsuper.reset();\n\nreturn c;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLineNumber()I",
                                    "method_body": "int getLineNumber() {\nreturn lineCounter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;)V",
                                    "method_body": "CSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n/** The values of the record */\nprivate final String[] values;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\nCSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\ndo {\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\ncase TOKEN:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EORECORD:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EOF:\nif (reusableToken.isReady) {\nrecord.add(reusableToken.content.toString());\n} else {\nresult = null;\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n}\n} while (reusableToken.type == TOKEN);\n\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n}\nreturn result;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 2,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord",
                            "test_body": "67: public void testGetStringInconsistentRecord() {\n68: header.put(\"fourth\", Integer.valueOf(4));\n69: recordWithHeader.get(\"fourth\");\n70: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\n\nprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n/** The values of the record */\nprivate final String[] values;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The record number. */\nprivate final long recordNumber;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:get(Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "public String get(final String name) {\nif (mapping == null) {\nthrow new IllegalStateException(\n\"No header mapping was specified, the record values can't be accessed by name\");\n}\nfinal Integer index = mapping.get(name);\nreturn index != null ? values[index.intValue()] : null;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 3,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testBackslashEscaping",
                            "test_body": "283: public void testBackslashEscaping() throws IOException {\n284: 285: // To avoid confusion over the need for escaping chars in java code,\n286: // We will test with a forward slash as the escape char, and a single\n287: // quote as the encapsulator.\n288: 289: final String code =\n290: \"one,two,three\\n\" // 0\n291: + \"'',''\\n\"       // 1) empty encapsulators\n292: + \"/',/'\\n\"       // 2) single encapsulators\n293: + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n294: + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n295: + \"/,,/,\\n\"       // 5) separator escaped\n296: + \"//,//\\n\"       // 6) escape escaped\n297: + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n298: + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n299: + \"9,   /\\n   \\n\"  // escaped newline\n300: + \"\";\n301: final String[][] res = {\n302: {\"one\", \"two\", \"three\"}, // 0\n303: {\"\", \"\"},                // 1\n304: {\"'\", \"'\"},              // 2\n305: {\"'\", \"'\"},              // 3\n306: {\"'\", \"'\"},              // 4\n307: {\",\", \",\"},              // 5\n308: {\"/\", \"/\"},              // 6\n309: {\"/\", \"/\"},              // 7\n310: {\"   8   \", \"   \\\"quoted \\\"\\\" /\\\" / string\\\"   \"},\n311: {\"9\", \"   \\n   \"},\n312: };\n313: 314: 315: final CSVFormat format = CSVFormat.newBuilder(',').withQuoteChar('\\'').withEscape('/')\n316: .withIgnoreEmptyLines(true).withRecordSeparator(CRLF).build();\n317: 318: final CSVParser parser = new CSVParser(code, format);\n319: final List<CSVRecord> records = parser.getRecords();\n320: assertTrue(records.size() > 0);\n321: 322: Utils.compare(\"Records do not match expected result\", res, records);\n323: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:<init>(C)V",
                                    "method_body": "CSVFormatBuilder(final char delimiter){\nthis(delimiter, null, null, null, null, false, false, null, Constants.EMPTY, null);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormatBuilder(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:build()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat build() {\nvalidate();\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullToString, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:validate()V",
                                    "method_body": "private void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nthis.escape = escape;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nthis.ignoreEmptyLines = ignoreEmptyLines;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withQuoteChar(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withQuoteChar(final char quoteChar) {\nreturn withQuoteChar(Character.valueOf(quoteChar));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nthis.quoteChar = quoteChar;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final String recordSeparator) {\nthis.recordSeparator = recordSeparator;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header == null ? null : header.clone();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "private final char delimiter;\nprivate final Character quoteChar;\nprivate final Quote quotePolicy;\nprivate final Character commentStart;\nprivate final Character escape;\nprivate final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\nprivate final boolean ignoreEmptyLines;\n\nprivate final String recordSeparator; // for outputs\n\nprivate final String nullToString; // for outputs\n\nprivate final String[] header;\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 =\nnewBuilder()\n.withIgnoreEmptyLines(false)\n.build();\n\n/**\n* Standard comma separated format, as for {@link #RFC4180} but allowing empty lines."
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newBuilder()Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public static CSVFormatBuilder newBuilder() {\nreturn new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, Constants.EMPTY,\nnull);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newBuilder(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public static CSVFormatBuilder newBuilder(final char delimiter) {\nreturn new CSVFormatBuilder(delimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "String[] getHeader() {\nreturn header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader input, final CSVFormat format) throws IOException {\nthis.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\nthis.headerMap = initializeHeader(format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final String input, final CSVFormat format) throws IOException {\nthis(new StringReader(input), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nrecord.clear();\nStringBuilder sb = null;\ndo {\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\ncase TOKEN:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EORECORD:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EOF:\nif (reusableToken.isReady) {\nrecord.add(reusableToken.content.toString());\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(\"\\n\");\n}\nsb.append(reusableToken.content);\nreusableToken.type = TOKEN; // Read another token\nbreak;\n}\n} while (reusableToken.type == TOKEN);\n\nif (!record.isEmpty()) {\nrecordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMap, comment, this.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:getRecords()Ljava/util/List;",
                                    "method_body": "public List<CSVRecord> getRecords() throws IOException {\nfinal List<CSVRecord> records = new ArrayList<CSVRecord>();\nCSVRecord rec;\nwhile ((rec = nextRecord()) != null) {\nrecords.add(rec);\n}\nreturn records;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader(Lorg/apache/commons/csv/CSVFormat;)Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader(final CSVFormat format) throws IOException {\nMap<String, Integer> hdrMap = null;\nif (format.getHeader() != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] header = null;\nif (format.getHeader().length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord record = nextRecord();\nif (record != null) {\nheader = record.values();\n}\n} else {\nheader = format.getHeader();\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commmentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:getLineNumber()J",
                                    "method_body": "long getLineNumber() {\nreturn in.getLineNumber();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEscape()I",
                                    "method_body": "int readEscape() throws IOException {\n// the escape char has just been read (normally a backslash)\nfinal int c = in.read();\nswitch (c) {\ncase 'r':\nreturn CR;\ncase 'n':\nreturn LF;\ncase 't':\nreturn TAB;\ncase 'b':\nreturn BACKSPACE;\ncase 'f':\nreturn FF;\ncase CR:\ncase LF:\ncase FF: // TODO is this correct?\ncase TAB: // TODO is this correct? Do tabs need to be escaped?\ncase BACKSPACE: // TODO is this correct?\nreturn c;\ncase END_OF_STREAM:\nthrow new IOException(\"EOF whilst processing escape sequence\");\ndefault:\n// Now check for meta-characters\nreturn c;\n// indicate unexpected char - available from in.getLastChar()\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int c) throws IOException {\n// check if we have \\r\\n...\nif (c == CR && in.lookAhead() == LF) {\n// note: does not change c outside of this method!\nc = in.read();\n}\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int c) {\nreturn c == LF || c == CR || c == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int c) {\nreturn c == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int c) {\nreturn c == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int c) {\nreturn c == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int c) {\nreturn c == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int c) {\nreturn c == commmentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "CSVLexer(final CSVFormat format, final ExtendedBufferedReader in) {\nsuper(format, in);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = in.getLastChar();\n\n// read the next char and set eol\nint c = in.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = in.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String comment = in.readLine().trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = in.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: tkn.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: tkn.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n// Faster to use while(true)+break than while(tkn.type == INVALID)\nwhile (true) {\nif (readEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) c).append((char) in.getLastChar());\n} else {\ntkn.content.append((char) unescaped);\n}\nc = in.read(); // continue\n} else {\ntkn.content.append((char) c);\nc = in.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(tkn.content);\n}\n\nreturn tkn;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:parseEncapsulatedToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseEncapsulatedToken(final Token tkn) throws IOException {\n// save current line number in case needed for IOE\nfinal long startLineNumber = getLineNumber();\nint c;\nwhile (true) {\nc = in.read();\n\nif (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) c).append((char) in.getLastChar());\n} else {\ntkn.content.append((char) unescaped);\n}\n} else if (isQuoteChar(c)) {\nif (isQuoteChar(in.lookAhead())) {\n// double or escaped encapsulator -> add single encapsulator to token\nc = in.read();\ntkn.content.append((char) c);\n} else {\n// token finish mark (encapsulator) reached: ignore whitespace till delimiter\nwhile (true) {\nc = in.read();\nif (isDelimiter(c)) {\ntkn.type = TOKEN;\nreturn tkn;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nreturn tkn;\n} else if (readEndOfLine(c)) {\ntkn.type = EORECORD;\nreturn tkn;\n} else if (!isWhitespace(c)) {\n// error invalid char between token and next delimiter\nthrow new IOException(\"(line \" + getLineNumber() +\n\") invalid char between encapsulated token and delimiter\");\n}\n}\n}\n} else if (isEndOfFile(c)) {\n// error condition (end of file before end of token)\nthrow new IOException(\"(startline \" + startLineNumber +\n\") EOF reached before encapsulated token finished\");\n} else {\n// consume character\ntkn.content.append((char) c);\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\nlineCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
                                    "method_body": "int lookAhead() throws IOException {\nsuper.mark(1);\nfinal int c = super.read();\nsuper.reset();\n\nreturn c;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLineNumber()J",
                                    "method_body": "long getLineNumber() {\nreturn lineCounter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nrecord.clear();\nStringBuilder sb = null;\ndo {\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\ncase TOKEN:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EORECORD:\nrecord.add(reusableToken.content.toString());\nbreak;\ncase EOF:\nif (reusableToken.isReady) {\nrecord.add(reusableToken.content.toString());\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(\"\\n\");\n}\nsb.append(reusableToken.content);\nreusableToken.type = TOKEN; // Read another token\nbreak;\n}\n} while (reusableToken.type == TOKEN);\n\nif (!record.isEmpty()) {\nrecordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMap, comment, this.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\n\nprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n/** The values of the record */\nprivate final String[] values;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The record number. */\nprivate final long recordNumber;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:values()[Ljava/lang/String;",
                                    "method_body": "String[] values() {\nreturn values;\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVLexerTest.testEscapedMySqlNullValue",
                            "test_body": "332: public void testEscapedMySqlNullValue() throws Exception {\n333: // MySQL uses \\N to symbolize null values. We have to restore this\n334: final Lexer lexer = getLexer(\"character\\\\NEscaped\", formatWithEscaping);\n335: assertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\NEscaped\"));\n336: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormatBuilder(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:build()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat build() {\nvalidate();\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullToString, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:validate()V",
                                    "method_body": "private void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nthis.escape = escape;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nthis.ignoreEmptyLines = ignoreEmptyLines;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nthis.quoteChar = quoteChar;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final String recordSeparator) {\nthis.recordSeparator = recordSeparator;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header == null ? null : header.clone();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "private final char delimiter;\nprivate final Character quoteChar;\nprivate final Quote quotePolicy;\nprivate final Character commentStart;\nprivate final Character escape;\nprivate final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\nprivate final boolean ignoreEmptyLines;\n\nprivate final String recordSeparator; // for outputs\n\nprivate final String nullToString; // for outputs\n\nprivate final String[] header;\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 =\nnewBuilder()\n.withIgnoreEmptyLines(false)\n.build();\n\n/**\n* Standard comma separated format, as for {@link #RFC4180} but allowing empty lines."
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newBuilder()Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public static CSVFormatBuilder newBuilder() {\nreturn new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, Constants.EMPTY,\nnull);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commmentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEscape()I",
                                    "method_body": "int readEscape() throws IOException {\n// the escape char has just been read (normally a backslash)\nfinal int c = in.read();\nswitch (c) {\ncase 'r':\nreturn CR;\ncase 'n':\nreturn LF;\ncase 't':\nreturn TAB;\ncase 'b':\nreturn BACKSPACE;\ncase 'f':\nreturn FF;\ncase CR:\ncase LF:\ncase FF: // TODO is this correct?\ncase TAB: // TODO is this correct? Do tabs need to be escaped?\ncase BACKSPACE: // TODO is this correct?\nreturn c;\ncase END_OF_STREAM:\nthrow new IOException(\"EOF whilst processing escape sequence\");\ndefault:\n// Now check for meta-characters\nreturn c;\n// indicate unexpected char - available from in.getLastChar()\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int c) throws IOException {\n// check if we have \\r\\n...\nif (c == CR && in.lookAhead() == LF) {\n// note: does not change c outside of this method!\nc = in.read();\n}\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int c) {\nreturn c == LF || c == CR || c == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int c) {\nreturn c == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int c) {\nreturn c == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int c) {\nreturn c == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int c) {\nreturn c == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int c) {\nreturn c == commmentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "CSVLexer(final CSVFormat format, final ExtendedBufferedReader in) {\nsuper(format, in);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = in.getLastChar();\n\n// read the next char and set eol\nint c = in.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = in.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String comment = in.readLine().trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = in.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: tkn.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: tkn.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n// Faster to use while(true)+break than while(tkn.type == INVALID)\nwhile (true) {\nif (readEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) c).append((char) in.getLastChar());\n} else {\ntkn.content.append((char) unescaped);\n}\nc = in.read(); // continue\n} else {\ntkn.content.append((char) c);\nc = in.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(tkn.content);\n}\n\nreturn tkn;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\nlineCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVLexerTest.testEscapedCharacter",
                            "test_body": "339: public void testEscapedCharacter() throws Exception {\n340: final Lexer lexer = getLexer(\"character\\\\aEscaped\", formatWithEscaping);\n341: assertThat(lexer.nextToken(new Token()), hasContent(\"character\\\\aEscaped\"));\n342: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormatBuilder(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:build()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat build() {\nvalidate();\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullToString, header);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:validate()V",
                                    "method_body": "private void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nthis.escape = escape;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nthis.ignoreEmptyLines = ignoreEmptyLines;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nthis.quoteChar = quoteChar;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$CSVFormatBuilder:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public CSVFormatBuilder withRecordSeparator(final String recordSeparator) {\nthis.recordSeparator = recordSeparator;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nString nullToString, final String[] header) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullToString = nullToString;\nthis.header = header == null ? null : header.clone();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "private final char delimiter;\nprivate final Character quoteChar;\nprivate final Quote quotePolicy;\nprivate final Character commentStart;\nprivate final Character escape;\nprivate final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\nprivate final boolean ignoreEmptyLines;\n\nprivate final String recordSeparator; // for outputs\n\nprivate final String nullToString; // for outputs\n\nprivate final String[] header;\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 =\nnewBuilder()\n.withIgnoreEmptyLines(false)\n.build();\n\n/**\n* Standard comma separated format, as for {@link #RFC4180} but allowing empty lines."
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newBuilder()Lorg/apache/commons/csv/CSVFormat$CSVFormatBuilder;",
                                    "method_body": "public static CSVFormatBuilder newBuilder() {\nreturn new CSVFormatBuilder(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, Constants.EMPTY,\nnull);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {\nthis.format = format;\nthis.in = in;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commmentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private final char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEscape()I",
                                    "method_body": "int readEscape() throws IOException {\n// the escape char has just been read (normally a backslash)\nfinal int c = in.read();\nswitch (c) {\ncase 'r':\nreturn CR;\ncase 'n':\nreturn LF;\ncase 't':\nreturn TAB;\ncase 'b':\nreturn BACKSPACE;\ncase 'f':\nreturn FF;\ncase CR:\ncase LF:\ncase FF: // TODO is this correct?\ncase TAB: // TODO is this correct? Do tabs need to be escaped?\ncase BACKSPACE: // TODO is this correct?\nreturn c;\ncase END_OF_STREAM:\nthrow new IOException(\"EOF whilst processing escape sequence\");\ndefault:\n// Now check for meta-characters\nreturn c;\n// indicate unexpected char - available from in.getLastChar()\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int c) throws IOException {\n// check if we have \\r\\n...\nif (c == CR && in.lookAhead() == LF) {\n// note: does not change c outside of this method!\nc = in.read();\n}\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int c) {\nreturn c == LF || c == CR || c == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int c) {\nreturn c == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int c) {\nreturn c == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int c) {\nreturn c == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int c) {\nreturn c == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int c) {\nreturn c == commmentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "CSVLexer(final CSVFormat format, final ExtendedBufferedReader in) {\nsuper(format, in);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = in.getLastChar();\n\n// read the next char and set eol\nint c = in.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = in.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set tkn.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String comment = in.readLine().trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = in.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: tkn.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: tkn.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVLexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n// Faster to use while(true)+break than while(tkn.type == INVALID)\nwhile (true) {\nif (readEndOfLine(c)) {\ntkn.type = EORECORD;\nbreak;\n} else if (isEndOfFile(c)) {\ntkn.type = EOF;\ntkn.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(c)) {\ntkn.type = TOKEN;\nbreak;\n} else if (isEscape(c)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntkn.content.append((char) c).append((char) in.getLastChar());\n} else {\ntkn.content.append((char) unescaped);\n}\nc = in.read(); // continue\n} else {\ntkn.content.append((char) c);\nc = in.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(tkn.content);\n}\n\nreturn tkn;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\nlineCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 4,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testNoHeaderMap",
                            "test_body": "668: public void testNoHeaderMap() throws Exception {\n669: final CSVParser parser = CSVParser.parse(\"a,b,c\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT);\n670: Assert.assertNull(parser.getHeaderMap());\n671: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n* <p/>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n* Settings are:\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\nif (header != null) {\nfinal Set<String> set = new HashSet<String>(header.length);\nset.addAll(Arrays.asList(header));\nif (set.size() != header.length) {\nthrow new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {\nthis.in = in;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(Object parameter, String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nformat.validate();\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:parse(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public static CSVParser parse(String string, final CSVFormat format) throws IOException {\nAssertions.notNull(string, \"string\");\nAssertions.notNull(format, \"format\");\n\nreturn new CSVParser(new StringReader(string), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:getHeaderMap()Ljava/util/Map;",
                                    "method_body": "public Map<String, Integer> getHeaderMap() {\nreturn new LinkedHashMap<String, Integer>(this.headerMap);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] header = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord record = this.nextRecord();\nif (record != null) {\nheader = record.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheader = formatHeader;\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 5,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106",
                            "test_body": "233: public void testNullRecordSeparatorCsv106() {\n234: final CSVFormat format = CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(\"H1\", \"H2\");\n235: final String formatStr = format.format(\"A\", \"B\");\n236: assertNotNull(formatStr);\n237: assertFalse(formatStr.endsWith(\"null\"));\n238: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n* <p/>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n* Settings are:\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newFormat(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public static CSVFormat newFormat(final char delimiter) {\nreturn new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:format([Ljava/lang/Object;)Ljava/lang/String;",
                                    "method_body": "public String format(final Object... values) {\nfinal StringWriter out = new StringWriter();\ntry {\nnew CSVPrinter(out, this).printRecord(values);\nreturn out.toString().trim();\n} catch (final IOException e) {\n// should not happen because a StringWriter does not do IO.\nthrow new IllegalStateException(e);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
                                    "method_body": "public boolean isEscaping() {\nreturn escape != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoting()Z",
                                    "method_body": "public boolean isQuoting() {\nreturn quoteChar != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\nif (header != null) {\nfinal Set<String> set = new HashSet<String>(header.length);\nset.addAll(Arrays.asList(header));\nif (set.size() != header.length) {\nthrow new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withSkipHeaderRecord(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\nthis.format.validate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\n// null values are considered empty\nString strValue;\nif (value == null) {\nfinal String nullString = format.getNullString();\nstrValue = nullString == null ? Constants.EMPTY : nullString;\n} else {\nstrValue = value.toString();\n}\nthis.print(value, strValue, 0, strValue.length());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
                                    "method_body": "private void print(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nif (!newRecord) {\nout.append(format.getDelimiter());\n}\nif (format.isQuoting()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len);\n} else if (format.isEscaping()) {\nprintAndEscape(value, offset, len);\n} else {\nout.append(value, offset, offset + len);\n}\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteChar().charValue();\n\nQuote quotePolicy = format.getQuotePolicy();\nif (quotePolicy == null) {\nquotePolicy = Quote.MINIMAL;\n}\nswitch (quotePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// Hmmm, where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n// } else if (c == ' ' || c == '\\f' || c == '\\t') {\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// if (c == ' ' || c == '\\f' || c == '\\t') {\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}\n\n/**\n* Prints a comment on a new line among the delimiter separated values. Comments will always begin on a new line\n* and occupy a least one full line. The character specified to start comments and a space will be inserted at the\n* beginning of each new line in the comment.\n* <p/>\n* If comments are disabled in the current CSV format this method does nothing.\n*\n* @param comment\n*            the comment to output\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printComment(final String comment) throws IOException {\nif (!format.isCommentingEnabled()) {\nreturn;\n}\nif (!newRecord) {\nprintln();\n}\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nfor (int i = 0; i < comment.length(); i++) {\nfinal char c = comment.charAt(i);\nswitch (c) {\ncase CR:\nif (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\ni++;\n}\n//$FALL-THROUGH$ break intentionally excluded.\ncase LF:\nprintln();\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nbreak;\ndefault:\nout.append(c);\nbreak;\n}\n}\nprintln();\n}\n\n/**\n* Outputs the record separator.\n*\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nout.append(recordSeparator);\nnewRecord = true;\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints all the objects in the given collection.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given array.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Object[] values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given JDBC result set.\n*\n* @param resultSet result set\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n* @throws SQLException if a database access error occurs\n*/\npublic void printRecords(final ResultSet resultSet) throws SQLException, IOException {\nfinal int columnCount = resultSet.getMetaData().getColumnCount();\nwhile (resultSet.next()) {\nfor (int i = 1; i <= columnCount; i++) {\nprint(resultSet.getString(i));\n}\nprintln();\n}\n}\n\n/**\n* Gets the target Appendable.\n*\n* @return the target Appendable.\n*/\npublic Appendable getOut() {\nreturn this.out;\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteChar().charValue();\n\nQuote quotePolicy = format.getQuotePolicy();\nif (quotePolicy == null) {\nquotePolicy = Quote.MINIMAL;\n}\nswitch (quotePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// Hmmm, where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n// } else if (c == ' ' || c == '\\f' || c == '\\t') {\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// if (c == ' ' || c == '\\f' || c == '\\t') {\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}\n\n/**\n* Prints a comment on a new line among the delimiter separated values. Comments will always begin on a new line\n* and occupy a least one full line. The character specified to start comments and a space will be inserted at the\n* beginning of each new line in the comment.\n* <p/>\n* If comments are disabled in the current CSV format this method does nothing.\n*\n* @param comment\n*            the comment to output\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printComment(final String comment) throws IOException {\nif (!format.isCommentingEnabled()) {\nreturn;\n}\nif (!newRecord) {\nprintln();\n}\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nfor (int i = 0; i < comment.length(); i++) {\nfinal char c = comment.charAt(i);\nswitch (c) {\ncase CR:\nif (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\ni++;\n}\n//$FALL-THROUGH$ break intentionally excluded.\ncase LF:\nprintln();\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nbreak;\ndefault:\nout.append(c);\nbreak;\n}\n}\nprintln();\n}\n\n/**\n* Outputs the record separator.\n*\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nout.append(recordSeparator);\nnewRecord = true;\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints all the objects in the given collection.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given array.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Object[] values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given JDBC result set.\n*\n* @param resultSet result set\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n* @throws SQLException if a database access error occurs\n*/\npublic void printRecords(final ResultSet resultSet) throws SQLException, IOException {\nfinal int columnCount = resultSet.getMetaData().getColumnCount();\nwhile (resultSet.next()) {\nfor (int i = 1; i <= columnCount; i++) {\nprint(resultSet.getString(i));\n}\nprintln();\n}\n}\n\n/**\n* Gets the target Appendable.\n*\n* @return the target Appendable.\n*/\npublic Appendable getOut() {\nreturn this.out;\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 6,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord",
                            "test_body": "164: public void testToMapWithShortRecord() throws Exception {\n165: final CSVParser parser =  CSVParser.parse(\"a,b\", CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\"));\n166: final CSVRecord shortRec = parser.iterator().next();\n167: shortRec.toMap();\n168: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n* <p/>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n* Settings are:\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getSkipHeaderRecord()Z",
                                    "method_body": "public boolean getSkipHeaderRecord() {\nreturn skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\nif (header != null) {\nfinal Set<String> set = new HashSet<String>(header.length);\nset.addAll(Arrays.asList(header));\nif (set.size() != header.length) {\nthrow new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n}\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isClosed()Z",
                                    "method_body": "boolean isClosed() {\nreturn reader.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\neolCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn closed;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nformat.validate();\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:parse(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public static CSVParser parse(final String string, final CSVFormat format) throws IOException {\nAssertions.notNull(string, \"string\");\nAssertions.notNull(format, \"format\");\n\nreturn new CSVParser(new StringReader(string), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
                                    "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input);\n} else {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] header = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheader = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheader = formatHeader;\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn this.lexer.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:iterator()Ljava/util/Iterator;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:getNextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:next()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:putIn(Ljava/util/Map;)Ljava/util/Map;",
                                    "method_body": "<M extends Map<String, String>> M putIn(final M map) {\nfor (final Entry<String, Integer> entry : mapping.entrySet()) {\nfinal int col = entry.getValue().intValue();\nmap.put(entry.getKey(), values[col]);\n}\nreturn map;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:toMap()Ljava/util/Map;",
                                    "method_body": "public Map<String, String> toMap() {\nreturn putIn(new HashMap<String, String>(values.length));\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 7,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testDuplicateHeaderEntries",
                            "test_body": "499: public void testDuplicateHeaderEntries() throws Exception {\n500: CSVParser.parse(\"a,b,a\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT.withHeader(new String[]{}));\n501: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\nif (header != null) {\nfinal Set<String> set = new HashSet<String>(header.length);\nset.addAll(Arrays.asList(header));\nif (set.size() != header.length) {\nthrow new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n}\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\neolCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nformat.validate();\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:parse(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public static CSVParser parse(final String string, final CSVFormat format) throws IOException {\nAssertions.notNull(string, \"string\");\nAssertions.notNull(format, \"format\");\n\nreturn new CSVParser(new StringReader(string), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
                                    "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input);\n} else {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] header = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheader = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheader = formatHeader;\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:values()[Ljava/lang/String;",
                                    "method_body": "String[] values() {\nreturn values;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 8,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements",
                            "test_body": "65: public void testDuplicateHeaderElements() {\n66: CSVFormat.DEFAULT.withHeader(\"A\", \"A\").validate();\n67: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\n} else {\nthis.header = header.clone();\n}\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\nif (header != null) {\nfinal Set<String> set = new HashSet<String>(header.length);\nset.addAll(Arrays.asList(header));\nif (set.size() != header.length) {\nthrow new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 9,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader",
                            "test_body": "172: public void testToMapWithNoHeader() throws Exception {\n173: final CSVParser parser =  CSVParser.parse(\"a,b\", CSVFormat.newFormat(','));\n174: final CSVRecord shortRec = parser.iterator().next();\n175: Map<String, String> map = shortRec.toMap();\n176: assertNotNull(\"Map is not null.\", map);\n177: assertTrue(\"Map is empty.\", map.isEmpty());\n178: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\n} else {\nSet<String> dupCheck = new HashSet<String>();\nfor(String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\nthis.header = header.clone();\n}\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:newFormat(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public static CSVFormat newFormat(final char delimiter) {\nreturn new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n}\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isClosed()Z",
                                    "method_body": "boolean isClosed() {\nreturn reader.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\neolCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn closed;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nformat.validate();\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:parse(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public static CSVParser parse(final String string, final CSVFormat format) throws IOException {\nAssertions.notNull(string, \"string\");\nAssertions.notNull(format, \"format\");\n\nreturn new CSVParser(new StringReader(string), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
                                    "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input);\n} else {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] header = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheader = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheader = formatHeader;\n}\n\n// build the name to index mappings\nif (header != null) {\nfor (int i = 0; i < header.length; i++) {\nif (hdrMap.containsKey(header[i])) {\nthrow new IllegalArgumentException(\"The header contains duplicate names: \" +\nArrays.toString(header));\n}\nhdrMap.put(header[i], Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn this.lexer.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:iterator()Ljava/util/Iterator;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:getNextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:next()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\n// TODO: This is not great, throw an ISE instead?\nthrow new RuntimeException(e);\n}\n}\n\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:putIn(Ljava/util/Map;)Ljava/util/Map;",
                                    "method_body": "<M extends Map<String, String>> M putIn(final M map) {\nfor (final Entry<String, Integer> entry : mapping.entrySet()) {\nfinal int col = entry.getValue().intValue();\nif (col < values.length) {\nmap.put(entry.getKey(), values[col]);\n}\n}\nreturn map;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:toMap()Ljava/util/Map;",
                                    "method_body": "public Map<String, String> toMap() {\nreturn putIn(new HashMap<String, String>(values.length));\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 10,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testHeader",
                            "test_body": "489: public void testHeader() throws IOException {\n490: final StringWriter sw = new StringWriter();\n491: final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)\n492: .withHeader(\"C1\", \"C2\", \"C3\"));\n493: printer.printRecord(\"a\", \"b\", \"c\");\n494: printer.printRecord(\"x\", \"y\", \"z\");\n495: assertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\n496: printer.close();\n497: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Z)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\n} else {\nSet<String> dupCheck = new HashSet<String>();\nfor(String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\nthis.header = header.clone();\n}\nthis.skipHeaderRecord = skipHeaderRecord;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isEscaping()Z",
                                    "method_body": "public boolean isEscaping() {\nreturn escape != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoting()Z",
                                    "method_body": "public boolean isQuoting() {\nreturn quoteChar != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "void validate() throws IllegalStateException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalStateException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalStateException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalStateException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalStateException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalStateException(\"No quotes mode set but no escape character is set\");\n}\n\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\nthis.format.validate();\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\n// null values are considered empty\nString strValue;\nif (value == null) {\nfinal String nullString = format.getNullString();\nstrValue = nullString == null ? Constants.EMPTY : nullString;\n} else {\nstrValue = value.toString();\n}\nthis.print(value, strValue, 0, strValue.length());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
                                    "method_body": "private void print(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nif (!newRecord) {\nout.append(format.getDelimiter());\n}\nif (format.isQuoting()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len);\n} else if (format.isEscaping()) {\nprintAndEscape(value, offset, len);\n} else {\nout.append(value, offset, offset + len);\n}\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteChar().charValue();\n\nQuote quotePolicy = format.getQuotePolicy();\nif (quotePolicy == null) {\nquotePolicy = Quote.MINIMAL;\n}\nswitch (quotePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// Hmmm, where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n// } else if (c == ' ' || c == '\\f' || c == '\\t') {\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// if (c == ' ' || c == '\\f' || c == '\\t') {\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}\n\n/**\n* Prints a comment on a new line among the delimiter separated values.\n*\n* <p>\n* Comments will always begin on a new line and occupy a least one full line. The character specified to start\n* comments and a space will be inserted at the beginning of each new line in the comment.\n* </p>\n*\n* If comments are disabled in the current CSV format this method does nothing.\n*\n* @param comment\n*            the comment to output\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printComment(final String comment) throws IOException {\nif (!format.isCommentingEnabled()) {\nreturn;\n}\nif (!newRecord) {\nprintln();\n}\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nfor (int i = 0; i < comment.length(); i++) {\nfinal char c = comment.charAt(i);\nswitch (c) {\ncase CR:\nif (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\ni++;\n}\n//$FALL-THROUGH$ break intentionally excluded.\ncase LF:\nprintln();\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nbreak;\ndefault:\nout.append(c);\nbreak;\n}\n}\nprintln();\n}\n\n/**\n* Outputs the record separator.\n*\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\n}\nnewRecord = true;\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints all the objects in the given collection.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given array.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Object[] values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given JDBC result set.\n*\n* @param resultSet result set\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n* @throws SQLException if a database access error occurs\n*/\npublic void printRecords(final ResultSet resultSet) throws SQLException, IOException {\nfinal int columnCount = resultSet.getMetaData().getColumnCount();\nwhile (resultSet.next()) {\nfor (int i = 1; i <= columnCount; i++) {\nprint(resultSet.getString(i));\n}\nprintln();\n}\n}\n\n/**\n* Gets the target Appendable.\n*\n* @return the target Appendable.\n*/\npublic Appendable getOut() {\nreturn this.out;\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value,\nfinal int offset, final int len) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteChar().charValue();\n\nQuote quotePolicy = format.getQuotePolicy();\nif (quotePolicy == null) {\nquotePolicy = Quote.MINIMAL;\n}\nswitch (quotePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// Hmmm, where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n// } else if (c == ' ' || c == '\\f' || c == '\\t') {\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// if (c == ' ' || c == '\\f' || c == '\\t') {\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}\n\n/**\n* Prints a comment on a new line among the delimiter separated values.\n*\n* <p>\n* Comments will always begin on a new line and occupy a least one full line. The character specified to start\n* comments and a space will be inserted at the beginning of each new line in the comment.\n* </p>\n*\n* If comments are disabled in the current CSV format this method does nothing.\n*\n* @param comment\n*            the comment to output\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printComment(final String comment) throws IOException {\nif (!format.isCommentingEnabled()) {\nreturn;\n}\nif (!newRecord) {\nprintln();\n}\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nfor (int i = 0; i < comment.length(); i++) {\nfinal char c = comment.charAt(i);\nswitch (c) {\ncase CR:\nif (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\ni++;\n}\n//$FALL-THROUGH$ break intentionally excluded.\ncase LF:\nprintln();\nout.append(format.getCommentStart().charValue());\nout.append(SP);\nbreak;\ndefault:\nout.append(c);\nbreak;\n}\n}\nprintln();\n}\n\n/**\n* Outputs the record separator.\n*\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\n}\nnewRecord = true;\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n* characters will be escaped.\n*\n* @param values\n*            values to output.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}\n\n/**\n* Prints all the objects in the given collection.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Iterable<?> values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given array.\n*\n* @param values\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n*/\npublic void printRecords(final Object[] values) throws IOException {\nfor (final Object value : values) {\nif (value instanceof Object[]) {\nthis.printRecord((Object[]) value);\n} else if (value instanceof Iterable) {\nthis.printRecord((Iterable<?>) value);\n} else {\nthis.printRecord(value);\n}\n}\n}\n\n/**\n* Prints all the objects in the given JDBC result set.\n*\n* @param resultSet result set\n*            the values to print.\n* @throws IOException\n*             If an I/O error occurs\n* @throws SQLException if a database access error occurs\n*/\npublic void printRecords(final ResultSet resultSet) throws SQLException, IOException {\nfinal int columnCount = resultSet.getMetaData().getColumnCount();\nwhile (resultSet.next()) {\nfor (int i = 1; i <= columnCount; i++) {\nprint(resultSet.getString(i));\n}\nprintln();\n}\n}\n\n/**\n* Gets the target Appendable.\n*\n* @return the target Appendable.\n*/\npublic Appendable getOut() {\nreturn this.out;\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 11,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull",
                            "test_body": "668: public void testHeaderMissingWithNull() throws Exception {\n669: final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n670: CSVFormat.DEFAULT.withHeader().withNullString(\"\").withIgnoreEmptyHeaders(true).parse(in).iterator();\n671: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/Quote;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal Quote quotePolicy, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord,\nfinal boolean ignoreEmptyHeaders) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteChar = quoteChar;\nthis.quotePolicy = quotePolicy;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.ignoreEmptyHeaders = ignoreEmptyHeaders;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\n} else {\nfinal Set<String> dupCheck = new HashSet<String>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\nArrays.toString(header));\n}\n}\nthis.header = header.clone();\n}\nthis.skipHeaderRecord = skipHeaderRecord;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n* <h3>RFC 4180:</h3>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuoteChar('\"')</li>\n* <li>withRecordSeparator(CRLF)</li>\n* </ul>\n* Note: this is currently the same as RFC4180\n*/\npublic static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);\n\n/** Tab-delimited format, with quote; leading and trailing spaces ignored. */\npublic static final CSVFormat TDF =\nDEFAULT\n.withDelimiter(TAB)\n.withIgnoreSurroundingSpaces(true);\n\n/**\n* Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n* a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n* are escaped with '\\'.\n*\n* @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n*      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n*/\npublic static final CSVFormat MYSQL =\nDEFAULT\n.withDelimiter(TAB)\n.withEscape(BACKSLASH)\n.withIgnoreEmptyLines(false)\n.withQuoteChar(null)\n.withRecordSeparator(LF);\n\n/**\n* Returns true if the given character is a line break character.\n*\n* @param c\n*            the character to check\n*\n* @return true if <code>c</code> is a line break character\n*/\nprivate static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentStart()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentStart() {\nreturn commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscape()Ljava/lang/Character;",
                                    "method_body": "public Character getEscape() {\nreturn escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteChar()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteChar() {\nreturn quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:parse(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public CSVParser parse(final Reader in) throws IOException {\nreturn new CSVParser(in, this);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (quoteChar != null && delimiter == quoteChar.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");\n}\n\nif (escape != null && delimiter == escape.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");\n}\n\nif (commentStart != null && delimiter == commentStart.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (quoteChar != null && quoteChar.equals(commentStart)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape != null && escape.equals(commentStart)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n}\n\nif (escape == null && quotePolicy == Quote.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\nif(recordSeparator != null &&\n!(CRLF.equals(recordSeparator) ||\nString.valueOf(CR).equals(recordSeparator) ||\nString.valueOf(LF).equals(recordSeparator))) {\nthrow new IllegalArgumentException(\"Record separator can only by CR, LF or CRLF\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyHeaders(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyHeaders(final boolean ignoreEmptyHeaders) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyHeaders, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteChar(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteChar(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nignoreEmptyHeaders);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscape());\nthis.quoteChar = mapNullToDisabled(format.getQuoteChar());\nthis.commentStart = mapNullToDisabled(format.getCommentStart());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n}\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\neolCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
                                    "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input);\n} else {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] headerRecord = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheaderRecord = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheaderRecord = formatHeader;\n}\n\n// build the name to index mappings\nif (headerRecord != null) {\nfor (int i = 0; i < headerRecord.length; i++) {\nfinal String header = headerRecord[i];\nfinal boolean containsHeader = hdrMap.containsKey(header);\nfinal boolean emptyHeader = header.trim().isEmpty();\nif (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\nthrow new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n\"\\\" in \" + Arrays.toString(headerRecord));\n}\nhdrMap.put(header, Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:values()[Ljava/lang/String;",
                                    "method_body": "String[] values() {\nreturn values;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 12,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData",
                            "test_body": "378: public void testExcelHeaderCountLessThanData() throws Exception {\n379: final String code = \"A,B,C,,\\r\\na,b,c,d,e\\r\\n\";\n380: final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL.withHeader());\n381: try {\n382: for (CSVRecord record : parser.getRecords()) {\n383: Assert.assertEquals(\"a\", record.get(\"A\"));\n384: Assert.assertEquals(\"b\", record.get(\"B\"));\n385: Assert.assertEquals(\"c\", record.get(\"C\"));\n386: }\n387: } finally {\n388: parser.close();\n389: }\n390: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar,\nfinal QuoteMode quoteMode, final Character commentStart,\nfinal Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator,\nfinal String nullString, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nif (header == null) {\nthis.header = null;\n} else {\nfinal Set<String> dupCheck = new HashSet<String>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\nArrays.toString(header));\n}\n}\nthis.header = header.clone();\n}\nthis.skipHeaderRecord = skipHeaderRecord;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\nfalse, true, CRLF, null, null, false, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n*   <li>withDelimiter(',')</li>\n*   <li>withQuoteChar('\"')</li>\n*   <li>withRecordSeparator(\"\\r\\n\")</li>\n*   <li>withIgnoreEmptyLines(false)</li>\n* </ul>\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n*   <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentMarker()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentMarker() {\nreturn commentMarker;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscapeCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getEscapeCharacter() {\nreturn escapeCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getAllowMissingColumnNames()Z",
                                    "method_body": "public boolean getAllowMissingColumnNames() {\nreturn allowMissingColumnNames;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withHeader([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withHeader(final String... header) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\nallowMissingColumnNames);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** According to RFC 4180, line breaks are delimited by CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscapeCharacter());\nthis.quoteChar = mapNullToDisabled(format.getQuoteCharacter());\nthis.commentStart = mapNullToDisabled(format.getCommentMarker());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == Constants.END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n}\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || (current == LF && lastChar != CR)) {\neolCounter++;\n}\nlastChar = current;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
                                    "method_body": "int lookAhead() throws IOException {\nsuper.mark(1);\nfinal int c = super.read();\nsuper.reset();\n\nreturn c;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:parse(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public static CSVParser parse(final String string, final CSVFormat format) throws IOException {\nAssertions.notNull(string, \"string\");\nAssertions.notNull(format, \"format\");\n\nreturn new CSVParser(new StringReader(string), format);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue()V",
                                    "method_body": "private void addRecordValue() {\nfinal String input = this.reusableToken.content.toString();\nfinal String nullString = this.format.getNullString();\nif (nullString == null) {\nthis.record.add(input);\n} else {\nthis.record.add(input.equalsIgnoreCase(nullString) ? null : input);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = new LinkedHashMap<String, Integer>();\n\nString[] headerRecord = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheaderRecord = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheaderRecord = formatHeader;\n}\n\n// build the name to index mappings\nif (headerRecord != null) {\nfor (int i = 0; i < headerRecord.length; i++) {\nfinal String header = headerRecord[i];\nfinal boolean containsHeader = hdrMap.containsKey(header);\nfinal boolean emptyHeader = header == null || header.trim().isEmpty();\nif (containsHeader &&\n(!emptyHeader || (emptyHeader && !this.format.getAllowMissingColumnNames()))) {\nthrow new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n\"\\\" in \" + Arrays.toString(headerRecord));\n}\nhdrMap.put(header, Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.record.clear();\nStringBuilder sb = null;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue();\nbreak;\ncase EORECORD:\nthis.addRecordValue();\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue();\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.record.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\nthis.recordNumber);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping,\nfinal String comment, final long recordNumber) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:values()[Ljava/lang/String;",
                                    "method_body": "String[] values() {\nreturn values;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 13,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault",
                            "test_body": "318: public void testMySqlNullStringDefault() throws IOException {\n319: assertEquals(\"\\\\N\", CSVFormat.MYSQL.getNullString());\n320: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,\nCRLF, null, null, null, false, false, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuote('\"')</li>\n* <li>withRecordSeparator(\"\\r\\n\")</li>\n* <li>withIgnoreEmptyLines(false)</li>\n* </ul>\n* @see Predefined#RFC4180\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\"The quoteChar character and the delimiter cannot be the same ('\" +\nquoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\"The escape character and the delimiter cannot be the same ('\" +\nescapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\"The comment start character and the quoteChar cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\"The comment start and the escape character cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<String>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\nArrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput",
                            "test_body": "323: public void testMySqlNullOutput() throws IOException {\n324: Object[] s = new String[] { \"NULL\", null };\n325: CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n326: StringWriter writer = new StringWriter();\n327: CSVPrinter printer = new CSVPrinter(writer, format);\n328: printer.printRecord(s);\n329: printer.close();\n330: String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n331: assertEquals(expected, writer.toString());\n332: String[] record0 = toFirstRecordValues(expected, format);\n333: assertArrayEquals(new Object[2], record0);\n334: 335: s = new String[] { \"\\\\N\", null };\n336: format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n337: writer = new StringWriter();\n338: printer = new CSVPrinter(writer, format);\n339: printer.printRecord(s);\n340: printer.close();\n341: expected = \"\\\\\\\\N\\t\\\\N\\n\";\n342: assertEquals(expected, writer.toString());\n343: record0 = toFirstRecordValues(expected, format);\n344: assertArrayEquals(expectNulls(s, format), record0);\n345: 346: s = new String[] { \"\\\\N\", \"A\" };\n347: format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n348: writer = new StringWriter();\n349: printer = new CSVPrinter(writer, format);\n350: printer.printRecord(s);\n351: printer.close();\n352: expected = \"\\\\\\\\N\\tA\\n\";\n353: assertEquals(expected, writer.toString());\n354: record0 = toFirstRecordValues(expected, format);\n355: assertArrayEquals(expectNulls(s, format), record0);\n356: 357: s = new String[] { \"\\n\", \"A\" };\n358: format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n359: writer = new StringWriter();\n360: printer = new CSVPrinter(writer, format);\n361: printer.printRecord(s);\n362: printer.close();\n363: expected = \"\\\\n\\tA\\n\";\n364: assertEquals(expected, writer.toString());\n365: record0 = toFirstRecordValues(expected, format);\n366: assertArrayEquals(expectNulls(s, format), record0);\n367: 368: s = new String[] { \"\", null };\n369: format = CSVFormat.MYSQL.withNullString(\"NULL\");\n370: writer = new StringWriter();\n371: printer = new CSVPrinter(writer, format);\n372: printer.printRecord(s);\n373: printer.close();\n374: expected = \"\\tNULL\\n\";\n375: assertEquals(expected, writer.toString());\n376: record0 = toFirstRecordValues(expected, format);\n377: assertArrayEquals(expectNulls(s, format), record0);\n378: 379: s = new String[] { \"\", null };\n380: format = CSVFormat.MYSQL;\n381: writer = new StringWriter();\n382: printer = new CSVPrinter(writer, format);\n383: printer.printRecord(s);\n384: printer.close();\n385: expected = \"\\t\\\\N\\n\";\n386: assertEquals(expected, writer.toString());\n387: record0 = toFirstRecordValues(expected, format);\n388: assertArrayEquals(expectNulls(s, format), record0);\n389: 390: s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n391: format = CSVFormat.MYSQL;\n392: writer = new StringWriter();\n393: printer = new CSVPrinter(writer, format);\n394: printer.printRecord(s);\n395: printer.close();\n396: expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n397: assertEquals(expected, writer.toString());\n398: record0 = toFirstRecordValues(expected, format);\n399: assertArrayEquals(expectNulls(s, format), record0);\n400: 401: s = new String[] { \"NULL\", \"\\\\\\r\" };\n402: format = CSVFormat.MYSQL;\n403: writer = new StringWriter();\n404: printer = new CSVPrinter(writer, format);\n405: printer.printRecord(s);\n406: printer.close();\n407: expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n408: assertEquals(expected, writer.toString());\n409: record0 = toFirstRecordValues(expected, format);\n410: assertArrayEquals(expectNulls(s, format), record0);\n411: 412: s = new String[] { \"\\\\\\r\" };\n413: format = CSVFormat.MYSQL;\n414: writer = new StringWriter();\n415: printer = new CSVPrinter(writer, format);\n416: printer.printRecord(s);\n417: printer.close();\n418: expected = \"\\\\\\\\\\\\r\\n\";\n419: assertEquals(expected, writer.toString());\n420: record0 = toFirstRecordValues(expected, format);\n421: assertArrayEquals(expectNulls(s, format), record0);\n422: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,\nCRLF, null, null, null, false, false, false);\n\n/**\n* Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>withDelimiter(',')</li>\n* <li>withQuote('\"')</li>\n* <li>withRecordSeparator(\"\\r\\n\")</li>\n* <li>withIgnoreEmptyLines(false)</li>\n* </ul>\n* @see Predefined#RFC4180\n*/\npublic static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\"The quoteChar character and the delimiter cannot be the same ('\" +\nquoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\"The escape character and the delimiter cannot be the same ('\" +\nescapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\"The comment start character and the quoteChar cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\"The comment start and the escape character cannot be the same ('\" +\ncommentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<String>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\nArrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteMode(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSPACE = '\\b';\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\nstatic final char BACKSLASH = '\\\\';\nstatic final char FF = '\\f';\nstatic final char LF = '\\n';\nstatic final char SP = ' ';\nstatic final char TAB = '\\t';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\n// null values are considered empty\nString strValue;\nif (value == null) {\nfinal String nullString = format.getNullString();\nstrValue = nullString == null ? Constants.EMPTY : nullString;\n} else {\nstrValue = value.toString();\n}\nthis.print(value, strValue, 0, strValue.length());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len)\nthrows IOException {\nif (!newRecord) {\nout.append(format.getDelimiter());\n}\nif (format.isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len);\n} else if (format.isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len);\n} else {\nout.append(value, offset, offset + len);\n}\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;II)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len)\nthrows IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = format.getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// TODO where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:println()V",
                                    "method_body": "public void println() throws IOException {\nfinal String recordSeparator = format.getRecordSeparator();\nif (recordSeparator != null) {\nout.append(recordSeparator);\n}\nnewRecord = true;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
                                    "method_body": "public void printRecord(final Object... values) throws IOException {\nfor (final Object value : values) {\nprint(value);\n}\nprintln();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len)\nthrows IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = format.getDelimiter();\nfinal char quoteChar = format.getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = format.getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// TODO where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 14,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5",
                            "test_body": "332: public void testEscapeBackslash5() throws IOException {\n333: StringWriter sw = new StringWriter();\n334: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n335: printer.print(\"\\\\\\\\\");\n336: }\n337: assertEquals(\"\\\\\\\\\", sw.toString());\n338: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1",
                            "test_body": "341: public void testEscapeNull1() throws IOException {\n342: StringWriter sw = new StringWriter();\n343: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n344: printer.print(\"\\\\\");\n345: }\n346: assertEquals(\"\\\\\", sw.toString());\n347: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5",
                            "test_body": "377: public void testEscapeNull5() throws IOException {\n378: StringWriter sw = new StringWriter();\n379: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n380: printer.print(\"\\\\\\\\\");\n381: }\n382: assertEquals(\"\\\\\\\\\", sw.toString());\n383: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4",
                            "test_body": "323: public void testEscapeBackslash4() throws IOException {\n324: StringWriter sw = new StringWriter();\n325: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n326: printer.print(\"\\\\\\\\\");\n327: }\n328: assertEquals(\"\\\\\\\\\", sw.toString());\n329: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4",
                            "test_body": "368: public void testEscapeNull4() throws IOException {\n369: StringWriter sw = new StringWriter();\n370: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n371: printer.print(\"\\\\\\\\\");\n372: }\n373: assertEquals(\"\\\\\\\\\", sw.toString());\n374: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1",
                            "test_body": "296: public void testEscapeBackslash1() throws IOException {\n297: StringWriter sw = new StringWriter();\n298: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n299: printer.print(\"\\\\\");\n300: }\n301: assertEquals(\"\\\\\", sw.toString());\n302: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\ncharSequence = nullString == null ? Constants.EMPTY : nullString;\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:print(Ljava/lang/Object;)V",
                                    "method_body": "public void print(final Object value) throws IOException {\nformat.print(value, out, newRecord);\nnewRecord = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\n// RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\nif (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final char quoteChar) {\nreturn withQuote(Character.valueOf(quoteChar));\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 15,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar",
                            "test_body": "1036: public void testDontQuoteEuroFirstChar() throws IOException {\n1037: final StringWriter sw = new StringWriter();\n1038: try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {\n1039: printer.printRecord(EURO_CH, \"Deux\");\n1040: assertEquals(EURO_CH + \",Deux\" + recordSeparator, sw.toString());\n1041: }\n1042: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter, final boolean autoFlush) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nthis.autoFlush = autoFlush;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeaderComments()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeaderComments() {\nreturn headerComments != null ? headerComments.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteMode()Lorg/apache/commons/csv/QuoteMode;",
                                    "method_body": "public QuoteMode getQuoteMode() {\nreturn quoteMode;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getRecordSeparator()Ljava/lang/String;",
                                    "method_body": "public String getRecordSeparator() {\nreturn recordSeparator;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrailingDelimiter()Z",
                                    "method_body": "public boolean getTrailingDelimiter() {\nreturn trailingDelimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getAutoFlush()Z",
                                    "method_body": "public boolean getAutoFlush() {\nreturn autoFlush;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isQuoteCharacterSet()Z",
                                    "method_body": "public boolean isQuoteCharacterSet() {\nreturn quoteCharacter != null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/Appendable;Z)V",
                                    "method_body": "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException {\n// null values are considered empty\n// Only call CharSequence.toString() if you have to, helps GC-free use cases.\nCharSequence charSequence;\nif (value == null) {\n// https://issues.apache.org/jira/browse/CSV-203\nif (null == nullString) {\ncharSequence = EMPTY;\n} else {\nif (QuoteMode.ALL == quoteMode) {\ncharSequence = quoteCharacter + nullString + quoteCharacter;\n} else {\ncharSequence = nullString;\n}\n}\n} else {\ncharSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n}\ncharSequence = getTrim() ? trim(charSequence) : charSequence;\nthis.print(value, charSequence, 0, charSequence.length(), out, newRecord);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:print(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void print(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nif (!newRecord) {\nout.append(getDelimiter());\n}\nif (object == null) {\nout.append(value);\n} else if (isQuoteCharacterSet()) {\n// the original object is needed so can check for Number\nprintAndQuote(object, value, offset, len, out, newRecord);\n} else if (isEscapeCharacterSet()) {\nprintAndEscape(value, offset, len, out);\n} else {\nout.append(value, offset, offset + len);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printAndQuote(Ljava/lang/Object;Ljava/lang/CharSequence;IILjava/lang/Appendable;Z)V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\ncase ALL_NON_NULL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\nif (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:println(Ljava/lang/Appendable;)V",
                                    "method_body": "public void println(final Appendable out) throws IOException {\nif (getTrailingDelimiter()) {\nout.append(getDelimiter());\n}\nif (recordSeparator != null) {\nout.append(recordSeparator);\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:printRecord(Ljava/lang/Appendable;[Ljava/lang/Object;)V",
                                    "method_body": "public void printRecord(final Appendable out, final Object... values) throws IOException {\nfor (int i = 0; i < values.length; i++) {\nprint(values[i], out, i == 0);\n}\nprintln(out);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteMode(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:<init>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\nAssertions.notNull(out, \"out\");\nAssertions.notNull(format, \"format\");\n\nthis.out = out;\nthis.format = format;\n// TODO: Is it a good idea to do this here instead of on the first call to a print method?\n// It seems a pain to have to track whether the header has already been printed or not.\nif (format.getHeaderComments() != null) {\nfor (final String line : format.getHeaderComments()) {\nif (line != null) {\nthis.printComment(line);\n}\n}\n}\nif (format.getHeader() != null && !format.getSkipHeaderRecord()) {\nthis.printRecord((Object[]) format.getHeader());\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close()V",
                                    "method_body": "public void close() throws IOException {\nclose(false);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:close(Z)V",
                                    "method_body": "public void close(final boolean flush) throws IOException {\nif (flush || format.getAutoFlush()) {\nif (out instanceof Flushable) {\n((Flushable) out).flush();\n}\n}\nif (out instanceof Closeable) {\n((Closeable) out).close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVPrinter:printRecord([Ljava/lang/Object;)V",
                                    "method_body": "public void printRecord(final Object... values) throws IOException {\nformat.printRecord(out, values);\nnewRecord = true;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat$1:<clinit>()V",
                                    "method_body": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\nfinal Appendable out, final boolean newRecord) throws IOException {\nboolean quote = false;\nint start = offset;\nint pos = offset;\nfinal int end = offset + len;\n\nfinal char delimChar = getDelimiter();\nfinal char quoteChar = getQuoteCharacter().charValue();\n\nQuoteMode quoteModePolicy = getQuoteMode();\nif (quoteModePolicy == null) {\nquoteModePolicy = QuoteMode.MINIMAL;\n}\nswitch (quoteModePolicy) {\ncase ALL:\ncase ALL_NON_NULL:\nquote = true;\nbreak;\ncase NON_NUMERIC:\nquote = !(object instanceof Number);\nbreak;\ncase NONE:\n// Use the existing escaping code\nprintAndEscape(value, offset, len, out);\nreturn;\ncase MINIMAL:\nif (len <= 0) {\n// always quote an empty token that is the first\n// on the line, as it may be the only thing on the\n// line. If it were not quoted in that case,\n// an empty line has no tokens.\nif (newRecord) {\nquote = true;\n}\n} else {\nchar c = value.charAt(pos);\n\nif (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\nquote = true;\n} else if (c <= COMMENT) {\n// Some other chars at the start of a value caused the parser to fail, so for now\n// encapsulate if we start in anything less than '#'. We are being conservative\n// by including the default comment char too.\nquote = true;\n} else {\nwhile (pos < end) {\nc = value.charAt(pos);\nif (c == LF || c == CR || c == quoteChar || c == delimChar) {\nquote = true;\nbreak;\n}\npos++;\n}\n\nif (!quote) {\npos = end - 1;\nc = value.charAt(pos);\n// Some other chars at the end caused the parser to fail, so for now\n// encapsulate if we end in anything less than ' '\nif (c <= SP) {\nquote = true;\n}\n}\n}\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n}\n\nif (!quote) {\n// no encapsulation needed - write out the original value\nout.append(value, start, end);\nreturn;\n}\n\n// we hit something that needed encapsulation\nout.append(quoteChar);\n\n// Pick up where we left off: pos should be positioned on the first character that caused\n// the need for encapsulation.\nwhile (pos < end) {\nfinal char c = value.charAt(pos);\nif (c == quoteChar) {\n// write out the chunk up until this point\n\n// add 1 to the length to write out the encapsulator also\nout.append(value, start, pos + 1);\n// put the next starting position on the encapsulator so we will\n// write it out again with the next string (effectively doubling it)\nstart = pos;\n}\npos++;\n}\n\n// write the last segment\nout.append(value, start, pos);\nout.append(quoteChar);\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 16,
                    "tests": [
                        {
                            "test_name": "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking",
                            "test_body": "1002: public void testIteratorSequenceBreaking() throws IOException {\n1003: final String fiveRows = \"1\\n2\\n3\\n4\\n5\\n\";\n1004: 1005: // Iterator hasNext() shouldn't break sequence\n1006: CSVParser parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1007: int recordNumber = 0;\n1008: Iterator<CSVRecord> iter = parser.iterator();\n1009: recordNumber = 0;\n1010: while (iter.hasNext()) {\n1011: CSVRecord record = iter.next();\n1012: recordNumber++;\n1013: assertEquals(String.valueOf(recordNumber), record.get(0));\n1014: if (recordNumber >= 2) {\n1015: break;\n1016: }\n1017: }\n1018: iter.hasNext();\n1019: while (iter.hasNext()) {\n1020: CSVRecord record = iter.next();\n1021: recordNumber++;\n1022: assertEquals(String.valueOf(recordNumber), record.get(0));\n1023: }\n1024: 1025: // Consecutive enhanced for loops shouldn't break sequence\n1026: parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1027: recordNumber = 0;\n1028: for (CSVRecord record : parser) {\n1029: recordNumber++;\n1030: assertEquals(String.valueOf(recordNumber), record.get(0));\n1031: if (recordNumber >= 2) {\n1032: break;\n1033: }\n1034: }\n1035: for (CSVRecord record : parser) {\n1036: recordNumber++;\n1037: assertEquals(String.valueOf(recordNumber), record.get(0));\n1038: }\n1039: 1040: // Consecutive enhanced for loops with hasNext() peeking shouldn't break sequence\n1041: parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));\n1042: recordNumber = 0;\n1043: for (CSVRecord record : parser) {\n1044: recordNumber++;\n1045: assertEquals(String.valueOf(recordNumber), record.get(0));\n1046: if (recordNumber >= 2) {\n1047: break;\n1048: }\n1049: }\n1050: parser.iterator().hasNext();\n1051: for (CSVRecord record : parser) {\n1052: recordNumber++;\n1053: assertEquals(String.valueOf(recordNumber), record.get(0));\n1054: }\n1055: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZ)V",
                                    "method_body": "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\nfinal Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\nfinal boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\nfinal Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\nfinal boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\nfinal boolean trailingDelimiter, final boolean autoFlush) {\nthis.delimiter = delimiter;\nthis.quoteCharacter = quoteChar;\nthis.quoteMode = quoteMode;\nthis.commentMarker = commentStart;\nthis.escapeCharacter = escape;\nthis.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\nthis.allowMissingColumnNames = allowMissingColumnNames;\nthis.ignoreEmptyLines = ignoreEmptyLines;\nthis.recordSeparator = recordSeparator;\nthis.nullString = nullString;\nthis.headerComments = toStringArray(headerComments);\nthis.header = header == null ? null : header.clone();\nthis.skipHeaderRecord = skipHeaderRecord;\nthis.ignoreHeaderCase = ignoreHeaderCase;\nthis.trailingDelimiter = trailingDelimiter;\nthis.trim = trim;\nthis.autoFlush = autoFlush;\nvalidate();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:<clinit>()V",
                                    "method_body": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\nnull, null, null, false, false, false, false, false, false);\n\n/**\n* Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n* locale dependent, it might be necessary to customize this format to accommodate to your regional settings.\n*\n* <p>\n* For example for parsing or generating a CSV file on a French system the following format will be used:\n* </p>\n*\n* <pre>\n* CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');\n* </pre>\n*\n* <p>\n* Settings are:\n* </p>\n* <ul>\n* <li>{@link #withDelimiter(char) withDelimiter(',')}</li>"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(C)Z",
                                    "method_body": "private static boolean isLineBreak(final char c) {\nreturn c == LF || c == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:isLineBreak(Ljava/lang/Character;)Z",
                                    "method_body": "private static boolean isLineBreak(final Character c) {\nreturn c != null && isLineBreak(c.charValue());\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getCommentMarker()Ljava/lang/Character;",
                                    "method_body": "public Character getCommentMarker() {\nreturn commentMarker;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getDelimiter()C",
                                    "method_body": "public char getDelimiter() {\nreturn delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getEscapeCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getEscapeCharacter() {\nreturn escapeCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getHeader()[Ljava/lang/String;",
                                    "method_body": "public String[] getHeader() {\nreturn header != null ? header.clone() : null;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreEmptyLines()Z",
                                    "method_body": "public boolean getIgnoreEmptyLines() {\nreturn ignoreEmptyLines;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getIgnoreSurroundingSpaces()Z",
                                    "method_body": "public boolean getIgnoreSurroundingSpaces() {\nreturn ignoreSurroundingSpaces;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getNullString()Ljava/lang/String;",
                                    "method_body": "public String getNullString() {\nreturn nullString;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getQuoteCharacter()Ljava/lang/Character;",
                                    "method_body": "public Character getQuoteCharacter() {\nreturn quoteCharacter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:getTrim()Z",
                                    "method_body": "public boolean getTrim() {\nreturn trim;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:parse(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;",
                                    "method_body": "public CSVParser parse(final Reader in) throws IOException {\nreturn new CSVParser(in, this);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:toStringArray([Ljava/lang/Object;)[Ljava/lang/String;",
                                    "method_body": "private String[] toStringArray(final Object[] values) {\nif (values == null) {\nreturn null;\n}\nfinal String[] strings = new String[values.length];\nfor (int i = 0; i < values.length; i++) {\nfinal Object value = values[i];\nstrings[i] = value == null ? null : value.toString();\n}\nreturn strings;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:validate()V",
                                    "method_body": "private void validate() throws IllegalArgumentException {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\n\nif (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");\n}\n\nif (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {\nthrow new IllegalArgumentException(\n\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");\n}\n\nif (commentMarker != null && delimiter == commentMarker.charValue()) {\nthrow new IllegalArgumentException(\n\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\nthrow new IllegalArgumentException(\n\"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");\n}\n\nif (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\nthrow new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n}\n\n// validate header\nif (header != null) {\nfinal Set<String> dupCheck = new HashSet<>();\nfor (final String hdr : header) {\nif (!dupCheck.add(hdr)) {\nthrow new IllegalArgumentException(\n\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));\n}\n}\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames() {\nreturn this.withAllowMissingColumnNames(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withAllowMissingColumnNames(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withDelimiter(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withDelimiter(final char delimiter) {\nif (isLineBreak(delimiter)) {\nthrow new IllegalArgumentException(\"The delimiter cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final char escape) {\nreturn withEscape(Character.valueOf(escape));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withEscape(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withEscape(final Character escape) {\nif (isLineBreak(escape)) {\nthrow new IllegalArgumentException(\"The escape character cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreEmptyLines(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces() {\nreturn this.withIgnoreSurroundingSpaces(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withIgnoreSurroundingSpaces(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withNullString(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withNullString(final String nullString) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuote(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuote(final Character quoteChar) {\nif (isLineBreak(quoteChar)) {\nthrow new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n}\nreturn new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\nignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\nallowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withQuoteMode(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(C)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final char recordSeparator) {\nreturn withRecordSeparator(String.valueOf(recordSeparator));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withRecordSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withRecordSeparator(final String recordSeparator) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withSystemRecordSeparator()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withSystemRecordSeparator() {\nreturn withRecordSeparator(System.getProperty(\"line.separator\"));\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withTrim()Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withTrim() {\nreturn withTrim(true);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVFormat:withTrim(Z)Lorg/apache/commons/csv/CSVFormat;",
                                    "method_body": "public CSVFormat withTrim(final boolean trim) {\nreturn new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\nignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\nskipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Constants:<clinit>()V",
                                    "method_body": "static final char BACKSLASH = '\\\\';\n\nstatic final char BACKSPACE = '\\b';\n\nstatic final char COMMA = ',';\n\n/**\n* Starts a comment, the remainder of the line is the comment.\n*/\nstatic final char COMMENT = '#';\n\nstatic final char CR = '\\r';\n\n/** RFC 4180 defines line breaks as CRLF */\nstatic final String CRLF = \"\\r\\n\";\n\nstatic final Character DOUBLE_QUOTE_CHAR = Character.valueOf('\"');\n\nstatic final String EMPTY = \"\";\n\n/** The end of stream symbol */\nstatic final int END_OF_STREAM = -1;\n\nstatic final char FF = '\\f';\n\nstatic final char LF = '\\n';\n\n/**\n* Unicode line separator.\n*/\nstatic final String LINE_SEPARATOR = \"\\u2028\";\n\n/**\n* Unicode next line.\n*/\nstatic final String NEXT_LINE = \"\\u0085\";\n\n/**\n* Unicode paragraph separator.\n*/\nstatic final String PARAGRAPH_SEPARATOR = \"\\u2029\";\n\nstatic final char PIPE = '|';\n\n/** ASCII record separator */\nstatic final char RS = 30;\n\nstatic final char SP = ' ';\n\nstatic final char TAB = '\\t';\n\n/** Undefined state for the lookahead char */\nstatic final int UNDEFINED = -2;\n\n/** ASCII unit separator */\nstatic final char US = 31;\n\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<init>(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V",
                                    "method_body": "Lexer(final CSVFormat format, final ExtendedBufferedReader reader) {\nthis.reader = reader;\nthis.delimiter = format.getDelimiter();\nthis.escape = mapNullToDisabled(format.getEscapeCharacter());\nthis.quoteChar = mapNullToDisabled(format.getQuoteCharacter());\nthis.commentStart = mapNullToDisabled(format.getCommentMarker());\nthis.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\nthis.ignoreEmptyLines = format.getIgnoreEmptyLines();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:<clinit>()V",
                                    "method_body": "private static final String CR_STRING = Character.toString(Constants.CR);\nprivate static final String LF_STRING = Character.toString(Constants.LF);\n\n/**\n* Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it\n* won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:nextToken(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;",
                                    "method_body": "Token nextToken(final Token token) throws IOException {\n\n// get the last read char (required for empty line detection)\nint lastChar = reader.getLastChar();\n\n// read the next char and set eol\nint c = reader.read();\n/*\n* Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF\n* - they are equivalent here.\n*/\nboolean eol = readEndOfLine(c);\n\n// empty line detection: eol AND (last char was EOL or beginning)\nif (ignoreEmptyLines) {\nwhile (eol && isStartOfLine(lastChar)) {\n// go on char ahead ...\nlastChar = c;\nc = reader.read();\neol = readEndOfLine(c);\n// reached end of file without any content (empty line at the end)\nif (isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n}\n}\n\n// did we reach eof during the last iteration already ? EOF\nif (isEndOfFile(lastChar) || !isDelimiter(lastChar) && isEndOfFile(c)) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\n\nif (isStartOfLine(lastChar) && isCommentStart(c)) {\nfinal String line = reader.readLine();\nif (line == null) {\ntoken.type = EOF;\n// don't set token.isReady here because no content\nreturn token;\n}\nfinal String comment = line.trim();\ntoken.content.append(comment);\ntoken.type = COMMENT;\nreturn token;\n}\n\n// important: make sure a new char gets consumed in each iteration\nwhile (token.type == INVALID) {\n// ignore whitespaces at beginning of a token\nif (ignoreSurroundingSpaces) {\nwhile (isWhitespace(c) && !eol) {\nc = reader.read();\neol = readEndOfLine(c);\n}\n}\n\n// ok, start of token reached: encapsulated, or token\nif (isDelimiter(c)) {\n// empty token return TOKEN(\"\")\ntoken.type = TOKEN;\n} else if (eol) {\n// empty token return EORECORD(\"\")\n// noop: token.content.append(\"\");\ntoken.type = EORECORD;\n} else if (isQuoteChar(c)) {\n// consume encapsulated token\nparseEncapsulatedToken(token);\n} else if (isEndOfFile(c)) {\n// end of file return EOF()\n// noop: token.content.append(\"\");\ntoken.type = EOF;\ntoken.isReady = true; // there is data at EOF\n} else {\n// next token must be a simple token\n// add removed blanks when not ignoring whitespace chars...\nparseSimpleToken(token, c);\n}\n}\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:parseSimpleToken(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;",
                                    "method_body": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n// Faster to use while(true)+break than while(token.type == INVALID)\nwhile (true) {\nif (readEndOfLine(ch)) {\ntoken.type = EORECORD;\nbreak;\n} else if (isEndOfFile(ch)) {\ntoken.type = EOF;\ntoken.isReady = true; // There is data at EOF\nbreak;\n} else if (isDelimiter(ch)) {\ntoken.type = TOKEN;\nbreak;\n} else if (isEscape(ch)) {\nfinal int unescaped = readEscape();\nif (unescaped == END_OF_STREAM) { // unexpected char after escape\ntoken.content.append((char) ch).append((char) reader.getLastChar());\n} else {\ntoken.content.append((char) unescaped);\n}\nch = reader.read(); // continue\n} else {\ntoken.content.append((char) ch);\nch = reader.read(); // continue\n}\n}\n\nif (ignoreSurroundingSpaces) {\ntrimTrailingSpaces(token.content);\n}\n\nreturn token;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:mapNullToDisabled(Ljava/lang/Character;)C",
                                    "method_body": "private char mapNullToDisabled(final Character c) {\nreturn c == null ? DISABLED : c.charValue();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:getCharacterPosition()J",
                                    "method_body": "long getCharacterPosition() {\nreturn reader.getPosition();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:readEndOfLine(I)Z",
                                    "method_body": "boolean readEndOfLine(int ch) throws IOException {\n// check if we have \\r\\n...\nif (ch == CR && reader.lookAhead() == LF) {\n// note: does not change ch outside of this method!\nch = reader.read();\n// Save the EOL state\nif (firstEol == null) {\nthis.firstEol = Constants.CRLF;\n}\n}\n// save EOL state here.\nif (firstEol == null) {\nif (ch == LF) {\nthis.firstEol = LF_STRING;\n} else if (ch == CR) {\nthis.firstEol = CR_STRING;\n}\n}\n\nreturn ch == LF || ch == CR;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isClosed()Z",
                                    "method_body": "boolean isClosed() {\nreturn reader.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isStartOfLine(I)Z",
                                    "method_body": "boolean isStartOfLine(final int ch) {\nreturn ch == LF || ch == CR || ch == UNDEFINED;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEndOfFile(I)Z",
                                    "method_body": "boolean isEndOfFile(final int ch) {\nreturn ch == END_OF_STREAM;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isDelimiter(I)Z",
                                    "method_body": "boolean isDelimiter(final int ch) {\nreturn ch == delimiter;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isEscape(I)Z",
                                    "method_body": "boolean isEscape(final int ch) {\nreturn ch == escape;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isQuoteChar(I)Z",
                                    "method_body": "boolean isQuoteChar(final int ch) {\nreturn ch == quoteChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Lexer:isCommentStart(I)Z",
                                    "method_body": "boolean isCommentStart(final int ch) {\nreturn ch == commentStart;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
                                    "method_body": "ExtendedBufferedReader(final Reader reader) {\nsuper(reader);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
                                    "method_body": "public int read() throws IOException {\nfinal int current = super.read();\nif (current == CR || current == LF && lastChar != CR) {\neolCounter++;\n}\nlastChar = current;\nthis.position++;\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLastChar()I",
                                    "method_body": "int getLastChar() {\nreturn lastChar;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getPosition()J",
                                    "method_body": "long getPosition() {\nreturn this.position;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn closed;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token:reset()V",
                                    "method_body": "void reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Token$Type:<clinit>()V",
                                    "method_body": "private static final int INITIAL_TOKEN_LENGTH = 50;\n\nenum Type {\n/** Token has no valid content, i.e. is in its initialized state. */\nINVALID,\n\n/** Token with content, at beginning or in the middle of a line. */\nTOKEN,\n\n/** Token (which can have content) when the end of file is reached. */\nEOF,\n\n/** Token with content when the end of a line is reached. */\nEORECORD,\n\n/** Token is a comment line. */\nCOMMENT\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.Assertions:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
                                    "method_body": "public static void notNull(final Object parameter, final String parameterName) {\nif (parameter == null) {\nthrow new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n}\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\nthis(reader, format, 0, 1);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V",
                                    "method_body": "public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber)\nthrows IOException {\nAssertions.notNull(reader, \"reader\");\nAssertions.notNull(format, \"format\");\n\nthis.format = format;\nthis.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\nthis.headerMap = this.initializeHeader();\nthis.characterOffset = characterOffset;\nthis.recordNumber = recordNumber - 1;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:addRecordValue(Z)V",
                                    "method_body": "private void addRecordValue(final boolean lastRecord) {\nfinal String input = this.reusableToken.content.toString();\nfinal String inputClean = this.format.getTrim() ? input.trim() : input;\nif (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) {\nreturn;\n}\nfinal String nullString = this.format.getNullString();\nthis.recordList.add(inputClean.equals(nullString) ? null : inputClean);\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:initializeHeader()Ljava/util/Map;",
                                    "method_body": "private Map<String, Integer> initializeHeader() throws IOException {\nMap<String, Integer> hdrMap = null;\nfinal String[] formatHeader = this.format.getHeader();\nif (formatHeader != null) {\nhdrMap = this.format.getIgnoreHeaderCase() ?\nnew TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :\nnew LinkedHashMap<String, Integer>();\n\nString[] headerRecord = null;\nif (formatHeader.length == 0) {\n// read the header from the first line of the file\nfinal CSVRecord nextRecord = this.nextRecord();\nif (nextRecord != null) {\nheaderRecord = nextRecord.values();\n}\n} else {\nif (this.format.getSkipHeaderRecord()) {\nthis.nextRecord();\n}\nheaderRecord = formatHeader;\n}\n\n// build the name to index mappings\nif (headerRecord != null) {\nfor (int i = 0; i < headerRecord.length; i++) {\nfinal String header = headerRecord[i];\nfinal boolean containsHeader = hdrMap.containsKey(header);\nfinal boolean emptyHeader = header == null || header.trim().isEmpty();\nif (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) {\nthrow new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n\"\\\" in \" + Arrays.toString(headerRecord));\n}\nhdrMap.put(header, Integer.valueOf(i));\n}\n}\n}\nreturn hdrMap;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:isClosed()Z",
                                    "method_body": "public boolean isClosed() {\nreturn this.lexer.isClosed();\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:iterator()Ljava/util/Iterator;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\nthrow new IllegalStateException(\ne.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);\n}\n}\n\n@Override\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\n@Override\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\n@Override\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser:nextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.recordList.clear();\nStringBuilder sb = null;\nfinal long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue(false);\nbreak;\ncase EORECORD:\nthis.addRecordValue(true);\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue(true);\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.recordList.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\nthis.recordNumber, startCharPosition);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$2:<clinit>()V",
                                    "method_body": "CSVRecord nextRecord() throws IOException {\nCSVRecord result = null;\nthis.recordList.clear();\nStringBuilder sb = null;\nfinal long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\ndo {\nthis.reusableToken.reset();\nthis.lexer.nextToken(this.reusableToken);\nswitch (this.reusableToken.type) {\ncase TOKEN:\nthis.addRecordValue(false);\nbreak;\ncase EORECORD:\nthis.addRecordValue(true);\nbreak;\ncase EOF:\nif (this.reusableToken.isReady) {\nthis.addRecordValue(true);\n}\nbreak;\ncase INVALID:\nthrow new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\ncase COMMENT: // Ignored currently\nif (sb == null) { // first comment for this record\nsb = new StringBuilder();\n} else {\nsb.append(Constants.LF);\n}\nsb.append(this.reusableToken.content);\nthis.reusableToken.type = TOKEN; // Read another token\nbreak;\ndefault:\nthrow new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n}\n} while (this.reusableToken.type == TOKEN);\n\nif (!this.recordList.isEmpty()) {\nthis.recordNumber++;\nfinal String comment = sb == null ? null : sb.toString();\nresult = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\nthis.recordNumber, startCharPosition);\n}\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V",
                                    "method_body": "CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber,\nfinal long characterPosition) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\nthis.characterPosition = characterPosition;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:<clinit>()V",
                                    "method_body": "private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\nprivate static final long serialVersionUID = 1L;\n\nprivate final long characterPosition;\n\n/** The accumulated comments (if any) */\nprivate final String comment;\n\n/** The column name to index mapping. */\nprivate final Map<String, Integer> mapping;\n\n/** The record number. */\nprivate final long recordNumber;\n\n/** The values of the record */\nprivate final String[] values;\n\nCSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber,\nfinal long characterPosition) {\nthis.recordNumber = recordNumber;\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\nthis.comment = comment;\nthis.characterPosition = characterPosition;\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVRecord:get(I)Ljava/lang/String;",
                                    "method_body": "public String get(final int i) {\nreturn values[i];\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:getNextRecord()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\nthrow new IllegalStateException(\ne.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);\n}\n}\n\n@Override\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\n@Override\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\n@Override\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:hasNext()Z",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\nthrow new IllegalStateException(\ne.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);\n}\n}\n\n@Override\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\n@Override\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\n@Override\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                },
                                {
                                    "method_signature": "org.apache.commons.csv.CSVParser$1:next()Lorg/apache/commons/csv/CSVRecord;",
                                    "method_body": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nreturn CSVParser.this.nextRecord();\n} catch (final IOException e) {\nthrow new IllegalStateException(\ne.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);\n}\n}\n\n@Override\npublic boolean hasNext() {\nif (CSVParser.this.isClosed()) {\nreturn false;\n}\nif (this.current == null) {\nthis.current = this.getNextRecord();\n}\n\nreturn this.current != null;\n}\n\n@Override\npublic CSVRecord next() {\nif (CSVParser.this.isClosed()) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}\nCSVRecord next = this.current;\nthis.current = null;\n\nif (next == null) {\n// hasNext() wasn't called before\nnext = this.getNextRecord();\nif (next == null) {\nthrow new NoSuchElementException(\"No more CSV records available\");\n}\n}\n\nreturn next;\n}\n\n@Override\npublic void remove() {\nthrow new UnsupportedOperationException();\n}\n};\n}"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}