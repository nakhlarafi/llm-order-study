{
    "projects": [
        {
            "name": "JacksonXml",
            "bugs": [
                {
                    "bug_id": 1,
                    "tests": [
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test.testNestedUnwrappedLists180",
                            "test_body": "38: public void testNestedUnwrappedLists180() throws Exception\n39: {\n40: /*\n41: Records recs = new Records();\n42: recs.records.add(new Record());\n43: recs.records.add(new Record());\n44: recs.records.add(new Record());\n45: recs.records.get(0).fields.add(new Field(\"a\"));\n46: recs.records.get(2).fields.add(new Field(\"b\"));\n47: 48: String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n49: */\n50: 51: String xml =\n52: \"<Records>\\n\"\n53: // Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n54: //+\"<records>\\n</records>\\n\"\n55: +\"<records></records>\\n\"\n56: +\"  <records>\\n\"\n57: +\"   <fields name='b'/>\\n\"\n58: +\"  </records>\\n\"\n59: +\"</Records>\\n\"\n60: ;\n61: 62: //System.out.println(\"XML: \"+xml);\n63: 64: Records result = MAPPER.readValue(xml, Records.class);\n65: assertNotNull(result.records);\n66: assertEquals(2, result.records.size());\n67: assertNotNull(result.records.get(1));\n68: assertEquals(1, result.records.get(1).fields.size());\n69: assertEquals(\"b\", result.records.get(1).fields.get(0).name);\n70: 71: // also, first one ought not be null should it? Ideally not...\n72: assertNotNull(result.records.get(0));\n73: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
                                    "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JackxonXmlModule\", PackageVersion.VERSION);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "final static int SPACE_COUNT = 64;\nfinal static char[] SPACES = new char[SPACE_COUNT];\nArrays.fill(SPACES, ' ');\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createParser(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParser;",
                                    "method_body": "public JsonParser createParser(String content) throws IOException {\nReader r = new StringReader(content);\nIOContext ctxt = _createContext(r, true);\nif (_inputDecorator != null) {\nreturn _createParser(r, ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
                                    "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
                                    "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName>(40, 200);\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:updateProperties(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nint changed = 0;\nfor (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {\nBeanPropertyDefinition prop = propDefs.get(i);\nAnnotatedMember acc = prop.getPrimaryMember();\nif (acc == null) {\nBoolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\nif (b != null && b.booleanValue()) {\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nString localName = wrapperName.getSimpleName();\nif ((localName != null && localName.length() > 0)\nreturn propDefs;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:modifyDeserializer(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\nif (!(deser0 instanceof BeanDeserializerBase)) {\nreturn deser0;\nBeanDeserializerBase deser = (BeanDeserializerBase) deser0;\nif (!deser.getValueInstantiator().canCreateFromString()) {\nSettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());\nif (textProp != null) {\nreturn new WrapperHandlingDeserializer(deser);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:_findSoleTextProp(Lcom/fasterxml/jackson/databind/DeserializationConfig;Ljava/util/Iterator;)Lcom/fasterxml/jackson/databind/deser/SettableBeanProperty;",
                                    "method_body": "private SettableBeanProperty _findSoleTextProp(DeserializationConfig config,\nfinal AnnotationIntrospector ai = config.getAnnotationIntrospector();\nSettableBeanProperty textProp = null;\nwhile (propIt.hasNext()) {\nSettableBeanProperty prop = propIt.next();\nAnnotatedMember m = prop.getMember();\nif (m != null) {\nPropertyName n = prop.getFullName();\nif (_cfgNameForTextValue.equals(n.getSimpleName())) {\nBoolean b = AnnotationUtil.findIsAttributeAnnotation(ai, m);\nif (b != null && b.booleanValue()) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForDeserialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForDeserialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForDeserialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn PropertyName.construct(pann.localName(), pann.namespace());\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamReader;)V",
                                    "method_body": "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\nsuper(genericParserFeatures);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_objectCodec = codec;\n_parsingContext = XmlReadContext.createRootContext(-1, -1);\n_nextToken = JsonToken.START_OBJECT;\n_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:addVirtualWrapping(Ljava/util/Set;)V",
                                    "method_body": "public void addVirtualWrapping(Set<String> namesToWrap)\nString name = _xmlTokens.getLocalName();\nif (name != null && namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_namesToWrap = namesToWrap;\n_parsingContext.setNamesToWrap(namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public String getCurrentName() throws IOException\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nname = _parsingContext.getCurrentName();\nif (name == null) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:close()V",
                                    "method_body": "public void close() throws IOException\nif (!_closed) {\n_closed = true;\nif (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n_xmlTokens.closeCompletely();\n_releaseBuffers();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getParsingContext()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public XmlReadContext getParsingContext() {\nreturn _parsingContext;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:isExpectedStartArrayToken()Z",
                                    "method_body": "public boolean isExpectedStartArrayToken()\nJsonToken t = _currToken;\nif (t == JsonToken.START_OBJECT) {\n_currToken = JsonToken.START_ARRAY;\n_parsingContext.convertToArray();\n_nextToken = null;\n_xmlTokens.skipAttributes();\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\n_nextToken = JsonToken.FIELD_NAME;\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\nif (_parsingContext.inArray()) {\ntoken = _xmlTokens.next();\n_mayBeLeaf = true;\ncontinue;\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\nreturn (_currToken = JsonToken.VALUE_NULL);\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_nextToken = JsonToken.FIELD_NAME;\n_currText = _xmlTokens.getText();\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nif (_isEmpty(_currText)) {\n_currToken = JsonToken.END_ARRAY;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() throws IOException\nif (_currToken == null) {\nswitch (_currToken) {\nreturn _currText;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_releaseBuffers()V",
                                    "method_body": "protected void _releaseBuffers() throws IOException {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;III)V",
                                    "method_body": "public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createRootContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public static XmlReadContext createRootContext(int lineNr, int colNr) {\nreturn new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\nXmlReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public final String getCurrentName() { return _currentName; }\npublic final String getCurrentName() { return _currentName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext getParent() { return _parent; }\npublic final XmlReadContext getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setCurrentName(Ljava/lang/String;)V",
                                    "method_body": "public void setCurrentName(String name) {\n_currentName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setNamesToWrap(Ljava/util/Set;)V",
                                    "method_body": "public void setNamesToWrap(Set<String> namesToWrap) {\n_namesToWrap = namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getNamesToWrap()Ljava/util/Set;",
                                    "method_body": "public Set<String> getNamesToWrap() {\nreturn _namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:convertToArray()V",
                                    "method_body": "protected void convertToArray() {\n_type = TYPE_ARRAY;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:<init>(Ljavax/xml/stream/XMLStreamReader;Ljava/lang/Object;)V",
                                    "method_body": "public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef)\n{\n_sourceReference = sourceRef;\nif (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n_xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n_currentState = XML_START_ELEMENT;\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\n_attributeCount = _xmlReader.getAttributeCount();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:next()I",
                                    "method_body": "public int next() throws IOException\nif (_repeatElement != 0) {\nreturn (_currentState = _handleRepeatElement());\nreturn _next();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() { return _textValue; }\npublic String getText() { return _textValue; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
                                    "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:closeCompletely()V",
                                    "method_body": "public void closeCompletely() throws IOException\n_xmlReader.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:repeatStartElement()V",
                                    "method_body": "protected void repeatStartElement()\nif (_currentState != XML_START_ELEMENT) {\nif (_currentWrapper == null) {\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);\n_repeatElement = REPLAY_START_DUP;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipAttributes()V",
                                    "method_body": "protected void skipAttributes()\nif (_currentState == XML_ATTRIBUTE_NAME) {\n} else if (_currentState == XML_START_ELEMENT) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_collectUntilTag()Ljava/lang/String;",
                                    "method_body": "private final String _collectUntilTag() throws XMLStreamException\nString text = null;\nswitch (_xmlReader.next()) {\nreturn text;\nif (text == null) {\ntext = _xmlReader.getText();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_skipUntilTag()I",
                                    "method_body": "private final int _skipUntilTag() throws XMLStreamException\nwhile (_xmlReader.hasNext()) {\nswitch (type = _xmlReader.next()) {\nreturn type;\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_initStartElement()I",
                                    "method_body": "private final int _initStartElement() throws XMLStreamException\nfinal String ns = _xmlReader.getNamespaceURI();\nfinal String localName = _xmlReader.getLocalName();\n_attributeCount = _xmlReader.getAttributeCount();\n_nextAttributeIndex = 0;\nif (_currentWrapper != null) {\nif (_currentWrapper.matchesWrapper(localName, ns)) {\n_currentWrapper = _currentWrapper.intermediateWrapper();\n_localName = localName;\n_namespaceURI = ns;\nreturn (_currentState = XML_START_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleRepeatElement()I",
                                    "method_body": "protected int _handleRepeatElement() throws IOException\nint type = _repeatElement;\n_repeatElement = 0;\nif (type == REPLAY_START_DUP) {\n_currentWrapper = _currentWrapper.intermediateWrapper();\nreturn XML_START_ELEMENT;\nif (type == REPLAY_END) {\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\nif (_currentWrapper != null) {\n_currentWrapper = _currentWrapper.getParent();\nreturn XML_END_ELEMENT;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleEndElement()I",
                                    "method_body": "private final int _handleEndElement()\nif (_currentWrapper != null) {\nElementWrapper w = _currentWrapper;\nif (w.isMatching()) {\n_repeatElement = REPLAY_END;\n_localName = w.getWrapperLocalName();\n_namespaceURI = w.getWrapperNamespace();\n_currentWrapper = _currentWrapper.getParent();\n_currentWrapper = _currentWrapper.getParent();\nreturn (_currentState = XML_END_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1:<clinit>()V",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\n_nextToken = JsonToken.FIELD_NAME;\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\nif (_parsingContext.inArray()) {\ntoken = _xmlTokens.next();\n_mayBeLeaf = true;\ncontinue;\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\nreturn (_currToken = JsonToken.VALUE_NULL);\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_nextToken = JsonToken.FIELD_NAME;\n_currText = _xmlTokens.getText();\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nif (_isEmpty(_currText)) {\n_currToken = JsonToken.END_ARRAY;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate) {\nthis(delegate, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;Ljava/util/Set;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate, Set<String> namesToWrap)\nsuper(delegate);\n_namesToWrap = namesToWrap;\n_type = delegate.getValueType();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:createContextual(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\nJsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, _type);\nBeanDeserializerBase newDelegatee = _verifyDeserType(del);\nIterator<SettableBeanProperty> it = newDelegatee.properties();\nHashSet<String> unwrappedNames = null;\nwhile (it.hasNext()) {\nSettableBeanProperty prop = it.next();\nJavaType type = prop.getType();\nif (!TypeUtil.isIndexedType(type)) {\ncontinue;\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nif (unwrappedNames == null) {\nunwrappedNames = new HashSet<String>();\nunwrappedNames.add(prop.getName());\n}\nif (unwrappedNames == null) {\nreturn newDelegatee;\nreturn new WrapperHandlingDeserializer(newDelegatee, unwrappedNames);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;",
                                    "method_body": "public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n_configureParser(jp);\nreturn _delegatee.deserialize(jp,  ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_configureParser(Lcom/fasterxml/jackson/core/JsonParser;)V",
                                    "method_body": "protected final void _configureParser(JsonParser jp) throws IOException\nif (jp instanceof FromXmlParser) {\n((FromXmlParser) jp).addVirtualWrapping(_namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_verifyDeserType(Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;",
                                    "method_body": "protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\nif (!(deser instanceof BeanDeserializerBase)) {\nreturn (BeanDeserializerBase) deser;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nClass<?> cls = type.getRawClass();\nif (cls == byte[].class || cls == char[].class) {\nif (Map.class.isAssignableFrom(cls)) {\nreturn true;\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)V",
                                    "method_body": "private ElementWrapper(ElementWrapper parent,\n{\n_parent = parent;\n_wrapperName = wrapperLocalName;\n_wrapperNamespace = (wrapperNamespace == null) ? \"\" : wrapperNamespace;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:matchingWrapper(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public static ElementWrapper matchingWrapper(ElementWrapper parent,\nreturn new ElementWrapper(parent, wrapperLocalName, wrapperNamespace);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:intermediateWrapper()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper intermediateWrapper() {\nreturn new ElementWrapper(this, null, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:isMatching()Z",
                                    "method_body": "public boolean isMatching() { return _wrapperName != null; }\npublic boolean isMatching() { return _wrapperName != null; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperLocalName()Ljava/lang/String;",
                                    "method_body": "public String getWrapperLocalName() { return _wrapperName; }\npublic String getWrapperLocalName() { return _wrapperName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperNamespace()Ljava/lang/String;",
                                    "method_body": "public String getWrapperNamespace() { return _wrapperNamespace; }\npublic String getWrapperNamespace() { return _wrapperNamespace; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper getParent() { return _parent; }\npublic ElementWrapper getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:matchesWrapper(Ljava/lang/String;Ljava/lang/String;)Z",
                                    "method_body": "public boolean matchesWrapper(String localName, String ns)\nif (_wrapperName == null) {\nreturn true;\nif (ns == null) {\nreturn _wrapperName.equals(localName) && _wrapperNamespace.equals(ns);\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty",
                            "test_body": "86: public void testNestedWithEmpty() throws Exception\n87: {\n88: final String XML =\n89: \"<ServiceDelivery>\\n\"\n90: +\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n91: +\"  <VehicleMonitoringDelivery>\\n\"\n92: +\"  </VehicleMonitoringDelivery>\\n\"\n93: +\"</ServiceDelivery>\\n\"\n94: ;\n95: 96: ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n97: assertNotNull(svc);\n98: assertNotNull(svc.vehicleMonitoringDelivery);\n99: // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n100: assertEquals(1, svc.vehicleMonitoringDelivery.size());\n101: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
                                    "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JackxonXmlModule\", PackageVersion.VERSION);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "final static int SPACE_COUNT = 64;\nfinal static char[] SPACES = new char[SPACE_COUNT];\nArrays.fill(SPACES, ' ');\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createParser(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParser;",
                                    "method_body": "public JsonParser createParser(String content) throws IOException {\nReader r = new StringReader(content);\nIOContext ctxt = _createContext(r, true);\nif (_inputDecorator != null) {\nreturn _createParser(r, ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
                                    "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
                                    "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName>(40, 200);\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:updateProperties(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nint changed = 0;\nfor (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {\nBeanPropertyDefinition prop = propDefs.get(i);\nAnnotatedMember acc = prop.getPrimaryMember();\nif (acc == null) {\nBoolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\nif (b != null && b.booleanValue()) {\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nString localName = wrapperName.getSimpleName();\nif ((localName != null && localName.length() > 0)\nreturn propDefs;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:modifyDeserializer(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\nif (!(deser0 instanceof BeanDeserializerBase)) {\nreturn deser0;\nBeanDeserializerBase deser = (BeanDeserializerBase) deser0;\nif (!deser.getValueInstantiator().canCreateFromString()) {\nSettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());\nif (textProp != null) {\nreturn new WrapperHandlingDeserializer(deser);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:_findSoleTextProp(Lcom/fasterxml/jackson/databind/DeserializationConfig;Ljava/util/Iterator;)Lcom/fasterxml/jackson/databind/deser/SettableBeanProperty;",
                                    "method_body": "private SettableBeanProperty _findSoleTextProp(DeserializationConfig config,\nfinal AnnotationIntrospector ai = config.getAnnotationIntrospector();\nSettableBeanProperty textProp = null;\nwhile (propIt.hasNext()) {\nSettableBeanProperty prop = propIt.next();\nAnnotatedMember m = prop.getMember();\nif (m != null) {\nPropertyName n = prop.getFullName();\nif (_cfgNameForTextValue.equals(n.getSimpleName())) {\nBoolean b = AnnotationUtil.findIsAttributeAnnotation(ai, m);\nif (b != null && b.booleanValue()) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findWrapperName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findWrapperName(Annotated ann)\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\nif (w != null) {\nif (!w.useWrapping()) {\nreturn PropertyName.NO_NAME;\nif (_cfgDefaultUseWrapper) {\nreturn PropertyName.USE_DEFAULT;\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForDeserialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForDeserialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForDeserialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn PropertyName.construct(pann.localName(), pann.namespace());\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamReader;)V",
                                    "method_body": "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\nsuper(genericParserFeatures);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_objectCodec = codec;\n_parsingContext = XmlReadContext.createRootContext(-1, -1);\n_nextToken = JsonToken.START_OBJECT;\n_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:addVirtualWrapping(Ljava/util/Set;)V",
                                    "method_body": "public void addVirtualWrapping(Set<String> namesToWrap)\nString name = _xmlTokens.getLocalName();\nif (name != null && namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_namesToWrap = namesToWrap;\n_parsingContext.setNamesToWrap(namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public String getCurrentName() throws IOException\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nname = _parsingContext.getCurrentName();\nif (name == null) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:close()V",
                                    "method_body": "public void close() throws IOException\nif (!_closed) {\n_closed = true;\nif (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n_xmlTokens.closeCompletely();\n_releaseBuffers();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getParsingContext()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public XmlReadContext getParsingContext() {\nreturn _parsingContext;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:isExpectedStartArrayToken()Z",
                                    "method_body": "public boolean isExpectedStartArrayToken()\nJsonToken t = _currToken;\nif (t == JsonToken.START_OBJECT) {\n_currToken = JsonToken.START_ARRAY;\n_parsingContext.convertToArray();\n_nextToken = null;\n_xmlTokens.skipAttributes();\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() throws IOException\nif (_currToken == null) {\nswitch (_currToken) {\nreturn _currText;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_releaseBuffers()V",
                                    "method_body": "protected void _releaseBuffers() throws IOException {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;III)V",
                                    "method_body": "public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createRootContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public static XmlReadContext createRootContext(int lineNr, int colNr) {\nreturn new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\nXmlReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public final String getCurrentName() { return _currentName; }\npublic final String getCurrentName() { return _currentName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext getParent() { return _parent; }\npublic final XmlReadContext getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setCurrentName(Ljava/lang/String;)V",
                                    "method_body": "public void setCurrentName(String name) {\n_currentName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setNamesToWrap(Ljava/util/Set;)V",
                                    "method_body": "public void setNamesToWrap(Set<String> namesToWrap) {\n_namesToWrap = namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getNamesToWrap()Ljava/util/Set;",
                                    "method_body": "public Set<String> getNamesToWrap() {\nreturn _namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:convertToArray()V",
                                    "method_body": "protected void convertToArray() {\n_type = TYPE_ARRAY;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:<init>(Ljavax/xml/stream/XMLStreamReader;Ljava/lang/Object;)V",
                                    "method_body": "public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef)\n{\n_sourceReference = sourceRef;\nif (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n_xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n_currentState = XML_START_ELEMENT;\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\n_attributeCount = _xmlReader.getAttributeCount();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:next()I",
                                    "method_body": "public int next() throws IOException\nif (_repeatElement != 0) {\nreturn (_currentState = _handleRepeatElement());\nreturn _next();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() { return _textValue; }\npublic String getText() { return _textValue; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
                                    "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:closeCompletely()V",
                                    "method_body": "public void closeCompletely() throws IOException\n_xmlReader.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:repeatStartElement()V",
                                    "method_body": "protected void repeatStartElement()\nif (_currentState != XML_START_ELEMENT) {\nif (_currentWrapper == null) {\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);\n_repeatElement = REPLAY_START_DUP;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipAttributes()V",
                                    "method_body": "protected void skipAttributes()\nif (_currentState == XML_ATTRIBUTE_NAME) {\n} else if (_currentState == XML_START_ELEMENT) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_next()I",
                                    "method_body": "private final int _next() throws XMLStreamException\nswitch (_currentState) {\n++_nextAttributeIndex;\nif (_nextAttributeIndex < _attributeCount) {\n_localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n_namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n_textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\nreturn (_currentState = XML_ATTRIBUTE_NAME);\nString text = _collectUntilTag();\nif (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\nreturn _initStartElement();\nif (text != null) {\n_textValue = text;\nreturn (_currentState = XML_TEXT);\nreturn _handleEndElement();\nreturn (_currentState = XML_ATTRIBUTE_VALUE);\nreturn _handleEndElement();\nswitch (_skipUntilTag()) {\nreturn _handleEndElement();\nreturn _initStartElement();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_collectUntilTag()Ljava/lang/String;",
                                    "method_body": "private final String _collectUntilTag() throws XMLStreamException\nString text = null;\nswitch (_xmlReader.next()) {\nreturn text;\nif (text == null) {\ntext = _xmlReader.getText();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_skipUntilTag()I",
                                    "method_body": "private final int _skipUntilTag() throws XMLStreamException\nwhile (_xmlReader.hasNext()) {\nswitch (type = _xmlReader.next()) {\nreturn type;\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_initStartElement()I",
                                    "method_body": "private final int _initStartElement() throws XMLStreamException\nfinal String ns = _xmlReader.getNamespaceURI();\nfinal String localName = _xmlReader.getLocalName();\n_attributeCount = _xmlReader.getAttributeCount();\n_nextAttributeIndex = 0;\nif (_currentWrapper != null) {\nif (_currentWrapper.matchesWrapper(localName, ns)) {\n_currentWrapper = _currentWrapper.intermediateWrapper();\n_localName = localName;\n_namespaceURI = ns;\nreturn (_currentState = XML_START_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleEndElement()I",
                                    "method_body": "private final int _handleEndElement()\nif (_currentWrapper != null) {\nElementWrapper w = _currentWrapper;\nif (w.isMatching()) {\n_repeatElement = REPLAY_END;\n_localName = w.getWrapperLocalName();\n_namespaceURI = w.getWrapperNamespace();\n_currentWrapper = _currentWrapper.getParent();\n_currentWrapper = _currentWrapper.getParent();\nreturn (_currentState = XML_END_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1:<clinit>()V",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\n_nextToken = JsonToken.FIELD_NAME;\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\nif (_parsingContext.inArray()) {\ntoken = _xmlTokens.next();\n_mayBeLeaf = true;\ncontinue;\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\nreturn (_currToken = JsonToken.VALUE_NULL);\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_nextToken = JsonToken.FIELD_NAME;\n_currText = _xmlTokens.getText();\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nif (_isEmpty(_currText)) {\n_currToken = JsonToken.END_ARRAY;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate) {\nthis(delegate, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;Ljava/util/Set;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate, Set<String> namesToWrap)\nsuper(delegate);\n_namesToWrap = namesToWrap;\n_type = delegate.getValueType();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:createContextual(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\nJsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, _type);\nBeanDeserializerBase newDelegatee = _verifyDeserType(del);\nIterator<SettableBeanProperty> it = newDelegatee.properties();\nHashSet<String> unwrappedNames = null;\nwhile (it.hasNext()) {\nSettableBeanProperty prop = it.next();\nJavaType type = prop.getType();\nif (!TypeUtil.isIndexedType(type)) {\ncontinue;\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nif (unwrappedNames == null) {\nunwrappedNames = new HashSet<String>();\nunwrappedNames.add(prop.getName());\n}\nif (unwrappedNames == null) {\nreturn newDelegatee;\nreturn new WrapperHandlingDeserializer(newDelegatee, unwrappedNames);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;",
                                    "method_body": "public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n_configureParser(jp);\nreturn _delegatee.deserialize(jp,  ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_configureParser(Lcom/fasterxml/jackson/core/JsonParser;)V",
                                    "method_body": "protected final void _configureParser(JsonParser jp) throws IOException\nif (jp instanceof FromXmlParser) {\n((FromXmlParser) jp).addVirtualWrapping(_namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_verifyDeserType(Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;",
                                    "method_body": "protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\nif (!(deser instanceof BeanDeserializerBase)) {\nreturn (BeanDeserializerBase) deser;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nClass<?> cls = type.getRawClass();\nif (cls == byte[].class || cls == char[].class) {\nif (Map.class.isAssignableFrom(cls)) {\nreturn true;\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)V",
                                    "method_body": "private ElementWrapper(ElementWrapper parent,\n{\n_parent = parent;\n_wrapperName = wrapperLocalName;\n_wrapperNamespace = (wrapperNamespace == null) ? \"\" : wrapperNamespace;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:matchingWrapper(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public static ElementWrapper matchingWrapper(ElementWrapper parent,\nreturn new ElementWrapper(parent, wrapperLocalName, wrapperNamespace);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:intermediateWrapper()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper intermediateWrapper() {\nreturn new ElementWrapper(this, null, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:isMatching()Z",
                                    "method_body": "public boolean isMatching() { return _wrapperName != null; }\npublic boolean isMatching() { return _wrapperName != null; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperLocalName()Ljava/lang/String;",
                                    "method_body": "public String getWrapperLocalName() { return _wrapperName; }\npublic String getWrapperLocalName() { return _wrapperName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperNamespace()Ljava/lang/String;",
                                    "method_body": "public String getWrapperNamespace() { return _wrapperNamespace; }\npublic String getWrapperNamespace() { return _wrapperNamespace; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper getParent() { return _parent; }\npublic ElementWrapper getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:setDefaultUseWrapper(Z)Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;",
                                    "method_body": "public XmlMapper setDefaultUseWrapper(boolean state) {\nAnnotationIntrospector ai0 = getDeserializationConfig().getAnnotationIntrospector();\nfor (AnnotationIntrospector ai : ai0.allIntrospectors()) {\nif (ai instanceof XmlAnnotationIntrospector) {\n((XmlAnnotationIntrospector) ai).setDefaultUseWrapper(state);\n}\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:setDefaultUseWrapper(Z)V",
                                    "method_body": "public void setDefaultUseWrapper(boolean b) {\n_cfgDefaultUseWrapper = b;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_isEmpty(Ljava/lang/String;)Z",
                                    "method_body": "protected boolean _isEmpty(String str)\nint len = (str == null) ? 0 : str.length();\nif (len > 0) {\nfor (int i = 0; i < len; ++i) {\nif (str.charAt(i) > ' ') {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipEndElement()V",
                                    "method_body": "public void skipEndElement() throws IOException\nint type = next();\nif (type != XML_END_ELEMENT) {\n}"
                                }
                            ]
                        },
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest.testNestedWithEmpty2",
                            "test_body": "103: public void testNestedWithEmpty2() throws Exception\n104: {\n105: final String XML =\n106: \"<ServiceDelivery>\\n\"\n107: +\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n108: +\"  <VehicleMonitoringDelivery>\\n\"\n109: +\"    <VehicleActivity>\\n\"\n110: +\"    </VehicleActivity>\\n\"\n111: +\"  </VehicleMonitoringDelivery>\\n\"\n112: +\"</ServiceDelivery>\\n\"\n113: ;\n114: 115: ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n116: assertNotNull(svc);\n117: assertNotNull(svc.vehicleMonitoringDelivery);\n118: assertEquals(1, svc.vehicleMonitoringDelivery.size());\n119: VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n120: assertNotNull(del.vehicleActivity);\n121: // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n122: assertEquals(1, del.vehicleActivity.size());\n123: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
                                    "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JackxonXmlModule\", PackageVersion.VERSION);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "final static int SPACE_COUNT = 64;\nfinal static char[] SPACES = new char[SPACE_COUNT];\nArrays.fill(SPACES, ' ');\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createParser(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParser;",
                                    "method_body": "public JsonParser createParser(String content) throws IOException {\nReader r = new StringReader(content);\nIOContext ctxt = _createContext(r, true);\nif (_inputDecorator != null) {\nreturn _createParser(r, ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
                                    "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
                                    "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName>(40, 200);\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:updateProperties(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nint changed = 0;\nfor (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {\nBeanPropertyDefinition prop = propDefs.get(i);\nAnnotatedMember acc = prop.getPrimaryMember();\nif (acc == null) {\nBoolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\nif (b != null && b.booleanValue()) {\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nString localName = wrapperName.getSimpleName();\nif ((localName != null && localName.length() > 0)\nreturn propDefs;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:modifyDeserializer(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\nif (!(deser0 instanceof BeanDeserializerBase)) {\nreturn deser0;\nBeanDeserializerBase deser = (BeanDeserializerBase) deser0;\nif (!deser.getValueInstantiator().canCreateFromString()) {\nSettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());\nif (textProp != null) {\nreturn new WrapperHandlingDeserializer(deser);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:_findSoleTextProp(Lcom/fasterxml/jackson/databind/DeserializationConfig;Ljava/util/Iterator;)Lcom/fasterxml/jackson/databind/deser/SettableBeanProperty;",
                                    "method_body": "private SettableBeanProperty _findSoleTextProp(DeserializationConfig config,\nfinal AnnotationIntrospector ai = config.getAnnotationIntrospector();\nSettableBeanProperty textProp = null;\nwhile (propIt.hasNext()) {\nSettableBeanProperty prop = propIt.next();\nAnnotatedMember m = prop.getMember();\nif (m != null) {\nPropertyName n = prop.getFullName();\nif (_cfgNameForTextValue.equals(n.getSimpleName())) {\nBoolean b = AnnotationUtil.findIsAttributeAnnotation(ai, m);\nif (b != null && b.booleanValue()) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findWrapperName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findWrapperName(Annotated ann)\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\nif (w != null) {\nif (!w.useWrapping()) {\nreturn PropertyName.NO_NAME;\nif (_cfgDefaultUseWrapper) {\nreturn PropertyName.USE_DEFAULT;\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForDeserialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForDeserialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForDeserialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn PropertyName.construct(pann.localName(), pann.namespace());\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamReader;)V",
                                    "method_body": "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\nsuper(genericParserFeatures);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_objectCodec = codec;\n_parsingContext = XmlReadContext.createRootContext(-1, -1);\n_nextToken = JsonToken.START_OBJECT;\n_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:addVirtualWrapping(Ljava/util/Set;)V",
                                    "method_body": "public void addVirtualWrapping(Set<String> namesToWrap)\nString name = _xmlTokens.getLocalName();\nif (name != null && namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_namesToWrap = namesToWrap;\n_parsingContext.setNamesToWrap(namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public String getCurrentName() throws IOException\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nname = _parsingContext.getCurrentName();\nif (name == null) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:close()V",
                                    "method_body": "public void close() throws IOException\nif (!_closed) {\n_closed = true;\nif (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n_xmlTokens.closeCompletely();\n_releaseBuffers();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getParsingContext()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public XmlReadContext getParsingContext() {\nreturn _parsingContext;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:isExpectedStartArrayToken()Z",
                                    "method_body": "public boolean isExpectedStartArrayToken()\nJsonToken t = _currToken;\nif (t == JsonToken.START_OBJECT) {\n_currToken = JsonToken.START_ARRAY;\n_parsingContext.convertToArray();\n_nextToken = null;\n_xmlTokens.skipAttributes();\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() throws IOException\nif (_currToken == null) {\nswitch (_currToken) {\nreturn _currText;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_releaseBuffers()V",
                                    "method_body": "protected void _releaseBuffers() throws IOException {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;III)V",
                                    "method_body": "public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createRootContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public static XmlReadContext createRootContext(int lineNr, int colNr) {\nreturn new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\nXmlReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public final String getCurrentName() { return _currentName; }\npublic final String getCurrentName() { return _currentName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext getParent() { return _parent; }\npublic final XmlReadContext getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setCurrentName(Ljava/lang/String;)V",
                                    "method_body": "public void setCurrentName(String name) {\n_currentName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setNamesToWrap(Ljava/util/Set;)V",
                                    "method_body": "public void setNamesToWrap(Set<String> namesToWrap) {\n_namesToWrap = namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getNamesToWrap()Ljava/util/Set;",
                                    "method_body": "public Set<String> getNamesToWrap() {\nreturn _namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:convertToArray()V",
                                    "method_body": "protected void convertToArray() {\n_type = TYPE_ARRAY;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:<init>(Ljavax/xml/stream/XMLStreamReader;Ljava/lang/Object;)V",
                                    "method_body": "public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef)\n{\n_sourceReference = sourceRef;\nif (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n_xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n_currentState = XML_START_ELEMENT;\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\n_attributeCount = _xmlReader.getAttributeCount();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:next()I",
                                    "method_body": "public int next() throws IOException\nif (_repeatElement != 0) {\nreturn (_currentState = _handleRepeatElement());\nreturn _next();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() { return _textValue; }\npublic String getText() { return _textValue; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
                                    "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:closeCompletely()V",
                                    "method_body": "public void closeCompletely() throws IOException\n_xmlReader.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:repeatStartElement()V",
                                    "method_body": "protected void repeatStartElement()\nif (_currentState != XML_START_ELEMENT) {\nif (_currentWrapper == null) {\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n_currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);\n_repeatElement = REPLAY_START_DUP;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipAttributes()V",
                                    "method_body": "protected void skipAttributes()\nif (_currentState == XML_ATTRIBUTE_NAME) {\n} else if (_currentState == XML_START_ELEMENT) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_next()I",
                                    "method_body": "private final int _next() throws XMLStreamException\nswitch (_currentState) {\n++_nextAttributeIndex;\nif (_nextAttributeIndex < _attributeCount) {\n_localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n_namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n_textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\nreturn (_currentState = XML_ATTRIBUTE_NAME);\nString text = _collectUntilTag();\nif (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\nreturn _initStartElement();\nif (text != null) {\n_textValue = text;\nreturn (_currentState = XML_TEXT);\nreturn _handleEndElement();\nreturn (_currentState = XML_ATTRIBUTE_VALUE);\nreturn _handleEndElement();\nswitch (_skipUntilTag()) {\nreturn _handleEndElement();\nreturn _initStartElement();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_collectUntilTag()Ljava/lang/String;",
                                    "method_body": "private final String _collectUntilTag() throws XMLStreamException\nString text = null;\nswitch (_xmlReader.next()) {\nreturn text;\nif (text == null) {\ntext = _xmlReader.getText();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_skipUntilTag()I",
                                    "method_body": "private final int _skipUntilTag() throws XMLStreamException\nwhile (_xmlReader.hasNext()) {\nswitch (type = _xmlReader.next()) {\nreturn type;\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_initStartElement()I",
                                    "method_body": "private final int _initStartElement() throws XMLStreamException\nfinal String ns = _xmlReader.getNamespaceURI();\nfinal String localName = _xmlReader.getLocalName();\n_attributeCount = _xmlReader.getAttributeCount();\n_nextAttributeIndex = 0;\nif (_currentWrapper != null) {\nif (_currentWrapper.matchesWrapper(localName, ns)) {\n_currentWrapper = _currentWrapper.intermediateWrapper();\n_localName = localName;\n_namespaceURI = ns;\nreturn (_currentState = XML_START_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleRepeatElement()I",
                                    "method_body": "protected int _handleRepeatElement() throws IOException\nint type = _repeatElement;\n_repeatElement = 0;\nif (type == REPLAY_START_DUP) {\n_currentWrapper = _currentWrapper.intermediateWrapper();\nreturn XML_START_ELEMENT;\nif (type == REPLAY_END) {\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\nif (_currentWrapper != null) {\n_currentWrapper = _currentWrapper.getParent();\nreturn XML_END_ELEMENT;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleEndElement()I",
                                    "method_body": "private final int _handleEndElement()\nif (_currentWrapper != null) {\nElementWrapper w = _currentWrapper;\nif (w.isMatching()) {\n_repeatElement = REPLAY_END;\n_localName = w.getWrapperLocalName();\n_namespaceURI = w.getWrapperNamespace();\n_currentWrapper = _currentWrapper.getParent();\n_currentWrapper = _currentWrapper.getParent();\nreturn (_currentState = XML_END_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1:<clinit>()V",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\n_nextToken = JsonToken.FIELD_NAME;\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\nif (_parsingContext.inArray()) {\ntoken = _xmlTokens.next();\n_mayBeLeaf = true;\ncontinue;\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_xmlTokens.repeatStartElement();\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\nreturn (_currToken = JsonToken.VALUE_NULL);\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_nextToken = JsonToken.FIELD_NAME;\n_currText = _xmlTokens.getText();\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nreturn (_currToken = JsonToken.START_OBJECT);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nif (_isEmpty(_currText)) {\n_currToken = JsonToken.END_ARRAY;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate) {\nthis(delegate, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;Ljava/util/Set;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate, Set<String> namesToWrap)\nsuper(delegate);\n_namesToWrap = namesToWrap;\n_type = delegate.getValueType();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:createContextual(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\nJsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, _type);\nBeanDeserializerBase newDelegatee = _verifyDeserType(del);\nIterator<SettableBeanProperty> it = newDelegatee.properties();\nHashSet<String> unwrappedNames = null;\nwhile (it.hasNext()) {\nSettableBeanProperty prop = it.next();\nJavaType type = prop.getType();\nif (!TypeUtil.isIndexedType(type)) {\ncontinue;\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nif (unwrappedNames == null) {\nunwrappedNames = new HashSet<String>();\nunwrappedNames.add(prop.getName());\n}\nif (unwrappedNames == null) {\nreturn newDelegatee;\nreturn new WrapperHandlingDeserializer(newDelegatee, unwrappedNames);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;",
                                    "method_body": "public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n_configureParser(jp);\nreturn _delegatee.deserialize(jp,  ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_configureParser(Lcom/fasterxml/jackson/core/JsonParser;)V",
                                    "method_body": "protected final void _configureParser(JsonParser jp) throws IOException\nif (jp instanceof FromXmlParser) {\n((FromXmlParser) jp).addVirtualWrapping(_namesToWrap);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_verifyDeserType(Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;",
                                    "method_body": "protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\nif (!(deser instanceof BeanDeserializerBase)) {\nreturn (BeanDeserializerBase) deser;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nClass<?> cls = type.getRawClass();\nif (cls == byte[].class || cls == char[].class) {\nif (Map.class.isAssignableFrom(cls)) {\nreturn true;\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)V",
                                    "method_body": "private ElementWrapper(ElementWrapper parent,\n{\n_parent = parent;\n_wrapperName = wrapperLocalName;\n_wrapperNamespace = (wrapperNamespace == null) ? \"\" : wrapperNamespace;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:matchingWrapper(Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;Ljava/lang/String;Ljava/lang/String;)Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public static ElementWrapper matchingWrapper(ElementWrapper parent,\nreturn new ElementWrapper(parent, wrapperLocalName, wrapperNamespace);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:intermediateWrapper()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper intermediateWrapper() {\nreturn new ElementWrapper(this, null, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:isMatching()Z",
                                    "method_body": "public boolean isMatching() { return _wrapperName != null; }\npublic boolean isMatching() { return _wrapperName != null; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperLocalName()Ljava/lang/String;",
                                    "method_body": "public String getWrapperLocalName() { return _wrapperName; }\npublic String getWrapperLocalName() { return _wrapperName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getWrapperNamespace()Ljava/lang/String;",
                                    "method_body": "public String getWrapperNamespace() { return _wrapperNamespace; }\npublic String getWrapperNamespace() { return _wrapperNamespace; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/ElementWrapper;",
                                    "method_body": "public ElementWrapper getParent() { return _parent; }\npublic ElementWrapper getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:setDefaultUseWrapper(Z)Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;",
                                    "method_body": "public XmlMapper setDefaultUseWrapper(boolean state) {\nAnnotationIntrospector ai0 = getDeserializationConfig().getAnnotationIntrospector();\nfor (AnnotationIntrospector ai : ai0.allIntrospectors()) {\nif (ai instanceof XmlAnnotationIntrospector) {\n((XmlAnnotationIntrospector) ai).setDefaultUseWrapper(state);\n}\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:setDefaultUseWrapper(Z)V",
                                    "method_body": "public void setDefaultUseWrapper(boolean b) {\n_cfgDefaultUseWrapper = b;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_isEmpty(Ljava/lang/String;)Z",
                                    "method_body": "protected boolean _isEmpty(String str)\nint len = (str == null) ? 0 : str.length();\nif (len > 0) {\nfor (int i = 0; i < len; ++i) {\nif (str.charAt(i) > ' ') {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipEndElement()V",
                                    "method_body": "public void skipEndElement() throws IOException\nint type = next();\nif (type != XML_END_ELEMENT) {\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 2,
                    "tests": [
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest.testMixedContent",
                            "test_body": "66: public void testMixedContent() throws Exception\n67: {\n68: WindSpeed result = MAPPER.readValue(\"<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>\",\n69: WindSpeed.class);\n70: assertEquals(27, result.value);\n71: assertNotNull(result.radius);\n72: assertEquals(20, result.radius.value);\n73: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(JacksonXmlModule module) {\nthis(new XmlFactory(), module);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JackxonXmlModule\", PackageVersion.VERSION);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setDefaultUseWrapper(Z)V",
                                    "method_body": "public void setDefaultUseWrapper(boolean state) {\n_cfgDefaultUseWrapper = state;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "final static int SPACE_COUNT = 64;\nfinal static char[] SPACES = new char[SPACE_COUNT];\nArrays.fill(SPACES, ' ');\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nxmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createParser(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonParser;",
                                    "method_body": "public JsonParser createParser(String content) throws IOException {\nReader r = new StringReader(content);\nIOContext ctxt = _createContext(r, true);\nif (_inputDecorator != null) {\nreturn _createParser(r, ctxt);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
                                    "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
                                    "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName>(40, 200);\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:updateProperties(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nint changed = 0;\nfor (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {\nBeanPropertyDefinition prop = propDefs.get(i);\nAnnotatedMember acc = prop.getPrimaryMember();\nif (acc == null) {\nBoolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\nif (b != null && b.booleanValue()) {\nBeanPropertyDefinition newProp = prop.withSimpleName(_cfgNameForTextValue);\nif (newProp != prop) {\npropDefs.set(i, newProp);\nPropertyName wrapperName = prop.getWrapperName();\nif (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\nString localName = wrapperName.getSimpleName();\nif ((localName != null && localName.length() > 0)\nreturn propDefs;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:modifyDeserializer(Lcom/fasterxml/jackson/databind/DeserializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\nif (!(deser0 instanceof BeanDeserializerBase)) {\nreturn deser0;\nBeanDeserializerBase deser = (BeanDeserializerBase) deser0;\nif (!deser.getValueInstantiator().canCreateFromString()) {\nSettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());\nif (textProp != null) {\nreturn new XmlTextDeserializer(deser, textProp);\nreturn new WrapperHandlingDeserializer(deser);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:_findSoleTextProp(Lcom/fasterxml/jackson/databind/DeserializationConfig;Ljava/util/Iterator;)Lcom/fasterxml/jackson/databind/deser/SettableBeanProperty;",
                                    "method_body": "private SettableBeanProperty _findSoleTextProp(DeserializationConfig config,\nfinal AnnotationIntrospector ai = config.getAnnotationIntrospector();\nSettableBeanProperty textProp = null;\nwhile (propIt.hasNext()) {\nSettableBeanProperty prop = propIt.next();\nAnnotatedMember m = prop.getMember();\nif (m != null) {\nPropertyName n = prop.getFullName();\nif (_cfgNameForTextValue.equals(n.getSimpleName())) {\ntextProp = prop;\ncontinue;\nBoolean b = AnnotationUtil.findIsAttributeAnnotation(ai, m);\nif (b != null && b.booleanValue()) {\nreturn null;\nreturn textProp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findWrapperName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findWrapperName(Annotated ann)\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\nif (w != null) {\nif (_cfgDefaultUseWrapper) {\nreturn PropertyName.USE_DEFAULT;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn prop.value() ? Boolean.TRUE : Boolean.FALSE;\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForDeserialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForDeserialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForDeserialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn PropertyName.USE_DEFAULT;\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn PropertyName.construct(pann.localName(), pann.namespace());\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamReader;)V",
                                    "method_body": "protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;\n* {@link FromXmlParser.Feature}s"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public String getCurrentName() throws IOException\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nname = _parsingContext.getCurrentName();\nif (name == null) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:close()V",
                                    "method_body": "public void close() throws IOException\nif (!_closed) {\n_closed = true;\nif (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n_xmlTokens.closeCompletely();\n_releaseBuffers();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getParsingContext()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public XmlReadContext getParsingContext() {\nreturn _parsingContext;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\nif (_parsingContext.inArray()) {\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nreturn (_currToken = JsonToken.FIELD_NAME);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() throws IOException\nif (_currToken == null) {\nswitch (_currToken) {\nreturn _currText;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:_releaseBuffers()V",
                                    "method_body": "protected void _releaseBuffers() throws IOException {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;III)V",
                                    "method_body": "public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createRootContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public static XmlReadContext createRootContext(int lineNr, int colNr) {\nreturn new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\nXmlReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public final String getCurrentName() { return _currentName; }\npublic final String getCurrentName() { return _currentName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getParent()Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext getParent() { return _parent; }\npublic final XmlReadContext getParent() { return _parent; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setCurrentName(Ljava/lang/String;)V",
                                    "method_body": "public void setCurrentName(String name) {\n_currentName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getNamesToWrap()Ljava/util/Set;",
                                    "method_body": "public Set<String> getNamesToWrap() {\nreturn _namesToWrap;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:<init>(Ljavax/xml/stream/XMLStreamReader;Ljava/lang/Object;)V",
                                    "method_body": "public final static int XML_START_ELEMENT = 1;\nprotected int _nextAttributeIndex = 0;\n{\n_sourceReference = sourceRef;\nif (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n_xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n_currentState = XML_START_ELEMENT;\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\n_attributeCount = _xmlReader.getAttributeCount();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:next()I",
                                    "method_body": "public int next() throws IOException\nif (_repeatElement != 0) {\nreturn _next();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:skipEndElement()V",
                                    "method_body": "public void skipEndElement() throws IOException\nint type = next();\nif (type != XML_END_ELEMENT) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() { return _textValue; }\npublic String getText() { return _textValue; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
                                    "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:closeCompletely()V",
                                    "method_body": "public void closeCompletely() throws IOException\n_xmlReader.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_next()I",
                                    "method_body": "private final int _next() throws XMLStreamException\nswitch (_currentState) {\n++_nextAttributeIndex;\nif (_nextAttributeIndex < _attributeCount) {\n_localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n_namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n_textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\nreturn (_currentState = XML_ATTRIBUTE_NAME);\nString text = _collectUntilTag();\nif (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\nreturn _initStartElement();\nif (text != null) {\n_textValue = text;\nreturn (_currentState = XML_TEXT);\nreturn (_currentState = XML_ATTRIBUTE_VALUE);\nreturn _handleEndElement();\nswitch (_skipUntilTag()) {\nreturn _handleEndElement();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_collectUntilTag()Ljava/lang/String;",
                                    "method_body": "private final String _collectUntilTag() throws XMLStreamException\nString text = null;\nswitch (_xmlReader.next()) {\nreturn text;\nif (text == null) {\ntext = _xmlReader.getText();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_skipUntilTag()I",
                                    "method_body": "private final int _skipUntilTag() throws XMLStreamException\nwhile (_xmlReader.hasNext()) {\nswitch (type = _xmlReader.next()) {\nreturn type;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_initStartElement()I",
                                    "method_body": "private final int _initStartElement() throws XMLStreamException\nfinal String ns = _xmlReader.getNamespaceURI();\nfinal String localName = _xmlReader.getLocalName();\n_attributeCount = _xmlReader.getAttributeCount();\n_nextAttributeIndex = 0;\nif (_currentWrapper != null) {\n_localName = localName;\n_namespaceURI = ns;\nreturn (_currentState = XML_START_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_handleEndElement()I",
                                    "method_body": "private final int _handleEndElement()\nif (_currentWrapper != null) {\nreturn (_currentState = XML_END_ELEMENT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1:<clinit>()V",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nif (_mayBeLeaf) {\nif (_parsingContext.inArray()) {\nString name = _xmlTokens.getLocalName();\n_parsingContext.setCurrentName(name);\nif (_namesToWrap != null && _namesToWrap.contains(name)) {\n_mayBeLeaf = true;\nreturn (_currToken = JsonToken.FIELD_NAME);\nswitch (token) {\nif (_mayBeLeaf) {\n_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n_parsingContext = _parsingContext.getParent();\n_namesToWrap = _parsingContext.getNamesToWrap();\nreturn _currToken;\nif (_mayBeLeaf) {\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nreturn (_currToken = JsonToken.FIELD_NAME);\n_currText = _xmlTokens.getText();\nreturn (_currToken = JsonToken.VALUE_STRING);\n_currText = _xmlTokens.getText();\nif (_mayBeLeaf) {\n_mayBeLeaf = false;\n_xmlTokens.skipEndElement();\nif (_parsingContext.inArray()) {\nreturn (_currToken = JsonToken.VALUE_STRING);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\nreturn b;\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate) {\nthis(delegate, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;Ljava/util/Set;)V",
                                    "method_body": "public WrapperHandlingDeserializer(BeanDeserializerBase delegate, Set<String> namesToWrap)\nsuper(delegate);\n_namesToWrap = namesToWrap;\n_type = delegate.getValueType();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:createContextual(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\nJsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, _type);\nBeanDeserializerBase newDelegatee = _verifyDeserType(del);\nIterator<SettableBeanProperty> it = newDelegatee.properties();\nHashSet<String> unwrappedNames = null;\nwhile (it.hasNext()) {\nSettableBeanProperty prop = it.next();\nJavaType type = prop.getType();\nif (!TypeUtil.isIndexedType(type)) {\ncontinue;\nif (unwrappedNames == null) {\nreturn newDelegatee;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer:_verifyDeserType(Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;",
                                    "method_body": "protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\nif (!(deser instanceof BeanDeserializerBase)) {\nreturn (BeanDeserializerBase) deser;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;Lcom/fasterxml/jackson/databind/deser/SettableBeanProperty;)V",
                                    "method_body": "public XmlTextDeserializer(BeanDeserializerBase delegate, SettableBeanProperty prop)\nsuper(delegate);\n_xmlTextProperty = prop;\n_xmlTextPropertyIndex = prop.getPropertyIndex();\n_valueInstantiator = delegate.getValueInstantiator();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer:<init>(Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;I)V",
                                    "method_body": "public XmlTextDeserializer(BeanDeserializerBase delegate, int textPropIndex)\nsuper(delegate);\n_xmlTextPropertyIndex = textPropIndex;\n_valueInstantiator = delegate.getValueInstantiator();\n_xmlTextProperty = delegate.findProperty(textPropIndex);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer:createContextual(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;",
                                    "method_body": "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\nreturn new XmlTextDeserializer(_verifyDeserType(_delegatee), _xmlTextPropertyIndex);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer:deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;",
                                    "method_body": "public Object deserialize(JsonParser jp, DeserializationContext ctxt)\nif (jp.getCurrentToken() == JsonToken.VALUE_STRING) {\nObject bean = _valueInstantiator.createUsingDefault(ctxt);\n_xmlTextProperty.deserializeAndSet(jp, ctxt, bean);\nreturn bean;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer:_verifyDeserType(Lcom/fasterxml/jackson/databind/JsonDeserializer;)Lcom/fasterxml/jackson/databind/deser/BeanDeserializerBase;",
                                    "method_body": "protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\nif (!(deser instanceof BeanDeserializerBase)) {\nreturn (BeanDeserializerBase) deser;\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 3,
                    "tests": [
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest.testXmlAttributesWithNextTextValue",
                            "test_body": "30: public void testXmlAttributesWithNextTextValue() throws Exception\n31: {\n32: final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n33: 34: FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n35: 36: // First: verify handling without forcing array handling:\n37: assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <data>\n38: assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <max>\n39: assertEquals(\"max\", xp.getCurrentName());\n40: 41: assertEquals(\"7\", xp.nextTextValue());\n42: 43: assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>\n44: assertEquals(\"offset\", xp.getCurrentName());\n45: 46: assertEquals(\"offset\", xp.getText());\n47: 48: assertEquals(\"9\", xp.nextTextValue());\n49: 50: assertEquals(\"9\", xp.getText());\n51: 52: assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>\n53: xp.close();\n54: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nxmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/dataformat/xml/deser/FromXmlParser;",
                                    "method_body": "protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\nsr = _xmlInputFactory.createXMLStreamReader(r);\nsr = _initializeXmlReader(sr);\n}\nFromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\nif (_cfgNameForTextElement != null) {\nreturn xp;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlReader(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/XMLStreamReader;",
                                    "method_body": "protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\nwhile (sr.next() != XMLStreamConstants.START_ELEMENT) {\nreturn sr;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamReader;)V",
                                    "method_body": "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\nsuper(genericParserFeatures);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_objectCodec = codec;\n_parsingContext = XmlReadContext.createRootContext(-1, -1);\n_nextToken = JsonToken.START_OBJECT;\n_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public String getCurrentName() throws IOException\nif (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\nname = _parsingContext.getCurrentName();\nif (name == null) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nswitch (token) {\nif (_mayBeLeaf) {\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nreturn (_currToken = JsonToken.FIELD_NAME);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser:nextTextValue()Ljava/lang/String;",
                                    "method_body": "public String nextTextValue() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nswitch (token) {\n_currText = _xmlTokens.getText();\n_currToken = JsonToken.VALUE_STRING;\nbreak;\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:<init>(Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;III)V",
                                    "method_body": "public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\nsuper();\n_type = type;\n_parent = parent;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createRootContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public static XmlReadContext createRootContext(int lineNr, int colNr) {\nreturn new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:createChildObjectContext(II)Lcom/fasterxml/jackson/dataformat/xml/deser/XmlReadContext;",
                                    "method_body": "public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\nXmlReadContext ctxt = _child;\nif (ctxt == null) {\n_child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\nreturn ctxt;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:getCurrentName()Ljava/lang/String;",
                                    "method_body": "public final String getCurrentName() { return _currentName; }\npublic final String getCurrentName() { return _currentName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext:setCurrentName(Ljava/lang/String;)V",
                                    "method_body": "public void setCurrentName(String name) {\n_currentName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:<init>(Ljavax/xml/stream/XMLStreamReader;Ljava/lang/Object;)V",
                                    "method_body": "public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef)\n{\n_sourceReference = sourceRef;\nif (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {\n_xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n_currentState = XML_START_ELEMENT;\n_localName = _xmlReader.getLocalName();\n_namespaceURI = _xmlReader.getNamespaceURI();\n_attributeCount = _xmlReader.getAttributeCount();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:next()I",
                                    "method_body": "public int next() throws IOException\nif (_repeatElement != 0) {\nreturn _next();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getText()Ljava/lang/String;",
                                    "method_body": "public String getText() { return _textValue; }\npublic String getText() { return _textValue; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:getLocalName()Ljava/lang/String;",
                                    "method_body": "public String getLocalName() { return _localName; }\npublic String getLocalName() { return _localName; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream:_next()I",
                                    "method_body": "private final int _next() throws XMLStreamException\nswitch (_currentState) {\nif (_nextAttributeIndex < _attributeCount) {\n_localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n_namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n_textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\nreturn (_currentState = XML_ATTRIBUTE_NAME);\nreturn (_currentState = XML_ATTRIBUTE_VALUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$1:<clinit>()V",
                                    "method_body": "public JsonToken nextToken() throws IOException\n_binaryValue = null;\nif (_nextToken != null) {\nJsonToken t = _nextToken;\n_currToken = t;\n_nextToken = null;\nswitch (t) {\n_parsingContext = _parsingContext.createChildObjectContext(-1, -1);\nbreak;\nreturn t;\nint token = _xmlTokens.next();\nwhile (token == XmlTokenStream.XML_START_ELEMENT) {\nswitch (token) {\nif (_mayBeLeaf) {\n_parsingContext.setCurrentName(_xmlTokens.getLocalName());\nreturn (_currToken = JsonToken.FIELD_NAME);\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 4,
                    "tests": [
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest.testDynamicRootName",
                            "test_body": "67: public void testDynamicRootName() throws IOException\n68: {\n69: String xml;\n70: 71: ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n72: 73: xml = w.writeValueAsString(new StringBean(\"foo\"));\n74: assertEquals(\"<rudy><text>foo</text></rudy>\", xml);\n75: 76: xml = w.writeValueAsString(new StringBean(null));\n77: assertEquals(\"<rudy><text/></rudy>\", xml);\n78: 79: // and even with null will respect configured root name\n80: xml = w.writeValueAsString(null);\n81: assertEquals(\"<rudy/>\", xml);\n82: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
                                    "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JacksonXmlModule\", PackageVersion.VERSION);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "final static int SPACE_COUNT = 64;\nfinal static char[] SPACES = new char[SPACE_COUNT];\nArrays.fill(SPACES, ' ');\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nxmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nxmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createGenerator(Ljava/io/Writer;)Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;",
                                    "method_body": "public ToXmlGenerator createGenerator(Writer out) throws IOException\nreturn new ToXmlGenerator(_createContext(out, false),\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createXmlWriter(Ljava/io/Writer;)Ljavax/xml/stream/XMLStreamWriter;",
                                    "method_body": "protected XMLStreamWriter _createXmlWriter(Writer w) throws IOException\nreturn _initializeXmlWriter(_xmlOutputFactory.createXMLStreamWriter(w));\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlWriter(Ljavax/xml/stream/XMLStreamWriter;)Ljavax/xml/stream/XMLStreamWriter;",
                                    "method_body": "protected final XMLStreamWriter _initializeXmlWriter(XMLStreamWriter sw) throws IOException, XMLStreamException\nsw.setDefaultNamespace(\"\");\nreturn sw;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public int getMask() { return _mask; }\n@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:getMask()I",
                                    "method_body": "@Override public int getMask() { return _mask; }\n@Override public int getMask() { return _mask; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledIn(I)Z",
                                    "method_body": "@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider;Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)V",
                                    "method_body": "public XmlSerializerProvider(XmlSerializerProvider src,\nsuper(src, config, f);\n_rootNameLookup  = src._rootNameLookup;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:createInstance(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)Lcom/fasterxml/jackson/databind/ser/DefaultSerializerProvider;",
                                    "method_body": "public DefaultSerializerProvider createInstance(SerializationConfig config,\nreturn new XmlSerializerProvider(this, config, jsf);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:serializeValue(Lcom/fasterxml/jackson/core/JsonGenerator;Ljava/lang/Object;)V",
                                    "method_body": "public void serializeValue(JsonGenerator gen, Object value) throws IOException\nif (value == null) {\n_serializeXmlNull(gen);\nreturn;\nfinal Class<?> cls = value.getClass();\nfinal ToXmlGenerator xgen = _asXmlGenerator(gen);\nif (xgen == null) { // called by convertValue()\nQName rootName = _rootNameFromConfig();\nif (rootName == null) {\n_initWithRootName(xgen, rootName);\nasArray = TypeUtil.isIndexedType(cls);\nif (asArray) {\nfinal JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\nser.serialize(value, gen, this);\n}\nif (asArray) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_serializeXmlNull(Lcom/fasterxml/jackson/core/JsonGenerator;)V",
                                    "method_body": "protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\nif (jgen instanceof ToXmlGenerator) {\n_initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\nsuper.serializeValue(jgen, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_initWithRootName(Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;Ljavax/xml/namespace/QName;)V",
                                    "method_body": "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\nif (!xgen.setNextNameIfMissing(rootName)) {\nxgen.initGenerator();\nString ns = rootName.getNamespaceURI();\nif (ns != null && ns.length() > 0) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_rootNameFromConfig()Ljavax/xml/namespace/QName;",
                                    "method_body": "protected QName _rootNameFromConfig()\nPropertyName name = _config.getFullRootName();\nif (name == null) {\nString ns = name.getNamespace();\nif (ns == null || ns.isEmpty()) {\nreturn new QName(name.getSimpleName());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_asXmlGenerator(Lcom/fasterxml/jackson/core/JsonGenerator;)Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;",
                                    "method_body": "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen)\nif (!(gen instanceof ToXmlGenerator)) {\nreturn (ToXmlGenerator) gen;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final transient LRUMap<ClassKey,QName> _rootNames = new LRUMap<ClassKey,QName>(40, 200);\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:changeProperties(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nfor (int i = 0, len = beanProperties.size(); i < len; ++i) {\nBeanPropertyWriter bpw = beanProperties.get(i);\nfinal AnnotatedMember member = bpw.getMember();\nString ns = AnnotationUtil.findNamespaceAnnotation(intr, member);\nBoolean isAttribute = AnnotationUtil.findIsAttributeAnnotation(intr, member);\nBoolean isText = AnnotationUtil.findIsTextAnnotation(intr, member);\nBoolean isCData = AnnotationUtil.findIsCDataAnnotation(intr, member);\nbpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO,\nif (!TypeUtil.isIndexedType(bpw.getType())) {\ncontinue;\nreturn beanProperties;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:modifySerializer(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonSerializer;)Lcom/fasterxml/jackson/databind/JsonSerializer;",
                                    "method_body": "public JsonSerializer<?> modifySerializer(SerializationConfig config,\nif (!(serializer instanceof BeanSerializerBase)) {\nreturn serializer;\nreturn new XmlBeanSerializer((BeanSerializerBase) serializer);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findWrapperName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findWrapperName(Annotated ann)\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\nif (w != null) {\nif (_cfgDefaultUseWrapper) {\nreturn PropertyName.USE_DEFAULT;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNamespace(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/String;",
                                    "method_body": "public String findNamespace(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsCData(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsCData(Annotated ann) {\nJacksonXmlCData prop = ann.getAnnotation(JacksonXmlCData.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForSerialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForSerialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForSerialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForDeserialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForDeserialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForDeserialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findNamespaceAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/String;",
                                    "method_body": "public static String findNamespaceAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nString ns = ((XmlAnnotationIntrospector) intr).findNamespace(prop);\nif (ns != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsCDataAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsCDataAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsCData(prop);\nif (b != null) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Ljava/lang/Class;)Z",
                                    "method_body": "public static boolean isIndexedType(Class<?> cls)\nreturn (cls.isArray() && cls != byte[].class && cls != char[].class)\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamWriter;)V",
                                    "method_body": "public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\nsuper(stdFeatures, codec);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_originalXmlWriter = sw;\n_xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n_stax2Emulation = (_xmlWriter != sw);\n_xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:initGenerator()V",
                                    "method_body": "public void initGenerator()  throws IOException\nif (_initialized) {\n_initialized = true;\nif (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {\n} else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextIsAttribute(Z)V",
                                    "method_body": "public void setNextIsAttribute(boolean isAttribute)\n_nextIsAttribute = isAttribute;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextName(Ljavax/xml/namespace/QName;)V",
                                    "method_body": "public final void setNextName(QName name)\n_nextName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextNameIfMissing(Ljavax/xml/namespace/QName;)Z",
                                    "method_body": "public final boolean setNextNameIfMissing(QName name)\nif (_nextName == null) {\n_nextName = name;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeFieldName(Ljava/lang/String;)V",
                                    "method_body": "public final void writeFieldName(String name) throws IOException\nif (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {\nString ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\nsetNextName(new QName(ns, name));\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeStartObject()V",
                                    "method_body": "public final void writeStartObject() throws IOException\n_verifyValueWrite(\"start an object\");\n_writeContext = _writeContext.createChildObjectContext();\nif (_cfgPrettyPrinter != null) {\n_handleStartObject();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeEndObject()V",
                                    "method_body": "public final void writeEndObject() throws IOException\nif (!_writeContext.inObject()) {\n_writeContext = _writeContext.getParent();\nif (_cfgPrettyPrinter != null) {\n_handleEndObject();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_handleStartObject()V",
                                    "method_body": "public final void _handleStartObject() throws IOException\nif (_nextName == null) {\n_elementNameStack.addLast(_nextName);\n_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_handleEndObject()V",
                                    "method_body": "public final void _handleEndObject() throws IOException\nif (_elementNameStack.isEmpty()) {\n_nextName = _elementNameStack.removeLast();\n_nextIsAttribute = false;\n_xmlWriter.writeEndElement();\nif (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V",
                                    "method_body": "public void writeFieldName(SerializableString name) throws IOException\nwriteFieldName(name.getValue());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeString(Ljava/lang/String;)V",
                                    "method_body": "public void writeString(String text) throws IOException\n_verifyValueWrite(\"write String value\");\nif (_nextName == null) {\nif (_nextIsAttribute) { // must write attribute name and value with one call\n} else if (checkNextIsUnwrapped()) {\n} else if (_xmlPrettyPrinter != null) {\n_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\nif(_nextIsCData) {\n_xmlWriter.writeCharacters(text);\n_xmlWriter.writeEndElement();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeNull()V",
                                    "method_body": "public void writeNull() throws IOException\n_verifyValueWrite(\"write null value\");\nif (_nextName == null) {\nif (_nextIsAttribute) {\n} else if (checkNextIsUnwrapped()) {\nif (_xmlPrettyPrinter != null) {\n_xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_verifyValueWrite(Ljava/lang/String;)V",
                                    "method_body": "protected final void _verifyValueWrite(String typeMsg) throws IOException\nint status = _writeContext.writeValue();\nif (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:close()V",
                                    "method_body": "public void close() throws IOException\nsuper.close();\nif (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\nJsonStreamContext ctxt = _writeContext;\nif (ctxt.inArray()) {\n} else if (ctxt.inObject()) {\n}\nif (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n_xmlWriter.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:checkNextIsUnwrapped()Z",
                                    "method_body": "protected boolean checkNextIsUnwrapped()\nif (_nextIsUnwrapped) {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
                                    "method_body": "public XmlBeanSerializerBase(BeanSerializerBase src)\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<clinit>()V",
                                    "method_body": "public final static String KEY_XML_INFO = new String(\"xmlInfo\");\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:serializeFields(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
                                    "method_body": "protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\nif (!(gen0 instanceof ToXmlGenerator)) {\nfinal ToXmlGenerator xgen = (ToXmlGenerator) gen0;\nif (_filteredProps != null && provider.getActiveView() != null) {\nprops = _props;\nfinal int attrCount = _attributeCount;\nfinal boolean isAttribute = xgen._nextIsAttribute;\nif (attrCount > 0) {\nfinal int textIndex = _textPropertyIndex;\nfinal QName[] xmlNames = _xmlNames;\nint i = 0;\nfinal BitSet cdata = _cdata;\nfor (final int len = props.length; i < len; ++i) {\nif (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\nxgen.setNextIsAttribute(false);\nif (i == textIndex) {\nxgen.setNextName(xmlNames[i]);\nBeanPropertyWriter prop = props[i];\nif (prop != null) { // can have nulls in filtered list\nif ((cdata != null) && cdata.get(i)) {\nprop.serializeAsField(bean, xgen, provider);\nif (i == textIndex) {\nif (_anyGetterWriter != null) {\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isAttribute(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
                                    "method_body": "protected static boolean _isAttribute(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isAttribute();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isCData(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
                                    "method_body": "protected static boolean _isCData(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isCData();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:<init>(Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V",
                                    "method_body": "public XmlInfo(Boolean isAttribute, String ns, Boolean isText, Boolean isCData)\n{\n_isAttribute = (isAttribute == null) ? false : isAttribute.booleanValue();\n_namespace = (ns == null) ? \"\" : ns;\n_isText = (isText == null) ? false : isText.booleanValue();\n_isCData = (isCData == null) ? false : isCData.booleanValue();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:getNamespace()Ljava/lang/String;",
                                    "method_body": "public String getNamespace() { return _namespace; }\npublic String getNamespace() { return _namespace; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isAttribute()Z",
                                    "method_body": "public boolean isAttribute() { return _isAttribute; }\npublic boolean isAttribute() { return _isAttribute; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isText()Z",
                                    "method_body": "public boolean isText() { return _isText; }\npublic boolean isText() { return _isText; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isCData()Z",
                                    "method_body": "public boolean isCData() { return _isCData; }\npublic boolean isCData() { return _isCData; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
                                    "method_body": "public XmlBeanSerializer(BeanSerializerBase src) {\nsuper(src);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:serialize(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
                                    "method_body": "public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException\nif (_objectIdWriter != null) {\njgen.writeStartObject();\nif (_propertyFilterId != null) {\nserializeFields(bean, jgen, provider);\njgen.writeEndObject();\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 5,
                    "tests": [
                        {
                            "test_name": "com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith",
                            "test_body": "74: public void testCopyWith() throws Exception\n75: {\n76: XmlMapper xmlMapper = newMapper();\n77: final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n78: .disable(MapperFeature.USE_ANNOTATIONS)\n79: .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n80: 81: String xml1 = xmlMapper.writeValueAsString(new Pojo282());\n82: String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n83: 84: if (!xml1.contains(\"AnnotatedName\")) {\n85: fail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n86: }\n87: if (!xml2.contains(\"Pojo282\")\n88: || xml2.contains(\"AnnotatedName\")) {\n89: fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n90: }\n91: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
                                    "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
                                    "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\nenable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;)V",
                                    "method_body": "protected XmlMapper(XmlMapper src) {\nsuper(src);\n_xmlModule = src._xmlModule;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\nprotected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\nthis(new XmlFactory());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:copy()Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;",
                                    "method_body": "public XmlMapper copy()\n_checkInvalidCopy(XmlMapper.class);\nreturn new XmlMapper(this);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:<init>()V",
                                    "method_body": "public JacksonXmlModule()\nsuper(\"JacksonXmlModule\", PackageVersion.VERSION);\nXmlStringDeserializer deser = new XmlStringDeserializer();\naddDeserializer(String.class, deser);\naddDeserializer(CharSequence.class, deser);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:setupModule(Lcom/fasterxml/jackson/databind/Module$SetupContext;)V",
                                    "method_body": "public void setupModule(SetupContext context)\ncontext.addBeanSerializerModifier(new XmlBeanSerializerModifier());\ncontext.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\ncontext.insertAnnotationIntrospector(_constructIntrospector());\nif (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\nsuper.setupModule(context);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlModule:_constructIntrospector()Lcom/fasterxml/jackson/databind/AnnotationIntrospector;",
                                    "method_body": "protected AnnotationIntrospector _constructIntrospector() {\nreturn new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.PackageVersion:<clinit>()V",
                                    "method_body": "public final static Version VERSION = VersionUtil.parseVersion(\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer:<init>()V",
                                    "method_body": "public XmlStringDeserializer() { super(String.class); }\npublic XmlStringDeserializer() { super(String.class); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>()V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter;)V",
                                    "method_body": "public void writeIndentation(JsonGenerator g, int level) throws IOException;\nprotected Indenter _arrayIndenter = new FixedSpaceIndenter();\nprotected Indenter _objectIndenter = new Lf2SpacesIndenter();\nprotected boolean _spacesInObjectEntries = true;\nprotected transient int _nesting = 0;\npublic DefaultXmlPrettyPrinter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter:<init>()V",
                                    "method_body": "public FixedSpaceIndenter() { }\npublic FixedSpaceIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<init>()V",
                                    "method_body": "public Lf2SpacesIndenter() { }\npublic Lf2SpacesIndenter() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nString lf = null;\nlf = System.getProperty(\"line.separator\");\n} catch (Throwable t) { } // access exception?\nSYSTEM_LINE_SEPARATOR = (lf == null) ? \"\\n\" : lf;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>()V",
                                    "method_body": "public XmlFactory() { this(null, null, null); }\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nthis(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS,\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;IILjavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;Ljava/lang/String;)V",
                                    "method_body": "protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\nsuper(oc);\n_xmlParserFeatures = xpFeatures;\n_xmlGeneratorFeatures = xgFeatures;\n_cfgNameForTextElement = nameForTextElem;\nif (xmlIn == null) {\nxmlIn = XMLInputFactory.newInstance();\nxmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\nxmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\nif (xmlOut == null) {\nxmlOut = XMLOutputFactory.newInstance();\n_initFactories(xmlIn, xmlOut);\n_xmlInputFactory = xmlIn;\n_xmlOutputFactory = xmlOut;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/core/ObjectCodec;)V",
                                    "method_body": "protected XmlFactory(XmlFactory src, ObjectCodec oc)\nsuper(src, oc);\n_xmlParserFeatures = src._xmlParserFeatures;\n_xmlGeneratorFeatures = src._xmlGeneratorFeatures;\n_cfgNameForTextElement = src._cfgNameForTextElement;\n_xmlInputFactory = src._xmlInputFactory;\n_xmlOutputFactory = src._xmlOutputFactory;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:<clinit>()V",
                                    "method_body": "public final static String FORMAT_NAME_XML = \"XML\";\nfinal static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();\nfinal static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();\npublic XmlFactory() { this(null, null, null); }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initFactories(Ljavax/xml/stream/XMLInputFactory;Ljavax/xml/stream/XMLOutputFactory;)V",
                                    "method_body": "protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\nxmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\nxmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:copy()Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;",
                                    "method_body": "public XmlFactory copy() {\n_checkInvalidCopy(XmlFactory.class);\nreturn new XmlFactory(this, null);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:createGenerator(Ljava/io/Writer;)Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;",
                                    "method_body": "public ToXmlGenerator createGenerator(Writer out) throws IOException\nreturn new ToXmlGenerator(_createContext(out, false),\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_createXmlWriter(Ljava/io/Writer;)Ljavax/xml/stream/XMLStreamWriter;",
                                    "method_body": "protected XMLStreamWriter _createXmlWriter(Writer w) throws IOException\nsw = _xmlOutputFactory.createXMLStreamWriter(w);\n}\nreturn _initializeXmlWriter(sw);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlFactory:_initializeXmlWriter(Ljavax/xml/stream/XMLStreamWriter;)Ljavax/xml/stream/XMLStreamWriter;",
                                    "method_body": "protected final XMLStreamWriter _initializeXmlWriter(XMLStreamWriter sw) throws IOException\nsw.setDefaultNamespace(\"\");\n}\nreturn sw;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:<clinit>()V",
                                    "method_body": "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\npublic enum Feature implements FormatFeature\nEMPTY_ELEMENT_AS_NULL(true)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public int getMask() { return _mask; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:getMask()I",
                                    "method_body": "@Override public int getMask() { return _mask; }\n@Override public int getMask() { return _mask; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
                                    "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:<clinit>()V",
                                    "method_body": "protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";\npublic enum Feature implements FormatFeature\nWRITE_XML_DECLARATION(false),\nWRITE_XML_1_1(false)\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\nprivate Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}\n@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public int getMask() { return _mask; }\n@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:collectDefaults()I",
                                    "method_body": "public static int collectDefaults()\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nreturn flags;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledByDefault()Z",
                                    "method_body": "@Override public boolean enabledByDefault() { return _defaultState; }\n@Override public boolean enabledByDefault() { return _defaultState; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:getMask()I",
                                    "method_body": "@Override public int getMask() { return _mask; }\n@Override public int getMask() { return _mask; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:enabledIn(I)Z",
                                    "method_body": "@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
                                    "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider;Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)V",
                                    "method_body": "public XmlSerializerProvider(XmlSerializerProvider src,\nsuper(src, config, f);\n_rootNameLookup  = src._rootNameLookup;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider;)V",
                                    "method_body": "protected XmlSerializerProvider(XmlSerializerProvider src) {\nsuper(src);\n_rootNameLookup = src._rootNameLookup;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
                                    "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:copy()Lcom/fasterxml/jackson/databind/ser/DefaultSerializerProvider;",
                                    "method_body": "public DefaultSerializerProvider copy() {\nreturn new XmlSerializerProvider(this);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:createInstance(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)Lcom/fasterxml/jackson/databind/ser/DefaultSerializerProvider;",
                                    "method_body": "public DefaultSerializerProvider createInstance(SerializationConfig config,\nreturn new XmlSerializerProvider(this, config, jsf);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:serializeValue(Lcom/fasterxml/jackson/core/JsonGenerator;Ljava/lang/Object;)V",
                                    "method_body": "public void serializeValue(JsonGenerator gen, Object value) throws IOException\nif (value == null) {\nfinal Class<?> cls = value.getClass();\nfinal ToXmlGenerator xgen = _asXmlGenerator(gen);\nif (xgen == null) { // called by convertValue()\nQName rootName = _rootNameFromConfig();\nif (rootName == null) {\nrootName = _rootNameLookup.findRootName(cls, _config);\n_initWithRootName(xgen, rootName);\nasArray = TypeUtil.isIndexedType(cls);\nif (asArray) {\nfinal JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\nser.serialize(value, gen, this);\n}\nif (asArray) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_initWithRootName(Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;Ljavax/xml/namespace/QName;)V",
                                    "method_body": "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\nif (!xgen.setNextNameIfMissing(rootName)) {\nxgen.initGenerator();\nString ns = rootName.getNamespaceURI();\nif (ns != null && ns.length() > 0) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_rootNameFromConfig()Ljavax/xml/namespace/QName;",
                                    "method_body": "protected QName _rootNameFromConfig()\nPropertyName name = _config.getFullRootName();\nif (name == null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_asXmlGenerator(Lcom/fasterxml/jackson/core/JsonGenerator;)Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;",
                                    "method_body": "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen)\nif (!(gen instanceof ToXmlGenerator)) {\nreturn (ToXmlGenerator) gen;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:<init>()V",
                                    "method_body": "public XmlRootNameLookup() { }\npublic XmlRootNameLookup() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:findRootName(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/cfg/MapperConfig;)Ljavax/xml/namespace/QName;",
                                    "method_body": "public QName findRootName(Class<?> rootType, MapperConfig<?> config)\nClassKey key = new ClassKey(rootType);\nsynchronized (_rootNames) {\nname = _rootNames.get(key);\n}\nif (name != null) {\nreturn name;\nname = _findRootName(rootType, config);\nsynchronized (_rootNames) {\n_rootNames.put(key, name);\n}\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:_findRootName(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/cfg/MapperConfig;)Ljavax/xml/namespace/QName;",
                                    "method_body": "protected QName _findRootName(Class<?> rootType, MapperConfig<?> config)\nBeanDescription beanDesc = config.introspectClassAnnotations(rootType);\nAnnotationIntrospector intr = config.getAnnotationIntrospector();\nAnnotatedClass ac = beanDesc.getClassInfo();\nString localName = null;\nString ns = null;\nPropertyName root = intr.findRootName(ac);\nif (root != null) {\nlocalName = root.getSimpleName();\nns = root.getNamespace();\nif (localName == null || localName.length() == 0) {\nif (ns == null || ns.length() == 0) {\nns = findNamespace(intr, ac);\nif (ns == null) { // some QName impls barf on nulls...\nns = \"\";\nreturn new QName(ns, localName);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup:findNamespace(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedClass;)Ljava/lang/String;",
                                    "method_body": "private String findNamespace(AnnotationIntrospector ai, AnnotatedClass ann)\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nString ns = ((XmlAnnotationIntrospector) intr).findNamespace(ann);\nif (ns != null) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:<init>()V",
                                    "method_body": "public XmlBeanSerializerModifier() { }\npublic XmlBeanSerializerModifier() { }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:changeProperties(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Ljava/util/List;)Ljava/util/List;",
                                    "method_body": "public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\nfinal AnnotationIntrospector intr = config.getAnnotationIntrospector();\nfor (int i = 0, len = beanProperties.size(); i < len; ++i) {\nBeanPropertyWriter bpw = beanProperties.get(i);\nfinal AnnotatedMember member = bpw.getMember();\nString ns = AnnotationUtil.findNamespaceAnnotation(intr, member);\nBoolean isAttribute = AnnotationUtil.findIsAttributeAnnotation(intr, member);\nBoolean isText = AnnotationUtil.findIsTextAnnotation(intr, member);\nBoolean isCData = AnnotationUtil.findIsCDataAnnotation(intr, member);\nbpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO,\nif (!TypeUtil.isIndexedType(bpw.getType())) {\ncontinue;\nreturn beanProperties;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier:modifySerializer(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/BeanDescription;Lcom/fasterxml/jackson/databind/JsonSerializer;)Lcom/fasterxml/jackson/databind/JsonSerializer;",
                                    "method_body": "public JsonSerializer<?> modifySerializer(SerializationConfig config,\nif (!(serializer instanceof BeanSerializerBase)) {\nreturn serializer;\nreturn new XmlBeanSerializer((BeanSerializerBase) serializer);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier:<init>(Ljava/lang/String;)V",
                                    "method_body": "public XmlBeanDeserializerModifier(String nameForTextValue)\n{\n_cfgNameForTextValue = nameForTextValue;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:<init>(Z)V",
                                    "method_body": "public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n_cfgDefaultUseWrapper = defaultUseWrapper;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findWrapperName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findWrapperName(Annotated ann)\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\nif (w != null) {\nif (_cfgDefaultUseWrapper) {\nreturn PropertyName.USE_DEFAULT;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findRootName(Lcom/fasterxml/jackson/databind/introspect/AnnotatedClass;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findRootName(AnnotatedClass ac)\nJacksonXmlRootElement root = ac.getAnnotation(JacksonXmlRootElement.class);\nif (root != null) {\nString local = root.localName();\nString ns = root.namespace();\nif (local.length() == 0 && ns.length() == 0) {\nreturn new PropertyName(local, ns);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNamespace(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/String;",
                                    "method_body": "public String findNamespace(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsAttribute(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsAttribute(Annotated ann)\nJacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsText(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsText(Annotated ann)\nJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:isOutputAsCData(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Ljava/lang/Boolean;",
                                    "method_body": "public Boolean isOutputAsCData(Annotated ann) {\nJacksonXmlCData prop = ann.getAnnotation(JacksonXmlCData.class);\nif (prop != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:findNameForSerialization(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "public PropertyName findNameForSerialization(Annotated a)\nPropertyName name = _findXmlName(a);\nif (name == null) {\nname = super.findNameForSerialization(a);\nif (name == null) {\nif (a.hasAnnotation(JacksonXmlText.class)) {\nreturn name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector:_findXmlName(Lcom/fasterxml/jackson/databind/introspect/Annotated;)Lcom/fasterxml/jackson/databind/PropertyName;",
                                    "method_body": "protected PropertyName _findXmlName(Annotated a)\nJacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\nif (pann != null) {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findNamespaceAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/String;",
                                    "method_body": "public static String findNamespaceAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nString ns = ((XmlAnnotationIntrospector) intr).findNamespace(prop);\nif (ns != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsAttributeAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsTextAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsTextAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsText(prop);\nif (b != null) {\n} else  if (intr instanceof JaxbAnnotationIntrospector) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil:findIsCDataAnnotation(Lcom/fasterxml/jackson/databind/AnnotationIntrospector;Lcom/fasterxml/jackson/databind/introspect/AnnotatedMember;)Ljava/lang/Boolean;",
                                    "method_body": "public static Boolean findIsCDataAnnotation(AnnotationIntrospector ai,\nfor (AnnotationIntrospector intr : ai.allIntrospectors()) {\nif (intr instanceof XmlAnnotationIntrospector) {\nBoolean b = ((XmlAnnotationIntrospector) intr).isOutputAsCData(prop);\nif (b != null) {\n}\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Lcom/fasterxml/jackson/databind/JavaType;)Z",
                                    "method_body": "public static boolean isIndexedType(JavaType type)\nif (type.isContainerType()) {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.TypeUtil:isIndexedType(Ljava/lang/Class;)Z",
                                    "method_body": "public static boolean isIndexedType(Class<?> cls)\nreturn (cls.isArray() && cls != byte[].class && cls != char[].class)\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:<init>(Lcom/fasterxml/jackson/core/io/IOContext;IILcom/fasterxml/jackson/core/ObjectCodec;Ljavax/xml/stream/XMLStreamWriter;)V",
                                    "method_body": "public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\nsuper(stdFeatures, codec);\n_formatFeatures = xmlFeatures;\n_ioContext = ctxt;\n_originalXmlWriter = sw;\n_xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n_stax2Emulation = (_xmlWriter != sw);\n_xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:initGenerator()V",
                                    "method_body": "public void initGenerator()  throws IOException\nif (_initialized) {\n_initialized = true;\nif (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {\n} else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextIsAttribute(Z)V",
                                    "method_body": "public void setNextIsAttribute(boolean isAttribute)\n_nextIsAttribute = isAttribute;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextName(Ljavax/xml/namespace/QName;)V",
                                    "method_body": "public final void setNextName(QName name)\n_nextName = name;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:setNextNameIfMissing(Ljavax/xml/namespace/QName;)Z",
                                    "method_body": "public final boolean setNextNameIfMissing(QName name)\nif (_nextName == null) {\n_nextName = name;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeFieldName(Ljava/lang/String;)V",
                                    "method_body": "public final void writeFieldName(String name) throws IOException\nif (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {\nString ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\nsetNextName(new QName(ns, name));\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeStartObject()V",
                                    "method_body": "public final void writeStartObject() throws IOException\n_verifyValueWrite(\"start an object\");\n_writeContext = _writeContext.createChildObjectContext();\nif (_cfgPrettyPrinter != null) {\n_handleStartObject();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeEndObject()V",
                                    "method_body": "public final void writeEndObject() throws IOException\nif (!_writeContext.inObject()) {\n_writeContext = _writeContext.getParent();\nif (_cfgPrettyPrinter != null) {\n_handleEndObject();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_handleStartObject()V",
                                    "method_body": "public final void _handleStartObject() throws IOException\nif (_nextName == null) {\n_elementNameStack.addLast(_nextName);\n_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_handleEndObject()V",
                                    "method_body": "public final void _handleEndObject() throws IOException\nif (_elementNameStack.isEmpty()) {\n_nextName = _elementNameStack.removeLast();\n_nextIsAttribute = false;\n_xmlWriter.writeEndElement();\nif (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeFieldName(Lcom/fasterxml/jackson/core/SerializableString;)V",
                                    "method_body": "public void writeFieldName(SerializableString name) throws IOException\nwriteFieldName(name.getValue());\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:writeNumber(I)V",
                                    "method_body": "public void writeNumber(int i) throws IOException\n_verifyValueWrite(\"write number\");\nif (_nextName == null) {\nif (_nextIsAttribute) {\n} else if (checkNextIsUnwrapped()) {\nif (_xmlPrettyPrinter != null) {\n_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n_xmlWriter.writeInt(i);\n_xmlWriter.writeEndElement();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:_verifyValueWrite(Ljava/lang/String;)V",
                                    "method_body": "protected final void _verifyValueWrite(String typeMsg) throws IOException\nint status = _writeContext.writeValue();\nif (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:close()V",
                                    "method_body": "public void close() throws IOException\nsuper.close();\nif (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\nJsonStreamContext ctxt = _writeContext;\nif (ctxt.inArray()) {\n} else if (ctxt.inObject()) {\n}\nif (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n_xmlWriter.closeCompletely();\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator:checkNextIsUnwrapped()Z",
                                    "method_body": "protected boolean checkNextIsUnwrapped()\nif (_nextIsUnwrapped) {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
                                    "method_body": "public XmlBeanSerializerBase(BeanSerializerBase src)\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:<clinit>()V",
                                    "method_body": "public final static String KEY_XML_INFO = new String(\"xmlInfo\");\nsuper(src);\nint attrCount = 0;\nfor (BeanPropertyWriter bpw : _props) {\nif (_isAttribute(bpw)) { // Yup: let's build re-ordered list then\n_attributeCount = attrCount;\nBitSet cdata = null;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nif (_isCData(bpw)) {\n_cdata = cdata;\n_xmlNames = new QName[_props.length];\nint textIndex = -1;\nfor (int i = 0, len = _props.length; i < len; ++i) {\nBeanPropertyWriter bpw = _props[i];\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nString ns = null;\nif (info != null) {\nns = info.getNamespace();\nif (textIndex < 0 && info.isText()) {\n_xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n_textPropertyIndex = textIndex;\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:serializeFields(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
                                    "method_body": "protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\nif (!(gen0 instanceof ToXmlGenerator)) {\nfinal ToXmlGenerator xgen = (ToXmlGenerator) gen0;\nif (_filteredProps != null && provider.getActiveView() != null) {\nprops = _props;\nfinal int attrCount = _attributeCount;\nfinal boolean isAttribute = xgen._nextIsAttribute;\nif (attrCount > 0) {\nfinal int textIndex = _textPropertyIndex;\nfinal QName[] xmlNames = _xmlNames;\nint i = 0;\nfinal BitSet cdata = _cdata;\nfor (final int len = props.length; i < len; ++i) {\nif (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\nxgen.setNextIsAttribute(false);\nif (i == textIndex) {\nxgen.setNextName(xmlNames[i]);\nBeanPropertyWriter prop = props[i];\nif (prop != null) { // can have nulls in filtered list\nif ((cdata != null) && cdata.get(i)) {\nprop.serializeAsField(bean, xgen, provider);\nif (i == textIndex) {\nif (_anyGetterWriter != null) {\n}\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isAttribute(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
                                    "method_body": "protected static boolean _isAttribute(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isAttribute();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase:_isCData(Lcom/fasterxml/jackson/databind/ser/BeanPropertyWriter;)Z",
                                    "method_body": "protected static boolean _isCData(BeanPropertyWriter bpw)\nXmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\nreturn (info != null) && info.isCData();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:<init>(Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V",
                                    "method_body": "public XmlInfo(Boolean isAttribute, String ns, Boolean isText, Boolean isCData)\n{\n_isAttribute = (isAttribute == null) ? false : isAttribute.booleanValue();\n_namespace = (ns == null) ? \"\" : ns;\n_isText = (isText == null) ? false : isText.booleanValue();\n_isCData = (isCData == null) ? false : isCData.booleanValue();\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:getNamespace()Ljava/lang/String;",
                                    "method_body": "public String getNamespace() { return _namespace; }\npublic String getNamespace() { return _namespace; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isAttribute()Z",
                                    "method_body": "public boolean isAttribute() { return _isAttribute; }\npublic boolean isAttribute() { return _isAttribute; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isText()Z",
                                    "method_body": "public boolean isText() { return _isText; }\npublic boolean isText() { return _isText; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.util.XmlInfo:isCData()Z",
                                    "method_body": "public boolean isCData() { return _isCData; }\npublic boolean isCData() { return _isCData; }"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:<init>(Lcom/fasterxml/jackson/databind/ser/std/BeanSerializerBase;)V",
                                    "method_body": "public XmlBeanSerializer(BeanSerializerBase src) {\nsuper(src);\n}"
                                },
                                {
                                    "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer:serialize(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V",
                                    "method_body": "public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException\nif (_objectIdWriter != null) {\ng.writeStartObject();\nif (_propertyFilterId != null) {\nserializeFields(bean, g, provider);\ng.writeEndObject();\n}"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}