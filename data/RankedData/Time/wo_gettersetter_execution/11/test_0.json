{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.joda.time.tz.TestCompiler.testDateTimeZoneBuilder",
    "test_body": "88: public void testDateTimeZoneBuilder() throws Exception {\n89: // test multithreading, issue #18\n90: getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n91: final DateTimeZone[] zone = new DateTimeZone[1];\n92: Thread t = new Thread(new Runnable() {\n93: public void run() {\n94: zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n95: }\n96: });\n97: t.start();\n98: t.join();\n99: assertNotNull(zone[0]);\n100: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5546345482340108586L;\npublic static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;)V",
            "method_body": "public ZoneInfoProvider(String resourcePath) throws IOException {\nthis(resourcePath, null, false);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;Ljava/lang/ClassLoader;Z)V",
            "method_body": "private ZoneInfoProvider(String resourcePath,\n{\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
            "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneInfoMap(Ljava/io/InputStream;)Ljava/util/Map;",
            "method_body": "private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {\nMap<String, Object> map = new ConcurrentHashMap<String, Object>();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:readZoneInfoMap(Ljava/io/DataInputStream;Ljava/util/Map;)V",
            "method_body": "private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {\nint size = din.readUnsignedShort();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:<init>()V",
            "method_body": "public DefaultNameProvider() {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:createCache()Ljava/util/HashMap;",
            "method_body": "private HashMap createCache() {\nreturn new HashMap(7);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:<init>()V",
            "method_body": "public DateTimeZoneBuilder() {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
            "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:addCutover(ICIIIZI)Lorg/joda/time/tz/DateTimeZoneBuilder;",
            "method_body": "public DateTimeZoneBuilder addCutover(int year,\nif (iRuleSets.size() > 0) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:addRecurringSavings(Ljava/lang/String;IIICIIIZI)Lorg/joda/time/tz/DateTimeZoneBuilder;",
            "method_body": "public DateTimeZoneBuilder addRecurringSavings(String nameKey, int saveMillis,\nif (fromYear <= toYear) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:toDateTimeZone(Ljava/lang/String;Z)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone toDateTimeZone(String id, boolean outputID) {\nif (id == null) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:addTransition(Ljava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z",
            "method_body": "private boolean addTransition(ArrayList<Transition> transitions, Transition tr) {\nint size = transitions.size();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
            "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
            "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:create(Ljava/lang/String;ZLjava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
            "method_body": "static PrecalculatedZone create(String id, boolean outputID, ArrayList<Transition> transitions,\nint size = transitions.size();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
            "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
            "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
            "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
            "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:rename(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "Recurrence rename(String nameKey) {\nreturn new Recurrence(iOfYear, nameKey, iSaveMillis);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:renameAppend(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "Recurrence renameAppend(String appendNameKey) {\nreturn rename((iNameKey + appendNameKey).intern());\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
            "method_body": "OfYear(char mode,\n{\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
            "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
            "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5472298452022250685L;\ni = Integer.getInteger(\"org.joda.time.tz.CachedDateTimeZone.size\");\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
            "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:<clinit>()V",
            "method_body": "private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:put(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "private static void put(Map<String, DateTimeZone> map, String name, String id) {\nmap.put(name, DateTimeZone.forID(id));\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:currentTimeMillis()J",
            "method_body": "public static final long currentTimeMillis() {\nreturn cMillisProvider.getMillis();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$SystemMillisProvider:<init>()V",
            "method_body": "long getMillis();\nstatic class SystemMillisProvider implements MillisProvider {\nreturn System.currentTimeMillis();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$SystemMillisProvider:getMillis()J",
            "method_body": "long getMillis();\nstatic class SystemMillisProvider implements MillisProvider {\nreturn System.currentTimeMillis();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
            "method_body": "protected AssembledChronology(Chronology base, Object param) {\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
            "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -6212696554273812441L;\nprivate static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 8283225332206808863L;\ncMillisField = MillisDurationField.INSTANCE;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nfields.millis = cMillisField;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:<init>()V",
            "method_body": "private MillisDurationField() {\nsuper();\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 2656707858124633367L;\npublic static final DurationField INSTANCE = new MillisDurationField();\nsuper();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:<init>(Lorg/joda/time/DurationFieldType;J)V",
            "method_body": "public PreciseDurationField(DurationFieldType type, long unitMillis) {\nsuper(type);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:<init>(Ljava/lang/String;)V",
            "method_body": "protected DurationFieldType(String name) {\nsuper();\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 8765135187319L;\nstatic final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(\"eras\", ERAS);\nsuper();\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:halfdays()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType halfdays() {\nreturn HALFDAYS_TYPE;\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weekyears()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weekyears() {\nreturn WEEKYEARS_TYPE;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:centuries()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType centuries() {\nreturn CENTURIES_TYPE;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:<init>(Ljava/lang/String;B)V",
            "method_body": "StandardDurationFieldType(String name, byte ordinal) {\nsuper(name);\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
            "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
            "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeFieldType(String name) {\nsuper();\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -42615285973990L;\nprivate static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(\nsuper();\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:secondOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType secondOfDay() {\nreturn SECOND_OF_DAY_TYPE;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfDay() {\nreturn MINUTE_OF_DAY_TYPE;\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfHalfday()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfHalfday() {\nreturn HOUR_OF_HALFDAY_TYPE;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfHalfday()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfHalfday() {\nreturn CLOCKHOUR_OF_HALFDAY_TYPE;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:halfdayOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType halfdayOfDay() {\nreturn HALFDAY_OF_DAY_TYPE;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfYear() {\nreturn DAY_OF_YEAR_TYPE;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekOfWeekyear() {\nreturn WEEK_OF_WEEKYEAR_TYPE;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekyear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekyear() {\nreturn WEEKYEAR_TYPE;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekyearOfCentury()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekyearOfCentury() {\nreturn WEEKYEAR_OF_CENTURY_TYPE;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:yearOfEra()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType yearOfEra() {\nreturn YEAR_OF_ERA_TYPE;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:yearOfCentury()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType yearOfCentury() {\nreturn YEAR_OF_CENTURY_TYPE;\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:centuryOfEra()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType centuryOfEra() {\nreturn CENTURY_OF_ERA_TYPE;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:<init>(Ljava/lang/String;BLorg/joda/time/DurationFieldType;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "StandardDateTimeFieldType(String name, byte ordinal,\nsuper(name);\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "protected DecoratedDateTimeField(DateTimeField field, DateTimeFieldType type) {\nsuper(type);\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "public ZeroIsMaxDateTimeField(DateTimeField field, DateTimeFieldType type) {\nsuper(field, type);\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology$HalfdayField:<init>()V",
            "method_body": "HalfdayField() {\nsuper(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 538276888268L;\nprivate static final int[] MIN_DAYS_PER_MONTH_ARRAY = {\n};",
            "method_id": 142
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -861407383323710522L;\nprivate static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase() == null) {\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
            "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:<init>()V",
            "method_body": "Fields() {\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
            "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;J)V",
            "method_body": "public ImpreciseDateTimeField(DateTimeFieldType type, long unitMillis) {\nsuper(type);\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "BasicYearDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:<init>(Lorg/joda/time/field/ImpreciseDateTimeField;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "LinkedDurationField(DurationFieldType type) {\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.joda.time.chrono.GJYearOfEraDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {\nsuper(yearField, DateTimeFieldType.yearOfEra());\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;I)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, int offset) {\nthis(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset) {\nthis(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset,\nsuper(field, type);\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public DividedDateTimeField(DateTimeField field,\nsuper(field, type);\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "public DecoratedDurationField(DurationField field, DurationFieldType type) {\nsuper(type);\n}",
            "method_id": 159
        },
        {
            "method_signature": "org.joda.time.field.ScaledDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;I)V",
            "method_body": "public ScaledDurationField(DurationField field, DurationFieldType type, int scalar) {\nsuper(field, type);\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public RemainderDateTimeField(DateTimeField field,\nsuper(field, type);\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/field/DividedDateTimeField;)V",
            "method_body": "public RemainderDateTimeField(DividedDateTimeField dividedField) {\nthis(dividedField, dividedField.getType());\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {\nsuper(dividedField.getWrappedField(), type);\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJEraDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.era());\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfWeek(), days);\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfMonth(), days);\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfYear(), days);\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;I)V",
            "method_body": "BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {\nsuper(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int months) {\nif (months == 0) {\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.joda.time.chrono.GJMonthOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJMonthOfYearDateTimeField(BasicChronology chronology) {\nsuper(chronology, 2);\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "BasicWeekyearDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {\nsuper(DateTimeFieldType.weekOfWeekyear(), weeks);\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "private UnsupportedDurationField(DurationFieldType type) {\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:<init>()V",
            "method_body": "private ISOYearOfEraDateTimeField() {\nsuper(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 7037524068969447317L;\nstatic final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();\nsuper(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
            "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
            "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
            "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
            "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n}",
            "method_id": 179
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 180
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
            "method_body": "YearInfo(int year, long firstDayMillis) {\n}",
            "method_id": 181
        },
        {
            "method_signature": "org.joda.time.PeriodType:<init>(Ljava/lang/String;[Lorg/joda/time/DurationFieldType;[I)V",
            "method_body": "protected PeriodType(String name, DurationFieldType[] types, int[] indices) {\nsuper();\n}",
            "method_id": 182
        },
        {
            "method_signature": "org.joda.time.PeriodType:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 2274324892792009998L;\nprivate static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);\nPeriodType type = cStandard;\n}",
            "method_id": 183
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\n}",
            "method_id": 184
        },
        {
            "method_signature": "org.joda.time.PeriodType:yearMonthDay()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType yearMonthDay() {\nPeriodType type = cYMD;\n}",
            "method_id": 185
        },
        {
            "method_signature": "org.joda.time.PeriodType:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 186
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 187
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
            "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
            "method_id": 188
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JJLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) {\nsuper();\n}",
            "method_id": 189
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\n}",
            "method_id": 190
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -2110953284060001145L;\nprivate static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {\n};",
            "method_id": 191
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
            "method_id": 192
        },
        {
            "method_signature": "org.joda.time.Period:<init>()V",
            "method_body": "public Period() {\nsuper(0L, null, null);\n}",
            "method_id": 193
        },
        {
            "method_signature": "org.joda.time.Period:<init>(JJLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) {\nsuper(startInstant, endInstant, type, chrono);\n}",
            "method_id": 194
        },
        {
            "method_signature": "org.joda.time.Period:<clinit>()V",
            "method_body": "public static final Period ZERO = new Period();\n* Parses a {@code Period} from the specified string.",
            "method_id": 195
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:<init>()V",
            "method_body": "RuleSet() {\n}",
            "method_id": 196
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;)V",
            "method_body": "RuleSet(RuleSet rs) {\n}",
            "method_id": 197
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:<clinit>()V",
            "method_body": "private static final int YEAR_LIMIT;\nlong now = DateTimeUtils.currentTimeMillis();\n}",
            "method_id": 198
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:addRule(Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;)V",
            "method_body": "public void addRule(Rule rule) {\nif (!iRules.contains(rule)) {\n}",
            "method_id": 199
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:firstTransition(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;",
            "method_body": "public Transition firstTransition(final long firstMillis) {\nif (iInitialNameKey != null) {\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:nextTransition(JI)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;",
            "method_body": "public Transition nextTransition(final long instant, final int saveMillis) {\nChronology chrono = ISOChronology.getInstanceUTC();\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$RuleSet:buildTailZone(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
            "method_body": "public DSTZone buildTailZone(String id) {\nif (iRules.size() == 2) {\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Rule:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;II)V",
            "method_body": "Rule(Recurrence recurrence, int fromYear, int toYear) {\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Rule:next(JII)J",
            "method_body": "public long next(final long instant, int standardOffset, int saveMillis) {\nChronology chrono = ISOChronology.getInstanceUTC();\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Transition:<init>(JLorg/joda/time/tz/DateTimeZoneBuilder$Rule;I)V",
            "method_body": "Transition(long millis, Rule rule, int standardOffset) {\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoCompiler:<clinit>()V",
            "method_body": "static DateTimeOfYear cStartOfYear;\nstatic ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoCompiler:verbose()Z",
            "method_body": "public static boolean verbose() {\nreturn cVerbose.get();\n}",
            "method_id": 207
        }
    ]
}