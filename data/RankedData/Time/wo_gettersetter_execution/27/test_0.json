{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
    "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
            "method_body": "static String createErrorMessage(final String text, final int errorPos) {\nint sampleLen = errorPos + 32;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
            "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:<init>()V",
            "method_body": "public PeriodFormatterBuilder() {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter()Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "public PeriodFormatter toFormatter() {\nPeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clear()V",
            "method_body": "public void clear() {\niMinPrintedDigits = 1;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append(Lorg/joda/time/format/PeriodFormatter;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder append(PeriodFormatter formatter) {\nif (formatter == null) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendLiteral(String text) {\nif (text == null) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendYears()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendYears() {\nappendField(YEARS);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMonths()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendMonths() {\nappendField(MONTHS);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendWeeks()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendWeeks() {\nappendField(WEEKS);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendDays()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendDays() {\nappendField(DAYS);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendHours()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendHours() {\nappendField(HOURS);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMinutes()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendMinutes() {\nappendField(MINUTES);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSecondsWithOptionalMillis()Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\nappendField(SECONDS_OPTIONAL_MILLIS);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(I)V",
            "method_body": "private void appendField(int type) {\nappendField(type, iMinPrintedDigits);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(II)V",
            "method_body": "private void appendField(int type, int minPrinted) {\nFieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSuffix(String text) {\nif (text == null) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\nif (iElementPairs.size() > 0) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparatorIfFieldsAfter(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\nreturn appendSeparator(text, text, null, false, true);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparator(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\nif (text == null || finalText == null) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clearPrefix()V",
            "method_body": "private void clearPrefix() throws IllegalStateException {\nif (iPrefix != null) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append0(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder;",
            "method_body": "private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\niElementPairs.add(printer);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter(Ljava/util/List;ZZ)Lorg/joda/time/format/PeriodFormatter;",
            "method_body": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\nif (notPrinter && notParser) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder:createComposite(Ljava/util/List;)[Ljava/lang/Object;",
            "method_body": "private static Object[] createComposite(List<Object> elementPairs) {\nswitch (elementPairs.size()) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:<init>(Ljava/lang/String;)V",
            "method_body": "Literal(String text) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nif (periodStr.regionMatches(true, position, iText, 0, iText.length())) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(IIIZI[Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
            "method_body": "FieldFormatter(int minPrintedDigits, int printZeroSetting,\nPeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
            "method_body": "FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nboolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInt(Ljava/lang/String;II)I",
            "method_body": "private int parseInt(String text, int position, int length) {\nif (length >= 10) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:<init>(Ljava/lang/String;)V",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\nString text = iText;\nString text = iText;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:parse(Ljava/lang/String;I)I",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\nString text = iText;\nString text = iText;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:scan(Ljava/lang/String;I)I",
            "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\nString text = iText;\nString text = iText;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
            "method_body": "Composite(List<Object> elementPairs) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nPeriodParser[] parsers = iParsers;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
            "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:<init>(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;ZZ)V",
            "method_body": "Separator(String text, String finalText, String[] variants,\nboolean useBefore, boolean useAfter) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
            "method_body": "public int parseInto(\nint oldPos = position;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:finish(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder$Separator;",
            "method_body": "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\niAfterPrinter = afterPrinter;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:<init>(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)V",
            "method_body": "public PeriodFormatter(\nsuper();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:parsePeriod(Ljava/lang/String;)Lorg/joda/time/Period;",
            "method_body": "public Period parsePeriod(String text) {\ncheckParser();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:parseMutablePeriod(Ljava/lang/String;)Lorg/joda/time/MutablePeriod;",
            "method_body": "public MutablePeriod parseMutablePeriod(String text) {\ncheckParser();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.format.PeriodFormatter:checkParser()V",
            "method_body": "private void checkParser() {\nif (iParser == null) {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
            "method_body": "protected AbstractPeriod() {\nsuper();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.base.AbstractPeriod:toPeriod()Lorg/joda/time/Period;",
            "method_body": "public Period toPeriod() {\nreturn new Period(this);\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "protected BasePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
            "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:size()I",
            "method_body": "public int size() {\nreturn iType.size();\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
            "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.Period:<init>(Ljava/lang/Object;)V",
            "method_body": "public Period(Object period) {\nsuper(period, null, null);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
            "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.PeriodType:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
            "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(JLorg/joda/time/PeriodType;)V",
            "method_body": "public MutablePeriod(long duration, PeriodType type) {\nsuper(duration, type, null);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.MutablePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
            "method_body": "public MutablePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper(period, type, chrono);\n}",
            "method_id": 61
        }
    ]
}