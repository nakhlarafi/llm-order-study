{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith3",
    "test_body": "360: public void testWith3() {\n361: Partial test = createHourMinPartial();\n362: try {\n363: test.with(DateTimeFieldType.clockhourOfDay(), 6);\n364: fail();\n365: } catch (IllegalArgumentException ex) {}\n366: check(test, 10, 20);\n367: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
            "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V",
            "method_body": "Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\nsuper();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.Partial:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
            "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\n}",
            "method_id": 19
        }
    ]
}