{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange",
    "test_body": "467: public void testWith_baseAndArgHaveNoRange() {\n468: Partial test = new Partial(DateTimeFieldType.year(), 1);\n469: Partial result = test.with(DateTimeFieldType.era(), 1);\n470: assertEquals(2, result.size());\n471: assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n472: assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n473: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
            "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getRangeDurationType() {\nreturn iRangeType;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn iChronology.getMinYear();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn false;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField durationField) {\nreturn 0;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
            "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public Partial(DateTimeFieldType type, int value) {\nthis(type, value, null);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType type, int value, Chronology chronology) {\nsuper();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.Partial:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
            "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\n}",
            "method_id": 43
        }
    ]
}