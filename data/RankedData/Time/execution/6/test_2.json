{
    "bug_id": 6,
    "test_id": 2,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
    "test_body": "96: public void test_plusYears_positiveToZero_crossCutover() {\n97: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n98: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\n99: assertEquals(expected, date.plusYears(-2003));\n100: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
            "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
            "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
            "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
            "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
            "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
            "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
            "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
            "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
            "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
            "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
            "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
            "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
            "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(\nsuper();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
            "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
            "method_body": "protected long gregorianToJulian(long instant) {\nif (iConvertByWeekyear) {\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\n}",
            "method_id": 65
        }
    ]
}