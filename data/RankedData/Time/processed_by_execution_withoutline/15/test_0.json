{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt",
    "test_body": "241: public void testSafeMultiplyLongInt() {\n242: assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n243: 244: assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n245: assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n246: assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n247: 248: assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n249: assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n250: assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n251: assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n252: 253: assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n254: 255: assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n256: assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n257: assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n258: 259: try {\n260: FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n261: fail();\n262: } catch (ArithmeticException e) {\n263: }\n264: 265: try {\n266: FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n267: fail();\n268: } catch (ArithmeticException e) {\n269: }\n270: 271: try {\n272: FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n273: fail();\n274: } catch (ArithmeticException e) {\n275: }\n276: 277: try {\n278: FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n279: fail();\n280: } catch (ArithmeticException e) {\n281: }\n282: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(JI)J",
            "method_body": "public static long safeMultiply(long val1, int val2) {\nswitch (val2) {\n}",
            "method_id": 0
        }
    ]
}