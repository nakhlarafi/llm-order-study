{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n307: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n308: assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n309: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n310: try {\n311: DateTimeZone.forOffsetHoursMinutes(2, 60);\n312: fail();\n313: } catch (IllegalArgumentException ex) {}\n314: try {\n315: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n316: fail();\n317: } catch (IllegalArgumentException ex) {}\n318: try {\n319: DateTimeZone.forOffsetHoursMinutes(2, -1);\n320: fail();\n321: } catch (IllegalArgumentException ex) {}\n322: try {\n323: DateTimeZone.forOffsetHoursMinutes(-2, -1);\n324: fail();\n325: } catch (IllegalArgumentException ex) {}\n326: try {\n327: DateTimeZone.forOffsetHoursMinutes(24, 0);\n328: fail();\n329: } catch (IllegalArgumentException ex) {}\n330: try {\n331: DateTimeZone.forOffsetHoursMinutes(-24, 0);\n332: fail();\n333: } catch (IllegalArgumentException ex) {}\n334: }        \n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5546345482340108586L;\npublic static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
            "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setProvider0(Lorg/joda/time/tz/Provider;)V",
            "method_body": "private static void setProvider0(Provider provider) {\nif (provider == null) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefaultProvider()Lorg/joda/time/tz/Provider;",
            "method_body": "private static Provider getDefaultProvider() {\nProvider provider = null;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setNameProvider0(Lorg/joda/time/tz/NameProvider;)V",
            "method_body": "private static void setNameProvider0(NameProvider nameProvider) {\nif (nameProvider == null) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefaultNameProvider()Lorg/joda/time/tz/NameProvider;",
            "method_body": "private static NameProvider getDefaultNameProvider() {\nNameProvider nameProvider = null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static synchronized String getConvertedId(String id) {\nMap<String, String> map = cZoneIdConversion;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:parseOffset(Ljava/lang/String;)I",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
            "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\nif (cOffsetFormatter == null) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;)V",
            "method_body": "public ZoneInfoProvider(String resourcePath) throws IOException {\nthis(resourcePath, null, false);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;Ljava/lang/ClassLoader;Z)V",
            "method_body": "private ZoneInfoProvider(String resourcePath,\n{\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getAvailableIDs()Ljava/util/Set;",
            "method_body": "public Set<String> getAvailableIDs() {\nreturn new TreeSet<String>(iZoneInfoMap.keySet());\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
            "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneInfoMap(Ljava/io/InputStream;)Ljava/util/Map;",
            "method_body": "private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {\nMap<String, Object> map = new ConcurrentHashMap<String, Object>();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:readZoneInfoMap(Ljava/io/DataInputStream;Ljava/util/Map;)V",
            "method_body": "private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {\nint size = din.readUnsignedShort();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:<init>()V",
            "method_body": "public DefaultNameProvider() {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:createCache()Ljava/util/HashMap;",
            "method_body": "private HashMap createCache() {\nreturn new HashMap(7);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
            "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
            "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
            "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
            "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
            "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
            "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
            "method_body": "OfYear(char mode,\n{\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
            "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5472298452022250685L;\ni = Integer.getInteger(\"org.joda.time.tz.CachedDateTimeZone.size\");\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
            "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:<clinit>()V",
            "method_body": "private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:put(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "private static void put(Map<String, DateTimeZone> map, String name, String id) {\nmap.put(name, DateTimeZone.forID(id));\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$SystemMillisProvider:<init>()V",
            "method_body": "long getMillis();\nstatic class SystemMillisProvider implements MillisProvider {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
            "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
            "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
            "method_body": "public DateTimeFormatterBuilder() {\nsuper();\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendTimeZoneOffset(Ljava/lang/String;ZII)Lorg/joda/time/format/DateTimeFormatterBuilder;",
            "method_body": "public DateTimeFormatterBuilder appendTimeZoneOffset(\nreturn append0(new TimeZoneOffset\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
            "method_body": "private Object getFormatter() {\nObject f = iFormatter;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
            "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
            "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
            "method_body": "public DateTimeFormatter(\nsuper();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
            "method_body": "private DateTimeFormatter(\nsuper();\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
            "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:<init>(Ljava/lang/String;Ljava/lang/String;ZII)V",
            "method_body": "TimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText,\nsuper();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
            "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
            "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
            "method_body": "public void setOffset(Integer offset) {\niSavedState = null;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
            "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
            "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:<clinit>()V",
            "method_body": "private static final double LOG_10 = Math.log(10);\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
            "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
            "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\n}",
            "method_id": 75
        }
    ]
}