{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray",
    "test_body": "260: public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n261: int[] values = new int[] {1, 1, 1};\n262: DateTimeFieldType[] types = new DateTimeFieldType[] {\n263: DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n264: try {\n265: new Partial(types, values);\n266: fail();\n267: } catch (IllegalArgumentException ex) {\n268: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n269: }\n270: 271: types = new DateTimeFieldType[] {\n272: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n273: try {\n274: new Partial(types, values);\n275: fail();\n276: } catch (IllegalArgumentException ex) {\n277: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n278: }\n279: 280: types = new DateTimeFieldType[] {\n281: DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n282: try {\n283: new Partial(types, values);\n284: fail();\n285: } catch (IllegalArgumentException ex) {\n286: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n287: }\n288: 289: types = new DateTimeFieldType[] {\n290: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n291: try {\n292: new Partial(types, values);\n293: fail();\n294: } catch (IllegalArgumentException ex) {\n295: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n296: }\n297: 298: types = new DateTimeFieldType[] {\n299: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n300: try {\n301: new Partial(types, values);\n302: fail();\n303: } catch (IllegalArgumentException ex) {\n304: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n305: }\n306: 307: types = new DateTimeFieldType[] {\n308: DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n309: try {\n310: new Partial(types, values);\n311: fail();\n312: } catch (IllegalArgumentException ex) {\n313: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n314: }\n315: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5546345482340108586L;\npublic static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setProvider0(Lorg/joda/time/tz/Provider;)V",
            "method_body": "private static void setProvider0(Provider provider) {\nif (provider == null) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefaultProvider()Lorg/joda/time/tz/Provider;",
            "method_body": "private static Provider getDefaultProvider() {\nProvider provider = null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setNameProvider0(Lorg/joda/time/tz/NameProvider;)V",
            "method_body": "private static void setNameProvider0(NameProvider nameProvider) {\nif (nameProvider == null) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefaultNameProvider()Lorg/joda/time/tz/NameProvider;",
            "method_body": "private static NameProvider getDefaultNameProvider() {\nNameProvider nameProvider = null;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static synchronized String getConvertedId(String id) {\nMap<String, String> map = cZoneIdConversion;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
            "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;)V",
            "method_body": "public ZoneInfoProvider(String resourcePath) throws IOException {\nthis(resourcePath, null, false);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:<init>(Ljava/lang/String;Ljava/lang/ClassLoader;Z)V",
            "method_body": "private ZoneInfoProvider(String resourcePath,\n{\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getAvailableIDs()Ljava/util/Set;",
            "method_body": "public Set<String> getAvailableIDs() {\nreturn new TreeSet<String>(iZoneInfoMap.keySet());\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
            "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneInfoMap(Ljava/io/InputStream;)Ljava/util/Map;",
            "method_body": "private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {\nMap<String, Object> map = new ConcurrentHashMap<String, Object>();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:readZoneInfoMap(Ljava/io/DataInputStream;Ljava/util/Map;)V",
            "method_body": "private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {\nint size = din.readUnsignedShort();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:<init>()V",
            "method_body": "public DefaultNameProvider() {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.joda.time.tz.DefaultNameProvider:createCache()Ljava/util/HashMap;",
            "method_body": "private HashMap createCache() {\nreturn new HashMap(7);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
            "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
            "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
            "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
            "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
            "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
            "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
            "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
            "method_body": "OfYear(char mode,\n{\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
            "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 5472298452022250685L;\ni = Integer.getInteger(\"org.joda.time.tz.CachedDateTimeZone.size\");\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
            "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
            "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:<clinit>()V",
            "method_body": "private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:put(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "private static void put(Map<String, DateTimeZone> map, String name, String id) {\nmap.put(name, DateTimeZone.forID(id));\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
            "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
            "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
            "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$SystemMillisProvider:<init>()V",
            "method_body": "long getMillis();\nstatic class SystemMillisProvider implements MillisProvider {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
            "method_body": "FixedMillisProvider(long fixedMillis) {\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
            "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
            "method_body": "protected AssembledChronology(Chronology base, Object param) {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField days() {\nreturn iDays;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
            "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
            "method_body": "private void setFields() {\nFields fields = new Fields();\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
            "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -6212696554273812441L;\nprivate static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
            "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param);\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 8283225332206808863L;\ncMillisField = MillisDurationField.INSTANCE;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nfields.millis = cMillisField;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:<init>()V",
            "method_body": "private MillisDurationField() {\nsuper();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 2656707858124633367L;\npublic static final DurationField INSTANCE = new MillisDurationField();\nsuper();\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn true;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn 1;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (int) getUnitMillis();\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:<init>(Lorg/joda/time/DurationFieldType;J)V",
            "method_body": "public PreciseDurationField(DurationFieldType type, long unitMillis) {\nsuper(type);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
            "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
            "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:<init>(Ljava/lang/String;)V",
            "method_body": "protected DurationFieldType(String name) {\nsuper();\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 8765135187319L;\nstatic final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(\"eras\", ERAS);\nsuper();\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:halfdays()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType halfdays() {\nreturn HALFDAYS_TYPE;\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:weekyears()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType weekyears() {\nreturn WEEKYEARS_TYPE;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:centuries()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType centuries() {\nreturn CENTURIES_TYPE;\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
            "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:<init>(Ljava/lang/String;B)V",
            "method_body": "StandardDurationFieldType(String name, byte ordinal) {\nsuper(name);\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
            "method_body": "public final boolean isSupported() {\nreturn true;\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
            "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
            "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
            "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeFieldType(String name) {\nsuper();\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -42615285973990L;\nprivate static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(\nsuper();\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:secondOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType secondOfDay() {\nreturn SECOND_OF_DAY_TYPE;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:minuteOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType minuteOfDay() {\nreturn MINUTE_OF_DAY_TYPE;\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
            "method_id": 159
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:hourOfHalfday()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType hourOfHalfday() {\nreturn HOUR_OF_HALFDAY_TYPE;\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfHalfday()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType clockhourOfHalfday() {\nreturn CLOCKHOUR_OF_HALFDAY_TYPE;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:halfdayOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType halfdayOfDay() {\nreturn HALFDAY_OF_DAY_TYPE;\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfYear() {\nreturn DAY_OF_YEAR_TYPE;\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekOfWeekyear() {\nreturn WEEK_OF_WEEKYEAR_TYPE;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekyear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekyear() {\nreturn WEEKYEAR_TYPE;\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:weekyearOfCentury()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType weekyearOfCentury() {\nreturn WEEKYEAR_OF_CENTURY_TYPE;\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 170
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:yearOfEra()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType yearOfEra() {\nreturn YEAR_OF_ERA_TYPE;\n}",
            "method_id": 171
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:yearOfCentury()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType yearOfCentury() {\nreturn YEAR_OF_CENTURY_TYPE;\n}",
            "method_id": 172
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:centuryOfEra()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType centuryOfEra() {\nreturn CENTURY_OF_ERA_TYPE;\n}",
            "method_id": 173
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
            "method_id": 174
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 175
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:<init>(Ljava/lang/String;BLorg/joda/time/DurationFieldType;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "StandardDateTimeFieldType(String name, byte ordinal,\nsuper(name);\n}",
            "method_id": 176
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
            "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
            "method_id": 177
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\n}",
            "method_id": 178
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "protected DecoratedDateTimeField(DateTimeField field, DateTimeFieldType type) {\nsuper(type);\n}",
            "method_id": 179
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
            "method_id": 180
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}",
            "method_id": 181
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
            "method_id": 182
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "public ZeroIsMaxDateTimeField(DateTimeField field, DateTimeFieldType type) {\nsuper(field, type);\n}",
            "method_id": 183
        },
        {
            "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
            "method_id": 184
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology$HalfdayField:<init>()V",
            "method_body": "HalfdayField() {\nsuper(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);\n}",
            "method_id": 185
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}",
            "method_id": 186
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 538276888268L;\nprivate static final int[] MIN_DAYS_PER_MONTH_ARRAY = {\n};",
            "method_id": 187
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
            "method_body": "private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}",
            "method_id": 188
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -861407383323710522L;\nprivate static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();\n}",
            "method_id": 189
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getInstanceUTC()Lorg/joda/time/chrono/GregorianChronology;",
            "method_body": "public static GregorianChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 190
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;",
            "method_body": "public static GregorianChronology getInstance(DateTimeZone zone) {\nreturn getInstance(zone, 4);\n}",
            "method_id": 191
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
            "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\n}",
            "method_id": 192
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
            "method_id": 193
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nif (getBase() == null) {\n}",
            "method_id": 194
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 195
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 196
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYear()J",
            "method_body": "long getAverageMillisPerYear() {\nreturn MILLIS_PER_YEAR;\n}",
            "method_id": 197
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerMonth()J",
            "method_body": "long getAverageMillisPerMonth() {\nreturn MILLIS_PER_MONTH;\n}",
            "method_id": 198
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:<init>()V",
            "method_body": "Fields() {\n}",
            "method_id": 199
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
            "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
            "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
            "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;J)V",
            "method_body": "public ImpreciseDateTimeField(DateTimeFieldType type, long unitMillis) {\nsuper(type);\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "BasicYearDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
            "method_id": 207
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn iChronology.getMinYear();\n}",
            "method_id": 208
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
            "method_id": 209
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:<init>(Lorg/joda/time/field/ImpreciseDateTimeField;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "LinkedDurationField(DurationFieldType type) {\n}",
            "method_id": 210
        },
        {
            "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 211
        },
        {
            "method_signature": "org.joda.time.chrono.GJYearOfEraDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {\nsuper(yearField, DateTimeFieldType.yearOfEra());\n}",
            "method_id": 212
        },
        {
            "method_signature": "org.joda.time.chrono.GJYearOfEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.eras();\n}",
            "method_id": 213
        },
        {
            "method_signature": "org.joda.time.chrono.GJYearOfEraDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
            "method_id": 214
        },
        {
            "method_signature": "org.joda.time.chrono.GJYearOfEraDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn getWrappedField().getMaximumValue();\n}",
            "method_id": 215
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;I)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, int offset) {\nthis(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n}",
            "method_id": 216
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset) {\nthis(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);\n}",
            "method_id": 217
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public OffsetDateTimeField(DateTimeField field, DateTimeFieldType type, int offset,\nsuper(field, type);\n}",
            "method_id": 218
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
            "method_id": 219
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn iMin;\n}",
            "method_id": 220
        },
        {
            "method_signature": "org.joda.time.field.OffsetDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
            "method_id": 221
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public DividedDateTimeField(DateTimeField field,\nthis(field, field.getRangeDurationField(), type, divisor);\n}",
            "method_id": 222
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public DividedDateTimeField(DateTimeField field, DurationField rangeField,\nsuper(field, type);\n}",
            "method_id": 223
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nif (iRangeDurationField != null) {\n}",
            "method_id": 224
        },
        {
            "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 225
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;)V",
            "method_body": "public DecoratedDurationField(DurationField field, DurationFieldType type) {\nsuper(type);\n}",
            "method_id": 226
        },
        {
            "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}",
            "method_id": 227
        },
        {
            "method_signature": "org.joda.time.field.ScaledDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;I)V",
            "method_body": "public ScaledDurationField(DurationField field, DurationFieldType type, int scalar) {\nsuper(field, type);\n}",
            "method_id": 228
        },
        {
            "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}",
            "method_id": 229
        },
        {
            "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
            "method_body": "public int hashCode() {\nlong scalar = iScalar;\n}",
            "method_id": 230
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;I)V",
            "method_body": "public RemainderDateTimeField(DateTimeField field, DurationField rangeField,\nsuper(field, type);\n}",
            "method_id": 231
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/field/DividedDateTimeField;)V",
            "method_body": "public RemainderDateTimeField(DividedDateTimeField dividedField) {\nthis(dividedField, dividedField.getType());\n}",
            "method_id": 232
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {\nthis(dividedField, dividedField.getWrappedField().getDurationField(), type);\n}",
            "method_id": 233
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:<init>(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;)V",
            "method_body": "public RemainderDateTimeField(DividedDateTimeField dividedField, DurationField durationField, DateTimeFieldType type) {\nsuper(dividedField.getWrappedField(), type);\n}",
            "method_id": 234
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
            "method_id": 235
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
            "method_id": 236
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 237
        },
        {
            "method_signature": "org.joda.time.field.RemainderDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iDivisor - 1;\n}",
            "method_id": 238
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJEraDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.era());\n}",
            "method_id": 239
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
            "method_id": 240
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 241
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.BCE;\n}",
            "method_id": 242
        },
        {
            "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.CE;\n}",
            "method_id": 243
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfWeek(), days);\n}",
            "method_id": 244
        },
        {
            "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}",
            "method_id": 245
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfMonth(), days);\n}",
            "method_id": 246
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
            "method_id": 247
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {\nsuper(DateTimeFieldType.dayOfYear(), days);\n}",
            "method_id": 248
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
            "method_id": 249
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;I)V",
            "method_body": "BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {\nsuper(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n}",
            "method_id": 250
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
            "method_id": 251
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
            "method_id": 252
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
            "method_id": 253
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
            "method_id": 254
        },
        {
            "method_signature": "org.joda.time.chrono.GJMonthOfYearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "GJMonthOfYearDateTimeField(BasicChronology chronology) {\nsuper(chronology, 2);\n}",
            "method_id": 255
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;)V",
            "method_body": "BasicWeekyearDateTimeField(BasicChronology chronology) {\nsuper(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());\n}",
            "method_id": 256
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
            "method_id": 257
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}",
            "method_id": 258
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:<init>(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V",
            "method_body": "BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {\nsuper(DateTimeFieldType.weekOfWeekyear(), weeks);\n}",
            "method_id": 259
        },
        {
            "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}",
            "method_id": 260
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
            "method_body": "private UnsupportedDurationField(DurationFieldType type) {\n}",
            "method_id": 261
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
            "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\n}",
            "method_id": 262
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
            "method_body": "public boolean isSupported() {\nreturn false;\n}",
            "method_id": 263
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn 0;\n}",
            "method_id": 264
        },
        {
            "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
            "method_body": "public int compareTo(DurationField durationField) {\nif (durationField.isSupported()) {\n}",
            "method_id": 265
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:<init>()V",
            "method_body": "private ISOYearOfEraDateTimeField() {\nsuper(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n}",
            "method_id": 266
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 7037524068969447317L;\nstatic final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();\nsuper(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n}",
            "method_id": 267
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
            "method_body": "public DurationField getRangeDurationField() {\nreturn GregorianChronology.getInstanceUTC().eras();\n}",
            "method_id": 268
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:getMinimumValue()I",
            "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
            "method_id": 269
        },
        {
            "method_signature": "org.joda.time.chrono.ISOYearOfEraDateTimeField:getMaximumValue()I",
            "method_body": "public int getMaximumValue() {\nreturn getWrappedField().getMaximumValue();\n}",
            "method_id": 270
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}",
            "method_id": 271
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
            "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\n}",
            "method_id": 272
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
            "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}",
            "method_id": 273
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
            "method_id": 274
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
            "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\n}",
            "method_id": 275
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
            "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\n}",
            "method_id": 276
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
            "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\n}",
            "method_id": 277
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
            "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\n}",
            "method_id": 278
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
            "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
            "method_id": 279
        },
        {
            "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
            "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\n}",
            "method_id": 280
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 281
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
            "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
            "method_id": 282
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[I)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values) {\nthis(types, values, null);\n}",
            "method_id": 283
        },
        {
            "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
            "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\n}",
            "method_id": 284
        },
        {
            "method_signature": "org.joda.time.Partial:size()I",
            "method_body": "public int size() {\nreturn iTypes.length;\n}",
            "method_id": 285
        },
        {
            "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 286
        },
        {
            "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
            "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
            "method_id": 287
        }
    ]
}