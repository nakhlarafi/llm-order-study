{
    "bug_id": 2,
    "test_id": 1,
    "test_name": "org.mockito.verification.NegativeDurationTest.should_throw_exception_when_duration_is_negative_for_after_method",
    "test_body": "21: public void should_throw_exception_when_duration_is_negative_for_after_method() {\n22: try {\n23: Mockito.after(-1);\n24: Assert.fail(\"It is forbidden to invoke Mockito.after() with negative value.\");\n25: } catch (FriendlyReminderException e) {\n26: Assert.assertTrue(true);\n27: }\n28: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.MockUtil:<clinit>()V",
            "method_body": "private static final MockMaker mockMaker = Plugins.getMockMaker();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.Plugins:<clinit>()V",
            "method_body": "private static PluginRegistry registry = new PluginRegistry();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.Plugins:getMockMaker()Lorg/mockito/plugins/MockMaker;",
            "method_body": "public static MockMaker getMockMaker() {\nreturn registry.getMockMaker();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginRegistry:getMockMaker()Lorg/mockito/plugins/MockMaker;",
            "method_body": "MockMaker getMockMaker() {\nreturn mockMaker;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginLoader:<init>(Lorg/mockito/plugins/PluginSwitch;)V",
            "method_body": "public PluginLoader(PluginSwitch pluginSwitch) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginLoader:loadPlugin(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "<T> T loadPlugin(Class<T> pluginType, String defaultPluginClassName) {\nT plugin = loadImpl(pluginType);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginLoader:loadImpl(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "<T> T loadImpl(Class<T> service) {\nClassLoader loader = Thread.currentThread().getContextClassLoader();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginFinder:<init>(Lorg/mockito/plugins/PluginSwitch;)V",
            "method_body": "public PluginFinder(PluginSwitch pluginSwitch) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.configuration.plugins.PluginFinder:findPluginClass(Ljava/lang/Iterable;)Ljava/lang/String;",
            "method_body": "String findPluginClass(Iterable<URL> resources) {\nfor (URL resource : resources) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.util.collections.Iterables:toIterable(Ljava/util/Enumeration;)Ljava/lang/Iterable;",
            "method_body": "public static <T> Iterable<T> toIterable(Enumeration<T> in) {\nList<T> out = new LinkedList<T>();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 6839454041642082618L;\nprivate static final ThreadLocal<MockingProgress> mockingProgress = new ThreadLocal<MockingProgress>();\nif (mockingProgress.get() == null) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.util.Timer:<init>(J)V",
            "method_body": "public Timer(long durationMillis) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationOverTimeImpl:<init>(JJLorg/mockito/verification/VerificationMode;Z)V",
            "method_body": "public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\nthis(pollingPeriodMillis, durationMillis, delegate, returnOnSuccess, new Timer(durationMillis));\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationOverTimeImpl:<init>(JJLorg/mockito/verification/VerificationMode;ZLorg/mockito/internal/util/Timer;)V",
            "method_body": "public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationModeFactory:times(I)Lorg/mockito/internal/verification/Times;",
            "method_body": "public static Times times(int wantedNumberOfInvocations) {\nreturn new Times(wantedNumberOfInvocations);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.verification.VerificationWrapper:<init>(Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public VerificationWrapper(WrapperType wrappedVerification) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.Matchers:<clinit>()V",
            "method_body": "private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();\n* See examples in javadoc for {@link Matchers} class",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.Mockito:<clinit>()V",
            "method_body": "static final MockitoCore MOCKITO_CORE = new MockitoCore();\n* {@link Answer} can be used to define the return values of unstubbed invocations.",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.Answers:<init>(Ljava/lang/String;ILorg/mockito/stubbing/Answer;)V",
            "method_body": "private Answers(Answer<Object> implementation) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.Mockito:after(J)Lorg/mockito/verification/VerificationAfterDelay;",
            "method_body": "public static VerificationAfterDelay after(long millis) {\nreturn new After(millis, VerificationModeFactory.times(1));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.verification.After:<init>(JLorg/mockito/verification/VerificationMode;)V",
            "method_body": "public After(long delayMillis, VerificationMode verificationMode) {\nthis(10, delayMillis, verificationMode);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.verification.After:<init>(JJLorg/mockito/verification/VerificationMode;)V",
            "method_body": "public After(long pollingPeriod, long delayMillis, VerificationMode verificationMode) {\nsuper(new VerificationOverTimeImpl(pollingPeriod, delayMillis, verificationMode, false));\n}",
            "method_id": 22
        }
    ]
}