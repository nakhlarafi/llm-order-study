{
    "bug_id": 12,
    "test_id": 6,
    "test_name": "org.mockitousage.annotation.CaptorAnnotationTest.shouldScreamWhenMoreThanOneMockitoAnnotaton",
    "test_body": "93: public void shouldScreamWhenMoreThanOneMockitoAnnotaton() {\n94: try {\n95: MockitoAnnotations.initMocks(new ToManyAnnotations());\n96: fail();\n97: } catch (MockitoException e) {\n98: assertContains(\"missingGenericsField\", e.getMessage());\n99: assertContains(\"multiple Mockito annotations\", e.getMessage());            \n100: }\n101: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMaster:getGenericType(Ljava/lang/reflect/Field;)Ljava/lang/Class;",
            "method_body": "public Class getGenericType(Field field) {\nType generic = field.getGenericType();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:processAnnotationDeprecatedWay(Lorg/mockito/configuration/AnnotationEngine;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "static void processAnnotationDeprecatedWay(AnnotationEngine annotationEngine, Object testClass, Field field) {\nboolean alreadyAssigned = false;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:throwIfAlreadyAssigned(Ljava/lang/reflect/Field;Z)V",
            "method_body": "static void throwIfAlreadyAssigned(Field field, boolean alreadyAssigned) {\nif (alreadyAssigned) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<clinit>()V",
            "method_body": "static final long serialVersionUID = -2860353062105505938L;\nprivate static ThreadLocal<IMockitoConfiguration> globalConfiguration = new ThreadLocal<IMockitoConfiguration>();\nreturn globalConfiguration.get();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:createConfig()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "private IMockitoConfiguration createConfig() {\nIMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn new InjectingAnnotationEngine();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.configuration.ClassPathLoader:loadConfiguration()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "public IMockitoConfiguration loadConfiguration() {\nClass configClass = null;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:processAnnotationOn(Lorg/mockito/Captor;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object processAnnotationOn(Captor annotation, Field field) {\nClass<?> type = field.getType();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 6839454041642082618L;\nprivate static ThreadLocal<MockingProgress> mockingProgress = new ThreadLocal<MockingProgress>();\nif (mockingProgress.get() == null) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nGlobalConfiguration.validate();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.Answers:<init>(Ljava/lang/String;ILorg/mockito/stubbing/Answer;)V",
            "method_body": "private Answers(Answer<Object> implementation) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:<init>(Lorg/mockito/internal/util/MockCreationValidator;)V",
            "method_body": "public MockUtil(MockCreationValidator creationValidator) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:<init>()V",
            "method_body": "public MockUtil() {\nthis(new MockCreationValidator());\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldSetter(Object target, Field field) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:set(Ljava/lang/Object;)V",
            "method_body": "public void set(Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/Field;)V",
            "method_body": "public void safelyDisableAccess(Field field) {\nassert wasAccessible != null;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:enableAccess(Ljava/lang/reflect/Field;)V",
            "method_body": "public void enableAccess(Field field) {\nwasAccessible = field.isAccessible();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:<init>(Ljava/lang/Class;)V",
            "method_body": "ArgumentCaptor(Class<T> clazz) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.ArgumentCaptor:forClass(Ljava/lang/Class;)Lorg/mockito/ArgumentCaptor;",
            "method_body": "public static <T> ArgumentCaptor<T> forClass(Class<T> clazz) {\nreturn new ArgumentCaptor<T>(clazz);\n}",
            "method_id": 30
        }
    ]
}