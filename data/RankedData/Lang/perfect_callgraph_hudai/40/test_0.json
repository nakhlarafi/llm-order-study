{
    "bug_id": 40,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence",
    "test_body": "public void testContainsIgnoreCase_LocaleIndependence() {\nLocale orig = Locale.getDefault();\nLocale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\nString[][] tdata = { \n{ \"i\", \"I\" },\n{ \"I\", \"i\" },\n{ \"\\u03C2\", \"\\u03C3\" },\n{ \"\\u03A3\", \"\\u03C2\" },\n{ \"\\u03A3\", \"\\u03C3\" },\n};\nString[][] fdata = { \n{ \"\\u00DF\", \"SS\" },\n};\ntry {\nfor (int i = 0; i < locales.length; i++) {\nLocale.setDefault(locales[i]);\nfor (int j = 0; j < tdata.length; j++) {\nassertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils\n.containsIgnoreCase(tdata[j][0], tdata[j][1]));\n}\nfor (int j = 0; j < fdata.length; j++) {\nassertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils\n.containsIgnoreCase(fdata[j][0], fdata[j][1]));\n}\n}\n} finally {\nLocale.setDefault(orig);\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: en: 0 \u00df SS\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertFalse(Assert.java:39)\nat junit.framework.TestCase.assertFalse(TestCase.java:210)\nat org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence(StringUtilsEqualsIndexOfTest.java:341)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.StringUtils:containsIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "public static boolean containsIgnoreCase(String str, String searchStr) {\nif (str == null || searchStr == null) {\nreturn contains(str.toUpperCase(), searchStr.toUpperCase());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.StringUtils:contains(Ljava/lang/String;Ljava/lang/String;)Z",
            "method_body": "public static boolean contains(String str, String searchStr) {\nif (str == null || searchStr == null) {\nreturn str.indexOf(searchStr) >= 0;\n}",
            "method_id": 1
        }
    ]
}