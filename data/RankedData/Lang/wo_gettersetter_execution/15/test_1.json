{
    "bug_id": 15,
    "test_id": 1,
    "test_name": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable",
    "test_body": "108: public void testIsAssignable() throws SecurityException, NoSuchMethodException,\n109: NoSuchFieldException {\n110: List list0 = null;\n111: List<Object> list1 = null;\n112: List<?> list2 = null;\n113: List<? super Object> list3 = null;\n114: List<String> list4 = null;\n115: List<? extends String> list5 = null;\n116: List<? super String> list6 = null;\n117: List[] list7 = null;\n118: List<Object>[] list8 = null;\n119: List<?>[] list9 = null;\n120: List<? super Object>[] list10 = null;\n121: List<String>[] list11 = null;\n122: List<? extends String>[] list12 = null;\n123: List<? super String>[] list13;\n124: Class<?> clazz = getClass();\n125: Method method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n126: List.class, List.class, List.class, List.class, List[].class, List[].class,\n127: List[].class, List[].class, List[].class, List[].class, List[].class);\n128: Type[] types = method.getGenericParameterTypes();\n129: //        list0 = list0;\n130: delegateBooleanAssertion(types, 0, 0, true);\n131: list1 = list0;\n132: delegateBooleanAssertion(types, 0, 1, true);\n133: list0 = list1;\n134: delegateBooleanAssertion(types, 1, 0, true);\n135: list2 = list0;\n136: delegateBooleanAssertion(types, 0, 2, true);\n137: list0 = list2;\n138: delegateBooleanAssertion(types, 2, 0, true);\n139: list3 = list0;\n140: delegateBooleanAssertion(types, 0, 3, true);\n141: list0 = list3;\n142: delegateBooleanAssertion(types, 3, 0, true);\n143: list4 = list0;\n144: delegateBooleanAssertion(types, 0, 4, true);\n145: list0 = list4;\n146: delegateBooleanAssertion(types, 4, 0, true);\n147: list5 = list0;\n148: delegateBooleanAssertion(types, 0, 5, true);\n149: list0 = list5;\n150: delegateBooleanAssertion(types, 5, 0, true);\n151: list6 = list0;\n152: delegateBooleanAssertion(types, 0, 6, true);\n153: list0 = list6;\n154: delegateBooleanAssertion(types, 6, 0, true);\n155: //        list1 = list1;\n156: delegateBooleanAssertion(types, 1, 1, true);\n157: list2 = list1;\n158: delegateBooleanAssertion(types, 1, 2, true);\n159: list1 = (List<Object>) list2;\n160: delegateBooleanAssertion(types, 2, 1, false);\n161: list3 = list1;\n162: delegateBooleanAssertion(types, 1, 3, true);\n163: list1 = (List<Object>) list3;\n164: delegateBooleanAssertion(types, 3, 1, false);\n165: // list4 = list1;\n166: delegateBooleanAssertion(types, 1, 4, false);\n167: // list1 = list4;\n168: delegateBooleanAssertion(types, 4, 1, false);\n169: // list5 = list1;\n170: delegateBooleanAssertion(types, 1, 5, false);\n171: // list1 = list5;\n172: delegateBooleanAssertion(types, 5, 1, false);\n173: list6 = list1;\n174: delegateBooleanAssertion(types, 1, 6, true);\n175: list1 = (List<Object>) list6;\n176: delegateBooleanAssertion(types, 6, 1, false);\n177: //        list2 = list2;\n178: delegateBooleanAssertion(types, 2, 2, true);\n179: list2 = list3;\n180: delegateBooleanAssertion(types, 2, 3, false);\n181: list2 = list4;\n182: delegateBooleanAssertion(types, 3, 2, true);\n183: list3 = (List<? super Object>) list2;\n184: delegateBooleanAssertion(types, 2, 4, false);\n185: list2 = list5;\n186: delegateBooleanAssertion(types, 4, 2, true);\n187: list4 = (List<String>) list2;\n188: delegateBooleanAssertion(types, 2, 5, false);\n189: list2 = list6;\n190: delegateBooleanAssertion(types, 5, 2, true);\n191: list5 = (List<? extends String>) list2;\n192: delegateBooleanAssertion(types, 2, 6, false);\n193: //        list3 = list3;\n194: delegateBooleanAssertion(types, 6, 2, true);\n195: list6 = (List<? super String>) list2;\n196: delegateBooleanAssertion(types, 3, 3, true);\n197: // list4 = list3;\n198: delegateBooleanAssertion(types, 3, 4, false);\n199: // list3 = list4;\n200: delegateBooleanAssertion(types, 4, 3, false);\n201: // list5 = list3;\n202: delegateBooleanAssertion(types, 3, 5, false);\n203: // list3 = list5;\n204: delegateBooleanAssertion(types, 5, 3, false);\n205: list6 = list3;\n206: delegateBooleanAssertion(types, 3, 6, true);\n207: list3 = (List<? super Object>) list6;\n208: delegateBooleanAssertion(types, 6, 3, false);\n209: //        list4 = list4;\n210: delegateBooleanAssertion(types, 4, 4, true);\n211: list5 = list4;\n212: delegateBooleanAssertion(types, 4, 5, true);\n213: list4 = (List<String>) list5;\n214: delegateBooleanAssertion(types, 5, 4, false);\n215: list6 = list4;\n216: delegateBooleanAssertion(types, 4, 6, true);\n217: list4 = (List<String>) list6;\n218: delegateBooleanAssertion(types, 6, 4, false);\n219: //        list5 = list5;\n220: delegateBooleanAssertion(types, 5, 5, true);\n221: list6 = (List<? super String>) list5;\n222: delegateBooleanAssertion(types, 5, 6, false);\n223: list5 = (List<? extends String>) list6;\n224: delegateBooleanAssertion(types, 6, 5, false);\n225: //        list6 = list6;\n226: delegateBooleanAssertion(types, 6, 6, true);\n227: 228: //        list7 = list7;\n229: delegateBooleanAssertion(types, 7, 7, true);\n230: list8 = list7;\n231: delegateBooleanAssertion(types, 7, 8, true);\n232: list7 = list8;\n233: delegateBooleanAssertion(types, 8, 7, true);\n234: list9 = list7;\n235: delegateBooleanAssertion(types, 7, 9, true);\n236: list7 = list9;\n237: delegateBooleanAssertion(types, 9, 7, true);\n238: list10 = list7;\n239: delegateBooleanAssertion(types, 7, 10, true);\n240: list7 = list10;\n241: delegateBooleanAssertion(types, 10, 7, true);\n242: list11 = list7;\n243: delegateBooleanAssertion(types, 7, 11, true);\n244: list7 = list11;\n245: delegateBooleanAssertion(types, 11, 7, true);\n246: list12 = list7;\n247: delegateBooleanAssertion(types, 7, 12, true);\n248: list7 = list12;\n249: delegateBooleanAssertion(types, 12, 7, true);\n250: list13 = list7;\n251: delegateBooleanAssertion(types, 7, 13, true);\n252: list7 = list13;\n253: delegateBooleanAssertion(types, 13, 7, true);\n254: //        list8 = list8;\n255: delegateBooleanAssertion(types, 8, 8, true);\n256: list9 = list8;\n257: delegateBooleanAssertion(types, 8, 9, true);\n258: list8 = (List<Object>[]) list9;\n259: delegateBooleanAssertion(types, 9, 8, false);\n260: list10 = list8;\n261: delegateBooleanAssertion(types, 8, 10, true);\n262: list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n263: delegateBooleanAssertion(types, 10, 8, false);\n264: // list11 = list8;\n265: delegateBooleanAssertion(types, 8, 11, false);\n266: // list8 = list11;\n267: delegateBooleanAssertion(types, 11, 8, false);\n268: // list12 = list8;\n269: delegateBooleanAssertion(types, 8, 12, false);\n270: // list8 = list12;\n271: delegateBooleanAssertion(types, 12, 8, false);\n272: list13 = list8;\n273: delegateBooleanAssertion(types, 8, 13, true);\n274: list8 = (List<Object>[]) list13;\n275: delegateBooleanAssertion(types, 13, 8, false);\n276: //        list9 = list9;\n277: delegateBooleanAssertion(types, 9, 9, true);\n278: list10 = (List<? super Object>[]) list9;\n279: delegateBooleanAssertion(types, 9, 10, false);\n280: list9 = list10;\n281: delegateBooleanAssertion(types, 10, 9, true);\n282: list11 = (List<String>[]) list9;\n283: delegateBooleanAssertion(types, 9, 11, false);\n284: list9 = list11;\n285: delegateBooleanAssertion(types, 11, 9, true);\n286: list12 = (List<? extends String>[]) list9;\n287: delegateBooleanAssertion(types, 9, 12, false);\n288: list9 = list12;\n289: delegateBooleanAssertion(types, 12, 9, true);\n290: list13 = (List<? super String>[]) list9;\n291: delegateBooleanAssertion(types, 9, 13, false);\n292: list9 = list13;\n293: delegateBooleanAssertion(types, 13, 9, true);\n294: //        list10 = list10;\n295: delegateBooleanAssertion(types, 10, 10, true);\n296: // list11 = list10;\n297: delegateBooleanAssertion(types, 10, 11, false);\n298: // list10 = list11;\n299: delegateBooleanAssertion(types, 11, 10, false);\n300: // list12 = list10;\n301: delegateBooleanAssertion(types, 10, 12, false);\n302: // list10 = list12;\n303: delegateBooleanAssertion(types, 12, 10, false);\n304: list13 = list10;\n305: delegateBooleanAssertion(types, 10, 13, true);\n306: list10 = (List<? super Object>[]) list13;\n307: delegateBooleanAssertion(types, 13, 10, false);\n308: //        list11 = list11;\n309: delegateBooleanAssertion(types, 11, 11, true);\n310: list12 = list11;\n311: delegateBooleanAssertion(types, 11, 12, true);\n312: list11 = (List<String>[]) list12;\n313: delegateBooleanAssertion(types, 12, 11, false);\n314: list13 = list11;\n315: delegateBooleanAssertion(types, 11, 13, true);\n316: list11 = (List<String>[]) list13;\n317: delegateBooleanAssertion(types, 13, 11, false);\n318: //        list12 = list12;\n319: delegateBooleanAssertion(types, 12, 12, true);\n320: list13 = (List<? super String>[]) list12;\n321: delegateBooleanAssertion(types, 12, 13, false);\n322: list12 = (List<? extends String>[]) list13;\n323: delegateBooleanAssertion(types, 13, 12, false);\n324: //        list13 = list13;\n325: delegateBooleanAssertion(types, 13, 13, true);\n326: Type disType = getClass().getField(\"dis\").getGenericType();\n327: // Reporter.log( ( ( ParameterizedType ) disType\n328: // ).getOwnerType().getClass().toString() );\n329: Type datType = getClass().getField(\"dat\").getGenericType();\n330: Type daType = getClass().getField(\"da\").getGenericType();\n331: Type uhderType = getClass().getField(\"uhder\").getGenericType();\n332: Type dingType = getClass().getField(\"ding\").getGenericType();\n333: Type testerType = getClass().getField(\"tester\").getGenericType();\n334: Type tester2Type = getClass().getField(\"tester2\").getGenericType();\n335: Type dat2Type = getClass().getField(\"dat2\").getGenericType();\n336: Type dat3Type = getClass().getField(\"dat3\").getGenericType();\n337: dis = dat;\n338: Assert.assertTrue(TypeUtils.isAssignable(datType, disType));\n339: // dis = da;\n340: Assert.assertFalse(TypeUtils.isAssignable(daType, disType));\n341: dis = uhder;\n342: Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\n343: dis = ding;\n344: Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\n345: TypeUtils.isAssignable(dingType, disType));\n346: dis = tester;\n347: Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));\n348: // dis = tester2;\n349: Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n350: // dat = dat2;\n351: Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n352: // dat2 = dat;\n353: Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n354: // dat = dat3;\n355: Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n356: char ch = 0;\n357: boolean bo = false;\n358: byte by = 0;\n359: short sh = 0;\n360: int in = 0;\n361: long lo = 0;\n362: float fl = 0;\n363: double du = 0;\n364: du = ch;\n365: Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));\n366: du = by;\n367: Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n368: du = sh;\n369: Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));\n370: du = in;\n371: Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));\n372: du = lo;\n373: Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n374: du = fl;\n375: Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n376: lo = in;\n377: Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n378: lo = Integer.valueOf(0);\n379: Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n380: // Long lngW = 1;\n381: Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n382: // lngW = Integer.valueOf( 0 );\n383: Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n384: in = Integer.valueOf(0);\n385: Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n386: Integer inte = in;\n387: Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n388: Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n389: Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n390: Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n391: intComparable = 1;\n392: Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n393: Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n394: Serializable ser = 1;\n395: Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n396: Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n397: // longComparable = 1;\n398: Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n399: // longComparable = Integer.valueOf( 0 );\n400: Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n401: // int[] ia;\n402: // long[] la = ia;\n403: Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n404: Integer[] ia = null;\n405: Type caType = getClass().getField(\"intWildcardComparable\").getGenericType();\n406: intWildcardComparable = ia;\n407: Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n408: // int[] ina = ia;\n409: Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n410: int[] ina = null;\n411: Object[] oa;\n412: // oa = ina;\n413: Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n414: oa = new Integer[0];\n415: Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n416: Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\n417: Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\n418: Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\n419: Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\n420: Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\n421: AClass aClass = new AClass(new AAClass<String>());\n422: aClass.bClass = aClass.cClass;\n423: Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n424: aClass.bClass = aClass.dClass;\n425: Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n426: aClass.bClass = aClass.eClass;\n427: Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n428: aClass.bClass = aClass.fClass;\n429: Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n430: aClass.cClass = aClass.dClass;\n431: Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n432: aClass.cClass = aClass.eClass;\n433: Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n434: aClass.cClass = aClass.fClass;\n435: Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n436: aClass.dClass = aClass.eClass;\n437: Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n438: aClass.dClass = aClass.fClass;\n439: Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n440: aClass.eClass = aClass.fClass;\n441: Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n442: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.JavaVersion:atLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
            "method_body": "public boolean atLeast(JavaVersion requiredVersion) {\nreturn this.value >= requiredVersion.value;\n}",
            "method_id": 0
        }
    ]
}