{
    "bug_id": 42,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtmlHighUnicode",
    "test_body": "420: public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n421: // this is the utf8 representation of the character:\n422: // COUNTING ROD UNIT DIGIT THREE\n423: // in unicode\n424: // codepoint: U+1D362\n425: byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n426: 427: String escaped = StringEscapeUtils.escapeHtml( new String(data, \"UTF8\") );\n428: String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n429: 430: assertEquals( \"High unicode was not escaped correctly\", \"&#119650;\", escaped);\n431: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:escapeHtml(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String escapeHtml(String str) {\nif (str == null) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:escapeHtml(Ljava/io/Writer;Ljava/lang/String;)V",
            "method_body": "public static void escapeHtml(Writer writer, String string) throws IOException {\nif (writer == null ) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:unescapeHtml(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String unescapeHtml(String str) {\nif (str == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:unescapeHtml(Ljava/io/Writer;Ljava/lang/String;)V",
            "method_body": "public static void unescapeHtml(Writer writer, String string) throws IOException {\nif (writer == null ) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:entityName(I)Ljava/lang/String;",
            "method_body": "public String entityName(int value) {\nreturn map.name(value);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:escape(Ljava/io/Writer;Ljava/lang/String;)V",
            "method_body": "public void escape(Writer writer, String str) throws IOException {\nint len = str.length();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:unescape(Ljava/io/Writer;Ljava/lang/String;)V",
            "method_body": "public void unescape(Writer writer, String str) throws IOException {\nint firstAmp = str.indexOf('&');\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:doUnescape(Ljava/io/Writer;Ljava/lang/String;I)V",
            "method_body": "private void doUnescape(Writer writer, String str, int firstAmp) throws IOException {\nwriter.write(str, 0, firstAmp);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang.Entities$PrimitiveEntityMap:name(I)Ljava/lang/String;",
            "method_body": "void add(String name, int value);\nstatic class PrimitiveEntityMap implements EntityMap {\nmapNameToValue.put(name, new Integer(value));\nreturn (String) mapValueToName.get(value);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang.Entities$LookupEntityMap:name(I)Ljava/lang/String;",
            "method_body": "public String name(int value) {\nif (value < LOOKUP_TABLE_SIZE) {\n}",
            "method_id": 9
        }
    ]
}