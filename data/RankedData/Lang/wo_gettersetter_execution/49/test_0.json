{
    "bug_id": 49,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.math.FractionTest.testReduce",
    "test_body": "616: public void testReduce() {\n617: Fraction f = null;\n618: 619: f = Fraction.getFraction(50, 75);\n620: Fraction result = f.reduce();\n621: assertEquals(2, result.getNumerator());\n622: assertEquals(3, result.getDenominator());\n623: 624: f = Fraction.getFraction(-2, -3);\n625: result = f.reduce();\n626: assertEquals(2, result.getNumerator());\n627: assertEquals(3, result.getDenominator());\n628: 629: f = Fraction.getFraction(2, -3);\n630: result = f.reduce();\n631: assertEquals(-2, result.getNumerator());\n632: assertEquals(3, result.getDenominator());\n633: 634: f = Fraction.getFraction(-2, 3);\n635: result = f.reduce();\n636: assertEquals(-2, result.getNumerator());\n637: assertEquals(3, result.getDenominator());\n638: assertSame(f, result);\n639: 640: f = Fraction.getFraction(2, 3);\n641: result = f.reduce();\n642: assertEquals(2, result.getNumerator());\n643: assertEquals(3, result.getDenominator());\n644: assertSame(f, result);\n645: 646: f = Fraction.getFraction(0, 1);\n647: result = f.reduce();\n648: assertEquals(0, result.getNumerator());\n649: assertEquals(1, result.getDenominator());\n650: assertSame(f, result);\n651: 652: f = Fraction.getFraction(0, 100);\n653: result = f.reduce();\n654: assertEquals(0, result.getNumerator());\n655: assertEquals(1, result.getDenominator());\n656: assertSame(result, Fraction.ZERO);\n657: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:<init>(II)V",
            "method_body": "private Fraction(int numerator, int denominator) {\nsuper();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:reduce()Lorg/apache/commons/lang/math/Fraction;",
            "method_body": "public Fraction reduce() {\nint gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:greatestCommonDivisor(II)I",
            "method_body": "private static int greatestCommonDivisor(int u, int v) {\nif (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n}",
            "method_id": 2
        }
    ]
}