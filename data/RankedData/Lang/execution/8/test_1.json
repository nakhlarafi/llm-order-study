{
    "bug_id": 8,
    "test_id": 1,
    "test_name": "org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected",
    "test_body": "266: public void testCalendarTimezoneRespected() {\n267: String[] availableZones = TimeZone.getAvailableIDs();\n268: TimeZone currentZone = TimeZone.getDefault();\n269: 270: TimeZone anotherZone = null;\n271: for (String zone : availableZones) {\n272: if (!zone.equals(currentZone.getID())) {\n273: anotherZone = TimeZone.getTimeZone(zone);\n274: }\n275: }\n276: 277: assertNotNull(\"Cannot find another timezone\", anotherZone);\n278: 279: final String pattern = \"h:mma z\";\n280: final Calendar cal = Calendar.getInstance(anotherZone);\n281: 282: SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n283: sdf.setTimeZone(anotherZone);\n284: String expectedValue = sdf.format(cal.getTime());\n285: String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n286: assertEquals(expectedValue, actualValue);\n287: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:getInstance(Ljava/lang/String;)Lorg/apache/commons/lang3/time/FastDateFormat;",
            "method_body": "public static FastDateFormat getInstance(String pattern) {\nreturn cache.getInstance(pattern, null, null);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateFormat:format(Ljava/util/Calendar;)Ljava/lang/String;",
            "method_body": "public String format(Calendar calendar) {\nreturn printer.format(calendar);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache:getInstance(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/text/Format;",
            "method_body": "public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\nif (pattern == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache$MultipartKey:<init>([Ljava/lang/Object;)V",
            "method_body": "public MultipartKey(Object... keys) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FormatCache$MultipartKey:hashCode()I",
            "method_body": "public int hashCode() {\nif(hashCode==0) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:format(Ljava/util/Calendar;)Ljava/lang/String;",
            "method_body": "public String format(Calendar calendar) {\nreturn format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:format(Ljava/util/Calendar;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;",
            "method_body": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\nreturn applyRules(calendar, buf);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:applyRules(Ljava/util/Calendar;Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\nfor (Rule rule : mRules) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter:getTimeZoneDisplay(Ljava/util/TimeZone;ZILjava/util/Locale;)Ljava/lang/String;",
            "method_body": "static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\nTimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "void appendTo(StringBuffer buffer, int value);\nCharacterLiteral(char value) {\nreturn 1;\nbuffer.append(mValue);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nappendTo(buffer, calendar.get(mField));\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 100) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField:appendTo(Ljava/lang/StringBuffer;I)V",
            "method_body": "public final void appendTo(StringBuffer buffer, int value) {\nif (value < 10) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nint value = calendar.get(Calendar.HOUR);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TextField:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nbuffer.append(mValues[calendar.get(mField)]);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule:appendTo(Ljava/lang/StringBuffer;Ljava/util/Calendar;)V",
            "method_body": "public void appendTo(StringBuffer buffer, Calendar calendar) {\nif (zone.useDaylightTime()\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:<init>(Ljava/util/TimeZone;ZILjava/util/Locale;)V",
            "method_body": "TimeZoneDisplayKey(TimeZone timeZone,\nboolean daylight, int style, Locale locale) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:hashCode()I",
            "method_body": "public int hashCode() {\nreturn (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\n}",
            "method_id": 18
        }
    ]
}