{
    "bug_id": 30,
    "test_id": 8,
    "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars",
    "test_body": "318: public void testContainsNone_CharArrayWithSupplementaryChars() {\n319: assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n320: assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n321: assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n322: // Sanity check:\n323: assertEquals(-1, CharU20000.indexOf(CharU20001));\n324: assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n325: assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n326: // Test:\n327: assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n328: assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n329: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;[C)Z",
            "method_body": "public static boolean containsNone(CharSequence cs, char[] searchChars) {\nif (cs == null || searchChars == null) {\n}",
            "method_id": 0
        }
    ]
}