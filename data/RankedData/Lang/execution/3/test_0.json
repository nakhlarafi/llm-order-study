{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss",
    "test_body": "123: public void testStringCreateNumberEnsureNoPrecisionLoss(){\n124: String shouldBeFloat = \"1.23\";\n125: String shouldBeDouble = \"3.40282354e+38\";\n126: String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n127: 128: assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);\n129: assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);\n130: assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);\n131: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isBlank(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isBlank(final CharSequence cs) {\nif (cs == null || (strLen = cs.length()) == 0) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(final String str) throws NumberFormatException {\nif (str == null) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isAllZeros(Ljava/lang/String;)Z",
            "method_body": "private static boolean isAllZeros(final String str) {\nif (str == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createFloat(Ljava/lang/String;)Ljava/lang/Float;",
            "method_body": "public static Float createFloat(final String str) {\nif (str == null) {\n}",
            "method_id": 3
        }
    ]
}