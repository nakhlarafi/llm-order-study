{
    "bug_id": 90,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.FrequencyTest.testAddNonComparable",
    "test_body": "193: public void testAddNonComparable(){\n194: try {\n195: f.addValue(new Object()); // This was OK\n196: fail(\"Expected ClassCastException\");\n197: } catch (ClassCastException expected) {\n198: }\n199: f.clear();\n200: f.addValue(1);\n201: try {\n202: f.addValue(new Object());\n203: fail(\"Expected ClassCastException\"); // Previously would have been IllegalArgument\n204: } catch (ClassCastException expected) {\n205: }\n206: }\n",
    "stack_trace": "java.lang.IllegalArgumentException: Value not comparable to existing values.\nat org.apache.commons.math.stat.Frequency.addValue(Frequency.java:134)\nat org.apache.commons.math.stat.FrequencyTest.testAddNonComparable(FrequencyTest.java:195)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
            "method_body": "public void addValue(Object v) {\nObject obj = v;\nif (v instanceof Integer) {\nLong count = (Long) freqTable.get(obj);\nif (count == null) {\n} catch (ClassCastException ex) {\nthrow new IllegalArgumentException(\"Value not comparable to existing values.\");\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:<init>()V",
            "method_body": "public Frequency() {\nfreqTable = new TreeMap();\n}",
            "method_id": 1
        }
    ]
}