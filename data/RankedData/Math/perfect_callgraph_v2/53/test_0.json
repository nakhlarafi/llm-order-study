{
    "bug_id": 53,
    "test_id": 0,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAddNaN",
    "test_body": "110: public void testAddNaN() {\n111: Complex x = new Complex(3.0, 4.0);\n112: Complex z = x.add(Complex.NaN);\n113: Assert.assertTrue(z.isNaN());\n114: z = new Complex(1, nan);\n115: Complex w = x.add(z);\n116: Assert.assertTrue(Double.isNaN(w.getReal()));\n117: Assert.assertTrue(Double.isNaN(w.getImaginary()));\n118: }\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.complex.ComplexTest.testAddNaN(ComplexTest.java:116)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex add(Complex rhs)\nMathUtils.checkNotNull(rhs);\nreturn createComplex(real + rhs.getReal(),\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nsuper();\nthis.real = real;\nthis.imaginary = imaginary;\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart, double imaginaryPart) {\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn isNaN;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 6
        }
    ]
}