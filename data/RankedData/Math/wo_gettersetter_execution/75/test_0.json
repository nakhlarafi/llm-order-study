{
    "bug_id": 75,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.FrequencyTest.testPcts",
    "test_body": "135: public void testPcts() {\n136: f.addValue(oneL);\n137: f.addValue(twoL);\n138: f.addValue(oneI);\n139: f.addValue(twoI);\n140: f.addValue(threeL);\n141: f.addValue(threeL);\n142: f.addValue(3);\n143: f.addValue(threeI);\n144: assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n145: assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),tolerance);\n146: assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n147: // MATH-329\n148: assertEquals(\"three (Object) pct\",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance);\n149: assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n150: assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n151: assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n152: assertEquals(\"two cum pct\",0.50,f.getCumPct(Long.valueOf(2)),tolerance);\n153: assertEquals(\"Integer argument\",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);\n154: assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n155: assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n156: assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);\n157: assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),tolerance);\n158: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:<init>()V",
            "method_body": "public Frequency() {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V",
            "method_body": "public void addValue(Comparable<?> v){\nComparable<?> obj = v;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:addValue(I)V",
            "method_body": "public void addValue(int v) {\naddValue(Long.valueOf(v));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:addValue(J)V",
            "method_body": "public void addValue(long v) {\naddValue(Long.valueOf(v));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency$NaturalComparator:compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I",
            "method_body": "public int compare(Comparable<T> o1, Comparable<T> o2) {\nreturn o1.compareTo((T) o2);\n}",
            "method_id": 4
        }
    ]
}