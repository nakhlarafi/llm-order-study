{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary",
    "test_body": "439: public void testFitAccuracyDependsOnBoundary() {\n440: final CMAESOptimizer optimizer = new CMAESOptimizer();\n441: final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n442: public double value(double[] parameters) {\n443: final double target = 11.1;\n444: final double error = target - parameters[0];\n445: return error * error;\n446: }\n447: };\n448: 449: final double[] start = { 1 };\n450: 451: // No bounds.\n452: PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n453: start);\n454: final double resNoBound = result.getPoint()[0];\n455: 456: // Optimum is near the lower bound.\n457: final double[] lower = { -20 };\n458: final double[] upper = { 5e16 };\n459: result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n460: start, lower, upper);\n461: final double resNearLo = result.getPoint()[0];\n462: 463: // Optimum is near the upper bound.\n464: lower[0] = -5e16;\n465: upper[0] = 20;\n466: result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n467: start, lower, upper);\n468: final double resNearHi = result.getPoint()[0];\n469: 470: // System.out.println(\"resNoBound=\" + resNoBound +\n471: //                    \" resNearLo=\" + resNearLo +\n472: //                    \" resNearHi=\" + resNearHi);\n473: 474: // The two values currently differ by a substantial amount, indicating that\n475: // the bounds definition can prevent reaching the optimum.\n476: Assert.assertEquals(resNoBound, resNearLo, 1e-3);\n477: Assert.assertEquals(resNoBound, resNearHi, 1e-3);\n478: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cos(D)D",
            "method_body": "public static double cos(double x) {\nint quadrant = 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$CodyWaite:<init>(DD)V",
            "method_body": "CodyWaite(double xa,\ndouble xb) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:copyOf([II)[I",
            "method_body": "public static int[] copyOf(int[] source, int len) {\nfinal int[] output = new int[len];\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:compareTo(DDD)I",
            "method_body": "public static int compareTo(double x, double y, double eps) {\nif (equals(x, y, eps)) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y, 1) || FastMath.abs(y - x) <= eps;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextDouble()D",
            "method_body": "public double nextDouble() {\nfinal long high = ((long) next(26)) << 26;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextGaussian()D",
            "method_body": "public double nextGaussian() {\nif (Double.isNaN(nextGaussian)) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:next(I)I",
            "method_body": "protected int next(int bits) {\nif (mti >= N) { // generate N words at one time\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker:<init>()V",
            "method_body": "public AbstractConvergenceChecker() {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:add(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix add(RealMatrix m)\nMatrixUtils.checkAdditionCompatible(this, m);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:subtract(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix subtract(final RealMatrix m)\nMatrixUtils.checkSubtractionCompatible(this, m);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:scalarAdd(D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix scalarAdd(final double d) {\nfinal int rowCount    = getRowDimension();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:scalarMultiply(D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix scalarMultiply(final double d) {\nfinal int rowCount    = getRowDimension();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix multiply(final RealMatrix m)\nMatrixUtils.checkMultiplicationCompatible(this, m);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getFrobeniusNorm()D",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data)\nif (data == null ||\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealDiagonalMatrix([D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal) {\nfinal RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createColumnRealMatrix([D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createColumnRealMatrix(double[] columnData)\nif (columnData == null) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkAdditionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkAdditionCompatible(final AnyMatrix left, final AnyMatrix right)\nif ((left.getRowDimension()    != right.getRowDimension()) ||\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right)\nif ((left.getRowDimension()    != right.getRowDimension()) ||\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:computeObjectiveValue([D)D",
            "method_body": "protected double computeObjectiveValue(double[] point) {\nevaluations.incrementCount();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nreturn optimizeInternal(maxEval, f, goalType, startPoint);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:optimizeInternal(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType,\nif (f == null) {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.SimpleValueChecker:converged(ILorg/apache/commons/math3/optimization/PointValuePair;Lorg/apache/commons/math3/optimization/PointValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nfinal double p = previous.getValue();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.PointValuePair:<init>([DD)V",
            "method_body": "public PointValuePair(final double[] point,\nthis(point, value, true);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.PointValuePair:<init>([DDZ)V",
            "method_body": "public PointValuePair(final double[] point,\nsuper(copyArray ? ((point == null) ? null :\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:<init>(Lorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "protected BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nreturn optimize(maxEval, f, goalType, startPoint, null, null);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D[D[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nfinal int dim = startPoint.length;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension,\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows DimensionMismatchException, NoDataException, NullArgumentException {\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nNullArgumentException {\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension,\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\nfinal int rows    = getRowDimension();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nfinal int nRows = this.getRowDimension();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in)\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>()V",
            "method_body": "public CMAESOptimizer() {\nthis(0);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I)V",
            "method_body": "public CMAESOptimizer(int lambda) {\nthis(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I[DIDZIILorg/apache/commons/math3/random/RandomGenerator;Z)V",
            "method_body": "public CMAESOptimizer(int lambda, double[] inputSigma,\nthis(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I[DIDZIILorg/apache/commons/math3/random/RandomGenerator;ZLorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "public CMAESOptimizer(int lambda, double[] inputSigma,\nsuper(checker);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nfinal double[] init = getStartPoint();\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V",
            "method_body": "private void initializeCMA(double[] guess) {\nif (lambda <= 0) {\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
            "method_body": "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\nps = ps.scalarMultiply(1. - cs).add(\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "private void updateCovariance(boolean hsig, final RealMatrix bestArx,\ndouble negccov = 0;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:updateBD(D)V",
            "method_body": "private void updateBD(double negccov) {\nif (ccov1 + ccovmu + negccov > 0 &&\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:push([DD)V",
            "method_body": "private static void push(double[] vals, double val) {\nfor (int i = vals.length-1; i > 0; i--) {\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sortedIndices([D)[I",
            "method_body": "private int[] sortedIndices(final double[] doubles) {\nDoubleIndex[] dis = new DoubleIndex[doubles.length];\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:log(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix log(final RealMatrix m) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sqrt(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix sqrt(final RealMatrix m) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:square(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix square(final RealMatrix m) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:times(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:divide(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:selectColumns(Lorg/apache/commons/math3/linear/RealMatrix;[I)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\ndouble[][] d = new double[m.getRowDimension()][cols.length];\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:triu(Lorg/apache/commons/math3/linear/RealMatrix;I)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix triu(final RealMatrix m, int k) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix sumRows(final RealMatrix m) {\ndouble[][] d = new double[1][m.getColumnDimension()];\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:diag(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix diag(final RealMatrix m) {\nif (m.getColumnDimension() == 1) {\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:copyColumn(Lorg/apache/commons/math3/linear/RealMatrix;ILorg/apache/commons/math3/linear/RealMatrix;I)V",
            "method_body": "private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {\nfor (int i = 0; i < m1.getRowDimension(); i++) {\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:ones(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix ones(int n, int m) {\ndouble[][] d = new double[n][m];\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:eye(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix eye(int n, int m) {\ndouble[][] d = new double[n][m];\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:zeros(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix zeros(int n, int m) {\nreturn new Array2DRowRealMatrix(n, m);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:repmat(Lorg/apache/commons/math3/linear/RealMatrix;II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\nint rd = mat.getRowDimension();\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sequence(DDD)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix sequence(double start, double end, double step) {\nint size = (int) ((end - start) / step + 1);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:max(Lorg/apache/commons/math3/linear/RealMatrix;)D",
            "method_body": "private static double max(final RealMatrix m) {\ndouble max = -Double.MAX_VALUE;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:min(Lorg/apache/commons/math3/linear/RealMatrix;)D",
            "method_body": "private static double min(final RealMatrix m) {\ndouble min = Double.MAX_VALUE;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:max([D)D",
            "method_body": "private static double max(final double[] m) {\ndouble max = -Double.MAX_VALUE;\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:min([D)D",
            "method_body": "private static double min(final double[] m) {\ndouble min = Double.MAX_VALUE;\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:inverse([I)[I",
            "method_body": "private static int[] inverse(final int[] indices) {\nint[] inverse = new int[indices.length];\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:reverse([I)[I",
            "method_body": "private static int[] reverse(final int[] indices) {\nint[] reverse = new int[indices.length];\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:randn1(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private RealMatrix randn1(int size, int popSize) {\ndouble[][] d = new double[size][popSize];\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:<init>(Lorg/apache/commons/math3/optimization/direct/CMAESOptimizer;)V",
            "method_body": "public FitnessFunction() {\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D",
            "method_body": "public double[] encode(final double[] x) {\nif (boundaries == null) {\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repairAndDecode([D)[D",
            "method_body": "public double[] repairAndDecode(final double[] x) {\nreturn boundaries != null && isRepairMode ?\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
            "method_body": "public double[] decode(final double[] x) {\nif (boundaries == null) {\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
            "method_body": "public double value(final double[] point) {\nif (boundaries != null && isRepairMode) {\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repair([D)[D",
            "method_body": "private double[] repair(final double[] x) {\ndouble[] repaired = new double[x.length];\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
            "method_body": "private double penalty(final double[] x, final double[] repaired) {\ndouble penalty = 0;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:start(IIIIII)V",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:visit(IID)V",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:end()D",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:end()D",
            "method_body": "public double end() {\nreturn 0;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$5:visit(IID)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex:<init>(DI)V",
            "method_body": "DoubleIndex(double value, int index) {\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex:compareTo(Lorg/apache/commons/math3/optimization/direct/CMAESOptimizer$DoubleIndex;)I",
            "method_body": "public int compareTo(DoubleIndex o) {\nreturn Double.compare(value, o.value);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.apache.commons.math3.linear.EigenDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "public EigenDecomposition(final RealMatrix matrix)\nthrows MathArithmeticException {\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.apache.commons.math3.linear.EigenDecomposition:transformToTridiagonal(Lorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "private void transformToTridiagonal(final RealMatrix matrix) {\ntransformer = new TriDiagonalTransformer(matrix);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.apache.commons.math3.linear.EigenDecomposition:findEigenVectors([[D)V",
            "method_body": "private void findEigenVectors(final double[][] householderMatrix) {\nfinal double[][]z = householderMatrix.clone();\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.apache.commons.math3.linear.TriDiagonalTransformer:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "public TriDiagonalTransformer(RealMatrix matrix) {\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.apache.commons.math3.linear.TriDiagonalTransformer:transform()V",
            "method_body": "private void transform() {\nfinal int m = householderVectors.length;\n}",
            "method_id": 118
        }
    ]
}