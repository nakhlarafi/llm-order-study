{
    "bug_id": 79,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate",
    "test_body": "103: public void testPerformClusterAnalysisDegenerate() {\n104: KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n105: new Random(1746432956321l));\n106: EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n107: new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n108: new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n109: List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\n110: assertEquals(1, clusters.size());\n111: assertEquals(2, (clusters.get(0).getPoints().size()));\n112: EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n113: EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n114: assertTrue(clusters.get(0).getPoints().contains(pt1));\n115: assertTrue(clusters.get(0).getPoints().contains(pt2));\n116: 117: } \n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:distance([I[I)D",
            "method_body": "public static double distance(int[] p1, int[] p2) {\nint sum = 0;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:<init>([I)V",
            "method_body": "public EuclideanIntegerPoint(final int[] point) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
            "method_body": "public double distanceFrom(final EuclideanIntegerPoint p) {\nreturn MathUtils.distance(point, p.getPoint());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
            "method_body": "public List<Cluster<T>> cluster(final Collection<T> points,\nList<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
            "method_body": "private static <T extends Clusterable<T>> void\nfor (final T p : points) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
            "method_body": "private static <T extends Clusterable<T>> List<Cluster<T>>\nfinal List<T> pointSet = new ArrayList<T>(points);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:<init>(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public Cluster(final T center) {\n}",
            "method_id": 7
        }
    ]
}