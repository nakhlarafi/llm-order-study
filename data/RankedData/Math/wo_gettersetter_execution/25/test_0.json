{
    "bug_id": 25,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testMath844",
    "test_body": "182: public void testMath844() {\n183: final double[] y = { 0, 1, 2, 3, 2, 1,\n184: 0, -1, -2, -3, -2, -1,\n185: 0, 1, 2, 3, 2, 1,\n186: 0, -1, -2, -3, -2, -1,\n187: 0, 1, 2, 3, 2, 1, 0 };\n188: final int len = y.length;\n189: final WeightedObservedPoint[] points = new WeightedObservedPoint[len];\n190: for (int i = 0; i < len; i++) {\n191: points[i] = new WeightedObservedPoint(1, i, y[i]);\n192: }\n193: 194: final HarmonicFitter.ParameterGuesser guesser\n195: = new HarmonicFitter.ParameterGuesser(points);\n196: 197: // The guesser fails because the function is far from an harmonic\n198: // function: It is a triangular periodic function with amplitude 3\n199: // and period 12, and all sample points are taken at integer abscissae\n200: // so function values all belong to the integer subset {-3, -2, -1, 0,\n201: // 1, 2, 3}.\n202: guesser.guess();\n203: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cos(D)D",
            "method_body": "public static double cos(double x) {\nint quadrant = 0;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan2(DD)D",
            "method_body": "public static double atan2(double y, double x) {\nif (x != x || y != y) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:<init>(DDD)V",
            "method_body": "public WeightedObservedPoint(final double weight, final double x, final double y) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:<init>([Lorg/apache/commons/math3/optimization/fitting/WeightedObservedPoint;)V",
            "method_body": "public ParameterGuesser(WeightedObservedPoint[] observations) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guess()[D",
            "method_body": "public double[] guess() {\nsortObservations();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:sortObservations()V",
            "method_body": "private void sortObservations() {\nWeightedObservedPoint curr = observations[0];\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessAOmega()V",
            "method_body": "private void guessAOmega() {\ndouble sx2 = 0;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessPhi()V",
            "method_body": "private void guessPhi() {\ndouble fcMean = 0;\n}",
            "method_id": 13
        }
    ]
}