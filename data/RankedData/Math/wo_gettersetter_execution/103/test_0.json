{
    "bug_id": 103,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "128: public void testExtremeValues() throws Exception {\n129: NormalDistribution distribution = (NormalDistribution) getDistribution();\n130: distribution.setMean(0);\n131: distribution.setStandardDeviation(1);\n132: for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n133: double lowerTail = distribution.cumulativeProbability((double)-i);\n134: double upperTail = distribution.cumulativeProbability((double) i);\n135: if (i < 10) { // make sure not top-coded\n136: assertTrue(lowerTail > 0.0d);\n137: assertTrue(upperTail < 1.0d);\n138: }\n139: else { // make sure top coding not reversed\n140: assertTrue(lowerTail < 0.00001);\n141: assertTrue(upperTail > 0.99999);\n142: }\n143: } \n144: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object[] arguments) {\nsuper(buildMessage(pattern, arguments, Locale.US));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nif ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.MathException:buildMessage(Ljava/lang/String;[Ljava/lang/Object;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(String pattern, Object[] arguments, Locale locale) {\nMessageFormat mf = new MessageFormat(translate(pattern, locale));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(String pattern, Object[] arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn 0.5 * (1.0 + Erf.erf((x - mean) /\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) throws MathException {\ndouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.MaxIterationsExceededException:<init>(I)V",
            "method_body": "public MaxIterationsExceededException(int maxIterations) {\nsuper(\"Maximal number of iterations ({0}) exceeded\",\n}",
            "method_id": 11
        }
    ]
}