{
    "bug_id": 95,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom",
    "test_body": "109: public void testSmallDegreesOfFreedom() throws Exception {\n110: org.apache.commons.math.distribution.FDistributionImpl fd =\n111: new org.apache.commons.math.distribution.FDistributionImpl(\n112: 1.0, 1.0);\n113: double p = fd.cumulativeProbability(0.975);\n114: double x = fd.inverseCumulativeProbability(p);\n115: assertEquals(0.975, x, 1.0e-5);\n116: 117: fd.setDenominatorDegreesOfFreedom(2.0);\n118: p = fd.cumulativeProbability(0.975);\n119: x = fd.inverseCumulativeProbability(p);\n120: assertEquals(0.975, x, 1.0e-5);\n121: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D",
            "method_body": "public static double[] bracket(UnivariateRealFunction function,\nreturn bracket( function, initial, lowerBound, upperBound,\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D",
            "method_body": "public static double[] bracket(UnivariateRealFunction function,\nif (function == null) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:inverseCumulativeProbability(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p)\nif (p < 0.0 || p > 1.0) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b)\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b, double epsilon,\nif (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:<init>(DD)V",
            "method_body": "public FDistributionImpl(double numeratorDegreesOfFreedom,\nsuper();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nif (x <= 0.0) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.distribution.FDistributionImpl:inverseCumulativeProbability(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p)\nif (p == 0) {\n}",
            "method_id": 15
        }
    ]
}