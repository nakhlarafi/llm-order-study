{
    "bug_id": 102,
    "test_id": 2,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",
    "test_body": "168: public void testChiSquareLargeTestStatistic() throws Exception {\n169: double[] exp = new double[] {\n170: 3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n171: 232921.0, 437665.75\n172: };\n173: 174: long[] obs = new long[] {\n175: 2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n176: };\n177: org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n178: new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n179: double cst = csti.chiSquareTest(exp, obs); \n180: assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n181: assertEquals( \"chi-square test statistic\", \n182: 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n183: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(DLorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\nsuper();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:<init>(DD)V",
            "method_body": "public GammaDistributionImpl(double alpha, double beta) {\nsuper();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>()V",
            "method_body": "public ChiSquareTestImpl() {\nthis(new ChiSquaredDistributionImpl(1.0));\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nif ((expected.length < 2) || (expected.length != observed.length)) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\n}",
            "method_id": 17
        }
    ]
}