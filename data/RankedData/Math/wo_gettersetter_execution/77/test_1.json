{
    "bug_id": 77,
    "test_id": 1,
    "test_name": "org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions",
    "test_body": "1080: public void testBasicFunctions() {\n1081: ArrayRealVector v1 = new ArrayRealVector(vec1);\n1082: ArrayRealVector v2 = new ArrayRealVector(vec2);\n1083: ArrayRealVector v5 = new ArrayRealVector(vec5);\n1084: ArrayRealVector v_null = new ArrayRealVector(vec_null);\n1085: 1086: RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n1087: 1088: // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n1089: double d_getNorm = v5.getNorm();\n1090: assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n1091: 1092: // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n1093: double d_getL1Norm = v5.getL1Norm();\n1094: assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n1095: 1096: // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n1097: double d_getLInfNorm = v5.getLInfNorm();\n1098: assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n1099: 1100: 1101: //octave =  sqrt(sumsq(v1-v2))\n1102: double dist = v1.getDistance(v2);\n1103: assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n1104: 1105: //octave =  sqrt(sumsq(v1-v2))\n1106: double dist_2 = v1.getDistance(v2_t);\n1107: assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n1108: 1109: //octave =  sqrt(sumsq(v1-v2))\n1110: double dist_3 = v1.getDistance((RealVector) v2);\n1111: assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n1112: 1113: //octave =  ???\n1114: double d_getL1Distance = v1. getL1Distance(v2);\n1115: assertEquals(\"compare values  \",9d, d_getL1Distance );\n1116: 1117: double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n1118: assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n1119: 1120: double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n1121: assertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n1122: 1123: //octave =  ???\n1124: double d_getLInfDistance = v1. getLInfDistance(v2);\n1125: assertEquals(\"compare values  \",3d, d_getLInfDistance );\n1126: 1127: double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n1128: assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n1129: 1130: double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n1131: assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n1132: 1133: //octave =  v1 + v2\n1134: ArrayRealVector v_add = v1.add(v2);\n1135: double[] result_add = {5d, 7d, 9d};\n1136: assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n1137: 1138: RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n1139: RealVector v_add_i = v1.add(vt2);\n1140: double[] result_add_i = {5d, 7d, 9d};\n1141: assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n1142: 1143: //octave =  v1 - v2\n1144: ArrayRealVector v_subtract = v1.subtract(v2);\n1145: double[] result_subtract = {-3d, -3d, -3d};\n1146: assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n1147: 1148: RealVector v_subtract_i = v1.subtract(vt2);\n1149: double[] result_subtract_i = {-3d, -3d, -3d};\n1150: assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n1151: 1152: // octave v1 .* v2\n1153: ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n1154: double[] result_ebeMultiply = {4d, 10d, 18d};\n1155: assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n1156: 1157: RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n1158: double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n1159: assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n1160: 1161: RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n1162: double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n1163: assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n1164: 1165: // octave v1 ./ v2\n1166: ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n1167: double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n1168: assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n1169: 1170: RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n1171: double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n1172: assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n1173: 1174: RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n1175: double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n1176: assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n1177: 1178: // octave  dot(v1,v2)\n1179: double dot =  v1.dotProduct(v2);\n1180: assertEquals(\"compare val \",32d, dot);\n1181: 1182: // octave  dot(v1,v2_t)\n1183: double dot_2 =  v1.dotProduct(v2_t);\n1184: assertEquals(\"compare val \",32d, dot_2);\n1185: 1186: RealMatrix m_outerProduct = v1.outerProduct(v2);\n1187: assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n1188: 1189: RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n1190: assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n1191: 1192: RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n1193: assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n1194: 1195: RealVector v_unitVector = v1.unitVector();\n1196: RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n1197: assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n1198: 1199: try {\n1200: v_null.unitVector();\n1201: fail(\"Expecting ArithmeticException\");\n1202: } catch (ArithmeticException ex) {\n1203: // expected behavior\n1204: } catch (Exception e) {\n1205: fail(\"wrong exception caught\");\n1206: }\n1207: 1208: ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n1209: v_unitize.unitize();\n1210: assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n1211: try {\n1212: v_null.unitize();\n1213: fail(\"Expecting ArithmeticException\");\n1214: } catch (ArithmeticException ex) {\n1215: // expected behavior\n1216: } catch (Exception e) {\n1217: fail(\"wrong exception caught\");\n1218: }\n1219: 1220: ArrayRealVector v_projection = v1.projection(v2);\n1221: double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n1222: assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n1223: 1224: RealVector v_projection_2 = v1.projection(v2_t);\n1225: double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n1226: assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n1227: 1228: RealVector v_projection_3 = v1.projection(v2.getData());\n1229: double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n1230: assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n1231: 1232: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\n}",
            "method_id": 0
        }
    ]
}