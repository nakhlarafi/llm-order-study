{
    "bug_id": 59,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.FastMathTest.testMinMaxFloat",
    "test_body": "78: public void testMinMaxFloat() {\n79: float[][] pairs = {\n80: { -50.0f, 50.0f },\n81: {  Float.POSITIVE_INFINITY, 1.0f },\n82: {  Float.NEGATIVE_INFINITY, 1.0f },\n83: {  Float.NaN, 1.0f },\n84: {  Float.POSITIVE_INFINITY, 0.0f },\n85: {  Float.NEGATIVE_INFINITY, 0.0f },\n86: {  Float.NaN, 0.0f },\n87: {  Float.NaN, Float.NEGATIVE_INFINITY },\n88: {  Float.NaN, Float.POSITIVE_INFINITY }\n89: };\n90: for (float[] pair : pairs) {\n91: Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n92: Math.min(pair[0], pair[1]),\n93: FastMath.min(pair[0], pair[1]),\n94: MathUtils.EPSILON);\n95: Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n96: Math.min(pair[1], pair[0]),\n97: FastMath.min(pair[1], pair[0]),\n98: MathUtils.EPSILON);\n99: Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n100: Math.max(pair[0], pair[1]),\n101: FastMath.max(pair[0], pair[1]),\n102: MathUtils.EPSILON);\n103: Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n104: Math.max(pair[1], pair[0]),\n105: FastMath.max(pair[1], pair[0]),\n106: MathUtils.EPSILON);\n107: }\n108: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(FF)F",
            "method_body": "public static float min(final float a, final float b) {\nreturn (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:max(II)I",
            "method_body": "public static int max(final int a, final int b) {\nreturn (a <= b) ? b : a;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:max(FF)F",
            "method_body": "public static float max(final float a, final float b) {\nreturn (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.random.MersenneTwister:<init>(J)V",
            "method_body": "public MersenneTwister(long seed) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:<init>(I)V",
            "method_body": "public DfpField(final int decimalDigits) {\nthis(decimalDigits, true);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:split(Ljava/lang/String;)[Lorg/apache/commons/math/dfp/Dfp;",
            "method_body": "private Dfp[] split(final String a) {\nDfp result[] = new Dfp[2];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;Ljava/lang/String;)V",
            "method_body": "protected Dfp(final DfpField field, final String s) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.dfp.Dfp:round(I)I",
            "method_body": "protected int round(int n) {\nboolean inc = false;\n}",
            "method_id": 12
        }
    ]
}