{
    "bug_id": 67,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "56: public void testQuinticMin() throws MathException {\n57: // The quintic function has zeros at 0, +-0.5 and +-1.\n58: // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n59: UnivariateRealFunction f = new QuinticFunction();\n60: UnivariateRealOptimizer underlying = new BrentOptimizer();\n61: JDKRandomGenerator g = new JDKRandomGenerator();\n62: g.setSeed(4312000053l);\n63: MultiStartUnivariateRealOptimizer minimizer =\n64: new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n65: minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n66: minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n67: 68: try {\n69: minimizer.getOptima();\n70: fail(\"an exception should have been thrown\");\n71: } catch (IllegalStateException ise) {\n72: // expected\n73: } catch (Exception e) {\n74: fail(\"wrong exception caught\");\n75: }\n76: try {\n77: minimizer.getOptimaValues();\n78: fail(\"an exception should have been thrown\");\n79: } catch (IllegalStateException ise) {\n80: // expected\n81: } catch (Exception e) {\n82: fail(\"wrong exception caught\");\n83: }\n84: 85: assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n86: assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n87: assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);\n88: 89: double[] optima = minimizer.getOptima();\n90: double[] optimaValues = minimizer.getOptimaValues();\n91: for (int i = 0; i < optima.length; ++i) {\n92: assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n93: }\n94: 95: assertTrue(minimizer.getEvaluations()    >= 510);\n96: assertTrue(minimizer.getEvaluations()    <= 530);\n97: assertTrue(minimizer.getIterationCount() >= 150);\n98: assertTrue(minimizer.getIterationCount() <= 170);\n99: 100: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalStateException(Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)Ljava/lang/IllegalStateException;",
            "method_body": "public static IllegalStateException createIllegalStateException(final Localizable pattern,\nreturn new IllegalStateException() {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:<init>(ID)V",
            "method_body": "protected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:checkResultComputed()V",
            "method_body": "protected void checkResultComputed() throws IllegalStateException {\nif (!resultComputed) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\nsuper(100, 1E-10);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\nclearResult();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDD)D",
            "method_body": "private double localMin(final UnivariateRealFunction f, final GoalType goalType,\ndouble x = a + GOLDEN_SECTION * (b - a);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:<init>(Lorg/apache/commons/math/optimization/UnivariateRealOptimizer;ILorg/apache/commons/math/random/RandomGenerator;)V",
            "method_body": "public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,\nfinal RandomGenerator generator) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\noptima           = new double[starts];\n}",
            "method_id": 10
        }
    ]
}