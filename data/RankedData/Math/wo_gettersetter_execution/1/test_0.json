{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor",
    "test_body": "123: public void testDigitLimitConstructor() throws ConvergenceException  {\n124: assertFraction(2, 5, new Fraction(0.4,   9));\n125: assertFraction(2, 5, new Fraction(0.4,  99));\n126: assertFraction(2, 5, new Fraction(0.4, 999));\n127: 128: assertFraction(3, 5,      new Fraction(0.6152,    9));\n129: assertFraction(8, 13,     new Fraction(0.6152,   99));\n130: assertFraction(510, 829,  new Fraction(0.6152,  999));\n131: assertFraction(769, 1250, new Fraction(0.6152, 9999));\n132: 133: // MATH-996\n134: assertFraction(1, 2, new Fraction(0.5000000001, 10));\n135: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalStateException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>()V",
            "method_body": "public MathIllegalStateException() {\nthis(LocalizedFormats.ILLEGAL_STATE);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.exception.ConvergenceException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
            "method_body": "public FractionConversionException(double value, long p, long q) {\nsuper(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nfinal long l = x >>> 63;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DI)V",
            "method_body": "public Fraction(double value, int maxDenominator)\nthis(value, 0, maxDenominator, 100);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
            "method_body": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n{\n}",
            "method_id": 11
        }
    ]
}