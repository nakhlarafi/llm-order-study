{
    "bug_id": 38,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest.testConstrainedRosenWithMoreInterpolationPoints",
    "test_body": "242: public void testConstrainedRosenWithMoreInterpolationPoints() {\n243: final double[] startPoint = point(DIM, 0.1);\n244: final double[][] boundaries = boundaries(DIM, -1, 2);\n245: final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);\n246: 247: // This should have been 78 because in the code the hard limit is\n248: // said to be\n249: //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)\n250: // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,\n251: // 65, 66, ...\n252: final int maxAdditionalPoints = 47;\n253: 254: for (int num = 1; num <= maxAdditionalPoints; num++) {\n255: doTest(new Rosen(), startPoint, boundaries,\n256: GoalType.MINIMIZE,\n257: 1e-12, 1e-6, 2000,\n258: num,\n259: expected,\n260: \"num=\" + num);\n261: }\n262: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:<init>(ILorg/apache/commons/math/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>(I)V",
            "method_body": "public ArrayRealVector(int size) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:toArray()[D",
            "method_body": "public double[] toArray(){\nreturn data.clone();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker:<init>()V",
            "method_body": "public AbstractConvergenceChecker() {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:<init>()V",
            "method_body": "protected BaseAbstractMultivariateOptimizer() {\nthis(new SimpleScalarValueChecker());\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:<init>(Lorg/apache/commons/math/optimization/ConvergenceChecker;)V",
            "method_body": "protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:computeObjectiveValue([D)D",
            "method_body": "protected double computeObjectiveValue(double[] point) {\nevaluations.incrementCount();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:optimize(ILorg/apache/commons/math/analysis/MultivariateFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nif (f == null) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math/analysis/MultivariateFunction;Lorg/apache/commons/math/optimization/GoalType;[D[D[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nfinal int dim = startPoint.length;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:<init>(I)V",
            "method_body": "public BOBYQAOptimizer(int numberOfInterpolationPoints) {\nthis(numberOfInterpolationPoints,\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:<init>(IDD)V",
            "method_body": "public BOBYQAOptimizer(int numberOfInterpolationPoints,\ndouble stoppingTrustRegionRadius) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "protected RealPointValuePair doOptimize() {\nfinal double[] lowerBound = getLowerBound();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:bobyqa([D[D)D",
            "method_body": "private double bobyqa(double[] lowerBound,\nprintMethod(); // XXX\n} // bobyqa",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:bobyqb([D[D)D",
            "method_body": "private double bobyqb(double[] lowerBound,\nprintMethod(); // XXX\n} // bobyqb",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:prelim([D[D)V",
            "method_body": "private void prelim(double[] lowerBound,\nprintMethod(); // XXX\n} // prelim",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:caller(I)Ljava/lang/String;",
            "method_body": "private static String caller(int n) {\nfinal Throwable t = new Throwable();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row) {\nif (row < 0 ||\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column) {\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.BOBYQAOptimizer$PathIsExploredException:<init>()V",
            "method_body": "PathIsExploredException() {\nsuper(PATH_IS_EXPLORED + \" \" + BOBYQAOptimizer.caller(3));\n}",
            "method_id": 27
        }
    ]
}