{
    "bug_id": 100,
    "test_id": 0,
    "test_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",
    "test_body": "451: public void testBoundParameters() throws EstimationException {\n452: EstimatedParameter[] p = {\n453: new EstimatedParameter(\"unbound0\", 2, false),\n454: new EstimatedParameter(\"unbound1\", 2, false),\n455: new EstimatedParameter(\"bound\",    2, true)\n456: };\n457: LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n458: new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n459: new EstimatedParameter[] { p[0], p[1], p[2] },\n460: 3.0),\n461: new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n462: new EstimatedParameter[] { p[0], p[1], p[2] },\n463: 1.0),\n464: new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n465: new EstimatedParameter[] { p[0], p[1], p[2] },\n466: 7.0)\n467: });\n468: 469: GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n470: estimator.estimate(problem);\n471: assertTrue(estimator.getRMS(problem) < 1.0e-10);\n472: double[][] covariances = estimator.getCovariances(problem);\n473: int i0 = 0, i1 = 1;\n474: if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n475: i0 = 1;\n476: i1 = 0;\n477: }\n478: assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n479: assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n480: assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n481: assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n482: 483: double[] errors = estimator.guessParametersErrors(problem);\n484: assertEquals(0, errors[i0], 1.0e-10);\n485: assertEquals(0, errors[i1], 1.0e-10);\n486: 487: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>(II)V",
            "method_body": "public RealMatrixImpl(int rowDimension, int columnDimension) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>([[D)V",
            "method_body": "public RealMatrixImpl(double[][] d) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:add(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\nif (this.getColumnDimension() != m.getColumnDimension() ||\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:solve(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\nif (b.getRowDimension() != this.getRowDimension()) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:luDecompose()V",
            "method_body": "public void luDecompose() throws InvalidMatrixException {\nint nRows = this.getRowDimension();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nint nRows = this.getRowDimension();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyIn([[D)V",
            "method_body": "private void copyIn(double[][] in) {\nsetSubMatrix(in,0,0);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:<init>(Ljava/lang/String;DZ)V",
            "method_body": "public EstimatedParameter(String name,\nboolean bound) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:<init>()V",
            "method_body": "public SimpleEstimationProblem() {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:addParameter(Lorg/apache/commons/math/estimation/EstimatedParameter;)V",
            "method_body": "protected void addParameter(EstimatedParameter p) {\nparameters.add(p);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:addMeasurement(Lorg/apache/commons/math/estimation/WeightedMeasurement;)V",
            "method_body": "protected void addMeasurement(WeightedMeasurement m) {\nmeasurements.add(m);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:<init>(DDZ)V",
            "method_body": "public WeightedMeasurement(double weight, double measuredValue,\nboolean ignored) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateJacobian()V",
            "method_body": "protected void updateJacobian() {\nincrementJacobianEvaluationsCounter();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:incrementJacobianEvaluationsCounter()V",
            "method_body": "protected final void incrementJacobianEvaluationsCounter() {\n++jacobianEvaluations;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++costEvaluations > maxCostEval) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:initializeEstimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "protected void initializeEstimate(EstimationProblem problem) {\ncostEvaluations     = 0;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:<init>(IDD)V",
            "method_body": "public GaussNewtonEstimator(int maxCostEval,\ndouble steadyStateThreshold) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "public void estimate(EstimationProblem problem)\ninitializeEstimate(problem);\n}",
            "method_id": 17
        }
    ]
}