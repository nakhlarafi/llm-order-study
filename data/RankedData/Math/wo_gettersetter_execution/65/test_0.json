{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting",
    "test_body": "398: public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n399: Circle circle = new Circle();\n400: circle.addPoint( 30.0,  68.0);\n401: circle.addPoint( 50.0,  -6.0);\n402: circle.addPoint(110.0, -20.0);\n403: circle.addPoint( 35.0,  15.0);\n404: circle.addPoint( 45.0,  97.0);\n405: LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n406: VectorialPointValuePair optimum =\n407: optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n408: new double[] { 98.680, 47.345 });\n409: assertTrue(optimizer.getEvaluations() < 10);\n410: assertTrue(optimizer.getJacobianEvaluations() < 10);\n411: double rms = optimizer.getRMS();\n412: assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n413: Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n414: assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n415: assertEquals(96.07590211815305, center.x,      1.0e-10);\n416: assertEquals(48.13516790438953, center.y,      1.0e-10);\n417: double[][] cov = optimizer.getCovariances();\n418: assertEquals(1.839, cov[0][0], 0.001);\n419: assertEquals(0.731, cov[0][1], 0.001);\n420: assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n421: assertEquals(0.786, cov[1][1], 0.001);\n422: double[] errors = optimizer.guessParametersErrors();\n423: assertEquals(1.384, errors[0], 0.001);\n424: assertEquals(0.905, errors[1], 0.001);\n425: 426: // add perfect measurements and check errors are reduced\n427: double  r = circle.getRadius(center);\n428: for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n429: circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n430: }\n431: double[] target = new double[circle.getN()];\n432: Arrays.fill(target, 0.0);\n433: double[] weights = new double[circle.getN()];\n434: Arrays.fill(weights, 2.0);\n435: optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n436: cov = optimizer.getCovariances();\n437: assertEquals(0.0016, cov[0][0], 0.001);\n438: assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n439: assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n440: assertEquals(0.0016, cov[1][1], 0.001);\n441: errors = optimizer.guessParametersErrors();\n442: assertEquals(0.004, errors[0], 0.001);\n443: assertEquals(0.004, errors[1], 0.001);\n444: 445: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:<init>()V",
            "method_body": "protected AbstractLeastSquaresOptimizer() {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
            "method_body": "protected void updateJacobian() throws FunctionEvaluationException {\n++jacobianEvaluations;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++objectiveEvaluations > maxEvaluations) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:guessParametersErrors()[D",
            "method_body": "public double[] guessParametersErrors()\nif (rows <= cols) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
            "method_body": "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\nif (target.length != weights.length) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker:<init>()V",
            "method_body": "public SimpleVectorialValueChecker() {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.VectorialPointValuePair:<init>([D[D)V",
            "method_body": "public VectorialPointValuePair(final double[] point, final double[] value) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
            "method_body": "public LevenbergMarquardtOptimizer() {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
            "method_body": "protected VectorialPointValuePair doOptimize()\nsolvedCols  = Math.min(rows, cols);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
            "method_body": "private void determineLMParameter(double[] qy, double delta, double[] diag,\nfor (int j = 0; j < rank; ++j) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qrDecomposition()V",
            "method_body": "private void qrDecomposition() throws OptimizationException {\nfor (int k = 0; k < cols; ++k) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qTy([D)V",
            "method_body": "private void qTy(double[] y) {\nfor (int k = 0; k < cols; ++k) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public LUDecompositionImpl(RealMatrix matrix)\nthis(matrix, DEFAULT_TOO_SMALL);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;D)V",
            "method_body": "public LUDecompositionImpl(RealMatrix matrix, double singularityThreshold)\nthrows NonSquareMatrixException {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl$Solver:<init>([[D[IZ)V",
            "method_body": "private Solver(final double[][] lu, final int[] pivot, final boolean singular) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.linear.LUDecompositionImpl$Solver:solve(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix solve(RealMatrix b)\nfinal int m = pivot.length;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension)\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nthrows IllegalArgumentException, NullPointerException {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nfinal int nRows = this.getRowDimension();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn (data.length * data[0].length <= 4096) ?\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealIdentityMatrix(I)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealIdentityMatrix(int dimension) {\nfinal RealMatrix m = createRealMatrix(dimension, dimension);\n}",
            "method_id": 26
        }
    ]
}