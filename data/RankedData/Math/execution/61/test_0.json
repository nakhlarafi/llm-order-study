{
    "bug_id": 61,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.PoissonDistributionTest.testMean",
    "test_body": "137: public void testMean() {\n138: PoissonDistribution dist;\n139: try {\n140: dist = new PoissonDistributionImpl(-1);\n141: fail(\"negative mean: NotStrictlyPositiveException expected\");\n142: } catch(NotStrictlyPositiveException ex) {\n143: // Expected.\n144: }\n145: 146: dist = new PoissonDistributionImpl(10.0);\n147: assertEquals(10.0, dist.getMean(), 0.0);\n148: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final Localizable pattern,\nreturn new IllegalArgumentException() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution:<init>()V",
            "method_body": "protected AbstractIntegerDistribution() {\nsuper();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(D)V",
            "method_body": "public PoissonDistributionImpl(double p) {\nthis(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(DDI)V",
            "method_body": "public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DDD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:setMeanInternal(D)V",
            "method_body": "private void setMeanInternal(double newMean) {\nthis.mean = newMean;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:setStandardDeviationInternal(D)V",
            "method_body": "private void setStandardDeviationInternal(double sd) {\nif (sd <= 0.0) {\n}",
            "method_id": 10
        }
    ]
}