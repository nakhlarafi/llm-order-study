{
    "bug_id": 57,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances",
    "test_body": "215: public void testSmallDistances() {\n216: // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a\n217: // small distance.\n218: int[] repeatedArray = { 0 };\n219: int[] uniqueArray = { 1 };\n220: CloseIntegerPoint repeatedPoint =\n221: new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));\n222: CloseIntegerPoint uniquePoint =\n223: new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));\n224: 225: Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();\n226: final int NUM_REPEATED_POINTS = 10 * 1000;\n227: for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {\n228: points.add(repeatedPoint);\n229: }\n230: points.add(uniquePoint);\n231: 232: // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial\n233: // cluster centers).\n234: final long RANDOM_SEED = 0;\n235: final int NUM_CLUSTERS = 2;\n236: final int NUM_ITERATIONS = 0;\n237: KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =\n238: new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));\n239: List<Cluster<CloseIntegerPoint>> clusters =\n240: clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);\n241: 242: // Check that one of the chosen centers is the unique point.\n243: boolean uniquePointIsCenter = false;\n244: for (Cluster<CloseIntegerPoint> cluster : clusters) {\n245: if (cluster.getCenter().equals(uniquePoint)) {\n246: uniquePointIsCenter = true;\n247: }\n248: }\n249: assertTrue(uniquePointIsCenter);\n250: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:distance([I[I)D",
            "method_body": "public static double distance(int[] p1, int[] p2) {\ndouble sum = 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:<init>([I)V",
            "method_body": "public EuclideanIntegerPoint(final int[] point) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:getPoint()[I",
            "method_body": "public int[] getPoint() {\nreturn point;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
            "method_body": "public double distanceFrom(final EuclideanIntegerPoint p) {\nreturn MathUtils.distance(point, p.getPoint());\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object other) {\nif (!(other instanceof EuclideanIntegerPoint)) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random) {\nthis(random, EmptyClusterStrategy.LARGEST_VARIANCE);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;Lorg/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer$EmptyClusterStrategy;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
            "method_body": "public List<Cluster<T>> cluster(final Collection<T> points,\nList<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
            "method_body": "private static <T extends Clusterable<T>> void\nfor (final T p : points) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
            "method_body": "private static <T extends Clusterable<T>> List<Cluster<T>>\nfinal List<T> pointSet = new ArrayList<T>(points);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:getNearestCluster(Ljava/util/Collection;Lorg/apache/commons/math/stat/clustering/Clusterable;)Lorg/apache/commons/math/stat/clustering/Cluster;",
            "method_body": "private static <T extends Clusterable<T>> Cluster<T>\ndouble minDistance = Double.MAX_VALUE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:<init>(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public Cluster(final T center) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:addPoint(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public void addPoint(final T point) {\npoints.add(point);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:getCenter()Lorg/apache/commons/math/stat/clustering/Clusterable;",
            "method_body": "public T getCenter() {\nreturn center;\n}",
            "method_id": 14
        }
    ]
}