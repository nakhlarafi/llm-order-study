{
    "bug_id": 102,
    "test_id": 5,
    "test_name": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare",
    "test_body": "44: public void testChiSquare() throws Exception {\n45: 46: // Target values computed using R version 1.8.1 \n47: // Some assembly required ;-)  \n48: //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n49: //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n50: 51: long[] observed = {10, 9, 11};\n52: double[] expected = {10, 10, 10};\n53: assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n54: assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n55: 56: long[] observed1 = { 500, 623, 72, 70, 31 };\n57: double[] expected1 = { 485, 541, 82, 61, 37 };\n58: assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n59: assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n60: assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n61: assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n62: 63: try {\n64: TestUtils.chiSquareTest(expected1, observed1, 95);\n65: fail(\"alpha out of range, IllegalArgumentException expected\");\n66: } catch (IllegalArgumentException ex) {\n67: // expected\n68: }  \n69: 70: long[] tooShortObs = { 0 };\n71: double[] tooShortEx = { 1 };\n72: try {\n73: TestUtils.chiSquare(tooShortEx, tooShortObs);\n74: fail(\"arguments too short, IllegalArgumentException expected\");\n75: } catch (IllegalArgumentException ex) {\n76: // expected\n77: }\n78: 79: // unmatched arrays\n80: long[] unMatchedObs = { 0, 1, 2, 3 };\n81: double[] unMatchedEx = { 1, 1, 2 };\n82: try {\n83: TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n84: fail(\"arrays have different lengths, IllegalArgumentException expected\");\n85: } catch (IllegalArgumentException ex) {\n86: // expected\n87: }\n88: 89: // 0 expected count\n90: expected[0] = 0;\n91: try {\n92: TestUtils.chiSquareTest(expected, observed, .01);\n93: fail(\"bad expected count, IllegalArgumentException expected\");\n94: } catch (IllegalArgumentException ex) {\n95: // expected\n96: } \n97: 98: // negative observed count\n99: expected[0] = 1;\n100: observed[0] = -1;\n101: try {\n102: TestUtils.chiSquareTest(expected, observed, .01);\n103: fail(\"bad expected count, IllegalArgumentException expected\");\n104: } catch (IllegalArgumentException ex) {\n105: // expected\n106: } \n107: 108: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(DLorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\nsuper();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\ngetGamma().setAlpha(degreesOfFreedom / 2.0);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:<init>(DD)V",
            "method_body": "public GammaDistributionImpl(double alpha, double beta) {\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x <= 0.0) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setAlpha(D)V",
            "method_body": "public void setAlpha(double alpha) {\nif (alpha <= 0.0) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setBeta(D)V",
            "method_body": "public void setBeta(double beta) {\nif (beta <= 0.0) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>()V",
            "method_body": "public ChiSquareTestImpl() {\nthis(new ChiSquaredDistributionImpl(1.0));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nif ((expected.length < 2) || (expected.length != observed.length)) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
            "method_body": "private boolean isPositive(double[] in) {\nfor (int i = 0; i < in.length; i ++) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
            "method_body": "private boolean isNonNegative(long[] in) {\nfor (int i = 0; i < in.length; i ++) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:setDistribution(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public void setDistribution(ChiSquaredDistribution value) {\ndistribution = value;\n}",
            "method_id": 23
        }
    ]
}