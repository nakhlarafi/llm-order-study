{
    "bug_id": 100,
    "test_id": 0,
    "test_name": "org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters",
    "test_body": "451: public void testBoundParameters() throws EstimationException {\n452: EstimatedParameter[] p = {\n453: new EstimatedParameter(\"unbound0\", 2, false),\n454: new EstimatedParameter(\"unbound1\", 2, false),\n455: new EstimatedParameter(\"bound\",    2, true)\n456: };\n457: LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n458: new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n459: new EstimatedParameter[] { p[0], p[1], p[2] },\n460: 3.0),\n461: new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n462: new EstimatedParameter[] { p[0], p[1], p[2] },\n463: 1.0),\n464: new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n465: new EstimatedParameter[] { p[0], p[1], p[2] },\n466: 7.0)\n467: });\n468: 469: GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n470: estimator.estimate(problem);\n471: assertTrue(estimator.getRMS(problem) < 1.0e-10);\n472: double[][] covariances = estimator.getCovariances(problem);\n473: int i0 = 0, i1 = 1;\n474: if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n475: i0 = 1;\n476: i1 = 0;\n477: }\n478: assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n479: assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n480: assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n481: assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n482: 483: double[] errors = estimator.guessParametersErrors(problem);\n484: assertEquals(0, errors[i0], 1.0e-10);\n485: assertEquals(0, errors[i1], 1.0e-10);\n486: 487: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>(II)V",
            "method_body": "public RealMatrixImpl(int rowDimension, int columnDimension) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:<init>([[D)V",
            "method_body": "public RealMatrixImpl(double[][] d) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:add(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\nif (this.getColumnDimension() != m.getColumnDimension() ||\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getData()[[D",
            "method_body": "public double[][] getData() {\nreturn copyOut();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getDataRef()[[D",
            "method_body": "public double[][] getDataRef() {\nreturn data;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(double[][] subMatrix, int row, int column)\nif ((row < 0) || (column < 0)){\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getEntry(II)D",
            "method_body": "public double getEntry(int row, int column)\nif (!isValidCoordinate(row,column)) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:isSquare()Z",
            "method_body": "public boolean isSquare() {\nreturn (this.getColumnDimension() == this.getRowDimension());\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:isSingular()Z",
            "method_body": "public boolean isSingular() {\nif (lu == null) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn data.length;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn data[0].length;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:solve(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\nif (b.getRowDimension() != this.getRowDimension()) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:luDecompose()V",
            "method_body": "public void luDecompose() throws InvalidMatrixException {\nint nRows = this.getRowDimension();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nint nRows = this.getRowDimension();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:copyIn([[D)V",
            "method_body": "private void copyIn(double[][] in) {\nsetSubMatrix(in,0,0);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealMatrixImpl:isValidCoordinate(II)Z",
            "method_body": "private boolean isValidCoordinate(int row, int col) {\nint nRows = this.getRowDimension();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:<init>(Ljava/lang/String;DZ)V",
            "method_body": "public EstimatedParameter(String name,\nboolean bound) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:setEstimate(D)V",
            "method_body": "public void setEstimate(double estimate) {\nthis.estimate = estimate;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:getEstimate()D",
            "method_body": "public double getEstimate() {\nreturn estimate;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.estimation.EstimatedParameter:isBound()Z",
            "method_body": "public boolean isBound() {\nreturn bound;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:<init>()V",
            "method_body": "public SimpleEstimationProblem() {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getAllParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
            "method_body": "public EstimatedParameter[] getAllParameters() {\nreturn (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getUnboundParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
            "method_body": "public EstimatedParameter[] getUnboundParameters() {\nList unbound = new ArrayList(parameters.size());\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:getMeasurements()[Lorg/apache/commons/math/estimation/WeightedMeasurement;",
            "method_body": "public WeightedMeasurement[] getMeasurements() {\nreturn (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:addParameter(Lorg/apache/commons/math/estimation/EstimatedParameter;)V",
            "method_body": "protected void addParameter(EstimatedParameter p) {\nparameters.add(p);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.estimation.SimpleEstimationProblem:addMeasurement(Lorg/apache/commons/math/estimation/WeightedMeasurement;)V",
            "method_body": "protected void addMeasurement(WeightedMeasurement m) {\nmeasurements.add(m);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:<init>(DDZ)V",
            "method_body": "public WeightedMeasurement(double weight, double measuredValue,\nboolean ignored) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:getWeight()D",
            "method_body": "public double getWeight() {\nreturn weight;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:getResidual()D",
            "method_body": "public double getResidual() {\nreturn measuredValue - getTheoreticalValue();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:setIgnored(Z)V",
            "method_body": "public abstract double getPartial(EstimatedParameter parameter);\nthis.ignored = ignored;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.estimation.WeightedMeasurement:isIgnored()Z",
            "method_body": "public boolean isIgnored() {\nreturn ignored;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:setMaxCostEval(I)V",
            "method_body": "public final void setMaxCostEval(int maxCostEval) {\nthis.maxCostEval = maxCostEval;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getCostEvaluations()I",
            "method_body": "public final int getCostEvaluations() {\nreturn costEvaluations;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateJacobian()V",
            "method_body": "protected void updateJacobian() {\nincrementJacobianEvaluationsCounter();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:incrementJacobianEvaluationsCounter()V",
            "method_body": "protected final void incrementJacobianEvaluationsCounter() {\n++jacobianEvaluations;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:updateResidualsAndCost()V",
            "method_body": "protected void updateResidualsAndCost()\nif (++costEvaluations > maxCostEval) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getRMS(Lorg/apache/commons/math/estimation/EstimationProblem;)D",
            "method_body": "public double getRMS(EstimationProblem problem) {\nWeightedMeasurement[] wm = problem.getMeasurements();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
            "method_body": "public double[][] getCovariances(EstimationProblem problem)\nupdateJacobian();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.estimation.AbstractEstimator:initializeEstimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "protected void initializeEstimate(EstimationProblem problem) {\ncostEvaluations     = 0;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:<init>(IDD)V",
            "method_body": "public GaussNewtonEstimator(int maxCostEval,\ndouble steadyStateThreshold) {\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.estimation.GaussNewtonEstimator:estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
            "method_body": "public void estimate(EstimationProblem problem)\ninitializeEstimate(problem);\n}",
            "method_id": 40
        }
    ]
}