{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942",
    "test_body": "208: public void testIssue942() {\n209: List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\n210: list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\n211: list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\n212: Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n213: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
            "method_body": "public K getKey() {\nreturn key;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextDouble()D",
            "method_body": "public double nextDouble() {\nfinal long high = ((long) next(26)) << 26;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:next(I)I",
            "method_body": "protected int next(final int bits) {\nfinal int indexRm1 = iRm1[index];\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:normalizeArray([DD)[D",
            "method_body": "public static double[] normalizeArray(double[] values, double normalizedSum)\nif (Double.isInfinite(normalizedSum)) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final List<Pair<T, Double>> samples)\nthis(new Well19937c(), samples);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;Ljava/util/List;)V",
            "method_body": "public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)\nthrows NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:sample()Ljava/lang/Object;",
            "method_body": "public T sample() {\nfinal double randomValue = random.nextDouble();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;",
            "method_body": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\nif (sampleSize <= 0) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution:<init>([D[D)V",
            "method_body": "public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)\nthis(new Well19937c(), singletons, probabilities);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;[D[D)V",
            "method_body": "public DiscreteRealDistribution(final RandomGenerator rng,\nsuper(rng);\n}",
            "method_id": 20
        }
    ]
}