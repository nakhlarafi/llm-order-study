{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin",
    "test_body": "56: public void testQuinticMin() throws MathException {\n57: // The quintic function has zeros at 0, +-0.5 and +-1.\n58: // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n59: UnivariateRealFunction f = new QuinticFunction();\n60: UnivariateRealOptimizer underlying = new BrentOptimizer();\n61: underlying.setRelativeAccuracy(1e-15);\n62: JDKRandomGenerator g = new JDKRandomGenerator();\n63: g.setSeed(4312000053L);\n64: MultiStartUnivariateRealOptimizer minimizer =\n65: new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n66: minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n67: minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n68: 69: try {\n70: minimizer.getOptima();\n71: fail(\"an exception should have been thrown\");\n72: } catch (IllegalStateException ise) {\n73: // expected\n74: } catch (Exception e) {\n75: fail(\"wrong exception caught\");\n76: }\n77: try {\n78: minimizer.getOptimaValues();\n79: fail(\"an exception should have been thrown\");\n80: } catch (IllegalStateException ise) {\n81: // expected\n82: } catch (Exception e) {\n83: fail(\"wrong exception caught\");\n84: }\n85: 86: double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n87: assertEquals(-0.2719561270319131, result, 1.0e-13);\n88: assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);\n89: assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);\n90: 91: double[] optima = minimizer.getOptima();\n92: double[] optimaValues = minimizer.getOptimaValues();\n93: for (int i = 0; i < optima.length; ++i) {\n94: assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n95: }\n96: assertTrue(minimizer.getEvaluations()    >= 120);\n97: assertTrue(minimizer.getEvaluations()    <= 170);\n98: assertTrue(minimizer.getIterationCount() >= 120);\n99: assertTrue(minimizer.getIterationCount() <= 170);\n100: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\nclearResult();\n}",
            "method_id": 11
        }
    ]
}