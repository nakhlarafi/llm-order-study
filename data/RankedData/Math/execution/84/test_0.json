{
    "bug_id": 84,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283",
    "test_body": "193: public void testMath283()\n194: throws FunctionEvaluationException, OptimizationException {\n195: // fails because MultiDirectional.iterateSimplex is looping forever\n196: // the while(true) should be replaced with a convergence check\n197: MultiDirectional multiDirectional = new MultiDirectional();\n198: multiDirectional.setMaxIterations(100);\n199: multiDirectional.setMaxEvaluations(1000);\n200: 201: final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n202: 203: RealPointValuePair estimate = multiDirectional.optimize(function,\n204: GoalType.MAXIMIZE, function.getMaximumPosition());\n205: 206: final double EPSILON = 1e-5;\n207: 208: final double expectedMaximum = function.getMaximum();\n209: final double actualMaximum = estimate.getValue();\n210: Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);\n211: 212: final double[] expectedPosition = function.getMaximumPosition();\n213: final double[] actualPosition = estimate.getPoint();\n214: Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );\n215: Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );\n216: 217: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:<init>()V",
            "method_body": "protected DirectSearchOptimizer() {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setStartConfiguration([D)V",
            "method_body": "public void setStartConfiguration(final double[] steps)\nfinal int n = steps.length;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/RealConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(RealConvergenceChecker checker) {\nthis.checker = checker;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double v1 = o1.getValue();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluate([D)D",
            "method_body": "protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nif (++evaluations > maxEvaluations) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:buildSimplex([D)V",
            "method_body": "private void buildSimplex(final double[] startPoint)\nfinal int n = startPoint.length;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluateSimplex(Ljava/util/Comparator;)V",
            "method_body": "protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)\nfor (int i = 0; i < simplex.length; ++i) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker:<init>()V",
            "method_body": "public SimpleScalarValueChecker() {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1:compare(Lorg/apache/commons/math/optimization/RealPointValuePair;Lorg/apache/commons/math/optimization/RealPointValuePair;)I",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double v1 = o1.getValue();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DDZ)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value,\nfinal boolean copyArray) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn point;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:<init>()V",
            "method_body": "public MultiDirectional() {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\nfinal double[] xSmallest = original[0].getPointRef();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object ... arguments) {\nsuper(buildMessage(Locale.US, pattern, arguments));\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public MathException(Throwable rootCause) {\nsuper(rootCause);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.MathException:buildMessage(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\nreturn (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(Locale locale) {\nreturn buildMessage(locale, pattern, arguments);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(String pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ConvergenceException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.OptimizationException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public OptimizationException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.MaxIterationsExceededException:<init>(I)V",
            "method_body": "public MaxIterationsExceededException(final int maxIterations) {\nsuper(\"Maximal number of iterations ({0}) exceeded\", maxIterations);\n}",
            "method_id": 27
        }
    ]
}