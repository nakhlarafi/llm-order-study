{
    "bug_id": 52,
    "test_id": 0,
    "test_name": "org.apache.commons.math.geometry.euclidean.threed.RotationTest.testIssue639",
    "test_body": "480: public void testIssue639(){\n481: Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n482: -5774608829631843.0 /  268435456.0,\n483: -3822921525525679.0 / 4294967296.0);\n484: Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n485: -2275058564560979.0 /    1048576.0,\n486: 4423475992255071.0 /      65536.0);\n487: Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n488: Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);\n489: Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);\n490: Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);\n491: Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);\n492: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:linearCombination(DDDD)D",
            "method_body": "public static double linearCombination(final double a1, final double b1,\nfinal double ca1        = SPLIT_FACTOR * a1;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:linearCombination(DDDDDD)D",
            "method_body": "public static double linearCombination(final double a1, final double b1,\nfinal double ca1        = SPLIT_FACTOR * a1;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DDD)V",
            "method_body": "public Vector3D(double x, double y, double z) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a, Vector3D u) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getZ()D",
            "method_body": "public double getZ() {\nreturn z;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getNormSq()D",
            "method_body": "public double getNormSq() {\nreturn x * x + y * y + z * z;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:subtract(Lorg/apache/commons/math/geometry/Vector;)Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D subtract(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math/geometry/Vector;)D",
            "method_body": "public double dotProduct(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector;)Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D crossProduct(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.geometry.euclidean.threed.Rotation:getQ0()D",
            "method_body": "public double getQ0() {\nreturn q0;\n}",
            "method_id": 14
        }
    ]
}