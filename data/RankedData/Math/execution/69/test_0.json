{
    "bug_id": 69,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest.testPValueNearZero",
    "test_body": "167: public void testPValueNearZero() throws Exception {\n168: /*\n169: * Create a dataset that has r -> 1, p -> 0 as dimension increases.\n170: * Prior to the fix for MATH-371, p vanished for dimension >= 14.\n171: * Post fix, p-values diminish smoothly, vanishing at dimension = 127.\n172: * Tested value is ~1E-303.\n173: */\n174: int dimension = 120; \n175: double[][] data = new double[dimension][2];\n176: for (int i = 0; i < dimension; i++) {\n177: data[i][0] = i;\n178: data[i][1] = i + 1/((double)i + 1);\n179: }\n180: PearsonsCorrelation corrInstance = new PearsonsCorrelation(data);\n181: assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);\n182: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:<init>(II)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:<init>([[D)V",
            "method_body": "public BlockRealMatrix(final double[][] rawData)\nthis(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:<init>(II[[DZ)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns,\nsuper(rows, columns);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nfinal int rows         = rawData.length;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getColumn(I)[D",
            "method_body": "public double[] getColumn(final int column)\nMatrixUtils.checkColumnIndex(this, column);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nfinal int iBlock = row    / BLOCK_SIZE;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nfinal int iBlock = row    / BLOCK_SIZE;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b)\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b, double epsilon,\nif (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x, final double a,\nif (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(DD)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {\nsuper();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:<init>(D)V",
            "method_body": "public TDistributionImpl(double degreesOfFreedom) {\nthis(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\nsetDegreesOfFreedomInternal(degreesOfFreedom);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedomInternal(D)V",
            "method_body": "private void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {\nif (newDegreesOfFreedom <= 0.0) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.distribution.TDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\nif (x == 0.0) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>([[D)V",
            "method_body": "public PearsonsCorrelation(double[][] data) {\nthis(new BlockRealMatrix(data));\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public PearsonsCorrelation(RealMatrix matrix) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getCorrelationPValues() throws MathException {\nTDistribution tDistribution = new TDistributionImpl(nObs - 2);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:computeCorrelationMatrix(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix computeCorrelationMatrix(RealMatrix matrix) {\nint nVars = matrix.getColumnDimension();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
            "method_body": "public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\nSimpleRegression regression = new SimpleRegression();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "private void checkSufficientData(final RealMatrix matrix) {\nint nRows = matrix.getRowDimension();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:<init>()V",
            "method_body": "public SimpleRegression() {\nthis(new TDistributionImpl(1.0));\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:<init>(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public SimpleRegression(TDistribution t) {\nsuper();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
            "method_body": "public void addData(double x, double y) {\nif (n == 0) {\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSlope()D",
            "method_body": "public double getSlope() {\nif (n < 2) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D",
            "method_body": "public double getSumSquaredErrors() {\nreturn Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getTotalSumSquares()D",
            "method_body": "public double getTotalSumSquares() {\nif (n < 2) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getR()D",
            "method_body": "public double getR() {\ndouble b1 = getSlope();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare()D",
            "method_body": "public double getRSquare() {\ndouble ssto = getTotalSumSquares();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.stat.regression.SimpleRegression:setDistribution(Lorg/apache/commons/math/distribution/TDistribution;)V",
            "method_body": "public void setDistribution(TDistribution value) {\ndistribution = value;\n}",
            "method_id": 43
        }
    ]
}