{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718",
    "test_body": "133: public void testMath718() {\n134: // for large trials the evaluation of ContinuedFraction was inaccurate\n135: // do a sweep over several large trials to test if the current implementation is\n136: // numerically stable.\n137: 138: for (int trials = 500000; trials < 20000000; trials += 100000) {\n139: BinomialDistribution dist = new BinomialDistribution(trials, 0.5);\n140: int p = dist.inverseCumulativeProbability(0.5);\n141: Assert.assertEquals(trials / 2, p);\n142: }\n143: 144: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b) {\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
            "method_body": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:solveInverseCumulativeProbability(DII)I",
            "method_body": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\nwhile (lower + 1 < upper) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:checkedCumulativeProbability(I)D",
            "method_body": "private double checkedCumulativeProbability(int argument)\ndouble result = Double.NaN;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:<init>(ID)V",
            "method_body": "public BinomialDistribution(int trials, double p) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:cumulativeProbability(I)D",
            "method_body": "public double cumulativeProbability(int x) {\nif (x < 0) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nreturn numberOfTrials * probabilityOfSuccess;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nfinal double p = probabilityOfSuccess;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportLowerBound()I",
            "method_body": "public int getSupportLowerBound() {\nreturn probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportUpperBound()I",
            "method_body": "public int getSupportUpperBound() {\nreturn probabilityOfSuccess > 0.0 ? numberOfTrials : 0;\n}",
            "method_id": 23
        }
    ]
}