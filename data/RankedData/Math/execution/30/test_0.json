{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet",
    "test_body": "105: public void testBigDataSet() throws Exception {\n106: double[] d1 = new double[1500];\n107: double[] d2 = new double[1500];\n108: for (int i = 0; i < 1500; i++) {\n109: d1[i] = 2 * i;\n110: d2[i] = 2 * i + 1;\n111: }\n112: double result = testStatistic.mannWhitneyUTest(d1, d2);\n113: Assert.assertTrue(result > 0.1);\n114: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) {\nif (FastMath.abs(x) > 40) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DD)V",
            "method_body": "public NormalDistribution(double mean, double sd)\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DDD)V",
            "method_body": "public NormalDistribution(double mean, double sd, double inverseCumAccuracy)\nthrows NotStrictlyPositiveException {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x)  {\nfinal double dev = x - mean;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:<init>(Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/stat/ranking/TiesStrategy;)V",
            "method_body": "public NaturalRanking(NaNStrategy nanStrategy, TiesStrategy tiesStrategy) {\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:rank([D)[D",
            "method_body": "public double[] rank(double[] data) {\nIntDoublePair[] ranks = new IntDoublePair[data.length];\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:restoreNaNs([DLjava/util/List;)V",
            "method_body": "private void restoreNaNs(double[] ranks, List<Integer> nanPositions) {\nif (nanPositions.size() == 0) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:getNanPositions([Lorg/apache/commons/math3/stat/ranking/NaturalRanking$IntDoublePair;)Ljava/util/List;",
            "method_body": "private List<Integer> getNanPositions(IntDoublePair[] ranks) {\nArrayList<Integer> out = new ArrayList<Integer>();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:<init>(DI)V",
            "method_body": "public IntDoublePair(double value, int position) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:compareTo(Lorg/apache/commons/math3/stat/ranking/NaturalRanking$IntDoublePair;)I",
            "method_body": "public int compareTo(IntDoublePair other) {\nreturn Double.compare(value, other.value);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getPosition()I",
            "method_body": "public int getPosition() {\nreturn position;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:<init>()V",
            "method_body": "public MannWhitneyUTest() {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:ensureDataConformance([D[D)V",
            "method_body": "private void ensureDataConformance(final double[] x, final double[] y)\nif (x == null ||\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:concatenateSamples([D[D)[D",
            "method_body": "private double[] concatenateSamples(final double[] x, final double[] y) {\nfinal double[] z = new double[x.length + y.length];\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyU([D[D)D",
            "method_body": "public double mannWhitneyU(final double[] x, final double[] y)\nensureDataConformance(x, y);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:calculateAsymptoticPValue(DII)D",
            "method_body": "private double calculateAsymptoticPValue(final double Umin,\nfinal int n1n2prod = n1 * n2;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyUTest([D[D)D",
            "method_body": "public double mannWhitneyUTest(final double[] x, final double[] y)\nensureDataConformance(x, y);\n}",
            "method_id": 21
        }
    ]
}