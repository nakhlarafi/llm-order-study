{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "157: public void testExtremeValues() throws Exception {\n158: NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n159: for (int i = 0; i < 100; i++) { // make sure no convergence exception\n160: double lowerTail = distribution.cumulativeProbability(-i);\n161: double upperTail = distribution.cumulativeProbability(i);\n162: if (i < 9) { // make sure not top-coded \n163: // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n164: // TODO: once MATH-364 is resolved, replace 9 with 30\n165: assertTrue(lowerTail > 0.0d);\n166: assertTrue(upperTail < 1.0d);\n167: }\n168: else { // make sure top coding not reversed\n169: assertTrue(lowerTail < 0.00001);\n170: assertTrue(upperTail > 0.99999);\n171: }\n172: }\n173: 174: assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n175: assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n176: assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n177: assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n178: 179: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nlong bits = Double.doubleToLongBits(x);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nreturn (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathException(Localizable pattern, Object ... arguments) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DDD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nfinal double dev = x - mean;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) throws MathException {\ndouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n}",
            "method_id": 20
        }
    ]
}