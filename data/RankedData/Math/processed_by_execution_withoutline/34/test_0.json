{
    "bug_id": 34,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.genetics.ListPopulationTest.testIterator",
    "test_body": "168: public void testIterator() {\n169: final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();\n170: chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n171: chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n172: chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n173: 174: final ListPopulation population = new ListPopulation(10) {\n175: public Population nextGeneration() {\n176: // not important\n177: return null;\n178: }\n179: };\n180: 181: population.addChromosomes(chromosomes);\n182: 183: final Iterator<Chromosome> iter = population.iterator();\n184: while (iter.hasNext()) {\n185: iter.next();\n186: iter.remove();\n187: }\n188: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.genetics.GeneticAlgorithm:<clinit>()V",
            "method_body": "private static RandomGenerator randomGenerator = new JDKRandomGenerator();\n/** the number of generations evolved to reach {@link StoppingCondition} in the last run. */",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.GeneticAlgorithm:getRandomGenerator()Lorg/apache/commons/math3/random/RandomGenerator;",
            "method_body": "public static synchronized RandomGenerator getRandomGenerator() {\nreturn randomGenerator;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.AbstractListChromosome:<init>(Ljava/util/List;)V",
            "method_body": "public AbstractListChromosome(final List<T> representation) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:<init>(Ljava/util/List;)V",
            "method_body": "public BinaryChromosome(List<Integer> representation) {\nsuper(representation);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:checkValidity(Ljava/util/List;)V",
            "method_body": "protected void checkValidity(List<Integer> chromosomeRepresentation)\nfor (int i : chromosomeRepresentation) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:randomBinaryRepresentation(I)Ljava/util/List;",
            "method_body": "public static List<Integer> randomBinaryRepresentation(int length) {\nList<Integer> rList= new ArrayList<Integer> (length);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V",
            "method_body": "public ListPopulation(final int populationLimit) {\nthis(Collections.<Chromosome> emptyList(), populationLimit);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V",
            "method_body": "public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V",
            "method_body": "public void addChromosomes(final Collection<Chromosome> chromosomeColl) {\nif (chromosomes.size() + chromosomeColl.size() > populationLimit) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Chromosome> iterator() {\nreturn chromosomes.iterator();\n}",
            "method_id": 9
        }
    ]
}