{
    "bug_id": 37,
    "test_id": 2,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testTan",
    "test_body": "995: public void testTan() {\n996: Complex z = new Complex(3, 4);\n997: Complex expected = new Complex(-0.000187346, 0.999356);\n998: TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n999: /* Check that no overflow occurs (MATH-722) */\n1000: Complex actual = new Complex(3.0, 1E10).tan();\n1001: expected = new Complex(0, 1);\n1002: TestUtils.assertEquals(expected, actual, 1.0e-5);\n1003: actual = new Complex(3.0, -1E10).tan();\n1004: expected = new Complex(0, -1);\n1005: TestUtils.assertEquals(expected, actual, 1.0e-5);\n1006: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cosh(D)D",
            "method_body": "public static double cosh(double x) {\nif (x != x) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sinh(D)D",
            "method_body": "public static double sinh(double x) {\nboolean negate = false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:polySine(D)D",
            "method_body": "private static double polySine(final double x)\ndouble x2 = x*x;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:polyCosine(D)D",
            "method_body": "private static double polyCosine(double x) {\ndouble x2 = x*x;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sinQ(DD)D",
            "method_body": "private static double sinQ(double xa, double xb) {\nint idx = (int) ((xa * 8.0) + 0.5);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cosQ(DD)D",
            "method_body": "private static double cosQ(double xa, double xb) {\nfinal double pi2a = 1.5707963267948966;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sin(D)D",
            "method_body": "public static double sin(double x) {\nboolean negative = false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:cos(D)D",
            "method_body": "public static double cos(double x) {\nint quadrant = 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMathLiteralArrays:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_A = new double[] {\n};",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMathLiteralArrays:loadExpIntA()[D",
            "method_body": "static double[] loadExpIntA() {\nreturn EXP_INT_A.clone();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMathLiteralArrays:loadExpIntB()[D",
            "method_body": "static double[] loadExpIntB() {\nreturn EXP_INT_B.clone();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMathLiteralArrays:loadExpFracA()[D",
            "method_body": "static double[] loadExpFracA() {\nreturn EXP_FRAC_A.clone();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMathLiteralArrays:loadExpFracB()[D",
            "method_body": "static double[] loadExpFracB() {\nreturn EXP_FRAC_B.clone();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath$ExpIntTable:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_TABLE_A;\nif (RECOMPUTE_TABLES_AT_RUNTIME) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath$ExpFracTable:<clinit>()V",
            "method_body": "private static final double[] EXP_FRAC_TABLE_A;\nif (RECOMPUTE_TABLES_AT_RUNTIME) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<clinit>()V",
            "method_body": "public static final Complex I = new Complex(0.0, 1.0);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex tan() {\nif (isNaN) {\n}",
            "method_id": 23
        }
    ]
}