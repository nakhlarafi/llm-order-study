{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor",
    "test_body": "123: public void testDigitLimitConstructor() throws ConvergenceException  {\n124: assertFraction(2, 5, new Fraction(0.4,   9));\n125: assertFraction(2, 5, new Fraction(0.4,  99));\n126: assertFraction(2, 5, new Fraction(0.4, 999));\n127: 128: assertFraction(3, 5,      new Fraction(0.6152,    9));\n129: assertFraction(8, 13,     new Fraction(0.6152,   99));\n130: assertFraction(510, 829,  new Fraction(0.6152,  999));\n131: assertFraction(769, 1250, new Fraction(0.6152, 9999));\n132: 133: // MATH-996\n134: assertFraction(1, 2, new Fraction(0.5000000001, 10));\n135: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.exception.util.LocalizedFormats:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "private LocalizedFormats(final String sourceFormat) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.LocalizedFormats:getLocalizedString(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getLocalizedString(final Locale locale) {\nfinal String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(final Locale locale) {\nreturn buildMessage(locale, \": \");\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:buildMessage(Ljava/util/Locale;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String buildMessage(Locale locale,\nfinal StringBuilder sb = new StringBuilder();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n};",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalStateException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>()V",
            "method_body": "public MathIllegalStateException() {\nthis(LocalizedFormats.ILLEGAL_STATE);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:getContext()Lorg/apache/commons/math3/exception/util/ExceptionContext;",
            "method_body": "public ExceptionContext getContext() {\nreturn context;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn context.getLocalizedMessage();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.exception.ConvergenceException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
            "method_body": "public FractionConversionException(double value, long p, long q) {\nsuper(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(I)I",
            "method_body": "public static int abs(final int x) {\nfinal int i = x >>> 31;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nfinal long l = x >>> 63;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:gcd(II)I",
            "method_body": "public static int gcd(int p,\nint a = p;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:gcdPositive(II)I",
            "method_body": "private static int gcdPositive(int a,\nif (a == 0) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DI)V",
            "method_body": "public Fraction(double value, int maxDenominator)\nthis(value, 0, maxDenominator, 100);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
            "method_body": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n{\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(II)V",
            "method_body": "public Fraction(int num, int den) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<clinit>()V",
            "method_body": "public static final Fraction TWO = new Fraction(2, 1);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:getDenominator()I",
            "method_body": "public int getDenominator() {\nreturn denominator;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:getNumerator()I",
            "method_body": "public int getNumerator() {\nreturn numerator;\n}",
            "method_id": 26
        }
    ]
}