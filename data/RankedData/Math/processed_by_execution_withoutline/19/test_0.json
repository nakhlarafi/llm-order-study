{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundaryRangeTooLarge",
    "test_body": "409: public void testBoundaryRangeTooLarge() {\n410: final CMAESOptimizer optimizer = new CMAESOptimizer();\n411: final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n412: public double value(double[] parameters) {\n413: if (Double.isNaN(parameters[0])) {\n414: throw new MathIllegalStateException();\n415: }\n416: final double target = 1;\n417: final double error = target - parameters[0];\n418: return error * error;\n419: }\n420: };\n421: 422: final double[] start = { 0 };\n423: 424: // The difference between upper and lower bounds is used to used\n425: // normalize the variables: In case of overflow, NaN is produced.\n426: final double max = Double.MAX_VALUE / 2;\n427: final double tooLarge = FastMath.nextUp(max);\n428: final double[] lower = { -tooLarge };\n429: final double[] upper = { tooLarge };\n430: final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n431: start, lower, upper).getPoint();\n432: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:nextUp(D)D",
            "method_body": "public static double nextUp(final double a) {\nreturn nextAfter(a, Double.POSITIVE_INFINITY);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:nextAfter(DD)D",
            "method_body": "public static double nextAfter(double d, double direction) {\nif (Double.isNaN(d) || Double.isNaN(direction)) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(II)I",
            "method_body": "public static int max(final int a, final int b) {\nreturn (a <= b) ? b : a;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.LocalizedFormats:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "private LocalizedFormats(final String sourceFormat) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.LocalizedFormats:getLocalizedString(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getLocalizedString(final Locale locale) {\nfinal String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(final Locale locale) {\nreturn buildMessage(locale, \": \");\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:buildMessage(Ljava/util/Locale;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String buildMessage(Locale locale,\nfinal StringBuilder sb = new StringBuilder();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getMaximalCount()I",
            "method_body": "public int getMaximalCount() {\nreturn maximalCount;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalStateException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>()V",
            "method_body": "public MathIllegalStateException() {\nthis(LocalizedFormats.ILLEGAL_STATE);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn context.getLocalizedMessage();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:<clinit>()V",
            "method_body": "public static final double SAFE_MIN;\nEPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:<init>()V",
            "method_body": "public MersenneTwister() {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:<clinit>()V",
            "method_body": "private static final int[] MAG01 = { 0x0, 0x9908b0df };\nprivate static final int[] MAG01 = { 0x0, 0x9908b0df };",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed(I)V",
            "method_body": "public void setSeed(int seed) {\nlong longMT = seed;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed([I)V",
            "method_body": "public void setSeed(int[] seed) {\nif (seed == null) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed(J)V",
            "method_body": "public void setSeed(long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()Ljava/text/NumberFormat;",
            "method_body": "public static NumberFormat getDefaultNumberFormat() {\nreturn getDefaultNumberFormat(Locale.getDefault());\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat(Ljava/util/Locale;)Ljava/text/NumberFormat;",
            "method_body": "public static NumberFormat getDefaultNumberFormat(final Locale locale) {\nfinal NumberFormat nf = NumberFormat.getInstance(locale);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker:<init>()V",
            "method_body": "public AbstractConvergenceChecker() {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.AbstractConvergenceChecker:<clinit>()V",
            "method_body": "private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;\npublic AbstractConvergenceChecker() {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {}\nprotected AbstractRealMatrix() {}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<clinit>()V",
            "method_body": "private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:scalarAdd(D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix scalarAdd(final double d) {\nfinal int rowCount    = getRowDimension();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:scalarMultiply(D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix scalarMultiply(final double d) {\nfinal int rowCount    = getRowDimension();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix multiply(final RealMatrix m)\nMatrixUtils.checkMultiplicationCompatible(this, m);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getFrobeniusNorm()D",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/text/NumberFormat;)V",
            "method_body": "public RealMatrixFormat(final NumberFormat format) {\nthis(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public RealMatrixFormat(final String prefix, final String suffix,\nthis(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/text/NumberFormat;)V",
            "method_body": "public RealMatrixFormat(final String prefix, final String suffix,\nfinal NumberFormat format) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getFormat()Ljava/text/NumberFormat;",
            "method_body": "public NumberFormat getFormat() {\nreturn format;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getInstance()Lorg/apache/commons/math3/linear/RealMatrixFormat;",
            "method_body": "public static RealMatrixFormat getInstance() {\nreturn getInstance(Locale.getDefault());\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getInstance(Ljava/util/Locale;)Lorg/apache/commons/math3/linear/RealMatrixFormat;",
            "method_body": "public static RealMatrixFormat getInstance(final Locale locale) {\nreturn new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:<clinit>()V",
            "method_body": "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();\n* A format for {@link RealMatrix} objects compatible with octave.",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createColumnRealMatrix([D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createColumnRealMatrix(double[] columnData)\nif (columnData == null) {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn evaluations.getMaximalCount();\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:computeObjectiveValue([D)D",
            "method_body": "protected double computeObjectiveValue(double[] point) {\nevaluations.incrementCount();\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nreturn optimizeInternal(maxEval, f, goalType, startPoint);\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:optimizeInternal(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType,\nif (f == null) {\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:getGoalType()Lorg/apache/commons/math3/optimization/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start.clone();\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.SimpleValueChecker:<init>()V",
            "method_body": "public SimpleValueChecker() {}\npublic SimpleValueChecker() {}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:<init>(Lorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "protected BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:getLowerBound()[D",
            "method_body": "public double[] getLowerBound() {\nreturn lowerBound.clone();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound.clone();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D[D[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "public PointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\nfinal int dim = startPoint.length;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension,\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nNullArgumentException {\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension,\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nMatrixUtils.checkMatrixIndex(this, row, column);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nMatrixUtils.checkMatrixIndex(this, row, column);\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\nfinal int rows    = getRowDimension();\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>()V",
            "method_body": "public CMAESOptimizer() {\nthis(0);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I)V",
            "method_body": "public CMAESOptimizer(int lambda) {\nthis(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I[DIDZIILorg/apache/commons/math3/random/RandomGenerator;Z)V",
            "method_body": "public CMAESOptimizer(int lambda, double[] inputSigma,\nthis(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<init>(I[DIDZIILorg/apache/commons/math3/random/RandomGenerator;ZLorg/apache/commons/math3/optimization/ConvergenceChecker;)V",
            "method_body": "public CMAESOptimizer(int lambda, double[] inputSigma,\nsuper(checker);\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:<clinit>()V",
            "method_body": "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\nthis(0);\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
            "method_body": "protected PointValuePair doOptimize() {\ncheckParameters();\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nfinal double[] init = getStartPoint();\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V",
            "method_body": "private void initializeCMA(double[] guess) {\nif (lambda <= 0) {\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:log(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix log(final RealMatrix m) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:square(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix square(final RealMatrix m) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:times(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\ndouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:diag(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix diag(final RealMatrix m) {\nif (m.getColumnDimension() == 1) {\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:ones(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix ones(int n, int m) {\ndouble[][] d = new double[n][m];\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:eye(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix eye(int n, int m) {\ndouble[][] d = new double[n][m];\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:zeros(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix zeros(int n, int m) {\nreturn new Array2DRowRealMatrix(n, m);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:repmat(Lorg/apache/commons/math3/linear/RealMatrix;II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\nint rd = mat.getRowDimension();\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sequence(DDD)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private static RealMatrix sequence(double start, double end, double step) {\nint size = (int) ((end - start) / step + 1);\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer:max(Lorg/apache/commons/math3/linear/RealMatrix;)D",
            "method_body": "private static double max(final RealMatrix m) {\ndouble max = -Double.MAX_VALUE;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:<init>(Lorg/apache/commons/math3/optimization/direct/CMAESOptimizer;)V",
            "method_body": "public FitnessFunction() {\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D",
            "method_body": "public double[] encode(final double[] x) {\nif (boundaries == null) {\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
            "method_body": "public double[] decode(final double[] x) {\nif (boundaries == null) {\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
            "method_body": "public double value(final double[] point) {\nif (boundaries != null && isRepairMode) {\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repair([D)[D",
            "method_body": "private double[] repair(final double[] x) {\ndouble[] repaired = new double[x.length];\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:start(IIIIII)V",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:visit(IID)V",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$2:end()D",
            "method_body": "public double getFrobeniusNorm() {\nreturn walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\nsum = 0;\nsum += value * value;\nreturn FastMath.sqrt(sum);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:start(IIIIII)V",
            "method_body": "public void start(int rows, int columns,\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:end()D",
            "method_body": "public double end() {\nreturn 0;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$5:visit(IID)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 105
        }
    ]
}