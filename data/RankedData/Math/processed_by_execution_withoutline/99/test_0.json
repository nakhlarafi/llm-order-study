{
    "bug_id": 99,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testLcm",
    "test_body": "565: public void testLcm() {\n566: int a = 30;\n567: int b = 50;\n568: int c = 77;\n569: 570: assertEquals(0, MathUtils.lcm(0, b));\n571: assertEquals(0, MathUtils.lcm(a, 0));\n572: assertEquals(b, MathUtils.lcm(1, b));\n573: assertEquals(a, MathUtils.lcm(a, 1));\n574: assertEquals(150, MathUtils.lcm(a, b));\n575: assertEquals(150, MathUtils.lcm(-a, b));\n576: assertEquals(150, MathUtils.lcm(a, -b));\n577: assertEquals(150, MathUtils.lcm(-a, -b));\n578: assertEquals(2310, MathUtils.lcm(a, c));\n579: 580: // Assert that no intermediate value overflows:\n581: // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n582: assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));\n583: 584: // Special case\n585: assertEquals(0, MathUtils.lcm(0, 0));\n586: 587: try {\n588: // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n589: MathUtils.lcm(Integer.MIN_VALUE, 1);\n590: fail(\"Expecting ArithmeticException\");\n591: } catch (ArithmeticException ex) {\n592: // expected\n593: }\n594: 595: try {\n596: // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n597: MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n598: fail(\"Expecting ArithmeticException\");\n599: } catch (ArithmeticException ex) {\n600: // expected\n601: }\n602: 603: try {\n604: MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n605: fail(\"Expecting ArithmeticException\");\n606: } catch (ArithmeticException ex) {\n607: // expected\n608: }\n609: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:<clinit>()V",
            "method_body": "private static final long[] factorials = new long[]\n2432902008176640000l};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:lcm(II)I",
            "method_body": "public static int lcm(int a, int b) {\nif (a==0 || b==0){\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:mulAndCheck(II)I",
            "method_body": "public static int mulAndCheck(int x, int y) {\nlong m = ((long)x) * ((long)y);\n}",
            "method_id": 3
        }
    ]
}