{
    "bug_id": 66,
    "test_id": 3,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testSinMin",
    "test_body": "41: public void testSinMin() throws MathException {\n42: UnivariateRealFunction f = new SinFunction();\n43: UnivariateRealOptimizer minimizer = new BrentOptimizer();\n44: minimizer.setMaxEvaluations(200);\n45: assertEquals(200, minimizer.getMaxEvaluations());\n46: try {\n47: minimizer.getResult();\n48: fail(\"an exception should have been thrown\");\n49: } catch (NoDataException ise) {\n50: // expected\n51: } catch (Exception e) {\n52: fail(\"wrong exception caught\");\n53: }\n54: assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());\n55: assertTrue(minimizer.getIterationCount() <= 50);\n56: assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());\n57: assertTrue(minimizer.getIterationCount() <= 50);\n58: assertTrue(minimizer.getEvaluations()    <= 100);\n59: assertTrue(minimizer.getEvaluations()    >=  15);\n60: minimizer.setMaxEvaluations(10);\n61: try {\n62: minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n63: fail(\"an exception should have been thrown\");\n64: } catch (FunctionEvaluationException fee) {\n65: // expected\n66: } catch (Exception e) {\n67: fail(\"wrong exception caught\");\n68: }\n69: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>()V",
            "method_body": "protected ConvergingAlgorithmImpl() {}\nprotected ConvergingAlgorithmImpl() {}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.LocalizedFormats:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "private LocalizedFormats(final String sourceFormat) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:<init>()V",
            "method_body": "protected AbstractUnivariateRealOptimizer() {}\nprotected AbstractUnivariateRealOptimizer() {}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getGoalType()Lorg/apache/commons/math/optimization/GoalType;",
            "method_body": "public GoalType getGoalType() {\nreturn goal;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<clinit>()V",
            "method_body": "private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));\npublic BrentOptimizer() {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\nclearResult();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {\nreturn optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
            "method_body": "private double localMin(boolean isMinim,\nif (eps <= 0) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.exception.MathIllegalArgumentException:<init>(Lorg/apache/commons/math/util/Localizable;Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "protected MathIllegalArgumentException(Localizable specific,\nObject ... args) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.exception.MathIllegalArgumentException:flatten([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "private List<Object> flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
            "method_body": "public double getResult() {\nif (!resultComputed) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn maxEvaluations;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.exception.NoDataException:<init>()V",
            "method_body": "public NoDataException() {\nthis(null);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.exception.NoDataException:<init>(Lorg/apache/commons/math/util/Localizable;)V",
            "method_body": "public NoDataException(Localizable specific) {\nsuper(specific, LocalizedFormats.NO_DATA, null);\n}",
            "method_id": 23
        }
    ]
}