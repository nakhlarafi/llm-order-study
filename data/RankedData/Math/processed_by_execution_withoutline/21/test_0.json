{
    "bug_id": 21,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789",
    "test_body": "76: public void testMath789() {\n77: 78: final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n79: {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n80: {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n81: {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n82: {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n83: });\n84: RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n85: RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n86: Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);\n87: 88: final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n89: {0.0, 0.0, 0.0, 0.0, 0.0},\n90: {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n91: {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n92: {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n93: {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n94: });\n95: RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n96: RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n97: Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);\n98: 99: final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n100: {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n101: {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n102: {0.0, 0.0, 0.0, 0.0, 0.0},\n103: {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n104: {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n105: });\n106: RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n107: RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n108: Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);\n109: 110: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()Ljava/text/NumberFormat;",
            "method_body": "public static NumberFormat getDefaultNumberFormat() {\nreturn getDefaultNumberFormat(Locale.getDefault());\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat(Ljava/util/Locale;)Ljava/text/NumberFormat;",
            "method_body": "public static NumberFormat getDefaultNumberFormat(final Locale locale) {\nfinal NumberFormat nf = NumberFormat.getInstance(locale);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {}\nprotected AbstractRealMatrix() {}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<clinit>()V",
            "method_body": "private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:subtract(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix subtract(final RealMatrix m) {\nMatrixUtils.checkSubtractionCompatible(this, m);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix multiply(final RealMatrix m) {\nMatrixUtils.checkMultiplicationCompatible(this, m);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getNorm()D",
            "method_body": "public double getNorm() {\nreturn walkInColumnOrder(new RealMatrixPreservingVisitor() {\nthis.endRow = endRow;\ncolumnSum += FastMath.abs(value);\nreturn maxColSum;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/text/NumberFormat;)V",
            "method_body": "public RealMatrixFormat(final NumberFormat format) {\nthis(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public RealMatrixFormat(final String prefix, final String suffix,\nthis(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/text/NumberFormat;)V",
            "method_body": "public RealMatrixFormat(final String prefix, final String suffix,\nfinal NumberFormat format) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getFormat()Ljava/text/NumberFormat;",
            "method_body": "public NumberFormat getFormat() {\nreturn format;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getInstance()Lorg/apache/commons/math3/linear/RealMatrixFormat;",
            "method_body": "public static RealMatrixFormat getInstance() {\nreturn getInstance(Locale.getDefault());\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealMatrixFormat:getInstance(Ljava/util/Locale;)Lorg/apache/commons/math3/linear/RealMatrixFormat;",
            "method_body": "public static RealMatrixFormat getInstance(final Locale locale) {\nreturn new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) {\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows DimensionMismatchException, NoDataException, NullArgumentException {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension,\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nreturn copyOut();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix,\nif (data == null) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column) {\nMatrixUtils.checkMatrixIndex(this, row, column);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value) {\nMatrixUtils.checkMatrixIndex(this, row, column);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\nfinal int rows    = getRowDimension();\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:walkInColumnOrder(Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) {\nfinal int rows    = getRowDimension();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyOut()[[D",
            "method_body": "private double[][] copyOut() {\nfinal int nRows = this.getRowDimension();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in)\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:<clinit>()V",
            "method_body": "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();\n* A format for {@link RealMatrix} objects compatible with octave.",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data)\nif (data == null ||\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right)\nif ((left.getRowDimension()    != right.getRowDimension()) ||\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:start(IIIIII)V",
            "method_body": "public void start(int rows, int columns,\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:end()D",
            "method_body": "public double end() {\nreturn 0;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$5:visit(IID)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$1:start(IIIIII)V",
            "method_body": "public double getNorm() {\nreturn walkInColumnOrder(new RealMatrixPreservingVisitor() {\nthis.endRow = endRow;\ncolumnSum += FastMath.abs(value);\nreturn maxColSum;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$1:visit(IID)V",
            "method_body": "public double getNorm() {\nreturn walkInColumnOrder(new RealMatrixPreservingVisitor() {\nthis.endRow = endRow;\ncolumnSum += FastMath.abs(value);\nreturn maxColSum;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix$1:end()D",
            "method_body": "public double getNorm() {\nreturn walkInColumnOrder(new RealMatrixPreservingVisitor() {\nthis.endRow = endRow;\ncolumnSum += FastMath.abs(value);\nreturn maxColSum;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
            "method_body": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\nthrows NonPositiveDefiniteMatrixException {\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getRootMatrix() {\nreturn root;\n}",
            "method_id": 49
        }
    ]
}