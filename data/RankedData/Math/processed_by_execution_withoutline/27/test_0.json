{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fraction.FractionTest.testMath835",
    "test_body": "246: public void testMath835() {\n247: final int numer = Integer.MAX_VALUE / 99;\n248: final int denom = 1;\n249: final double percentage = 100 * ((double) numer) / denom;\n250: final Fraction frac = new Fraction(numer, denom);\n251: // With the implementation that preceded the fix suggested in MATH-835,\n252: // this test was failing, due to overflow.\n253: Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n254: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(I)I",
            "method_body": "public static int abs(final int x) {\nreturn (x < 0) ? -x : x;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:<clinit>()V",
            "method_body": "static final long[] FACTORIALS = new long[] {\n6402373705728000l, 121645100408832000l, 2432902008176640000l };",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(II)V",
            "method_body": "public Fraction(int num, int den) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<clinit>()V",
            "method_body": "public static final Fraction TWO = new Fraction(2, 1);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:doubleValue()D",
            "method_body": "public double doubleValue() {\nreturn (double)numerator / (double)denominator;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:multiply(I)Lorg/apache/commons/math3/fraction/Fraction;",
            "method_body": "public Fraction multiply(final int i) {\nreturn new Fraction(numerator * i, denominator);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:percentageValue()D",
            "method_body": "public double percentageValue() {\nreturn multiply(100).doubleValue();\n}",
            "method_id": 8
        }
    ]
}