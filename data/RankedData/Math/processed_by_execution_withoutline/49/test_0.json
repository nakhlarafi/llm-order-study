{
    "bug_id": 49,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification",
    "test_body": "1004: public void testConcurrentModification() {\n1005: final RealVector u = new OpenMapRealVector(3, 1e-6);\n1006: u.setEntry(0, 1);\n1007: u.setEntry(1, 0);\n1008: u.setEntry(2, 2);\n1009: 1010: final RealVector v1 = new OpenMapRealVector(3, 1e-6);\n1011: final double[] v2 = new double[3];\n1012: v1.setEntry(0, 0);\n1013: v2[0] = 0;\n1014: v1.setEntry(1, 3);\n1015: v2[1] = 3;\n1016: v1.setEntry(2, 0);\n1017: v2[2] = 0;\n1018: 1019: RealVector w;\n1020: 1021: w = u.ebeMultiply(v1);\n1022: w = u.ebeMultiply(v2);\n1023: 1024: w = u.ebeDivide(v1);\n1025: w = u.ebeDivide(v2);\n1026: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double EXP_INT_TABLE_A[] = new double[1500];\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowexp(D[D)D",
            "method_body": "private static double slowexp(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:split(D[D)V",
            "method_body": "private static void split(final double d, final double split[]) {\nif (d < 8e298 && d > -8e298) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:resplit([D)V",
            "method_body": "private static void resplit(final double a[]) {\nfinal double c = a[0] + a[1];\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitMult([D[D[D)V",
            "method_body": "private static void splitMult(double a[], double b[], double ans[]) {\nans[0] = a[0] * b[0];\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitAdd([D[D[D)V",
            "method_body": "private static void splitAdd(final double a[], final double b[], final double ans[]) {\nans[0] = a[0] + b[0];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitReciprocal([D[D)V",
            "method_body": "private static void splitReciprocal(final double in[], final double result[]) {\nfinal double b = 1.0/4194304.0;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:quadMult([D[D[D)V",
            "method_body": "private static void quadMult(final double a[], final double b[], final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:expint(I[D)D",
            "method_body": "private static double expint(int p, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowLog(D)[D",
            "method_body": "private static double[] slowLog(double xi) {\ndouble x[] = new double[2];\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowSin(D[D)D",
            "method_body": "private static double slowSin(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowCos(D[D)D",
            "method_body": "private static double slowCos(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:buildSinCosTables()V",
            "method_body": "private static void buildSinCosTables() {\nfinal double result[] = new double[2];\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.exception.util.LocalizedFormats:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "private LocalizedFormats(final String sourceFormat) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.exception.util.LocalizedFormats:getLocalizedString(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getLocalizedString(final Locale locale) {\nResourceBundle bundle =\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:buildMessage(Ljava/util/Locale;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(final Locale locale, final Localizable pattern,\nreturn new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createConcurrentModificationException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException;",
            "method_body": "public static ConcurrentModificationException createConcurrentModificationException(final Localizable pattern,\nreturn new ConcurrentModificationException() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n) {\nint d = getDimension();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
            "method_body": "private static int computeCapacity(final int expectedSize) {\nif (expectedSize == 0) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\nfinal int hash  = hashOf(key);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:containsKey(I)Z",
            "method_body": "public boolean containsKey(final int key) {\nfinal int hash  = hashOf(key);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:findInsertionIndex(I)I",
            "method_body": "private int findInsertionIndex(final int key) {\nreturn findInsertionIndex(keys, states, key, mask);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I",
            "method_body": "private static int findInsertionIndex(final int[] keys, final byte[] states,\nfinal int hash = hashOf(key);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:remove(I)D",
            "method_body": "public double remove(final int key) {\nfinal int hash  = hashOf(key);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap:hashOf(I)I",
            "method_body": "private static int hashOf(final int key) {\nfinal int h = key ^ ((key >>> 20) ^ (key >>> 12));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:key()I",
            "method_body": "public int key()\nif (referenceCount != count) {\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nif (referenceCount != count) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nif (referenceCount != count) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$6:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public static ConcurrentModificationException createConcurrentModificationException(final Localizable pattern,\nreturn new ConcurrentModificationException() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:<init>(ID)V",
            "method_body": "public OpenMapRealVector(int dimension, double epsilon) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeMultiply(RealVector v) {\ncheckVectorDimensions(v.getDimension());\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn virtualSize;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\n}",
            "method_id": 50
        }
    ]
}