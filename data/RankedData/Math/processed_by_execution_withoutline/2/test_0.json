{
    "bug_id": 2,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021",
    "test_body": "289: public void testMath1021() {\n290: final int N = 43130568;\n291: final int m = 42976365;\n292: final int n = 50;\n293: final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n294: 295: for (int i = 0; i < 100; i++) {\n296: final int sample = dist.sample();\n297: Assert.assertTrue(\"sample=\" + sample, 0 <= sample);\n298: Assert.assertTrue(\"sample=\" + sample, sample <= n);\n299: }\n300: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(II)I",
            "method_body": "public static int max(final int a, final int b) {\nreturn (a <= b) ? b : a;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:nextDouble()D",
            "method_body": "public double nextDouble() {\nfinal long high = ((long) next(26)) << 26;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataGenerator:<init>()V",
            "method_body": "public RandomDataGenerator() {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:next(I)I",
            "method_body": "protected int next(final int bits) {\nfinal int indexRm1 = iRm1[index];\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractIntegerDistribution(RandomGenerator rng) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
            "method_body": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:solveInverseCumulativeProbability(DII)I",
            "method_body": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\nwhile (lower + 1 < upper) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:sample()I",
            "method_body": "public int sample() {\nreturn inverseCumulativeProbability(random.nextDouble());\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:<init>(III)V",
            "method_body": "public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\nthis(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;III)V",
            "method_body": "public HypergeometricDistribution(RandomGenerator rng,\nsuper(rng);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumberOfSuccesses()I",
            "method_body": "public int getNumberOfSuccesses() {\nreturn numberOfSuccesses;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getPopulationSize()I",
            "method_body": "public int getPopulationSize() {\nreturn populationSize;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSampleSize()I",
            "method_body": "public int getSampleSize() {\nreturn sampleSize;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nreturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nif (!numericalVarianceIsCalculated) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:calculateNumericalVariance()D",
            "method_body": "protected double calculateNumericalVariance() {\nfinal double N = getPopulationSize();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportLowerBound()I",
            "method_body": "public int getSupportLowerBound() {\nreturn FastMath.max(0,\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportUpperBound()I",
            "method_body": "public int getSupportUpperBound() {\nreturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n}",
            "method_id": 28
        }
    ]
}