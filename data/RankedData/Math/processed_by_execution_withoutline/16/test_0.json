{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.util.FastMathTest.testMath905LargePositive",
    "test_body": "161: public void testMath905LargePositive() {\n162: final double start = StrictMath.log(Double.MAX_VALUE);\n163: final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);\n164: final double end = 2 * StrictMath.log(endT);\n165: 166: double maxErr = 0;\n167: for (double x = start; x < end; x += 1e-3) {\n168: final double tst = FastMath.cosh(x);\n169: final double ref = Math.cosh(x);\n170: maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n171: }\n172: Assert.assertEquals(0, maxErr, 3);\n173: 174: for (double x = start; x < end; x += 1e-3) {\n175: final double tst = FastMath.sinh(x);\n176: final double ref = Math.sinh(x);\n177: maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            \n178: }\n179: Assert.assertEquals(0, maxErr, 3);\n180: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:cosh(D)D",
            "method_body": "public static double cosh(double x) {\nif (x != x) {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ulp(D)D",
            "method_body": "public static double ulp(double x) {\nif (Double.isInfinite(x)) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(II)I",
            "method_body": "public static int max(final int a, final int b) {\nreturn (a <= b) ? b : a;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_A = new double[] {\n};",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntA()[D",
            "method_body": "static double[] loadExpIntA() {\nreturn EXP_INT_A.clone();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntB()[D",
            "method_body": "static double[] loadExpIntB() {\nreturn EXP_INT_B.clone();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracA()[D",
            "method_body": "static double[] loadExpFracA() {\nreturn EXP_FRAC_A.clone();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracB()[D",
            "method_body": "static double[] loadExpFracB() {\nreturn EXP_FRAC_B.clone();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpIntTable:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_TABLE_A;\nEXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpFracTable:<clinit>()V",
            "method_body": "private static final double[] EXP_FRAC_TABLE_A;\nEXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(I)V",
            "method_body": "public DfpField(final int decimalDigits) {\nthis(decimalDigits, true);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:<init>(IZ)V",
            "method_body": "private DfpField(final int decimalDigits, final boolean computeConstants) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn radixDigits;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getRoundingMode()Lorg/apache/commons/math3/dfp/DfpField$RoundingMode;",
            "method_body": "public RoundingMode getRoundingMode() {\nreturn rMode;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V",
            "method_body": "public void setIEEEFlagsBits(final int bits) {\nieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn zero;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:split(Ljava/lang/String;)[Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "private Dfp[] split(final String a) {\nDfp result[] = new Dfp[2];\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeStringConstants(I)V",
            "method_body": "private static void computeStringConstants(final int highPrecisionDecimalDigits) {\nif (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computePi(Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) {\nDfp sqrt2   = two.sqrt();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeExp(Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public static Dfp computeExp(final Dfp a, final Dfp one) {\nDfp y  = new Dfp(one);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.DfpField:computeLn(Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) {\nint den = 1;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;I)V",
            "method_body": "protected Dfp(final DfpField field, int x) {\nthis(field, (long) x);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;J)V",
            "method_body": "protected Dfp(final DfpField field, long x) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/Dfp;)V",
            "method_body": "public Dfp(final Dfp d) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:<init>(Lorg/apache/commons/math3/dfp/DfpField;Ljava/lang/String;)V",
            "method_body": "protected Dfp(final DfpField field, final String s) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:newInstance(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp newInstance(final Dfp d) {\nif (field.getRadixDigits() != d.field.getRadixDigits()) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getField()Lorg/apache/commons/math3/dfp/DfpField;",
            "method_body": "public DfpField getField() {\nreturn field;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getRadixDigits()I",
            "method_body": "public int getRadixDigits() {\nreturn field.getRadixDigits();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:getZero()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp getZero() {\nreturn field.getZero();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:shiftLeft()V",
            "method_body": "protected void shiftLeft() {\nfor (int i = mant.length - 1; i > 0; i--) {\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:shiftRight()V",
            "method_body": "protected void shiftRight() {\nfor (int i = 0; i < mant.length - 1; i++) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:align(I)I",
            "method_body": "protected int align(int e) {\nint lostdigit = 0;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:lessThan(Lorg/apache/commons/math3/dfp/Dfp;)Z",
            "method_body": "public boolean lessThan(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:greaterThan(Lorg/apache/commons/math3/dfp/Dfp;)Z",
            "method_body": "public boolean greaterThan(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn (nans == QNAN) || (nans == SNAN);\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(final Object other) {\nif (other instanceof Dfp) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:unequal(Lorg/apache/commons/math3/dfp/Dfp;)Z",
            "method_body": "public boolean unequal(final Dfp x) {\nif (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:compare(Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)I",
            "method_body": "private static int compare(final Dfp a, final Dfp b) {\nif (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:complement(I)I",
            "method_body": "protected int complement(int extra) {\nextra = RADIX-extra;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:add(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp add(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:negate()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp negate() {\nDfp result = newInstance(this);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:subtract(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp subtract(final Dfp x) {\nreturn add(x.negate());\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:round(I)I",
            "method_body": "protected int round(int n) {\nboolean inc = false;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:multiply(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp multiply(final Dfp x) {\nif (field.getRadixDigits() != x.field.getRadixDigits()) {\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:divide(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp divide(Dfp divisor) {\nint trial=0;    // trial quotient digit\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:divide(I)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp divide(int divisor) {\nif (nans != FINITE) {\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:sqrt()Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp sqrt() {\nif (nans == FINITE && mant[mant.length-1] == 0) {\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nif (nans != FINITE) {\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:dfp2string()Ljava/lang/String;",
            "method_body": "protected String dfp2string() {\nchar buffer[] = new char[mant.length*4 + 20];\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\nDfp def = result;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp:trap(ILjava/lang/String;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
            "method_body": "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\nreturn def;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.dfp.Dfp$1:<clinit>()V",
            "method_body": "protected Dfp trunc(final DfpField.RoundingMode rmode) {\nswitch (rmode) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:<init>(J)V",
            "method_body": "public MersenneTwister(long seed) {\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:<clinit>()V",
            "method_body": "private static final int[] MAG01 = { 0x0, 0x9908b0df };\nprivate static final int[] MAG01 = { 0x0, 0x9908b0df };",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed(I)V",
            "method_body": "public void setSeed(int seed) {\nlong longMT = seed;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed([I)V",
            "method_body": "public void setSeed(int[] seed) {\nif (seed == null) {\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.random.MersenneTwister:setSeed(J)V",
            "method_body": "public void setSeed(long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 63
        }
    ]
}