{
    "bug_id": 80,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02",
    "test_body": "145: public void testMathpbx02() {\n146: 147: double[] mainTridiagonal = {\n148: 7484.860960227216, 18405.28129035345, 13855.225609560746,\n149: 10016.708722343366, 559.8117399576674, 6750.190788301587, \n150: 71.21428769782159\n151: };\n152: double[] secondaryTridiagonal = {\n153: -4175.088570476366,1975.7955858241994,5193.178422374075, \n154: 1995.286659169179,75.34535882933804,-234.0808002076056\n155: };\n156: 157: // the reference values have been computed using routine DSTEMR\n158: // from the fortran library LAPACK version 3.2.1\n159: double[] refEigenValues = {\n160: 20654.744890306974412,16828.208208485466457,\n161: 6893.155912634994820,6757.083016675340332,\n162: 5887.799885688558788,64.309089923240379,\n163: 57.992628792736340\n164: };\n165: RealVector[] refEigenVectors = {\n166: new ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),\n167: new ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),\n168: new ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),\n169: new ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),\n170: new ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),\n171: new ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),\n172: new ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})\n173: };\n174: 175: // the following line triggers the exception\n176: EigenDecomposition decomposition =\n177: new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n178: 179: double[] eigenValues = decomposition.getRealEigenvalues();\n180: for (int i = 0; i < refEigenValues.length; ++i) {\n181: assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);\n182: if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {\n183: assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n184: } else {\n185: assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);\n186: }\n187: }\n188: 189: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([DZ)V",
            "method_body": "public ArrayRealVector(double[] d, boolean copyArray)\nthrows NullPointerException, IllegalArgumentException {\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>(Lorg/apache/commons/math/linear/ArrayRealVector;Z)V",
            "method_body": "public ArrayRealVector(ArrayRealVector v, boolean deep) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<clinit>()V",
            "method_body": "private static final long serialVersionUID = -1097961340710804027L;\nprivate static final RealVectorFormat DEFAULT_FORMAT =\n* #ArrayRealVector(ArrayRealVector, ArrayRealVector)} constructor",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:copy()Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector copy() {\nreturn new ArrayRealVector(this, true);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:subtract(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector subtract(RealVector v)\nreturn subtract((ArrayRealVector) v);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:subtract([D)Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector subtract(double[] v)\ncheckVectorDimensions(v.length);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:subtract(Lorg/apache/commons/math/linear/ArrayRealVector;)Lorg/apache/commons/math/linear/ArrayRealVector;",
            "method_body": "public ArrayRealVector subtract(ArrayRealVector v)\nreturn (ArrayRealVector) subtract(v.data);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math/linear/RealVector;)D",
            "method_body": "public double dotProduct(RealVector v)\nreturn dotProduct((ArrayRealVector) v);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:dotProduct([D)D",
            "method_body": "public double dotProduct(double[] v)\ncheckVectorDimensions(v.length);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math/linear/ArrayRealVector;)D",
            "method_body": "public double dotProduct(ArrayRealVector v)\nreturn dotProduct(v.data);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:getNorm()D",
            "method_body": "public double getNorm() {\ndouble sum = 0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n)\nif (data.length != n) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.CompositeFormat:getDefaultNumberFormat(Ljava/util/Locale;)Ljava/text/NumberFormat;",
            "method_body": "protected static NumberFormat getDefaultNumberFormat(final Locale locale) {\nfinal NumberFormat nf = NumberFormat.getInstance(locale);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorFormat:<init>(Ljava/text/NumberFormat;)V",
            "method_body": "public RealVectorFormat(final NumberFormat format) {\nthis(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorFormat:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/text/NumberFormat;)V",
            "method_body": "public RealVectorFormat(final String prefix, final String suffix,\nfinal String separator, final NumberFormat format) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorFormat:getInstance()Lorg/apache/commons/math/linear/RealVectorFormat;",
            "method_body": "public static RealVectorFormat getInstance() {\nreturn getInstance(Locale.getDefault());\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.linear.RealVectorFormat:getInstance(Ljava/util/Locale;)Lorg/apache/commons/math/linear/RealVectorFormat;",
            "method_body": "public static RealVectorFormat getInstance(final Locale locale) {\nreturn new RealVectorFormat(getDefaultNumberFormat(locale));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>()V",
            "method_body": "protected AbstractRealMatrix() {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:walkInOptimizedOrder(Lorg/apache/commons/math/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)\nreturn walkInRowOrder(visitor);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>(II)V",
            "method_body": "public Array2DRowRealMatrix(final int rowDimension, final int columnDimension)\nsuper(rowDimension, columnDimension);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows IllegalArgumentException, NullPointerException {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nthrows IllegalArgumentException, NullPointerException {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:createMatrix(II)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix createMatrix(final int rowDimension, final int columnDimension)\nreturn new Array2DRowRealMatrix(rowDimension, columnDimension);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:multiply(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix multiply(final RealMatrix m)\nreturn multiply((Array2DRowRealMatrix) m);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:multiply(Lorg/apache/commons/math/linear/Array2DRowRealMatrix;)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
            "method_body": "public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m)\nMatrixUtils.checkMultiplicationCompatible(this, m);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix, final int row, final int column)\nif (data == null) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\ndata[row][column] = value;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:walkInRowOrder(Lorg/apache/commons/math/linear/RealMatrixPreservingVisitor;)D",
            "method_body": "public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\nfinal int rows    = getRowDimension();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in) {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn (data.length * data[0].length <= 4096) ?\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math/linear/AnyMatrix;Lorg/apache/commons/math/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:start(IIIIII)V",
            "method_body": "public void start(int rows, int columns,\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:end()D",
            "method_body": "public double end() {\nreturn 0;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix$5:visit(IID)V",
            "method_body": "public RealMatrix transpose() {\nfinal int nRows = getRowDimension();\nout.setEntry(column, row, value);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:<init>([D[DD)V",
            "method_body": "public EigenDecompositionImpl(final double[] main, double[] secondary,\nthrows InvalidMatrixException {\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:decompose()V",
            "method_body": "private void decompose() {\ncachedV  = null;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:getRealEigenvalues()[D",
            "method_body": "public double[] getRealEigenvalues()\nreturn realEigenvalues.clone();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:getEigenvector(I)Lorg/apache/commons/math/linear/RealVector;",
            "method_body": "public RealVector getEigenvector(final int i)\nif (eigenvectors == null) {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:computeGershgorinCircles()V",
            "method_body": "private void computeGershgorinCircles() {\nfinal int m     = main.length;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
            "method_body": "private void findEigenvalues()\nList<Integer> splitIndices = computeSplits();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:computeSplits()Ljava/util/List;",
            "method_body": "private List<Integer> computeSplits() {\nfinal List<Integer> list = new ArrayList<Integer>();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
            "method_body": "private void processGeneralBlock(final int n)\ndouble sumOffDiag = 0;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:initialSplits(I)V",
            "method_body": "private void initialSplits(final int n) {\npingPong = 0;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:goodStep(II)I",
            "method_body": "private int goodStep(final int start, final int end) {\ng = 0.0;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:flipIfWarranted(II)Z",
            "method_body": "private boolean flipIfWarranted(final int n, final int step) {\nif (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:eigenvaluesRange(II)[D",
            "method_body": "private double[] eigenvaluesRange(final int index, final int n) {\nfinal int lowerStart = 4 * main.length;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:countEigenValues(DII)I",
            "method_body": "private int countEigenValues(final double t, final int index, final int n) {\ndouble ratio = main[index] - t;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:ldlTDecomposition(DII)V",
            "method_body": "private void ldlTDecomposition(final double lambda, final int index, final int n) {\ndouble di = main[index] - lambda;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:dqds(II)V",
            "method_body": "private void dqds(final int start, final int end) {\neMin = work[4 * start + pingPong + 4];\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:dqd(II)V",
            "method_body": "private void dqd(final int start, final int end) {\neMin = work[4 * start + pingPong + 4];\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
            "method_body": "private void computeShiftIncrement(final int start, final int end, final int deflated) {\nfinal double cnst1 = 0.563;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:updateSigma(D)V",
            "method_body": "private void updateSigma(final double shift) {\nif (shift < sigma) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenVectors()V",
            "method_body": "private void findEigenVectors() {\nfinal int m = main.length;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvector(D[D[D)Lorg/apache/commons/math/linear/ArrayRealVector;",
            "method_body": "private ArrayRealVector findEigenvector(final double eigenvalue,\nfinal int m = main.length;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:stationaryQuotientDifferenceWithShift([D[DD)V",
            "method_body": "private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,\nfinal int nM1 = d.length - 1;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math.linear.EigenDecompositionImpl:progressiveQuotientDifferenceWithShift([D[DD)V",
            "method_body": "private void progressiveQuotientDifferenceWithShift(final double[] d, final double[] l,\nfinal int nM1 = d.length - 1;\n}",
            "method_id": 60
        }
    ]
}