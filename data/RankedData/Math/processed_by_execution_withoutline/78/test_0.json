{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.apache.commons.math.ode.events.EventStateTest.closeEvents",
    "test_body": "32: public void closeEvents()\n33: throws EventException, ConvergenceException, DerivativeException {\n34: 35: final double r1  = 90.0;\n36: final double r2  = 135.0;\n37: final double gap = r2 - r1;\n38: EventHandler closeEventsGenerator = new EventHandler() {\n39: public void resetState(double t, double[] y) {\n40: }\n41: public double g(double t, double[] y) {\n42: return (t - r1) * (r2 - t);\n43: }\n44: public int eventOccurred(double t, double[] y, boolean increasing) {\n45: return CONTINUE;\n46: }\n47: };\n48: 49: final double tolerance = 0.1;\n50: EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n51: 52: double t0 = r1 - 0.5 * gap;\n53: es.reinitializeBegin(t0, new double[0]);\n54: AbstractStepInterpolator interpolator =\n55: new DummyStepInterpolator(new double[0], true);\n56: interpolator.storeTime(t0);\n57: 58: interpolator.shift();\n59: interpolator.storeTime(0.5 * (r1 + r2));\n60: Assert.assertTrue(es.evaluateStep(interpolator));\n61: Assert.assertEquals(r1, es.getEventTime(), tolerance);\n62: es.stepAccepted(es.getEventTime(), new double[0]);\n63: 64: interpolator.shift();\n65: interpolator.storeTime(r2 + 0.4 * gap);\n66: Assert.assertTrue(es.evaluateStep(interpolator));\n67: Assert.assertEquals(r2, es.getEventTime(), tolerance);\n68: 69: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(final String s, final Locale locale) {\nResourceBundle bundle =\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:buildMessage(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(final Locale locale, final String pattern,\nreturn (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$4:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:<init>(ID)V",
            "method_body": "protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
            "method_body": "protected final void setResult(final double newResult, final int iterationCount) {\nthis.result         = newResult;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.iterationCount = 0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
            "method_body": "protected void verifyInterval(final double lower, final double upper) {\nif (lower >= upper) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:<init>()V",
            "method_body": "public BrentSolver() {\nsuper(100, 1E-6);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
            "method_body": "public double solve(final UnivariateRealFunction f,\nclearResult();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
            "method_body": "private double solve(final UnivariateRealFunction f,\ndouble delta = x1 - x0;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:<init>([DZ)V",
            "method_body": "protected AbstractStepInterpolator(final double[] y, final boolean forward) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:shift()V",
            "method_body": "public void shift() {\npreviousTime = currentTime;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:storeTime(D)V",
            "method_body": "public void storeTime(final double t) {\ncurrentTime = t;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getCurrentTime()D",
            "method_body": "public double getCurrentTime() {\nreturn currentTime;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:setInterpolatedTime(D)V",
            "method_body": "public void setInterpolatedTime(final double time) {\ninterpolatedTime = time;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:isForward()Z",
            "method_body": "public boolean isForward() {\nreturn forward;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getInterpolatedState()[D",
            "method_body": "public double[] getInterpolatedState() throws DerivativeException {\nif (dirtyState) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:<init>([DZ)V",
            "method_body": "public DummyStepInterpolator(final double[] y, final boolean forward) {\nsuper(y, forward);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:computeInterpolatedStateAndDerivatives(DD)V",
            "method_body": "protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)\nSystem.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:<init>(Lorg/apache/commons/math/ode/events/EventHandler;DDI)V",
            "method_body": "public EventState(final EventHandler handler, final double maxCheckInterval,\nfinal double convergence, final int maxIterationCount) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:reinitializeBegin(D[D)V",
            "method_body": "public void reinitializeBegin(final double tStart, final double[] yStart)\nt0 = tStart;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nforward = interpolator.isForward();\ninterpolator.setInterpolatedTime(t);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:getEventTime()D",
            "method_body": "public double getEventTime() {\nreturn pendingEventTime;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:stepAccepted(D[D)V",
            "method_body": "public void stepAccepted(final double t, final double[] y)\nt0 = t;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState$1:value(D)D",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nforward = interpolator.isForward();\ninterpolator.setInterpolatedTime(t);\n}",
            "method_id": 28
        }
    ]
}