{
    "bug_id": 47,
    "test_id": 0,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAtanI",
    "test_body": "575: public void testAtanI() {\n576: for (int i = -10; i < 10; i++) {\n577: System.out.println(new Complex(0, 1 - 0.1 * i).atan());\n578: }\n579: Assert.assertTrue(Complex.I.atan().isInfinite());\n580: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double EXP_INT_TABLE_A[] = new double[1500];\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowexp(D[D)D",
            "method_body": "private static double slowexp(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:split(D[D)V",
            "method_body": "private static void split(final double d, final double split[]) {\nif (d < 8e298 && d > -8e298) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:resplit([D)V",
            "method_body": "private static void resplit(final double a[]) {\nfinal double c = a[0] + a[1];\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitMult([D[D[D)V",
            "method_body": "private static void splitMult(double a[], double b[], double ans[]) {\nans[0] = a[0] * b[0];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitAdd([D[D[D)V",
            "method_body": "private static void splitAdd(final double a[], final double b[], final double ans[]) {\nans[0] = a[0] + b[0];\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:splitReciprocal([D[D)V",
            "method_body": "private static void splitReciprocal(final double in[], final double result[]) {\nfinal double b = 1.0/4194304.0;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:quadMult([D[D[D)V",
            "method_body": "private static void quadMult(final double a[], final double b[], final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:expint(I[D)D",
            "method_body": "private static double expint(int p, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowLog(D)[D",
            "method_body": "private static double[] slowLog(double xi) {\ndouble x[] = new double[2];\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowSin(D[D)D",
            "method_body": "private static double slowSin(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:slowCos(D[D)D",
            "method_body": "private static double slowCos(final double x, final double result[]) {\nfinal double xs[] = new double[2];\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:buildSinCosTables()V",
            "method_body": "private static void buildSinCosTables() {\nfinal double result[] = new double[2];\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:atan2(DD)D",
            "method_body": "public static double atan2(double y, double x) {\nif (x !=x || y != y) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:<clinit>()V",
            "method_body": "public static final double EPSILON = 0x1.0p-53;\nprivate static final long[] FACTORIALS = new long[] {\n6402373705728000l, 121645100408832000l, 2432902008176640000l };",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<clinit>()V",
            "method_body": "public static final Complex I = new Complex(0.0, 1.0);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:abs()D",
            "method_body": "public double abs() {\nif (isNaN) {\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex add(Complex addend) throws NullArgumentException {\nMathUtils.checkNotNull(addend);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex divide(Complex divisor)\nMathUtils.checkNotNull(divisor);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isInfinite()Z",
            "method_body": "public boolean isInfinite() {\nreturn isInfinite;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex factor)\nMathUtils.checkNotNull(factor);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:subtract(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex subtract(Complex subtrahend)\nMathUtils.checkNotNull(subtrahend);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex atan() {\nif (isNaN) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex log() {\nif (isNaN) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn \"(\" + real + \", \" + imaginary + \")\";\n}",
            "method_id": 33
        }
    ]
}