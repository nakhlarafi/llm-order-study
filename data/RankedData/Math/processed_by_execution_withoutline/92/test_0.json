{
    "bug_id": 92,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge",
    "test_body": "176: public void testBinomialCoefficientLarge() throws Exception {\n177: // This tests all legal and illegal values for n <= 200.\n178: for (int n = 0; n <= 200; n++) {\n179: for (int k = 0; k <= n; k++) {\n180: long ourResult = -1;\n181: long exactResult = -1;\n182: boolean shouldThrow = false;\n183: boolean didThrow = false;\n184: try {\n185: ourResult = MathUtils.binomialCoefficient(n, k);\n186: } catch (ArithmeticException ex) {\n187: didThrow = true;\n188: }\n189: try {\n190: exactResult = binomialCoefficient(n, k);\n191: } catch (ArithmeticException ex) {\n192: shouldThrow = true;\n193: }\n194: assertEquals(n+\",\"+k, shouldThrow, didThrow);\n195: assertEquals(n+\",\"+k, exactResult, ourResult);\n196: assertTrue(n+\",\"+k, (n > 66 || !didThrow));\n197: }\n198: }\n199: 200: long ourResult = MathUtils.binomialCoefficient(300, 3);\n201: long exactResult = binomialCoefficient(300, 3);\n202: assertEquals(exactResult, ourResult);\n203: 204: ourResult = MathUtils.binomialCoefficient(700, 697);\n205: exactResult = binomialCoefficient(700, 697);\n206: assertEquals(exactResult, ourResult);\n207: 208: // This one should throw\n209: try {\n210: MathUtils.binomialCoefficient(700, 300);\n211: fail(\"Expecting ArithmeticException\");\n212: } catch (ArithmeticException ex) {\n213: // Expected\n214: }\n215: 216: // Larger values cannot be computed directly by our\n217: // test implementation because of stack limitations,\n218: // so we make little jumps to fill the cache.\n219: for (int i = 2000; i <= 10000; i += 2000) {\n220: ourResult = MathUtils.binomialCoefficient(i, 3);\n221: exactResult = binomialCoefficient(i, 3);\n222: assertEquals(exactResult, ourResult);\n223: }\n224: 225: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:<clinit>()V",
            "method_body": "private static final long[] factorials = new long[]\n2432902008176640000l};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJ)J",
            "method_body": "public static long addAndCheck(long a, long b) {\nreturn addAndCheck(a, b, \"overflow: add\");\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJLjava/lang/String;)J",
            "method_body": "private static long addAndCheck(long a, long b, String msg) {\nif (a > b) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
            "method_body": "public static long binomialCoefficient(final int n, final int k) {\nif (n < k) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
            "method_body": "public static double binomialCoefficientDouble(final int n, final int k) {\nreturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D",
            "method_body": "public static double binomialCoefficientLog(final int n, final int k) {\nif (n < k) {\n}",
            "method_id": 5
        }
    ]
}