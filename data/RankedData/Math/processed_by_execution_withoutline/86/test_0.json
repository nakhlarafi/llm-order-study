{
    "bug_id": 86,
    "test_id": 0,
    "test_name": "org.apache.commons.math.linear.CholeskyDecompositionImplTest.testNotPositiveDefinite",
    "test_body": "70: public void testNotPositiveDefinite() throws MathException {\n71: CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n72: { 14, 11, 13, 15, 24 },\n73: { 11, 34, 13, 8,  25 },\n74: { 13, 13, 14, 15, 21 },\n75: { 15, 8,  15, 18, 23 },\n76: { 24, 25, 21, 23, 45 }\n77: }));\n78: System.out.println(cd.getL().multiply(cd.getLT()));\n79: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension, final int columnDimension)\nthrows IllegalArgumentException {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
            "method_body": "public boolean isSquare() {\nreturn (getColumnDimension() == getRowDimension());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:<init>([[D)V",
            "method_body": "public DenseRealMatrix(final double[][] rawData)\nthis(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:<init>(II[[DZ)V",
            "method_body": "public DenseRealMatrix(final int rows, final int columns,\nsuper(rows, columns);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nfinal int rows         = rawData.length;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nfinal double[][] data = new double[getRowDimension()][getColumnDimension()];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data) {\nreturn new DenseRealMatrix(data);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
            "method_body": "public CholeskyDecompositionImpl(final RealMatrix matrix)\nthis(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V",
            "method_body": "public CholeskyDecompositionImpl(final RealMatrix matrix,\nNotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.linear.AbstractRealMatrix:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nfinal int nRows = getRowDimension();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:<init>(II)V",
            "method_body": "public DenseRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:multiply(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/DenseRealMatrix;",
            "method_body": "public DenseRealMatrix multiply(final RealMatrix m)\nreturn multiply((DenseRealMatrix) m);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:multiply(Lorg/apache/commons/math/linear/DenseRealMatrix;)Lorg/apache/commons/math/linear/DenseRealMatrix;",
            "method_body": "public DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {\nMatrixUtils.checkMultiplicationCompatible(this, m);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nfinal int iBlock = row    / BLOCK_SIZE;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.linear.DenseRealMatrix:transpose()Lorg/apache/commons/math/linear/DenseRealMatrix;",
            "method_body": "public DenseRealMatrix transpose() {\nfinal int nRows = getRowDimension();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math/linear/AnyMatrix;Lorg/apache/commons/math/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nif (left.getColumnDimension() != right.getRowDimension()) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:getL()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getL() {\nif (cachedL == null) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.linear.CholeskyDecompositionImpl:getLT()Lorg/apache/commons/math/linear/RealMatrix;",
            "method_body": "public RealMatrix getLT() {\nif (cachedLT == null) {\n}",
            "method_id": 22
        }
    ]
}