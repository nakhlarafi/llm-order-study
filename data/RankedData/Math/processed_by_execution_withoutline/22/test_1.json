{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive",
    "test_body": null,
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:<init>()V",
            "method_body": "public BitsStreamGenerator() {\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.random.BitsStreamGenerator:clear()V",
            "method_body": "public void clear() {\nnextGaussian = Double.NaN;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\nthis(k, m1, m2, m3, null);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:<init>(IIII[I)V",
            "method_body": "protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed([I)V",
            "method_body": "public void setSeed(final int[] seed) {\nif (seed == null) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.random.AbstractWell:setSeed(J)V",
            "method_body": "public void setSeed(final long seed) {\nsetSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.random.Well19937c:<init>()V",
            "method_body": "public Well19937c() {\nsuper(K, M1, M2, M3);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataGenerator:<init>()V",
            "method_body": "public RandomDataGenerator() {\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;)V",
            "method_body": "protected AbstractRealDistribution(RandomGenerator rng) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log1p(D)D",
            "method_body": "public static double log1p(final double x) {\nif (x == -1) {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$lnMant:<clinit>()V",
            "method_body": "private static final double[][] LN_MANT;\nLN_MANT = FastMathLiteralArrays.loadLnMant();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_A = new double[] {\n};",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntA()[D",
            "method_body": "static double[] loadExpIntA() {\nreturn EXP_INT_A.clone();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntB()[D",
            "method_body": "static double[] loadExpIntB() {\nreturn EXP_INT_B.clone();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracA()[D",
            "method_body": "static double[] loadExpFracA() {\nreturn EXP_FRAC_A.clone();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracB()[D",
            "method_body": "static double[] loadExpFracB() {\nreturn EXP_FRAC_B.clone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadLnMant()[[D",
            "method_body": "static double[][] loadLnMant() {\nreturn LN_MANT.clone();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpIntTable:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_TABLE_A;\nEXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpFracTable:<clinit>()V",
            "method_body": "private static final double[] EXP_FRAC_TABLE_A;\nEXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:<clinit>()V",
            "method_body": "public static final double LANCZOS_G = 607.0 / 128.0;\nprivate static final double[] LANCZOS = {\n};",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:invGamma1pm1(D)D",
            "method_body": "public static double invGamma1pm1(final double x) {\nif (x < -0.5) {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma1p(D)D",
            "method_body": "public static double logGamma1p(final double x)\nif (x < -0.5) {\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DD)D",
            "method_body": "public static double logBeta(double a, double b) {\nreturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(new Well19937c(), numeratorDegreesOfFreedom,\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
            "method_body": "public FDistribution(RandomGenerator rng,\nsuper(rng);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:density(D)D",
            "method_body": "public double density(double x) {\nfinal double nhalf = numeratorDegreesOfFreedom / 2;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
            "method_body": "public double getSupportLowerBound() {\nreturn 0;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z",
            "method_body": "public boolean isSupportLowerBoundInclusive() {\nreturn true;\n}",
            "method_id": 37
        }
    ]
}