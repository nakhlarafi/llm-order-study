{
    "bug_id": 31,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.distribution.FDistributionTest.testMath785",
    "test_body": "147: public void testMath785() {\n148: // this test was failing due to inaccurate results from ContinuedFraction.\n149: 150: try {\n151: double prob = 0.01;\n152: FDistribution f = new FDistribution(200000, 200000);\n153: double result = f.inverseCumulativeProbability(prob);\n154: Assert.assertTrue(result < 1.0);\n155: } catch (Exception e) {\n156: Assert.fail(\"Failing to calculate inverse cumulative probability\");\n157: }\n158: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DD)D",
            "method_body": "public static double pow(double x, double y) {\nfinal double lns[] = new double[2];\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(J)J",
            "method_body": "public static long abs(final long x) {\nreturn (x < 0l) ? -x : x;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$lnMant:<clinit>()V",
            "method_body": "private static final double[][] LN_MANT;\nLN_MANT = FastMathLiteralArrays.loadLnMant();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_A = new double[] {\n};",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntA()[D",
            "method_body": "static double[] loadExpIntA() {\nreturn EXP_INT_A.clone();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntB()[D",
            "method_body": "static double[] loadExpIntB() {\nreturn EXP_INT_B.clone();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracA()[D",
            "method_body": "static double[] loadExpFracA() {\nreturn EXP_FRAC_A.clone();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracB()[D",
            "method_body": "static double[] loadExpFracB() {\nreturn EXP_FRAC_B.clone();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadLnMant()[[D",
            "method_body": "static double[][] loadLnMant() {\nreturn LN_MANT.clone();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpIntTable:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_TABLE_A;\nEXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpFracTable:<clinit>()V",
            "method_body": "private static final double[] EXP_FRAC_TABLE_A;\nEXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.LocalizedFormats:<init>(Ljava/lang/String;ILjava/lang/String;)V",
            "method_body": "private LocalizedFormats(final String sourceFormat) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalStateException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>()V",
            "method_body": "public MathIllegalStateException() {\nthis(LocalizedFormats.ILLEGAL_STATE);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:getContext()Lorg/apache/commons/math3/exception/util/ExceptionContext;",
            "method_body": "public ExceptionContext getContext() {\nreturn context;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:<clinit>()V",
            "method_body": "public static final double SAFE_MIN;\nEPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDD)Z",
            "method_body": "public static boolean equals(double x, double y, double eps) {\nreturn equals(x, y, 1) || FastMath.abs(y - x) <= eps;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.util.Precision:equals(DDI)Z",
            "method_body": "public static boolean equals(double x, double y, int maxUlps) {\nlong xInt = Double.doubleToLongBits(x);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.exception.ConvergenceException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern,\nObject ... args) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:<clinit>()V",
            "method_body": "static final long[] FACTORIALS = new long[] {\n6402373705728000l, 121645100408832000l, 2432902008176640000l };",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:factorial(I)J",
            "method_body": "public static long factorial(final int n) {\nif (n < 0) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:<init>(I)V",
            "method_body": "public ResizableDoubleArray(int initialCapacity) {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:addElement(D)V",
            "method_body": "public synchronized void addElement(double value) {\nnumElements++;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:contract()V",
            "method_body": "public synchronized void contract() {\ndouble[] tempArray = new double[numElements + 1];\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:expand()V",
            "method_body": "protected synchronized void expand() {\nint newSize = 0;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:getElements()[D",
            "method_body": "public synchronized double[] getElements() {\ndouble[] elementArray = new double[numElements];\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:setInitialCapacity(I)V",
            "method_body": "protected void setInitialCapacity(int initialCapacity) {\nif (initialCapacity > 0) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:shouldContract()Z",
            "method_body": "private synchronized boolean shouldContract() {\nif (expansionMode == MULTIPLICATIVE_MODE) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<clinit>()V",
            "method_body": "private static final double[] EXPONENTIAL_SA_QI;\nfinal double LN2 = FastMath.log(2);\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:<clinit>()V",
            "method_body": "public static final double LANCZOS_G = 607.0 / 128.0;\nprivate static final double[] LANCZOS = {\n};",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b) {\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\nif (Double.isNaN(a) ||\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\nif (n % 2 == 0) { // even\nreturn 1.0;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>()V",
            "method_body": "public Incrementor() {\nthis(0);\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(I)V",
            "method_body": "public Incrementor(int max) {\nthis(max,\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() {\nif (++count > maximalCount) {\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:solve(Lorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public static double solve(UnivariateFunction function,\nif (function == null) {\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:verifyInterval(DD)V",
            "method_body": "public static void verifyInterval(final double lower,\nif (lower >= upper) {\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:verifySequence(DDD)V",
            "method_body": "public static void verifySequence(final double lower,\nverifyInterval(lower, initial);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected BaseAbstractUnivariateSolver(final double absoluteAccuracy) {\nthis(DEFAULT_RELATIVE_ACCURACY,\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:<init>(DDD)V",
            "method_body": "protected BaseAbstractUnivariateSolver(final double relativeAccuracy,\nfinal double functionValueAccuracy) {\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getMin()D",
            "method_body": "public double getMin() {\nreturn searchMin;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getMax()D",
            "method_body": "public double getMax() {\nreturn searchMax;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getStartValue()D",
            "method_body": "public double getStartValue() {\nreturn searchStart;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:getFunctionValueAccuracy()D",
            "method_body": "public double getFunctionValueAccuracy() {\nreturn functionValueAccuracy;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:computeObjectiveValue(D)D",
            "method_body": "protected double computeObjectiveValue(double point)\nincrementEvaluationCount();\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:setup(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)V",
            "method_body": "protected void setup(int maxEval,\nMathUtils.checkNotNull(f);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:solve(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
            "method_body": "public double solve(int maxEval, FUNC f, double min, double max, double startValue) {\nsetup(maxEval, f, min, max, startValue);\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:solve(ILorg/apache/commons/math3/analysis/UnivariateFunction;DD)D",
            "method_body": "public double solve(int maxEval, FUNC f, double min, double max) {\nreturn solve(maxEval, f, min, max, min + 0.5 * (max - min));\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:verifySequence(DDD)V",
            "method_body": "protected void verifySequence(final double lower,\nUnivariateSolverUtils.verifySequence(lower, initial, upper);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:incrementEvaluationCount()V",
            "method_body": "protected void incrementEvaluationCount() {\nevaluations.incrementCount();\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:<init>(D)V",
            "method_body": "protected AbstractUnivariateSolver(final double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:<init>(D)V",
            "method_body": "public BrentSolver(double absoluteAccuracy) {\nsuper(absoluteAccuracy);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.solvers.BrentSolver:doSolve()D",
            "method_body": "protected double doSolve() {\ndouble min = getMin();\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>()V",
            "method_body": "protected AbstractRealDistribution() { }\nprotected AbstractRealDistribution() { }",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:inverseCumulativeProbability(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\nreturn cumulativeProbability(x) - p;\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution$1:value(D)D",
            "method_body": "public double inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\nreturn cumulativeProbability(x) - p;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthis(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V",
            "method_body": "public FDistribution(double numeratorDegreesOfFreedom,\nthrows NotStrictlyPositiveException {\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x)  {\nif (x <= 0) {\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumeratorDegreesOfFreedom()D",
            "method_body": "public double getNumeratorDegreesOfFreedom() {\nreturn numeratorDegreesOfFreedom;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getDenominatorDegreesOfFreedom()D",
            "method_body": "public double getDenominatorDegreesOfFreedom() {\nreturn denominatorDegreesOfFreedom;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSolverAbsoluteAccuracy()D",
            "method_body": "protected double getSolverAbsoluteAccuracy() {\nreturn solverAbsoluteAccuracy;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nif (!numericalVarianceIsCalculated) {\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:calculateNumericalVariance()D",
            "method_body": "protected double calculateNumericalVariance() {\nfinal double denominatorDF = getDenominatorDegreesOfFreedom();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
            "method_body": "public double getSupportLowerBound() {\nreturn 0;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.FDistribution:getSupportUpperBound()D",
            "method_body": "public double getSupportUpperBound() {\nreturn Double.POSITIVE_INFINITY;\n}",
            "method_id": 90
        }
    ]
}