{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2SpecialCases",
    "test_body": "811: public void testAtan2SpecialCases() {\n812: 813: DerivativeStructure pp =\n814: DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n815: new DerivativeStructure(2, 2, 1, +0.0));\n816: Assert.assertEquals(0, pp.getValue(), 1.0e-15);\n817: Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);\n818: 819: DerivativeStructure pn =\n820: DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n821: new DerivativeStructure(2, 2, 1, -0.0));\n822: Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);\n823: 824: DerivativeStructure np =\n825: DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n826: new DerivativeStructure(2, 2, 1, +0.0));\n827: Assert.assertEquals(0, np.getValue(), 1.0e-15);\n828: Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);\n829: 830: DerivativeStructure nn =\n831: DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n832: new DerivativeStructure(2, 2, 1, -0.0));\n833: Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);\n834: 835: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DI)D",
            "method_body": "public static double pow(double d, int e) {\nif (e == 0) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan(D)D",
            "method_body": "public static double atan(double x) {\nreturn atan(x, 0.0, false);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:atan(DDZ)D",
            "method_body": "private static double atan(double xa, double xb, boolean leftPlane) {\nboolean negate = false;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(II)I",
            "method_body": "public static int max(final int a, final int b) {\nreturn (a <= b) ? b : a;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V",
            "method_body": "private DerivativeStructure(final DSCompiler compiler) {\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(II)V",
            "method_body": "public DerivativeStructure(final int parameters, final int order) {\nthis(DSCompiler.getCompiler(parameters, order));\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(IID)V",
            "method_body": "public DerivativeStructure(final int parameters, final int order, final double value) {\nthis(parameters, order);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:<init>(IIID)V",
            "method_body": "public DerivativeStructure(final int parameters, final int order,\nthis(parameters, order, value);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:getValue()D",
            "method_body": "public double getValue() {\nreturn data[0];\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:atan2(Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;",
            "method_body": "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\ny.compiler.checkCompatibility(x.compiler);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:<init>(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V",
            "method_body": "private DSCompiler(final int parameters, final int order,\nfinal DSCompiler valueCompiler, final DSCompiler derivativeCompiler) {\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:<clinit>()V",
            "method_body": "private static AtomicReference<DSCompiler[][]> compilers =\n/** Private constructor, reserved for the factory method {@link #getCompiler(int, int)}.",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:getCompiler(II)Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;",
            "method_body": "public static DSCompiler getCompiler(int parameters, int order) {\nfinal DSCompiler[][] cache = compilers.get();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compileSizes(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;)[[I",
            "method_body": "private static int[][] compileSizes(final int parameters, final int order,\nfinal int[][] sizes = new int[parameters + 1][order + 1];\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compileDerivativesIndirection(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)[[I",
            "method_body": "private static int[][] compileDerivativesIndirection(final int parameters, final int order,\nif (parameters == 0 || order == 0) {\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compileLowerIndirection(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)[I",
            "method_body": "private static int[] compileLowerIndirection(final int parameters, final int order,\nif (parameters == 0 || order <= 1) {\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compileMultiplicationIndirection(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;[I)[[[I",
            "method_body": "private static int[][][] compileMultiplicationIndirection(final int parameters, final int order,\nif ((parameters == 0) || (order == 0)) {\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compileCompositionIndirection(IILorg/apache/commons/math3/analysis/differentiation/DSCompiler;Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;[[I[[I)[[[I",
            "method_body": "private static int[][][] compileCompositionIndirection(final int parameters, final int order,\nif ((parameters == 0) || (order == 0)) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:getPartialDerivativeIndex(II[[I[I)I",
            "method_body": "private static int getPartialDerivativeIndex(final int parameters, final int order,\nint index     = 0;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:convertIndex(II[[III[[I)I",
            "method_body": "private static int convertIndex(final int index,\nint[] orders = new int[destP];\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:getSize()I",
            "method_body": "public int getSize() {\nreturn sizes[parameters][order];\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:add([DI[DI[DI)V",
            "method_body": "public void add(final double[] lhs, final int lhsOffset,\nfor (int i = 0; i < getSize(); ++i) {\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:multiply([DI[DI[DI)V",
            "method_body": "public void multiply(final double[] lhs, final int lhsOffset,\nfor (int i = 0; i < multIndirection.length; ++i) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:divide([DI[DI[DI)V",
            "method_body": "public void divide(final double[] lhs, final int lhsOffset,\nfinal double[] reciprocal = new double[getSize()];\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:pow([DII[DI)V",
            "method_body": "public void pow(final double[] operand, final int operandOffset, final int n,\nif (n == 0) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:rootN([DII[DI)V",
            "method_body": "public void rootN(final double[] operand, final int operandOffset, final int n,\ndouble[] function = new double[1 + order];\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan([DI[DI)V",
            "method_body": "public void atan(final double[] operand, final int operandOffset,\ndouble[] function = new double[1 + order];\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan2([DI[DI[DI)V",
            "method_body": "public void atan2(final double[] y, final int yOffset,\ndouble[] tmp1 = new double[getSize()];\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:compose([DI[D[DI)V",
            "method_body": "public void compose(final double[] operand, final int operandOffset, final double[] f,\nfor (int i = 0; i < compIndirection.length; ++i) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.differentiation.DSCompiler:checkCompatibility(Lorg/apache/commons/math3/analysis/differentiation/DSCompiler;)V",
            "method_body": "public void checkCompatibility(final DSCompiler compiler)\nif (parameters != compiler.parameters) {\n}",
            "method_id": 32
        }
    ]
}