{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet",
    "test_body": "105: public void testBigDataSet() throws Exception {\n106: double[] d1 = new double[1500];\n107: double[] d2 = new double[1500];\n108: for (int i = 0; i < 1500; i++) {\n109: d1[i] = 2 * i;\n110: d2[i] = 2 * i + 1;\n111: }\n112: double result = testStatistic.mannWhitneyUTest(d1, d2);\n113: Assert.assertTrue(result > 0.1);\n114: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:<clinit>()V",
            "method_body": "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\nprivate static final double LN_QUICK_COEF[][] = {\n};",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DD)D",
            "method_body": "public static double pow(double x, double y) {\nfinal double lns[] = new double[2];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\nif (x != x) { // NaN\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$lnMant:<clinit>()V",
            "method_body": "private static final double[][] LN_MANT;\nLN_MANT = FastMathLiteralArrays.loadLnMant();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_A = new double[] {\n};",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntA()[D",
            "method_body": "static double[] loadExpIntA() {\nreturn EXP_INT_A.clone();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpIntB()[D",
            "method_body": "static double[] loadExpIntB() {\nreturn EXP_INT_B.clone();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracA()[D",
            "method_body": "static double[] loadExpFracA() {\nreturn EXP_FRAC_A.clone();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadExpFracB()[D",
            "method_body": "static double[] loadExpFracB() {\nreturn EXP_FRAC_B.clone();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMathLiteralArrays:loadLnMant()[[D",
            "method_body": "static double[][] loadLnMant() {\nreturn LN_MANT.clone();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpIntTable:<clinit>()V",
            "method_body": "private static final double[] EXP_INT_TABLE_A;\nEXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath$ExpFracTable:<clinit>()V",
            "method_body": "private static final double[] EXP_FRAC_TABLE_A;\nEXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:<clinit>()V",
            "method_body": "static final long[] FACTORIALS = new long[] {\n6402373705728000l, 121645100408832000l, 2432902008176640000l };",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:factorial(I)J",
            "method_body": "public static long factorial(final int n) {\nif (n < 0) {\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:<init>(I)V",
            "method_body": "public ResizableDoubleArray(int initialCapacity) {\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:addElement(D)V",
            "method_body": "public synchronized void addElement(double value) {\nnumElements++;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:contract()V",
            "method_body": "public synchronized void contract() {\ndouble[] tempArray = new double[numElements + 1];\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:expand()V",
            "method_body": "protected synchronized void expand() {\nint newSize = 0;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:getElements()[D",
            "method_body": "public synchronized double[] getElements() {\ndouble[] elementArray = new double[numElements];\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:setInitialCapacity(I)V",
            "method_body": "protected void setInitialCapacity(int initialCapacity) {\nif (initialCapacity > 0) {\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.ResizableDoubleArray:shouldContract()Z",
            "method_body": "private synchronized boolean shouldContract() {\nif (expansionMode == MULTIPLICATIVE_MODE) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<init>()V",
            "method_body": "public RandomDataImpl() {\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.random.RandomDataImpl:<clinit>()V",
            "method_body": "private static final double[] EXPONENTIAL_SA_QI;\nfinal double LN2 = FastMath.log(2);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractRealDistribution:<init>()V",
            "method_body": "protected AbstractRealDistribution() { }\nprotected AbstractRealDistribution() { }",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:<clinit>()V",
            "method_body": "public static final double LANCZOS_G = 607.0 / 128.0;\nprivate static final double[] LANCZOS = {\n};",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) {\nif (FastMath.abs(x) > 40) {\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DD)V",
            "method_body": "public NormalDistribution(double mean, double sd)\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<init>(DDD)V",
            "method_body": "public NormalDistribution(double mean, double sd, double inverseCumAccuracy)\nthrows NotStrictlyPositiveException {\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:<clinit>()V",
            "method_body": "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\nprivate static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);\n* @throws NotStrictlyPositiveException if {@code sd <= 0}.",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.NormalDistribution:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x)  {\nfinal double dev = x - mean;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:<init>(Lorg/apache/commons/math3/stat/ranking/NaNStrategy;Lorg/apache/commons/math3/stat/ranking/TiesStrategy;)V",
            "method_body": "public NaturalRanking(NaNStrategy nanStrategy, TiesStrategy tiesStrategy) {\nsuper();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:<clinit>()V",
            "method_body": "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:rank([D)[D",
            "method_body": "public double[] rank(double[] data) {\nIntDoublePair[] ranks = new IntDoublePair[data.length];\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:restoreNaNs([DLjava/util/List;)V",
            "method_body": "private void restoreNaNs(double[] ranks, List<Integer> nanPositions) {\nif (nanPositions.size() == 0) {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking:getNanPositions([Lorg/apache/commons/math3/stat/ranking/NaturalRanking$IntDoublePair;)Ljava/util/List;",
            "method_body": "private List<Integer> getNanPositions(IntDoublePair[] ranks) {\nArrayList<Integer> out = new ArrayList<Integer>();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:<init>(DI)V",
            "method_body": "public IntDoublePair(double value, int position) {\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:compareTo(Lorg/apache/commons/math3/stat/ranking/NaturalRanking$IntDoublePair;)I",
            "method_body": "public int compareTo(IntDoublePair other) {\nreturn Double.compare(value, other.value);\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair:getPosition()I",
            "method_body": "public int getPosition() {\nreturn position;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.stat.ranking.NaturalRanking$1:<clinit>()V",
            "method_body": "private void resolveTie(double[] ranks, List<Integer> tiesTrace) {\nswitch (tiesStrategy) {\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:<init>()V",
            "method_body": "public MannWhitneyUTest() {\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:ensureDataConformance([D[D)V",
            "method_body": "private void ensureDataConformance(final double[] x, final double[] y)\nif (x == null ||\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:concatenateSamples([D[D)[D",
            "method_body": "private double[] concatenateSamples(final double[] x, final double[] y) {\nfinal double[] z = new double[x.length + y.length];\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyU([D[D)D",
            "method_body": "public double mannWhitneyU(final double[] x, final double[] y)\nensureDataConformance(x, y);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:calculateAsymptoticPValue(DII)D",
            "method_body": "private double calculateAsymptoticPValue(final double Umin,\nfinal int n1n2prod = n1 * n2;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyUTest([D[D)D",
            "method_body": "public double mannWhitneyUTest(final double[] x, final double[] y)\nensureDataConformance(x, y);\n}",
            "method_id": 53
        }
    ]
}